// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto;
namespace proto {
namespace dota {
class CSODOTAGameAccountClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAGameAccountClient> _instance;
} _CSODOTAGameAccountClient_default_instance_;
class CSODOTAGameAccountPlusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAGameAccountPlus> _instance;
} _CSODOTAGameAccountPlus_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge> _instance;
} _CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyPlayerPlusSubscriptionData> _instance;
} _CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
class CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints_ChatWheelMessageRange> _instance;
} _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
class CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints_PeriodicResourceValues> _instance;
} _CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_;
class CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints_AccountPoints> _instance;
} _CMsgLobbyEventPoints_AccountPoints_default_instance_;
class CMsgLobbyEventPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints> _instance;
} _CMsgLobbyEventPoints_default_instance_;
class CMsgLocalServerFakeLobbyDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLocalServerFakeLobbyData> _instance;
} _CMsgLocalServerFakeLobbyData_default_instance_;
class CMsgBattleCupVictoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBattleCupVictory> _instance;
} _CMsgBattleCupVictory_default_instance_;
class CMsgLobbyBattleCupVictoryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyBattleCupVictoryList> _instance;
} _CMsgLobbyBattleCupVictoryList_default_instance_;
class CMsgDOTABroadcastNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABroadcastNotification> _instance;
} _CMsgDOTABroadcastNotification_default_instance_;
class CProtoItemHeroStatueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CProtoItemHeroStatue> _instance;
} _CProtoItemHeroStatue_default_instance_;
class CProtoItemTeamShowcaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CProtoItemTeamShowcase> _instance;
} _CProtoItemTeamShowcase_default_instance_;
class CMatchPlayerAbilityUpgradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMatchPlayerAbilityUpgrade> _instance;
} _CMatchPlayerAbilityUpgrade_default_instance_;
class CMatchPlayerTimedStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMatchPlayerTimedStats> _instance;
} _CMatchPlayerTimedStats_default_instance_;
class CMatchAdditionalUnitInventoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMatchAdditionalUnitInventory> _instance;
} _CMatchAdditionalUnitInventory_default_instance_;
class CMatchPlayerPermanentBuffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMatchPlayerPermanentBuff> _instance;
} _CMatchPlayerPermanentBuff_default_instance_;
class CMatchHeroSelectEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMatchHeroSelectEvent> _instance;
} _CMatchHeroSelectEvent_default_instance_;
class CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProcessFantasyScheduledEvent> _instance;
} _CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
class CMsgDOTAHasItemQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemQuery> _instance;
} _CMsgDOTAHasItemQuery_default_instance_;
class CMsgDOTAHasItemResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemResponse> _instance;
} _CMsgDOTAHasItemResponse_default_instance_;
class CMsgGCIsProQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIsProQuery> _instance;
} _CMsgGCIsProQuery_default_instance_;
class CMsgGCIsProResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIsProResponse> _instance;
} _CMsgGCIsProResponse_default_instance_;
class CMsgDOTAHasItemDefsQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemDefsQuery> _instance;
} _CMsgDOTAHasItemDefsQuery_default_instance_;
class CMsgDOTAHasItemDefsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemDefsResponse> _instance;
} _CMsgDOTAHasItemDefsResponse_default_instance_;
class CMsgGCGetPlayerCardItemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfo> _instance;
} _CMsgGCGetPlayerCardItemInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo> _instance;
} _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfoResponse> _instance;
} _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
class CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCFantasySetMatchLeague> _instance;
} _CMsgGCToGCFantasySetMatchLeague_default_instance_;
class CSODOTAMapLocationStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAMapLocationState> _instance;
} _CSODOTAMapLocationState_default_instance_;
class CMsgLeagueAdminListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeagueAdminList> _instance;
} _CMsgLeagueAdminList_default_instance_;
class CCompendiumTimestampedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumTimestampedData> _instance;
} _CCompendiumTimestampedData_default_instance_;
class CCompendiumGameTimelineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumGameTimeline> _instance;
} _CCompendiumGameTimeline_default_instance_;
class CCompendiumGameListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumGameList> _instance;
} _CCompendiumGameList_default_instance_;
class CAdditionalEquipSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAdditionalEquipSlot> _instance;
} _CAdditionalEquipSlot_default_instance_;
class CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Trophy> _instance;
} _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Stat> _instance;
} _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Item> _instance;
} _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Hero> _instance;
} _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Emoticon> _instance;
} _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Team> _instance;
} _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_SlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot> _instance;
} _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard> _instance;
} _CMsgDOTAProfileCard_default_instance_;
class CSODOTAPlayerChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPlayerChallenge> _instance;
} _CSODOTAPlayerChallenge_default_instance_;
class CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRerollPlayerChallenge> _instance;
} _CMsgClientToGCRerollPlayerChallenge_default_instance_;
class CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRerollPlayerChallengeResponse> _instance;
} _CMsgGCRerollPlayerChallengeResponse_default_instance_;
class CMsgGCTopCustomGamesListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCTopCustomGamesList> _instance;
} _CMsgGCTopCustomGamesList_default_instance_;
class CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_TeamDetails> _instance;
} _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_ItemDetails> _instance;
} _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_AbilityDetails> _instance;
} _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
class CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_HeroToHeroStats> _instance;
} _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_AbilityList> _instance;
} _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
class CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_PlayerDetails> _instance;
} _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_BuildingDetails> _instance;
} _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_KillDetails> _instance;
} _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_BroadcasterDetails> _instance;
} _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_PickBanDetails> _instance;
} _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_MatchDetails> _instance;
} _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData_LocationStats> _instance;
} _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats> _instance;
} _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData> _instance;
} _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats> _instance;
} _CMsgDOTARealtimeGameStats_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_TeamDetails> _instance;
} _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_PlayerDetails> _instance;
} _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_BuildingDetails> _instance;
} _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_PickBanDetails> _instance;
} _CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_MatchDetails> _instance;
} _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_GraphData> _instance;
} _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse> _instance;
} _CMsgDOTARealtimeGameStatsTerse_default_instance_;
class CMsgDOTABroadcastTimelineEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABroadcastTimelineEvent> _instance;
} _CMsgDOTABroadcastTimelineEvent_default_instance_;
class CMsgGCToClientMatchGroupsVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientMatchGroupsVersion> _instance;
} _CMsgGCToClientMatchGroupsVersion_default_instance_;
class CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASDOHeroStatsHistory> _instance;
} _CMsgDOTASDOHeroStatsHistory_default_instance_;
class CMsgDOTASeasonRewards_RewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonRewards_Reward> _instance;
} _CMsgDOTASeasonRewards_Reward_default_instance_;
class CMsgDOTASeasonRewardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonRewards> _instance;
} _CMsgDOTASeasonRewards_default_instance_;
class CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonAchievements_Achievement> _instance;
} _CMsgDOTASeasonAchievements_Achievement_default_instance_;
class CMsgDOTASeasonAchievementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonAchievements> _instance;
} _CMsgDOTASeasonAchievements_default_instance_;
class CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Choice> _instance;
} _CMsgDOTASeasonPredictions_Choice_default_instance_;
class CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Answers> _instance;
} _CMsgDOTASeasonPredictions_Answers_default_instance_;
class CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_QueryKeyValues> _instance;
} _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_;
class CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Prediction> _instance;
} _CMsgDOTASeasonPredictions_Prediction_default_instance_;
class CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_InGamePrediction> _instance;
} _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_;
class CMsgDOTASeasonPredictionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions> _instance;
} _CMsgDOTASeasonPredictions_default_instance_;
class CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_Player_CustomGameData> _instance;
} _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
class CMsgDOTAMatch_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_Player> _instance;
} _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_BroadcasterInfo> _instance;
} _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
class CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_BroadcasterChannel> _instance;
} _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
class CMsgDOTAMatch_CustomGameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_CustomGameData> _instance;
} _CMsgDOTAMatch_CustomGameData_default_instance_;
class CMsgDOTAMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch> _instance;
} _CMsgDOTAMatch_default_instance_;
class CMsgPlayerCard_StatModifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerCard_StatModifier> _instance;
} _CMsgPlayerCard_StatModifier_default_instance_;
class CMsgPlayerCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerCard> _instance;
} _CMsgPlayerCard_default_instance_;
class CMsgDOTAFantasyPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStats> _instance;
} _CMsgDOTAFantasyPlayerStats_default_instance_;
class CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerMatchStats> _instance;
} _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
class CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot_Mode> _instance;
} _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
class CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot_Action> _instance;
} _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
class CMsgDOTABotDebugInfo_BotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot> _instance;
} _CMsgDOTABotDebugInfo_Bot_default_instance_;
class CMsgDOTABotDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo> _instance;
} _CMsgDOTABotDebugInfo_default_instance_;
class CMsgSuccessfulHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSuccessfulHero> _instance;
} _CMsgSuccessfulHero_default_instance_;
class CMsgRecentMatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRecentMatchInfo> _instance;
} _CMsgRecentMatchInfo_default_instance_;
class CMsgMatchTips_SingleTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchTips_SingleTip> _instance;
} _CMsgMatchTips_SingleTip_default_instance_;
class CMsgMatchTipsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchTips> _instance;
} _CMsgMatchTips_default_instance_;
class CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal_Player> _instance;
} _CMsgDOTAMatchMinimal_Player_default_instance_;
class CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal_Tourney> _instance;
} _CMsgDOTAMatchMinimal_Tourney_default_instance_;
class CMsgDOTAMatchMinimalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal> _instance;
} _CMsgDOTAMatchMinimal_default_instance_;
class CMsgConsumableUsageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConsumableUsage> _instance;
} _CMsgConsumableUsage_default_instance_;
class CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchConsumableUsage_PlayerUsage> _instance;
} _CMsgMatchConsumableUsage_PlayerUsage_default_instance_;
class CMsgMatchConsumableUsageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchConsumableUsage> _instance;
} _CMsgMatchConsumableUsage_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCSODOTAGameAccountClient_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAGameAccountClient_default_instance_;
    new (ptr) ::proto::dota::CSODOTAGameAccountClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAGameAccountClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAGameAccountClient_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAGameAccountClient_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCSODOTAGameAccountPlus_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAGameAccountPlus_default_instance_;
    new (ptr) ::proto::dota::CSODOTAGameAccountPlus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAGameAccountPlus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAGameAccountPlus_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAGameAccountPlus_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyEventPoints_AccountPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyEventPoints_AccountPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyEventPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyEventPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyEventPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLocalServerFakeLobbyData_default_instance_;
    new (ptr) ::proto::dota::CMsgLocalServerFakeLobbyData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLocalServerFakeLobbyData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgBattleCupVictory_default_instance_;
    new (ptr) ::proto::dota::CMsgBattleCupVictory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgBattleCupVictory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyBattleCupVictoryList_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyBattleCupVictoryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyBattleCupVictoryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABroadcastNotification_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABroadcastNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABroadcastNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CProtoItemHeroStatue_default_instance_;
    new (ptr) ::proto::dota::CProtoItemHeroStatue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CProtoItemHeroStatue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CProtoItemTeamShowcase_default_instance_;
    new (ptr) ::proto::dota::CProtoItemTeamShowcase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CProtoItemTeamShowcase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMatchPlayerAbilityUpgrade_default_instance_;
    new (ptr) ::proto::dota::CMatchPlayerAbilityUpgrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMatchPlayerAbilityUpgrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMatchPlayerTimedStats_default_instance_;
    new (ptr) ::proto::dota::CMatchPlayerTimedStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMatchPlayerTimedStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMatchAdditionalUnitInventory_default_instance_;
    new (ptr) ::proto::dota::CMatchAdditionalUnitInventory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMatchAdditionalUnitInventory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMatchPlayerPermanentBuff_default_instance_;
    new (ptr) ::proto::dota::CMatchPlayerPermanentBuff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMatchPlayerPermanentBuff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMatchHeroSelectEvent_default_instance_;
    new (ptr) ::proto::dota::CMatchHeroSelectEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMatchHeroSelectEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProcessFantasyScheduledEvent_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProcessFantasyScheduledEvent_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProcessFantasyScheduledEvent_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAHasItemQuery_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAHasItemQuery_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAHasItemQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAHasItemQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAHasItemQuery_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAHasItemQuery_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAHasItemResponse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAHasItemResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAHasItemResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAHasItemResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAHasItemResponse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAHasItemResponse_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCIsProQuery_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCIsProQuery_default_instance_;
    new (ptr) ::proto::dota::CMsgGCIsProQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCIsProQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCIsProQuery_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCIsProQuery_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCIsProResponse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCIsProResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCIsProResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCIsProResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCIsProResponse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCIsProResponse_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAHasItemDefsQuery_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAHasItemDefsQuery_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAHasItemDefsQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAHasItemDefsQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAHasItemDefsQuery_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAHasItemDefsQuery_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAHasItemDefsResponse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAHasItemDefsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAHasItemDefsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAHasItemDefsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAHasItemDefsResponse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAHasItemDefsResponse_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCGetPlayerCardItemInfo_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPlayerCardItemInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPlayerCardItemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPlayerCardItemInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPlayerCardItemInfo_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPlayerCardItemInfo_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgGCToGCFantasySetMatchLeague_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCFantasySetMatchLeague_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCFantasySetMatchLeague();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCFantasySetMatchLeague::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCFantasySetMatchLeague_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCFantasySetMatchLeague_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCSODOTAMapLocationState_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAMapLocationState_default_instance_;
    new (ptr) ::proto::dota::CSODOTAMapLocationState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAMapLocationState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAMapLocationState_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAMapLocationState_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgLeagueAdminList_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLeagueAdminList_default_instance_;
    new (ptr) ::proto::dota::CMsgLeagueAdminList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLeagueAdminList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLeagueAdminList_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLeagueAdminList_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCompendiumTimestampedData_default_instance_;
    new (ptr) ::proto::dota::CCompendiumTimestampedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCompendiumTimestampedData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCompendiumGameTimeline_default_instance_;
    new (ptr) ::proto::dota::CCompendiumGameTimeline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCompendiumGameTimeline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCompendiumGameList_default_instance_;
    new (ptr) ::proto::dota::CCompendiumGameList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCompendiumGameList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CAdditionalEquipSlot_default_instance_;
    new (ptr) ::proto::dota::CAdditionalEquipSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CAdditionalEquipSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Stat_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Stat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Item_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Hero_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Hero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_Team_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard_Slot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard_Slot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsCMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProfileCard_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProfileCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProfileCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCSODOTAPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAPlayerChallenge_default_instance_;
    new (ptr) ::proto::dota::CSODOTAPlayerChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAPlayerChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCRerollPlayerChallenge_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCRerollPlayerChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCRerollPlayerChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCRerollPlayerChallengeResponse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCRerollPlayerChallengeResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCRerollPlayerChallengeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCRerollPlayerChallengeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCRerollPlayerChallengeResponse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCRerollPlayerChallengeResponse_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCTopCustomGamesList_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCTopCustomGamesList_default_instance_;
    new (ptr) ::proto::dota::CMsgGCTopCustomGamesList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCTopCustomGamesList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCTopCustomGamesList_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCTopCustomGamesList_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats_GraphData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARealtimeGameStatsTerse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABroadcastTimelineEvent_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABroadcastTimelineEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABroadcastTimelineEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgGCToClientMatchGroupsVersion_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientMatchGroupsVersion_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientMatchGroupsVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientMatchGroupsVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientMatchGroupsVersion_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientMatchGroupsVersion_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASDOHeroStatsHistory_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASDOHeroStatsHistory_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASDOHeroStatsHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASDOHeroStatsHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASDOHeroStatsHistory_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASDOHeroStatsHistory_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonRewards_Reward_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonRewards_Reward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonRewards_Reward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonRewards_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonRewards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonRewards::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonAchievements_Achievement_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonAchievements_Achievement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonAchievements_Achievement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonAchievements_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonAchievements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonAchievements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_Choice_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions_Choice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions_Choice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_Answers_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions_Answers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions_Answers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_Prediction_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions_Prediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions_Prediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_InGamePrediction_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeasonPredictions_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeasonPredictions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeasonPredictions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_Player_CustomGameData_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch_Player_CustomGameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_BroadcasterInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch_BroadcasterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch_BroadcasterInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_BroadcasterChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch_BroadcasterChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch_BroadcasterChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_CustomGameData_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch_CustomGameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch_CustomGameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPlayerCard_StatModifier_default_instance_;
    new (ptr) ::proto::dota::CMsgPlayerCard_StatModifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPlayerCard_StatModifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPlayerCard_default_instance_;
    new (ptr) ::proto::dota::CMsgPlayerCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPlayerCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerMatchStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerMatchStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerMatchStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABotDebugInfo_Bot_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABotDebugInfo_Bot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABotDebugInfo_Bot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABotDebugInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABotDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABotDebugInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgSuccessfulHero_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSuccessfulHero_default_instance_;
    new (ptr) ::proto::dota::CMsgSuccessfulHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSuccessfulHero::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSuccessfulHero_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSuccessfulHero_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgRecentMatchInfo_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgRecentMatchInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgRecentMatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgRecentMatchInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRecentMatchInfo_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRecentMatchInfo_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgMatchTips_SingleTip_default_instance_;
    new (ptr) ::proto::dota::CMsgMatchTips_SingleTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgMatchTips_SingleTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgMatchTips_default_instance_;
    new (ptr) ::proto::dota::CMsgMatchTips();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgMatchTips::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatchMinimal_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatchMinimal_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatchMinimal_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatchMinimal_Tourney_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatchMinimal_Tourney();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMatchMinimal_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMatchMinimal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMatchMinimal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgConsumableUsage_default_instance_;
    new (ptr) ::proto::dota::CMsgConsumableUsage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgConsumableUsage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto}, {}};

static void InitDefaultsCMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgMatchConsumableUsage_PlayerUsage_default_instance_;
    new (ptr) ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgMatchConsumableUsage_default_instance_;
    new (ptr) ::proto::dota::CMsgMatchConsumableUsage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgMatchConsumableUsage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto}, {
      &scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fcommon_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAGameAccountClient_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAGameAccountPlus_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProcessFantasyScheduledEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAHasItemQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAHasItemResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCIsProQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCIsProResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAHasItemDefsQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAHasItemDefsResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPlayerCardItemInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCFantasySetMatchLeague_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAMapLocationState_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLeagueAdminList_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCRerollPlayerChallengeResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCTopCustomGamesList_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientMatchGroupsVersion_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASDOHeroStatsHistory_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSuccessfulHero_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRecentMatchInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[107];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[15];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, xp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, initial_skill_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, leaver_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, secondary_leaver_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, low_priority_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, prevent_text_chat_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, prevent_voice_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, prevent_public_text_chat_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, last_abandoned_game_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, leaver_penalty_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, completed_game_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, teaching_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, leadership_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, friendly_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, forgiving_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, account_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, account_disabled_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, match_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, match_disabled_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, partner_account_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, partner_account_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, low_priority_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, competitive_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_competitive_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recruitment_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, has_new_notifications_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, is_league_admin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, casual_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_competitive_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, party_competitive_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, casual_1v1_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, competitive_team_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, curr_all_hero_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, play_time_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, account_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, play_time_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, player_behavior_seq_num_last_report_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, player_behavior_score_last_report_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, player_behavior_report_old_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, tourney_recent_participation_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, favorite_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, anchored_phone_number_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, ranked_matchmaking_ban_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_game_time_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_game_time_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_game_time_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, general_seasonal_ranked_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, general_seasonal_ranked_calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, general_seasonal_ranked_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, general_seasonal_ranked_rank_peak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, general_seasonal_rank_transferred_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_seasonal_ranked_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_seasonal_ranked_calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_seasonal_ranked_games_played_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_seasonal_ranked_rank_peak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, solo_seasonal_rank_transferred_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, favorite_team_packed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_report_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, custom_game_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_win_time_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_win_time_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountClient, recent_win_time_3_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  30,
  7,
  8,
  9,
  49,
  10,
  31,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  41,
  42,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  45,
  46,
  43,
  47,
  48,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  44,
  60,
  61,
  62,
  63,
  65,
  64,
  66,
  67,
  68,
  69,
  70,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, original_start_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, plus_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, plus_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, prepaid_time_start_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, prepaid_time_balance_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, next_payment_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAGameAccountPlus, steam_agreement_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_badge_xp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData, hero_badges_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_start_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues, remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, normal_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, premium_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, owned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, favorite_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, favorite_team_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, points_held_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, premium_points_held_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, favorite_team_foil_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, active_effects_mask_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, unlocked_chat_wheel_message_ranges_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, plus_subscription_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, wager_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, rank_wager_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, tip_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints_AccountPoints, periodic_point_adjustments_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  13,
  ~0u,
  0,
  1,
  2,
  3,
  15,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventPoints, account_points_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, event_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, favorite_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLocalServerFakeLobbyData, favorite_team_quality_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, win_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, valid_until_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBattleCupVictory, trophy_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyBattleCupVictoryList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyBattleCupVictoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyBattleCupVictoryList, winners_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastNotification, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, status_effect_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, sequence_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, cycle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, wearable_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, inscription_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, style_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemHeroStatue, tournament_drop_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, status_effect_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, sequence_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, cycle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, wearable_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, inscription_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CProtoItemTeamShowcase, style_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerAbilityUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerAbilityUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerAbilityUpgrade, ability_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerAbilityUpgrade, time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerTimedStats, denies_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchAdditionalUnitInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchAdditionalUnitInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchAdditionalUnitInventory, unit_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchAdditionalUnitInventory, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerPermanentBuff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerPermanentBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerPermanentBuff, permanent_buff_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchPlayerPermanentBuff, stack_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchHeroSelectEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchHeroSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchHeroSelectEvent, is_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchHeroSelectEvent, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMatchHeroSelectEvent, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, event_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, season_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemQuery, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemQuery, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemResponse, has_item_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProQuery, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIsProResponse, is_pro_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsQuery, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsQuery, itemdef_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAHasItemDefsResponse, has_items_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfo, player_card_item_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfo, all_for_event_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, packed_bonuses_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse, player_card_infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCFantasySetMatchLeague, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCFantasySetMatchLeague, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCFantasySetMatchLeague, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCFantasySetMatchLeague, league_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAMapLocationState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAMapLocationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAMapLocationState, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAMapLocationState, location_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAMapLocationState, completed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeagueAdminList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeagueAdminList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeagueAdminList, account_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, xpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumTimestampedData, item_purchases_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameTimeline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameTimeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameTimeline, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameTimeline, tags_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCompendiumGameList, games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlot, class_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlot, def_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Stat, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Item, serialized_item_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Item, item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Hero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot_Team, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, trophy_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, stat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, item_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, hero_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, emoticon_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard_Slot, team_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, background_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, slots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, badge_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, event_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, recent_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, rank_tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, leaderboard_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, plus_original_start_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, rank_tier_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProfileCard, previous_rank_tier_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, int_param_0_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, int_param_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, created_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, challenge_tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, attempts_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, complete_limit_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, quest_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, max_quest_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPlayerChallenge, template_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRerollPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRerollPlayerChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRerollPlayerChallenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRerollPlayerChallenge, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRerollPlayerChallengeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRerollPlayerChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRerollPlayerChallengeResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCTopCustomGamesList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCTopCustomGamesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCTopCustomGamesList, top_custom_games_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCTopCustomGamesList, game_of_the_day_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_number_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, only_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, cheers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails, team_logo_url_),
  3,
  4,
  0,
  5,
  1,
  6,
  9,
  ~0u,
  7,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, sold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails, stackcount_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_AbilityList, id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, heroid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, healthpoints_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, maxhealthpoints_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, healthregenrate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, manapoints_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, maxmanapoints_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, manaregenrate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_strength_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_agility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_intelligence_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_armor_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_movespeed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, base_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, strength_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, agility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, intelligence_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, armor_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, movespeed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, abilities_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, kill_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, death_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, assists_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, denies_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, lh_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, net_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, ultimate_cooldown_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, has_buyback_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, stashitems_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, itemshoppinglist_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, levelpoints_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, hero_to_hero_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  ~0u,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  41,
  42,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, heading_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, lane_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails, player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails, death_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_hero_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails, hero_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, matchid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, is_nightstalker_night_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, teamid_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, teamid_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, picks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, bans_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, broadcasters_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, single_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails, cheers_peak_),
  0,
  1,
  2,
  3,
  7,
  4,
  13,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  12,
  8,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats, stats_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, loc_stats_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, graph_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, graph_xp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, graph_kill_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, graph_tower_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, graph_rax_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats_GraphData, team_loc_stats_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, buildings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, graph_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStats, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails, players_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, heroid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, kill_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, death_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, assists_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, denies_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, lh_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, net_worth_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, heading_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, lane_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, hero_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, matchid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, steam_broadcaster_account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, picks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails, bans_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData, graph_gold_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, buildings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, graph_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARealtimeGameStatsTerse, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, event_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABroadcastTimelineEvent, string_data_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientMatchGroupsVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientMatchGroupsVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientMatchGroupsVersion, matchgroups_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, won_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, xpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASDOHeroStatsHistory, assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, itemdef_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, importance_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, base_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, repeat_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, reward_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, image_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, action_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards_Reward, effect_index_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonRewards, rewards_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, image_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, action_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, max_grants_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, normal_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, tracking_achievement_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, achievement_goal_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements_Achievement, achievement_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonAchievements, achievements_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, min_raw_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Choice, max_raw_value_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Answers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Answers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Answers, answer_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, question_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, choices_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, selection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, start_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, lock_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, reward_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, answer_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, answer_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, answers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, query_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, query_bind_params_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_set_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_Prediction, use_answer_value_ranges_),
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  1,
  ~0u,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, group_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, question_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, choices_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, required_heroes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, query_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, query_values_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, answer_resolution_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, points_to_grant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, reward_action_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, debug_force_selection_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction, raw_value_type_),
  3,
  0,
  4,
  5,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, predictions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, in_game_predictions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, in_game_prediction_count_per_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeasonPredictions, in_game_prediction_voting_period_minutes_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player_CustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player_CustomGameData, dota_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player_CustomGameData, winner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_0_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_4_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_5_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_6_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_7_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, item_8_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, expected_team_contribution_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_metric_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, previous_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, rank_change_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, solo_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, seasonal_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, rank_tier_updated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, gold_spent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, time_last_seen_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, support_ability_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, feeding_detected_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, search_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, search_rank_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, rank_uncertainty_change_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_play_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_tower_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_hero_healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, scaled_assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, claimed_farm_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, support_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, claimed_denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, claimed_misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, additional_units_inventory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, permanent_buffs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, pro_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, real_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, active_plus_subscription_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_pick_order_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_was_randomed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_was_bonus_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_was_dota_plus_suggestion_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_damage_received_pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, hero_damage_received_post_reduction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_Player, gold_lost_to_death_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  55,
  56,
  57,
  13,
  14,
  15,
  16,
  46,
  47,
  48,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  32,
  49,
  33,
  34,
  35,
  37,
  36,
  51,
  52,
  53,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  58,
  50,
  54,
  62,
  59,
  60,
  61,
  63,
  64,
  65,
  66,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterInfo, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, broadcaster_infos_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_BroadcasterChannel, language_code_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_CustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_CustomGameData, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch_CustomGameData, map_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, starttime_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, tower_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, barracks_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, first_blood_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, replay_salt_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, server_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, human_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, average_skill_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, game_balance_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, leagueid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_complete_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_complete_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, positive_votes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, negative_votes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, picks_bans_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, match_seq_num_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, replay_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_guild_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_guild_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, broadcaster_channels_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, engine_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, match_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, private_metadata_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, radiant_team_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, dire_team_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, tournament_round_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatch, pre_game_duration_),
  7,
  8,
  ~0u,
  9,
  ~0u,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  0,
  1,
  22,
  23,
  4,
  5,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  30,
  29,
  31,
  32,
  2,
  3,
  33,
  34,
  ~0u,
  35,
  6,
  36,
  37,
  38,
  39,
  40,
  42,
  43,
  41,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard_StatModifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard_StatModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard_StatModifier, stat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard_StatModifier, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPlayerCard, stat_modifier_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, match_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, cs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, teamfight_participation_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, runes_grabbed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, first_blood_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStats, stuns_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerMatchStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerMatchStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerMatchStats, matches_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, mode_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, desire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, target_entity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, target_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, target_y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode, target_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action, action_target_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, player_owner_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, power_current_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, power_max_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, move_target_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, move_target_y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, move_target_z_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, active_mode_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, execution_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, modes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo_Bot, action_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, bots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_push_lane_top_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_push_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_push_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_defend_lane_top_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_defend_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_defend_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_farm_lane_top_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_farm_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_farm_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, desire_farm_roshan_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, execution_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABotDebugInfo, rune_status_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuccessfulHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuccessfulHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuccessfulHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuccessfulHero, win_percent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuccessfulHero, longest_streak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecentMatchInfo, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, source_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, target_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips_SingleTip, event_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchTips, tips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Player, pro_name_),
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, series_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_division_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, radiant_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, dire_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, dire_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal_Tourney, dire_team_logo_url_),
  4,
  8,
  10,
  11,
  12,
  13,
  14,
  5,
  0,
  6,
  2,
  7,
  1,
  9,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, tourney_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, radiant_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMatchMinimal, dire_score_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConsumableUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConsumableUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConsumableUsage, item_def_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConsumableUsage, quantity_change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage_PlayerUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage_PlayerUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage_PlayerUsage, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage_PlayerUsage, consumables_used_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgMatchConsumableUsage, player_consumables_used_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 76, sizeof(::proto::dota::CSODOTAGameAccountClient)},
  { 147, 160, sizeof(::proto::dota::CSODOTAGameAccountPlus)},
  { 168, 175, sizeof(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)},
  { 177, 183, sizeof(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData)},
  { 184, 191, sizeof(::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange)},
  { 193, 200, sizeof(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues)},
  { 202, 224, sizeof(::proto::dota::CMsgLobbyEventPoints_AccountPoints)},
  { 241, 248, sizeof(::proto::dota::CMsgLobbyEventPoints)},
  { 250, 261, sizeof(::proto::dota::CMsgLocalServerFakeLobbyData)},
  { 267, 281, sizeof(::proto::dota::CMsgBattleCupVictory)},
  { 290, 296, sizeof(::proto::dota::CMsgLobbyBattleCupVictoryList)},
  { 297, 303, sizeof(::proto::dota::CMsgDOTABroadcastNotification)},
  { 304, 317, sizeof(::proto::dota::CProtoItemHeroStatue)},
  { 325, 337, sizeof(::proto::dota::CProtoItemTeamShowcase)},
  { 344, 351, sizeof(::proto::dota::CMatchPlayerAbilityUpgrade)},
  { 353, 365, sizeof(::proto::dota::CMatchPlayerTimedStats)},
  { 372, 379, sizeof(::proto::dota::CMatchAdditionalUnitInventory)},
  { 381, 388, sizeof(::proto::dota::CMatchPlayerPermanentBuff)},
  { 390, 398, sizeof(::proto::dota::CMatchHeroSelectEvent)},
  { 401, 411, sizeof(::proto::dota::CMsgDOTAProcessFantasyScheduledEvent)},
  { 416, 423, sizeof(::proto::dota::CMsgDOTAHasItemQuery)},
  { 425, 431, sizeof(::proto::dota::CMsgDOTAHasItemResponse)},
  { 432, 438, sizeof(::proto::dota::CMsgGCIsProQuery)},
  { 439, 445, sizeof(::proto::dota::CMsgGCIsProResponse)},
  { 446, 453, sizeof(::proto::dota::CMsgDOTAHasItemDefsQuery)},
  { 455, 461, sizeof(::proto::dota::CMsgDOTAHasItemDefsResponse)},
  { 462, 470, sizeof(::proto::dota::CMsgGCGetPlayerCardItemInfo)},
  { 473, 481, sizeof(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo)},
  { 484, 490, sizeof(::proto::dota::CMsgGCGetPlayerCardItemInfoResponse)},
  { 491, 498, sizeof(::proto::dota::CMsgGCToGCFantasySetMatchLeague)},
  { 500, 508, sizeof(::proto::dota::CSODOTAMapLocationState)},
  { 511, 517, sizeof(::proto::dota::CMsgLeagueAdminList)},
  { 518, 529, sizeof(::proto::dota::CCompendiumTimestampedData)},
  { 535, 542, sizeof(::proto::dota::CCompendiumGameTimeline)},
  { 544, 550, sizeof(::proto::dota::CCompendiumGameList)},
  { 551, 559, sizeof(::proto::dota::CAdditionalEquipSlot)},
  { 562, 569, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy)},
  { 571, 578, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Stat)},
  { 580, 587, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Item)},
  { 589, 597, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Hero)},
  { 600, 606, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon)},
  { 607, 613, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot_Team)},
  { 614, 626, sizeof(::proto::dota::CMsgDOTAProfileCard_Slot)},
  { 633, 651, sizeof(::proto::dota::CMsgDOTAProfileCard)},
  { 664, 686, sizeof(::proto::dota::CSODOTAPlayerChallenge)},
  { 703, 711, sizeof(::proto::dota::CMsgClientToGCRerollPlayerChallenge)},
  { 714, 720, sizeof(::proto::dota::CMsgGCRerollPlayerChallengeResponse)},
  { 721, 728, sizeof(::proto::dota::CMsgGCTopCustomGamesList)},
  { 730, 746, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails)},
  { 757, 767, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails)},
  { 772, 782, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails)},
  { 787, 795, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats)},
  { 798, 804, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_AbilityList)},
  { 805, 859, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails)},
  { 908, 921, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails)},
  { 929, 937, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_KillDetails)},
  { 940, 948, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails)},
  { 951, 958, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails)},
  { 960, 983, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails)},
  { 1001, 1007, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats)},
  { 1008, 1014, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)},
  { 1015, 1026, sizeof(::proto::dota::CMsgDOTARealtimeGameStats_GraphData)},
  { 1032, 1042, sizeof(::proto::dota::CMsgDOTARealtimeGameStats)},
  { 1047, 1061, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails)},
  { 1070, 1090, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails)},
  { 1105, 1118, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails)},
  { 1126, 1133, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails)},
  { 1135, 1151, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails)},
  { 1162, 1168, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData)},
  { 1169, 1179, sizeof(::proto::dota::CMsgDOTARealtimeGameStatsTerse)},
  { 1184, 1193, sizeof(::proto::dota::CMsgDOTABroadcastTimelineEvent)},
  { 1197, 1203, sizeof(::proto::dota::CMsgGCToClientMatchGroupsVersion)},
  { 1204, 1219, sizeof(::proto::dota::CMsgDOTASDOHeroStatsHistory)},
  { 1229, 1243, sizeof(::proto::dota::CMsgDOTASeasonRewards_Reward)},
  { 1252, 1258, sizeof(::proto::dota::CMsgDOTASeasonRewards)},
  { 1259, 1273, sizeof(::proto::dota::CMsgDOTASeasonAchievements_Achievement)},
  { 1282, 1288, sizeof(::proto::dota::CMsgDOTASeasonAchievements)},
  { 1289, 1298, sizeof(::proto::dota::CMsgDOTASeasonPredictions_Choice)},
  { 1302, 1308, sizeof(::proto::dota::CMsgDOTASeasonPredictions_Answers)},
  { 1309, 1316, sizeof(::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues)},
  { 1318, 1339, sizeof(::proto::dota::CMsgDOTASeasonPredictions_Prediction)},
  { 1355, 1374, sizeof(::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction)},
  { 1388, 1397, sizeof(::proto::dota::CMsgDOTASeasonPredictions)},
  { 1401, 1408, sizeof(::proto::dota::CMsgDOTAMatch_Player_CustomGameData)},
  { 1410, 1485, sizeof(::proto::dota::CMsgDOTAMatch_Player)},
  { 1555, 1562, sizeof(::proto::dota::CMsgDOTAMatch_BroadcasterInfo)},
  { 1564, 1573, sizeof(::proto::dota::CMsgDOTAMatch_BroadcasterChannel)},
  { 1577, 1584, sizeof(::proto::dota::CMsgDOTAMatch_CustomGameData)},
  { 1586, 1640, sizeof(::proto::dota::CMsgDOTAMatch)},
  { 1689, 1696, sizeof(::proto::dota::CMsgPlayerCard_StatModifier)},
  { 1698, 1705, sizeof(::proto::dota::CMsgPlayerCard)},
  { 1707, 1732, sizeof(::proto::dota::CMsgDOTAFantasyPlayerStats)},
  { 1752, 1758, sizeof(::proto::dota::CMsgDOTAFantasyPlayerMatchStats)},
  { 1759, 1770, sizeof(::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode)},
  { 1776, 1783, sizeof(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action)},
  { 1785, 1802, sizeof(::proto::dota::CMsgDOTABotDebugInfo_Bot)},
  { 1814, 1832, sizeof(::proto::dota::CMsgDOTABotDebugInfo)},
  { 1845, 1853, sizeof(::proto::dota::CMsgSuccessfulHero)},
  { 1856, 1870, sizeof(::proto::dota::CMsgRecentMatchInfo)},
  { 1879, 1888, sizeof(::proto::dota::CMsgMatchTips_SingleTip)},
  { 1892, 1898, sizeof(::proto::dota::CMsgMatchTips)},
  { 1899, 1912, sizeof(::proto::dota::CMsgDOTAMatchMinimal_Player)},
  { 1920, 1940, sizeof(::proto::dota::CMsgDOTAMatchMinimal_Tourney)},
  { 1955, 1969, sizeof(::proto::dota::CMsgDOTAMatchMinimal)},
  { 1978, 1985, sizeof(::proto::dota::CMsgConsumableUsage)},
  { 1987, 1994, sizeof(::proto::dota::CMsgMatchConsumableUsage_PlayerUsage)},
  { 1996, 2002, sizeof(::proto::dota::CMsgMatchConsumableUsage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAGameAccountClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAGameAccountPlus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLocalServerFakeLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgBattleCupVictory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyBattleCupVictoryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABroadcastNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CProtoItemHeroStatue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CProtoItemTeamShowcase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMatchPlayerAbilityUpgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMatchPlayerTimedStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMatchAdditionalUnitInventory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMatchPlayerPermanentBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMatchHeroSelectEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProcessFantasyScheduledEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAHasItemQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAHasItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCIsProQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCIsProResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAHasItemDefsQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAHasItemDefsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPlayerCardItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPlayerCardItemInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCFantasySetMatchLeague_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAMapLocationState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLeagueAdminList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCompendiumTimestampedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCompendiumGameTimeline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCompendiumGameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CAdditionalEquipSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Hero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProfileCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCRerollPlayerChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCTopCustomGamesList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_AbilityList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_KillDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARealtimeGameStatsTerse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABroadcastTimelineEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientMatchGroupsVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASDOHeroStatsHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonRewards_Reward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonRewards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonAchievements_Achievement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonAchievements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_Choice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_Answers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_InGamePrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeasonPredictions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_Player_CustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_BroadcasterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_BroadcasterChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_CustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPlayerCard_StatModifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPlayerCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerMatchStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABotDebugInfo_Bot_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABotDebugInfo_Bot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABotDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSuccessfulHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgRecentMatchInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgMatchTips_SingleTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgMatchTips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatchMinimal_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatchMinimal_Tourney_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMatchMinimal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgConsumableUsage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgMatchConsumableUsage_PlayerUsage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgMatchConsumableUsage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fcommon_2eproto, "dota_gcmessages_common.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_2eproto, 107, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_2eproto[] =
  "\n\034dota_gcmessages_common.proto\022\nproto.do"
  "ta\032\023steammessages.proto\032\026gcsdk_gcmessage"
  "s.proto\032\027dota_shared_enums.proto\"\325\022\n\030CSO"
  "DOTAGameAccountClient\022\030\n\naccount_id\030\001 \001("
  "\rB\004\200\246\035\001\022\014\n\004wins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r\022\n\n"
  "\002xp\030\014 \001(\r\022\r\n\005level\030\r \001(\r\022\025\n\rinitial_skil"
  "l\030\016 \001(\r\022\024\n\014leaver_count\030\017 \001(\r\022\036\n\026seconda"
  "ry_leaver_count\030: \001(\r\022\037\n\027low_priority_un"
  "til_date\030\022 \001(\r\022$\n\034prevent_text_chat_unti"
  "l_date\030\024 \001(\r\022 \n\030prevent_voice_until_date"
  "\030\025 \001(\r\022+\n#prevent_public_text_chat_until"
  "_date\030V \001(\r\022 \n\030last_abandoned_game_date\030"
  "\026 \001(\r\022*\n\"last_secondary_abandoned_game_d"
  "ate\030; \001(\r\022\034\n\024leaver_penalty_count\030\027 \001(\r\022"
  "\035\n\025completed_game_streak\030\030 \001(\r\022\020\n\010teachi"
  "ng\030\034 \001(\r\022\022\n\nleadership\030\035 \001(\r\022\020\n\010friendly"
  "\030\036 \001(\r\022\021\n\tforgiving\030\037 \001(\r\022#\n\033account_dis"
  "abled_until_date\030& \001(\r\022\036\n\026account_disabl"
  "ed_count\030\' \001(\r\022!\n\031match_disabled_until_d"
  "ate\030) \001(\r\022\034\n\024match_disabled_count\030* \001(\r\022"
  "J\n\024partner_account_type\030, \001(\0162\036.proto.do"
  "ta.PartnerAccountType:\014PARTNER_NONE\022\035\n\025p"
  "artner_account_state\030- \001(\r\022%\n\035shutdownla"
  "wterminatetimestamp\030/ \001(\r\022$\n\034low_priorit"
  "y_games_remaining\0300 \001(\r\022\030\n\020competitive_r"
  "ank\0301 \001(\r\022#\n\033calibration_games_remaining"
  "\0303 \001(\r\022\035\n\025solo_competitive_rank\0304 \001(\r\022(\n"
  " solo_calibration_games_remaining\0306 \001(\r\022"
  "\031\n\021recruitment_level\0307 \001(\r\022\035\n\025has_new_no"
  "tifications\0308 \001(\010\022\027\n\017is_league_admin\0309 \001"
  "(\010\022\033\n\023casual_games_played\030< \001(\r\022%\n\035solo_"
  "competitive_games_played\030= \001(\r\022&\n\036party_"
  "competitive_games_played\030> \001(\r\022\037\n\027casual"
  "_1v1_games_played\030A \001(\r\022%\n\035competitive_t"
  "eam_games_played\030B \001(\r\022\"\n\032curr_all_hero_"
  "challenge_id\030C \001(\r\022\030\n\020play_time_points\030D"
  " \001(\r\022\025\n\raccount_flags\030E \001(\r\022\027\n\017play_time"
  "_level\030F \001(\r\022+\n#player_behavior_seq_num_"
  "last_report\030G \001(\r\022)\n!player_behavior_sco"
  "re_last_report\030H \001(\r\022\'\n\037player_behavior_"
  "report_old_data\030I \001(\010\022\033\n\023tourney_skill_l"
  "evel\030J \001(\r\022)\n!tourney_recent_participati"
  "on_date\030U \001(\r\022\025\n\rfavorite_team\030W \001(\r\022 \n\030"
  "anchored_phone_number_id\030X \001(\004\022)\n!ranked"
  "_matchmaking_ban_until_date\030Y \001(\r\022\032\n\022rec"
  "ent_game_time_1\030Z \001(\r\022\032\n\022recent_game_tim"
  "e_2\030[ \001(\r\022\032\n\022recent_game_time_3\030\\ \001(\r\022$\n"
  "\034general_seasonal_ranked_rank\030] \001(\r\022;\n3g"
  "eneral_seasonal_ranked_calibration_games"
  "_remaining\030^ \001(\r\022,\n$general_seasonal_ran"
  "ked_games_played\030_ \001(\r\022)\n!general_season"
  "al_ranked_rank_peak\030` \001(\r\022)\n!general_sea"
  "sonal_rank_transferred\030a \001(\010\022!\n\031solo_sea"
  "sonal_ranked_rank\030b \001(\r\0228\n0solo_seasonal"
  "_ranked_calibration_games_remaining\030c \001("
  "\r\022)\n!solo_seasonal_ranked_games_played\030d"
  " \001(\r\022&\n\036solo_seasonal_ranked_rank_peak\030e"
  " \001(\r\022&\n\036solo_seasonal_rank_transferred\030f"
  " \001(\010\022\034\n\024favorite_team_packed\030g \001(\004\022\032\n\022re"
  "cent_report_time\030h \001(\r\022\'\n\037custom_game_di"
  "sabled_until_date\030i \001(\r\022\031\n\021recent_win_ti"
  "me_1\030j \001(\r\022\031\n\021recent_win_time_2\030k \001(\r\022\031\n"
  "\021recent_win_time_3\030l \001(\r\"\351\001\n\026CSODOTAGame"
  "AccountPlus\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\033\n"
  "\023original_start_date\030\002 \001(\r\022\022\n\nplus_flags"
  "\030\003 \001(\r\022\023\n\013plus_status\030\004 \001(\r\022\032\n\022prepaid_t"
  "ime_start\030\005 \001(\r\022\034\n\024prepaid_time_balance\030"
  "\006 \001(\r\022\031\n\021next_payment_date\030\007 \001(\007\022\032\n\022stea"
  "m_agreement_id\030\010 \001(\006\"\252\001\n#CMsgLobbyPlayer"
  "PlusSubscriptionData\022N\n\013hero_badges\030\001 \003("
  "\01329.proto.dota.CMsgLobbyPlayerPlusSubscr"
  "iptionData.HeroBadge\0323\n\tHeroBadge\022\017\n\007her"
  "o_id\030\001 \001(\r\022\025\n\rhero_badge_xp\030\002 \001(\r\"\224\010\n\024CM"
  "sgLobbyEventPoints\022\020\n\010event_id\030\001 \001(\r\022F\n\016"
  "account_points\030\002 \003(\0132..proto.dota.CMsgLo"
  "bbyEventPoints.AccountPoints\032I\n\025ChatWhee"
  "lMessageRange\022\030\n\020message_id_start\030\001 \001(\r\022"
  "\026\n\016message_id_end\030\002 \001(\r\0328\n\026PeriodicResou"
  "rceValues\022\021\n\tremaining\030\001 \001(\r\022\013\n\003max\030\002 \001("
  "\r\032\234\006\n\rAccountPoints\022\022\n\naccount_id\030\001 \001(\r\022"
  "\025\n\rnormal_points\030\002 \001(\r\022\026\n\016premium_points"
  "\030\003 \001(\r\022\r\n\005owned\030\004 \001(\010\022\025\n\rfavorite_team\030\005"
  " \001(\r\022\033\n\023favorite_team_level\030\006 \001(\r\022\023\n\013poi"
  "nts_held\030\007 \001(\r\022\033\n\023premium_points_held\030\010 "
  "\001(\r\022 \n\030favorite_team_foil_level\030\t \001(\r\022\033\n"
  "\023active_effects_mask\030\014 \001(\004\022b\n\"unlocked_c"
  "hat_wheel_message_ranges\030\r \003(\01326.proto.d"
  "ota.CMsgLobbyEventPoints.ChatWheelMessag"
  "eRange\022O\n\026plus_subscription_data\030\020 \001(\0132/"
  ".proto.dota.CMsgLobbyPlayerPlusSubscript"
  "ionData\022M\n\014wager_tokens\030\021 \001(\01327.proto.do"
  "ta.CMsgLobbyEventPoints.PeriodicResource"
  "Values\022R\n\021rank_wager_tokens\030\022 \001(\01327.prot"
  "o.dota.CMsgLobbyEventPoints.PeriodicReso"
  "urceValues\022K\n\ntip_tokens\030\023 \001(\01327.proto.d"
  "ota.CMsgLobbyEventPoints.PeriodicResourc"
  "eValues\022\022\n\ntip_amount\030\024 \001(\r\022[\n\032periodic_"
  "point_adjustments\030\025 \001(\01327.proto.dota.CMs"
  "gLobbyEventPoints.PeriodicResourceValues"
  "\"\326\001\n\034CMsgLocalServerFakeLobbyData\022\022\n\nacc"
  "ount_id\030\001 \001(\r\0226\n\014event_points\030\002 \003(\0132 .pr"
  "oto.dota.CMsgLobbyEventPoints\022\032\n\022is_plus"
  "_subscriber\030\003 \001(\010\022\030\n\020primary_event_id\030\004 "
  "\001(\r\022\025\n\rfavorite_team\030\005 \001(\r\022\035\n\025favorite_t"
  "eam_quality\030\006 \001(\r\"\306\001\n\024CMsgBattleCupVicto"
  "ry\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010win_date\030\002 \001(\r"
  "\022\023\n\013valid_until\030\003 \001(\r\022\023\n\013skill_level\030\004 \001"
  "(\r\022\025\n\rtournament_id\030\005 \001(\r\022\023\n\013division_id"
  "\030\006 \001(\r\022\017\n\007team_id\030\007 \001(\r\022\016\n\006streak\030\010 \001(\r\022"
  "\021\n\ttrophy_id\030\t \001(\r\"R\n\035CMsgLobbyBattleCup"
  "VictoryList\0221\n\007winners\030\001 \003(\0132 .proto.dot"
  "a.CMsgBattleCupVictory\"0\n\035CMsgDOTABroadc"
  "astNotification\022\017\n\007message\030\001 \001(\t\"\271\001\n\024CPr"
  "otoItemHeroStatue\022\017\n\007hero_id\030\001 \001(\r\022\033\n\023st"
  "atus_effect_index\030\002 \001(\r\022\025\n\rsequence_name"
  "\030\003 \001(\t\022\r\n\005cycle\030\004 \001(\002\022\020\n\010wearable\030\005 \003(\r\022"
  "\023\n\013inscription\030\006 \001(\t\022\r\n\005style\030\007 \003(\r\022\027\n\017t"
  "ournament_drop\030\010 \001(\010\"\242\001\n\026CProtoItemTeamS"
  "howcase\022\017\n\007hero_id\030\001 \001(\r\022\033\n\023status_effec"
  "t_index\030\002 \001(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r\n\005"
  "cycle\030\004 \001(\002\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscrip"
  "tion\030\006 \001(\t\022\r\n\005style\030\007 \003(\r\";\n\032CMatchPlaye"
  "rAbilityUpgrade\022\017\n\007ability\030\001 \001(\r\022\014\n\004time"
  "\030\002 \001(\r\"\214\001\n\026CMatchPlayerTimedStats\022\014\n\004tim"
  "e\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\016\n\006deaths\030\003 \001(\r\022\017"
  "\n\007assists\030\004 \001(\r\022\021\n\tnet_worth\030\005 \001(\r\022\021\n\tla"
  "st_hits\030\006 \001(\r\022\016\n\006denies\030\007 \001(\r\"A\n\035CMatchA"
  "dditionalUnitInventory\022\021\n\tunit_name\030\001 \001("
  "\t\022\r\n\005items\030\002 \003(\r\"H\n\031CMatchPlayerPermanen"
  "tBuff\022\026\n\016permanent_buff\030\001 \001(\r\022\023\n\013stack_c"
  "ount\030\002 \001(\r\"G\n\025CMatchHeroSelectEvent\022\017\n\007i"
  "s_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007hero_id\030\003 "
  "\001(\r\"\213\001\n$CMsgDOTAProcessFantasyScheduledE"
  "vent\022\r\n\005event\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\031"
  "\n\021fantasy_league_id\030\003 \001(\r\022\016\n\006season\030\004 \001("
  "\r\022\026\n\016reference_data\030\005 \001(\r\";\n\024CMsgDOTAHas"
  "ItemQuery\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\004\"+\n\027CMsgDOTAHasItemResponse\022\020\n\010has"
  "_item\030\001 \001(\010\"&\n\020CMsgGCIsProQuery\022\022\n\naccou"
  "nt_id\030\001 \001(\r\"%\n\023CMsgGCIsProResponse\022\016\n\006is"
  "_pro\030\001 \001(\010\"C\n\030CMsgDOTAHasItemDefsQuery\022\022"
  "\n\naccount_id\030\001 \001(\r\022\023\n\013itemdef_ids\030\002 \003(\r\""
  "0\n\033CMsgDOTAHasItemDefsResponse\022\021\n\thas_it"
  "ems\030\001 \001(\010\"f\n\033CMsgGCGetPlayerCardItemInfo"
  "\022\022\n\naccount_id\030\001 \001(\r\022\034\n\024player_card_item"
  "_ids\030\002 \003(\004\022\025\n\rall_for_event\030\003 \001(\r\"\333\001\n#CM"
  "sgGCGetPlayerCardItemInfoResponse\022Y\n\021pla"
  "yer_card_infos\030\001 \003(\0132>.proto.dota.CMsgGC"
  "GetPlayerCardItemInfoResponse.PlayerCard"
  "Info\032Y\n\016PlayerCardInfo\022\033\n\023player_card_it"
  "em_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\026\n\016packe"
  "d_bonuses\030\003 \001(\004\"F\n\037CMsgGCToGCFantasySetM"
  "atchLeague\022\020\n\010match_id\030\001 \001(\004\022\021\n\tleague_i"
  "d\030\002 \001(\r\"a\n\027CSODOTAMapLocationState\022\030\n\nac"
  "count_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013location_id\030\002 \001("
  "\005B\004\200\246\035\001\022\021\n\tcompleted\030\003 \001(\010\"*\n\023CMsgLeague"
  "AdminList\022\023\n\013account_ids\030\001 \003(\r\"\200\001\n\032CComp"
  "endiumTimestampedData\022\021\n\tgame_time\030\001 \001(\r"
  "\022\013\n\003gpm\030\002 \001(\r\022\013\n\003xpm\030\003 \001(\r\022\r\n\005kills\030\004 \001("
  "\r\022\016\n\006deaths\030\005 \001(\r\022\026\n\016item_purchases\030\006 \003("
  "\r\"]\n\027CCompendiumGameTimeline\0224\n\004data\030\001 \003"
  "(\0132&.proto.dota.CCompendiumTimestampedDa"
  "ta\022\014\n\004tags\030\002 \003(\t\"I\n\023CCompendiumGameList\022"
  "2\n\005games\030\001 \003(\0132#.proto.dota.CCompendiumG"
  "ameTimeline\"L\n\024CAdditionalEquipSlot\022\020\n\010c"
  "lass_id\030\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_in"
  "dex\030\003 \001(\r\"\231\n\n\023CMsgDOTAProfileCard\022\022\n\nacc"
  "ount_id\030\001 \001(\r\022\034\n\024background_def_index\030\002 "
  "\001(\r\0223\n\005slots\030\003 \003(\0132$.proto.dota.CMsgDOTA"
  "ProfileCard.Slot\022\024\n\014badge_points\030\004 \001(\r\022\024"
  "\n\014event_points\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\022C"
  "\n\031recent_battle_cup_victory\030\007 \001(\0132 .prot"
  "o.dota.CMsgBattleCupVictory\022\021\n\trank_tier"
  "\030\010 \001(\r\022\030\n\020leaderboard_rank\030\t \001(\r\022\032\n\022is_p"
  "lus_subscriber\030\n \001(\010\022 \n\030plus_original_st"
  "art_date\030\013 \001(\r\022\027\n\017rank_tier_score\030\014 \001(\r\022"
  "\032\n\022previous_rank_tier\030\r \001(\r\032\301\005\n\004Slot\022\017\n\007"
  "slot_id\030\001 \001(\r\022;\n\006trophy\030\002 \001(\0132+.proto.do"
  "ta.CMsgDOTAProfileCard.Slot.Trophy\0227\n\004st"
  "at\030\003 \001(\0132).proto.dota.CMsgDOTAProfileCar"
  "d.Slot.Stat\0227\n\004item\030\004 \001(\0132).proto.dota.C"
  "MsgDOTAProfileCard.Slot.Item\0227\n\004hero\030\005 \001"
  "(\0132).proto.dota.CMsgDOTAProfileCard.Slot"
  ".Hero\022\?\n\010emoticon\030\006 \001(\0132-.proto.dota.CMs"
  "gDOTAProfileCard.Slot.Emoticon\0227\n\004team\030\007"
  " \001(\0132).proto.dota.CMsgDOTAProfileCard.Sl"
  "ot.Team\0321\n\006Trophy\022\021\n\ttrophy_id\030\001 \001(\r\022\024\n\014"
  "trophy_score\030\002 \001(\r\032f\n\004Stat\022J\n\007stat_id\030\001 "
  "\001(\0162\'.proto.dota.CMsgDOTAProfileCard.ESt"
  "atID:\020k_eStat_SoloRank\022\022\n\nstat_score\030\002 \001"
  "(\r\0320\n\004Item\022\027\n\017serialized_item\030\001 \001(\014\022\017\n\007i"
  "tem_id\030\002 \001(\004\032\?\n\004Hero\022\017\n\007hero_id\030\001 \001(\r\022\021\n"
  "\thero_wins\030\002 \001(\r\022\023\n\013hero_losses\030\003 \001(\r\032\037\n"
  "\010Emoticon\022\023\n\013emoticon_id\030\001 \001(\r\032\027\n\004Team\022\017"
  "\n\007team_id\030\001 \001(\r\"\263\001\n\007EStatID\022\024\n\020k_eStat_S"
  "oloRank\020\001\022\025\n\021k_eStat_PartyRank\020\002\022\020\n\014k_eS"
  "tat_Wins\020\003\022\024\n\020k_eStat_Commends\020\004\022\027\n\023k_eS"
  "tat_GamesPlayed\020\005\022\032\n\026k_eStat_FirstMatchD"
  "ate\020\006\022\036\n\032k_eStat_PreviousSeasonRank\020\007\"\201\003"
  "\n\026CSODOTAPlayerChallenge\022\030\n\naccount_id\030\001"
  " \001(\rB\004\200\246\035\001\022\026\n\010event_id\030\002 \001(\rB\004\200\246\035\001\022\025\n\007sl"
  "ot_id\030\003 \001(\rB\004\200\246\035\001\022\023\n\013int_param_0\030\005 \001(\r\022\023"
  "\n\013int_param_1\030\006 \001(\r\022\024\n\014created_time\030\007 \001("
  "\r\022\021\n\tcompleted\030\010 \001(\r\022\023\n\013sequence_id\030\t \001("
  "\r\022\026\n\016challenge_tier\030\n \001(\r\022\r\n\005flags\030\013 \001(\r"
  "\022\020\n\010attempts\030\014 \001(\r\022\026\n\016complete_limit\030\r \001"
  "(\r\022\022\n\nquest_rank\030\016 \001(\r\022\026\n\016max_quest_rank"
  "\030\017 \001(\r\022\023\n\013instance_id\030\020 \001(\r\022\017\n\007hero_id\030\021"
  " \001(\r\022\023\n\013template_id\030\022 \001(\r\"\200\001\n#CMsgClient"
  "ToGCRerollPlayerChallenge\0223\n\010event_id\030\001 "
  "\001(\0162\022.proto.dota.EEvent:\rEVENT_ID_NONE\022\023"
  "\n\013sequence_id\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r\"\373\001\n"
  "#CMsgGCRerollPlayerChallengeResponse\022X\n\006"
  "result\030\001 \001(\01627.proto.dota.CMsgGCRerollPl"
  "ayerChallengeResponse.EResult:\017eResult_S"
  "uccess\"z\n\007EResult\022\023\n\017eResult_Success\020\000\022\023"
  "\n\017eResult_Dropped\020\001\022\024\n\020eResult_NotFound\020"
  "\002\022\026\n\022eResult_CantReroll\020\003\022\027\n\023eResult_Ser"
  "verError\020\004\"M\n\030CMsgGCTopCustomGamesList\022\030"
  "\n\020top_custom_games\030\001 \003(\004\022\027\n\017game_of_the_"
  "day\030\002 \001(\004\"\344\034\n\031CMsgDOTARealtimeGameStats\022"
  "A\n\005match\030\001 \001(\01322.proto.dota.CMsgDOTAReal"
  "timeGameStats.MatchDetails\022@\n\005teams\030\002 \003("
  "\01321.proto.dota.CMsgDOTARealtimeGameStats"
  ".TeamDetails\022H\n\tbuildings\030\003 \003(\01325.proto."
  "dota.CMsgDOTARealtimeGameStats.BuildingD"
  "etails\022C\n\ngraph_data\030\004 \001(\0132/.proto.dota."
  "CMsgDOTARealtimeGameStats.GraphData\022\023\n\013d"
  "elta_frame\030\005 \001(\010\032\215\002\n\013TeamDetails\022\023\n\013team"
  "_number\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_n"
  "ame\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\020\n\010team_tag"
  "\030\n \001(\t\022\r\n\005score\030\005 \001(\r\022\021\n\tnet_worth\030\t \001(\r"
  "\022D\n\007players\030\006 \003(\01323.proto.dota.CMsgDOTAR"
  "ealtimeGameStats.PlayerDetails\022\021\n\tonly_t"
  "eam\030\007 \001(\010\022\016\n\006cheers\030\010 \001(\r\022\025\n\rteam_logo_u"
  "rl\030\013 \001(\t\032d\n\013ItemDetails\022\027\n\017item_ability_"
  "id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004time\030\003 \001(\005\022\014\n\004"
  "sold\030\004 \001(\010\022\022\n\nstackcount\030\005 \001(\r\032a\n\016Abilit"
  "yDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005le"
  "vel\030\003 \001(\r\022\020\n\010cooldown\030\004 \001(\002\022\024\n\014cooldown_"
  "max\030\005 \001(\002\032C\n\017HeroToHeroStats\022\020\n\010victimid"
  "\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\017\n\007assists\030\003 \001(\r\032\031"
  "\n\013AbilityList\022\n\n\002id\030\001 \003(\r\032\247\n\n\rPlayerDeta"
  "ils\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r"
  "\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006heroid\030\005"
  " \001(\r\022\024\n\014healthpoints\030\006 \001(\r\022\027\n\017maxhealthp"
  "oints\030\007 \001(\r\022\027\n\017healthregenrate\030\010 \001(\002\022\022\n\n"
  "manapoints\030\t \001(\r\022\025\n\rmaxmanapoints\030\n \001(\r\022"
  "\025\n\rmanaregenrate\030\013 \001(\002\022\025\n\rbase_strength\030"
  "\014 \001(\r\022\024\n\014base_agility\030\r \001(\r\022\031\n\021base_inte"
  "lligence\030\016 \001(\r\022\022\n\nbase_armor\030\017 \001(\005\022\026\n\016ba"
  "se_movespeed\030\020 \001(\r\022\023\n\013base_damage\030\021 \001(\r\022"
  "\020\n\010strength\030\022 \001(\r\022\017\n\007agility\030\023 \001(\r\022\024\n\014in"
  "telligence\030\024 \001(\r\022\r\n\005armor\030\025 \001(\005\022\021\n\tmoves"
  "peed\030\026 \001(\r\022\016\n\006damage\030\027 \001(\r\022\023\n\013hero_damag"
  "e\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022G\n\tabiliti"
  "es\030\032 \003(\01324.proto.dota.CMsgDOTARealtimeGa"
  "meStats.AbilityDetails\022\r\n\005level\030\033 \001(\r\022\022\n"
  "\nkill_count\030\034 \001(\r\022\023\n\013death_count\030\035 \001(\r\022\025"
  "\n\rassists_count\030\036 \001(\r\022\024\n\014denies_count\030\037 "
  "\001(\r\022\020\n\010lh_count\030  \001(\r\022\024\n\014hero_healing\030! "
  "\001(\r\022\024\n\014gold_per_min\030\" \001(\r\022\022\n\nxp_per_min\030"
  "# \001(\r\022\020\n\010net_gold\030$ \001(\r\022\014\n\004gold\030% \001(\r\022\t\n"
  "\001x\030& \001(\002\022\t\n\001y\030\' \001(\002\022\024\n\014respawn_time\030( \001("
  "\005\022\031\n\021ultimate_cooldown\030) \001(\r\022\023\n\013has_buyb"
  "ack\030* \001(\010\022@\n\005items\030+ \003(\01321.proto.dota.CM"
  "sgDOTARealtimeGameStats.ItemDetails\022E\n\ns"
  "tashitems\030, \003(\01321.proto.dota.CMsgDOTARea"
  "ltimeGameStats.ItemDetails\022K\n\020itemshoppi"
  "nglist\030- \003(\01321.proto.dota.CMsgDOTARealti"
  "meGameStats.ItemDetails\022F\n\013levelpoints\030."
  " \003(\01321.proto.dota.CMsgDOTARealtimeGameSt"
  "ats.AbilityList\022Q\n\022hero_to_hero_stats\030/ "
  "\003(\01325.proto.dota.CMsgDOTARealtimeGameSta"
  "ts.HeroToHeroStats\022\024\n\014has_ultimate\0300 \001(\010"
  "\022\031\n\021has_ultimate_mana\0301 \001(\010\032\203\001\n\017Building"
  "Details\022\014\n\004team\030\002 \001(\r\022\017\n\007heading\030\003 \001(\002\022\014"
  "\n\004lane\030\004 \001(\r\022\014\n\004tier\030\005 \001(\r\022\014\n\004type\030\006 \001(\r"
  "\022\t\n\001x\030\007 \001(\002\022\t\n\001y\030\010 \001(\002\022\021\n\tdestroyed\030\t \001("
  "\010\032N\n\013KillDetails\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nd"
  "eath_time\030\002 \001(\005\022\030\n\020killer_player_id\030\003 \001("
  "\r\032V\n\022BroadcasterDetails\022\021\n\tplayer_id\030\001 \001"
  "(\r\022\025\n\rselected_hero\030\002 \001(\r\022\026\n\016selected_gr"
  "aph\030\003 \001(\r\032,\n\016PickBanDetails\022\014\n\004hero\030\001 \001("
  "\r\022\014\n\004team\030\002 \001(\r\032\326\004\n\014MatchDetails\022\027\n\017serv"
  "er_steam_id\030\001 \001(\006\022\017\n\007matchid\030\002 \001(\004\022\021\n\tti"
  "mestamp\030\003 \001(\r\022\023\n\013time_of_day\030\004 \001(\002\022\035\n\025is"
  "_nightstalker_night\030\005 \001(\010\022\021\n\tgame_time\030\006"
  " \001(\005\022\022\n\ngame_state\030\023 \001(\r\022\026\n\016teamid_radia"
  "nt\030\010 \001(\r\022\023\n\013teamid_dire\030\t \001(\r\022C\n\005picks\030\n"
  " \003(\01324.proto.dota.CMsgDOTARealtimeGameSt"
  "ats.PickBanDetails\022B\n\004bans\030\013 \003(\01324.proto"
  ".dota.CMsgDOTARealtimeGameStats.PickBanD"
  "etails\022@\n\005kills\030\014 \003(\01321.proto.dota.CMsgD"
  "OTARealtimeGameStats.KillDetails\022N\n\014broa"
  "dcasters\030\r \003(\01328.proto.dota.CMsgDOTAReal"
  "timeGameStats.BroadcasterDetails\022\021\n\tgame"
  "_mode\030\016 \001(\r\022\021\n\tleague_id\030\017 \001(\r\022\026\n\016league"
  "_node_id\030\022 \001(\r\022\023\n\013single_team\030\020 \001(\010\022\023\n\013c"
  "heers_peak\030\021 \001(\r\032\205\004\n\tGraphData\022\022\n\ngraph_"
  "gold\030\001 \003(\005\022\020\n\010graph_xp\030\002 \003(\005\022\022\n\ngraph_ki"
  "ll\030\003 \003(\005\022\023\n\013graph_tower\030\004 \003(\005\022\021\n\tgraph_r"
  "ax\030\005 \003(\005\022Y\n\016team_loc_stats\030\006 \003(\0132A.proto"
  ".dota.CMsgDOTARealtimeGameStats.GraphDat"
  "a.TeamLocationStats\032\036\n\rLocationStats\022\r\n\005"
  "stats\030\001 \003(\005\032e\n\021TeamLocationStats\022P\n\tloc_"
  "stats\030\001 \003(\0132=.proto.dota.CMsgDOTARealtim"
  "eGameStats.GraphData.LocationStats\"[\n\005eS"
  "tat\022\023\n\017CreepGoldEarned\020\000\022\022\n\016KillGoldEarn"
  "ed\020\001\022\033\n\027DeathAndBuybackGoldLost\020\002\022\014\n\010XPE"
  "arned\020\003\"W\n\teLocation\022\013\n\007BotLane\020\000\022\013\n\007Mid"
  "Lane\020\001\022\013\n\007TopLane\020\002\022\n\n\006Jungle\020\003\022\014\n\010Ancie"
  "nts\020\004\022\t\n\005Other\020\005\"\242\013\n\036CMsgDOTARealtimeGam"
  "eStatsTerse\022F\n\005match\030\001 \001(\01327.proto.dota."
  "CMsgDOTARealtimeGameStatsTerse.MatchDeta"
  "ils\022E\n\005teams\030\002 \003(\01326.proto.dota.CMsgDOTA"
  "RealtimeGameStatsTerse.TeamDetails\022M\n\tbu"
  "ildings\030\003 \003(\0132:.proto.dota.CMsgDOTARealt"
  "imeGameStatsTerse.BuildingDetails\022H\n\ngra"
  "ph_data\030\004 \001(\01324.proto.dota.CMsgDOTARealt"
  "imeGameStatsTerse.GraphData\022\023\n\013delta_fra"
  "me\030\005 \001(\010\032\357\001\n\013TeamDetails\022\023\n\013team_number\030"
  "\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_name\030\003 \001("
  "\t\022\020\n\010team_tag\030\010 \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\r"
  "\n\005score\030\005 \001(\r\022\021\n\tnet_worth\030\007 \001(\r\022\025\n\rteam"
  "_logo_url\030\t \001(\t\022I\n\007players\030\006 \003(\01328.proto"
  ".dota.CMsgDOTARealtimeGameStatsTerse.Pla"
  "yerDetails\032\216\002\n\rPlayerDetails\022\021\n\taccounti"
  "d\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022"
  "\014\n\004team\030\004 \001(\r\022\016\n\006heroid\030\005 \001(\r\022\r\n\005level\030\006"
  " \001(\r\022\022\n\nkill_count\030\007 \001(\r\022\023\n\013death_count\030"
  "\010 \001(\r\022\025\n\rassists_count\030\t \001(\r\022\024\n\014denies_c"
  "ount\030\n \001(\r\022\020\n\010lh_count\030\013 \001(\r\022\014\n\004gold\030\014 \001"
  "(\r\022\t\n\001x\030\r \001(\002\022\t\n\001y\030\016 \001(\002\022\021\n\tnet_worth\030\017 "
  "\001(\r\032\203\001\n\017BuildingDetails\022\014\n\004team\030\001 \001(\r\022\017\n"
  "\007heading\030\002 \001(\002\022\014\n\004type\030\003 \001(\r\022\014\n\004lane\030\004 \001"
  "(\r\022\014\n\004tier\030\005 \001(\r\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007 \001(\002\022\021"
  "\n\tdestroyed\030\010 \001(\010\032,\n\016PickBanDetails\022\014\n\004h"
  "ero\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\032\352\002\n\014MatchDetails"
  "\022\027\n\017server_steam_id\030\001 \001(\006\022\017\n\007matchid\030\002 \001"
  "(\004\022\021\n\ttimestamp\030\003 \001(\r\022\021\n\tgame_time\030\004 \001(\005"
  "\022%\n\035steam_broadcaster_account_ids\030\006 \003(\r\022"
  "\021\n\tgame_mode\030\007 \001(\r\022\021\n\tleague_id\030\010 \001(\r\022\026\n"
  "\016league_node_id\030\t \001(\r\022\022\n\ngame_state\030\n \001("
  "\r\022H\n\005picks\030\013 \003(\01329.proto.dota.CMsgDOTARe"
  "altimeGameStatsTerse.PickBanDetails\022G\n\004b"
  "ans\030\014 \003(\01329.proto.dota.CMsgDOTARealtimeG"
  "ameStatsTerse.PickBanDetails\032\037\n\tGraphDat"
  "a\022\022\n\ngraph_gold\030\001 \003(\005\"\260\001\n\036CMsgDOTABroadc"
  "astTimelineEvent\022X\n\005event\030\001 \001(\0162#.proto."
  "dota.EBroadcastTimelineEvent:$EBroadcast"
  "TimelineEvent_MatchStarted\022\021\n\ttimestamp\030"
  "\002 \001(\007\022\014\n\004data\030\003 \001(\r\022\023\n\013string_data\030\004 \001(\t"
  "\"\?\n CMsgGCToClientMatchGroupsVersion\022\033\n\023"
  "matchgroups_version\030\001 \001(\r\"\301\001\n\033CMsgDOTASD"
  "OHeroStatsHistory\022\020\n\010match_id\030\001 \001(\004\022\021\n\tg"
  "ame_mode\030\002 \001(\r\022\022\n\nlobby_type\030\003 \001(\r\022\022\n\nst"
  "art_time\030\004 \001(\r\022\013\n\003won\030\005 \001(\010\022\013\n\003gpm\030\006 \001(\r"
  "\022\013\n\003xpm\030\007 \001(\r\022\r\n\005kills\030\010 \001(\r\022\016\n\006deaths\030\t"
  " \001(\r\022\017\n\007assists\030\n \001(\r\"\252\003\n\025CMsgDOTASeason"
  "Rewards\0229\n\007rewards\030\001 \003(\0132(.proto.dota.CM"
  "sgDOTASeasonRewards.Reward\032\353\001\n\006Reward\022\014\n"
  "\004name\030\001 \001(\t\022\017\n\007itemdef\030\002 \001(\r\022\022\n\nimportan"
  "ce\030\003 \001(\r\022\022\n\nbase_level\030\004 \001(\r\022\024\n\014repeat_l"
  "evel\030\005 \001(\r\022L\n\013reward_type\030\006 \001(\0162-.proto."
  "dota.CMsgDOTASeasonRewards.ERewardType:\010"
  "EconItem\022\r\n\005image\030\007 \001(\t\022\021\n\taction_id\030\010 \001"
  "(\r\022\024\n\014effect_index\030\t \001(\r\"h\n\013ERewardType\022"
  "\014\n\010EconItem\020\000\022\020\n\014MysteryWheel\020\001\022\021\n\rAbili"
  "tyEffect\020\002\022\t\n\005Other\020\003\022\033\n\027MysteryWheelPoi"
  "ntsBased\020\004\"\271\002\n\032CMsgDOTASeasonAchievement"
  "s\022H\n\014achievements\030\001 \003(\01322.proto.dota.CMs"
  "gDOTASeasonAchievements.Achievement\032\320\001\n\013"
  "Achievement\022\014\n\004name\030\001 \001(\t\022\023\n\013description"
  "\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\021\n\taction_id\030\004 \001(\r"
  "\022\022\n\nmax_grants\030\005 \001(\r\022\025\n\rnormal_points\030\006 "
  "\001(\r\022\034\n\024tracking_achievement\030\007 \001(\r\022\030\n\020ach"
  "ievement_goal\030\010 \001(\r\022\031\n\021achievement_level"
  "\030\t \001(\r\"\356\021\n\031CMsgDOTASeasonPredictions\022E\n\013"
  "predictions\030\001 \003(\01320.proto.dota.CMsgDOTAS"
  "easonPredictions.Prediction\022S\n\023in_game_p"
  "redictions\030\002 \003(\01326.proto.dota.CMsgDOTASe"
  "asonPredictions.InGamePrediction\022)\n!in_g"
  "ame_prediction_count_per_game\030\003 \001(\r\0220\n(i"
  "n_game_prediction_voting_period_minutes\030"
  "\004 \001(\r\032S\n\006Choice\022\r\n\005value\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\t\022\025\n\rmin_raw_value\030\003 \001(\r\022\025\n\rmax_raw_v"
  "alue\030\004 \001(\r\032\034\n\007Answers\022\021\n\tanswer_id\030\001 \001(\r"
  "\032-\n\016QueryKeyValues\022\014\n\004name\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t\032\314\004\n\nPrediction\022L\n\004type\030\001 \001(\01625.p"
  "roto.dota.CMsgDOTASeasonPredictions.ePre"
  "dictionType:\007Generic\022\020\n\010question\030\002 \001(\t\022="
  "\n\007choices\030\003 \003(\0132,.proto.dota.CMsgDOTASea"
  "sonPredictions.Choice\022\024\n\014selection_id\030\004 "
  "\001(\r\022\022\n\nstart_date\030\005 \001(\r\022\021\n\tlock_date\030\006 \001"
  "(\r\022\016\n\006reward\030\007 \001(\r\022Q\n\013answer_type\030\010 \001(\0162"
  "1.proto.dota.CMsgDOTASeasonPredictions.e"
  "AnswerType:\tSingleInt\022\021\n\tanswer_id\030\t \001(\r"
  "\022>\n\007answers\030\n \003(\0132-.proto.dota.CMsgDOTAS"
  "easonPredictions.Answers\022\022\n\nquery_name\030\013"
  " \001(\t\022\031\n\021query_bind_params\030\014 \003(\r\022\034\n\024lock_"
  "on_selection_id\030\r \001(\r\022\037\n\027lock_on_selecti"
  "on_value\030\016 \001(\r\022\035\n\025lock_on_selection_set\030"
  "\017 \001(\010\022\037\n\027use_answer_value_ranges\030\020 \001(\010\032\252"
  "\005\n\020InGamePrediction\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
  "\002 \001(\t\022L\n\004type\030\003 \001(\01625.proto.dota.CMsgDOT"
  "ASeasonPredictions.ePredictionType:\007Gene"
  "ric\022W\n\005group\030\004 \001(\0162=.proto.dota.CMsgDOTA"
  "SeasonPredictions.eRandomSelectionGroup_"
  "t:\tEarlyGame\022\020\n\010question\030\005 \001(\t\022=\n\007choice"
  "s\030\006 \003(\0132,.proto.dota.CMsgDOTASeasonPredi"
  "ctions.Choice\022\027\n\017required_heroes\030\007 \003(\t\022\022"
  "\n\nquery_name\030\010 \001(\t\022J\n\014query_values\030\t \003(\013"
  "24.proto.dota.CMsgDOTASeasonPredictions."
  "QueryKeyValues\022e\n\026answer_resolution_type"
  "\030\n \001(\01627.proto.dota.CMsgDOTASeasonPredic"
  "tions.eResolutionType_t:\014InvalidQuery\022\027\n"
  "\017points_to_grant\030\013 \001(\r\022\025\n\rreward_action\030"
  "\014 \001(\r\022\035\n\025debug_force_selection\030\r \001(\r\022U\n\016"
  "raw_value_type\030\016 \001(\01625.proto.dota.CMsgDO"
  "TASeasonPredictions.eRawValueType_t:\006Num"
  "ber\"V\n\017ePredictionType\022\013\n\007Generic\020\000\022\010\n\004H"
  "ero\020\001\022\010\n\004Team\020\002\022\n\n\006Player\020\003\022\013\n\007Special\020\004"
  "\022\t\n\005YesNo\020\005\"\221\001\n\013eAnswerType\022\r\n\tSingleInt"
  "\020\000\022\017\n\013SingleFloat\020\001\022\017\n\013MultipleInt\020\002\022\021\n\r"
  "MultipleFloat\020\003\022\016\n\nAnswerTeam\020\004\022\016\n\nSingl"
  "eTime\020\005\022\020\n\014MultipleTime\020\006\022\014\n\010NoAnswer\020\007\""
  "\324\001\n\021eResolutionType_t\022\020\n\014InvalidQuery\020\000\022"
  "\024\n\020FirstToPassQuery\020\001\022\023\n\017LastToPassQuery"
  "\020\002\022\026\n\022LastRemainingQuery\020\003\022\022\n\016MaxToPassQ"
  "uery\020\004\022\022\n\016MinToPassQuery\020\005\022\014\n\010SumQuery\020\006"
  "\022\031\n\025MaxTeamSumToPassQuery\020\007\022\031\n\025MinTeamSu"
  "mToPassQuery\020\010\"N\n\027eRandomSelectionGroup_"
  "t\022\r\n\tEarlyGame\020\000\022\013\n\007MidGame\020\001\022\014\n\010LateGam"
  "e\020\002\022\t\n\005Count\020\003\"\'\n\017eRawValueType_t\022\n\n\006Num"
  "ber\020\000\022\010\n\004Time\020\001\"\333\034\n\rCMsgDOTAMatch\022\020\n\010dur"
  "ation\030\003 \001(\r\022\021\n\tstartTime\030\004 \001(\007\0221\n\007player"
  "s\030\005 \003(\0132 .proto.dota.CMsgDOTAMatch.Playe"
  "r\022\020\n\010match_id\030\006 \001(\004\022\024\n\014tower_status\030\010 \003("
  "\r\022\027\n\017barracks_status\030\t \003(\r\022\017\n\007cluster\030\n "
  "\001(\r\022\030\n\020first_blood_time\030\014 \001(\r\022\023\n\013replay_"
  "salt\030\r \001(\007\022\021\n\tserver_ip\030\016 \001(\007\022\023\n\013server_"
  "port\030\017 \001(\r\022\022\n\nlobby_type\030\020 \001(\r\022\025\n\rhuman_"
  "players\030\021 \001(\r\022\025\n\raverage_skill\030\022 \001(\r\022\024\n\014"
  "game_balance\030\023 \001(\002\022\027\n\017radiant_team_id\030\024 "
  "\001(\r\022\024\n\014dire_team_id\030\025 \001(\r\022\020\n\010leagueid\030\026 "
  "\001(\r\022\031\n\021radiant_team_name\030\027 \001(\t\022\026\n\016dire_t"
  "eam_name\030\030 \001(\t\022\031\n\021radiant_team_logo\030\031 \001("
  "\004\022\026\n\016dire_team_logo\030\032 \001(\004\022\035\n\025radiant_tea"
  "m_logo_url\0306 \001(\t\022\032\n\022dire_team_logo_url\0307"
  " \001(\t\022\035\n\025radiant_team_complete\030\033 \001(\r\022\032\n\022d"
  "ire_team_complete\030\034 \001(\r\022\026\n\016positive_vote"
  "s\030\035 \001(\r\022\026\n\016negative_votes\030\036 \001(\r\022@\n\tgame_"
  "mode\030\037 \001(\0162\031.proto.dota.DOTA_GameMode:\022D"
  "OTA_GAMEMODE_NONE\0225\n\npicks_bans\030  \003(\0132!."
  "proto.dota.CMatchHeroSelectEvent\022\025\n\rmatc"
  "h_seq_num\030! \001(\004\022M\n\014replay_state\030\" \001(\0162%."
  "proto.dota.CMsgDOTAMatch.ReplayState:\020RE"
  "PLAY_AVAILABLE\022\030\n\020radiant_guild_id\030# \001(\r"
  "\022\025\n\rdire_guild_id\030$ \001(\r\022\030\n\020radiant_team_"
  "tag\030% \001(\t\022\025\n\rdire_team_tag\030& \001(\t\022\021\n\tseri"
  "es_id\030\' \001(\r\022\023\n\013series_type\030( \001(\r\022J\n\024broa"
  "dcaster_channels\030+ \003(\0132,.proto.dota.CMsg"
  "DOTAMatch.BroadcasterChannel\022\016\n\006engine\030,"
  " \001(\r\022B\n\020custom_game_data\030- \001(\0132(.proto.d"
  "ota.CMsgDOTAMatch.CustomGameData\022\023\n\013matc"
  "h_flags\030. \001(\r\022\034\n\024private_metadata_key\030/ "
  "\001(\007\022\032\n\022radiant_team_score\0300 \001(\r\022\027\n\017dire_"
  "team_score\0301 \001(\r\022I\n\rmatch_outcome\0302 \001(\0162"
  "\031.proto.dota.EMatchOutcome:\027k_EMatchOutc"
  "ome_Unknown\022\025\n\rtournament_id\0303 \001(\r\022\030\n\020to"
  "urnament_round\0304 \001(\r\022\031\n\021pre_game_duratio"
  "n\0305 \001(\r\032\271\016\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\023"
  "\n\013player_slot\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\016\n\006"
  "item_0\030\004 \001(\r\022\016\n\006item_1\030\005 \001(\r\022\016\n\006item_2\030\006"
  " \001(\r\022\016\n\006item_3\030\007 \001(\r\022\016\n\006item_4\030\010 \001(\r\022\016\n\006"
  "item_5\030\t \001(\r\022\016\n\006item_6\030; \001(\r\022\016\n\006item_7\030<"
  " \001(\r\022\016\n\006item_8\030= \001(\r\022\"\n\032expected_team_co"
  "ntribution\030\n \001(\002\022\025\n\rscaled_metric\030\013 \001(\002\022"
  "\025\n\rprevious_rank\030\014 \001(\r\022\023\n\013rank_change\030\r "
  "\001(\021\022\021\n\tsolo_rank\0301 \001(\010\022\025\n\rseasonal_rank\030"
  "5 \001(\010\022\031\n\021rank_tier_updated\030B \001(\010\022\r\n\005kill"
  "s\030\016 \001(\r\022\016\n\006deaths\030\017 \001(\r\022\017\n\007assists\030\020 \001(\r"
  "\022\025\n\rleaver_status\030\021 \001(\r\022\014\n\004gold\030\022 \001(\r\022\021\n"
  "\tlast_hits\030\023 \001(\r\022\016\n\006denies\030\024 \001(\r\022\024\n\014gold"
  "_per_min\030\025 \001(\r\022\022\n\nXP_per_min\030\026 \001(\r\022\022\n\ngo"
  "ld_spent\030\027 \001(\r\022\023\n\013hero_damage\030\030 \001(\r\022\024\n\014t"
  "ower_damage\030\031 \001(\r\022\024\n\014hero_healing\030\032 \001(\r\022"
  "\r\n\005level\030\033 \001(\r\022\026\n\016time_last_seen\030\034 \001(\r\022\023"
  "\n\013player_name\030\035 \001(\t\022\035\n\025support_ability_v"
  "alue\030\036 \001(\r\022\030\n\020feeding_detected\030  \001(\010\022\023\n\013"
  "search_rank\030\" \001(\r\022\037\n\027search_rank_uncerta"
  "inty\030# \001(\r\022\037\n\027rank_uncertainty_change\030$ "
  "\001(\005\022\027\n\017hero_play_count\030% \001(\r\022\020\n\010party_id"
  "\030& \001(\006\022\032\n\022scaled_hero_damage\0306 \001(\r\022\033\n\023sc"
  "aled_tower_damage\0307 \001(\r\022\033\n\023scaled_hero_h"
  "ealing\0308 \001(\r\022\024\n\014scaled_kills\030\' \001(\002\022\025\n\rsc"
  "aled_deaths\030( \001(\002\022\026\n\016scaled_assists\030) \001("
  "\002\022\031\n\021claimed_farm_gold\030* \001(\r\022\024\n\014support_"
  "gold\030+ \001(\r\022\026\n\016claimed_denies\030, \001(\r\022\026\n\016cl"
  "aimed_misses\030- \001(\r\022\016\n\006misses\030. \001(\r\022@\n\020ab"
  "ility_upgrades\030/ \003(\0132&.proto.dota.CMatch"
  "PlayerAbilityUpgrade\022M\n\032additional_units"
  "_inventory\0300 \003(\0132).proto.dota.CMatchAddi"
  "tionalUnitInventory\022>\n\017permanent_buffs\0309"
  " \003(\0132%.proto.dota.CMatchPlayerPermanentB"
  "uff\022\020\n\010pro_name\030H \001(\t\022\021\n\treal_name\030I \001(\t"
  "\022I\n\020custom_game_data\0302 \001(\0132/.proto.dota."
  "CMsgDOTAMatch.Player.CustomGameData\022 \n\030a"
  "ctive_plus_subscription\0303 \001(\010\022\021\n\tnet_wor"
  "th\0304 \001(\r\022\026\n\016bot_difficulty\030: \001(\r\022\027\n\017hero"
  "_pick_order\030\? \001(\r\022\031\n\021hero_was_randomed\030@"
  " \001(\010\022\026\n\016hero_was_bonus\030A \001(\010\022%\n\035hero_was"
  "_dota_plus_suggestion\030E \001(\010\022*\n\"hero_dama"
  "ge_received_pre_reduction\030C \001(\r\022+\n#hero_"
  "damage_received_post_reduction\030D \001(\r\022\024\n\014"
  "seconds_dead\030F \001(\r\022\032\n\022gold_lost_to_death"
  "\030G \001(\r\0323\n\016CustomGameData\022\021\n\tdota_team\030\001 "
  "\001(\r\022\016\n\006winner\030\002 \001(\010\0323\n\017BroadcasterInfo\022\022"
  "\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\032\234\001\n\022Bro"
  "adcasterChannel\022\024\n\014country_code\030\001 \001(\t\022\023\n"
  "\013description\030\002 \001(\t\022D\n\021broadcaster_infos\030"
  "\003 \003(\0132).proto.dota.CMsgDOTAMatch.Broadca"
  "sterInfo\022\025\n\rlanguage_code\030\004 \001(\t\032:\n\016Custo"
  "mGameData\022\026\n\016custom_game_id\030\001 \001(\004\022\020\n\010map"
  "_name\030\002 \001(\t\"P\n\013ReplayState\022\024\n\020REPLAY_AVA"
  "ILABLE\020\000\022\027\n\023REPLAY_NOT_RECORDED\020\001\022\022\n\016REP"
  "LAY_EXPIRED\020\002\"\221\001\n\016CMsgPlayerCard\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022>\n\rstat_modifier\030\002 \003(\0132\'.pr"
  "oto.dota.CMsgPlayerCard.StatModifier\032+\n\014"
  "StatModifier\022\014\n\004stat\030\001 \001(\r\022\r\n\005value\030\002 \001("
  "\r\"\251\003\n\032CMsgDOTAFantasyPlayerStats\022\031\n\021play"
  "er_account_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\027\n"
  "\017match_completed\030\003 \001(\010\022\017\n\007team_id\030\004 \001(\r\022"
  "\021\n\tleague_id\030\005 \001(\r\022\r\n\005delay\030\006 \001(\r\022\021\n\tser"
  "ies_id\030\007 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\r\n\005kil"
  "ls\030\n \001(\r\022\016\n\006deaths\030\013 \001(\r\022\n\n\002cs\030\014 \001(\r\022\013\n\003"
  "gpm\030\r \001(\002\022\023\n\013tower_kills\030\016 \001(\r\022\024\n\014roshan"
  "_kills\030\017 \001(\r\022\037\n\027teamfight_participation\030"
  "\020 \001(\002\022\024\n\014wards_placed\030\021 \001(\r\022\025\n\rcamps_sta"
  "cked\030\022 \001(\r\022\025\n\rrunes_grabbed\030\023 \001(\r\022\023\n\013fir"
  "st_blood\030\024 \001(\r\022\r\n\005stuns\030\025 \001(\002\"Z\n\037CMsgDOT"
  "AFantasyPlayerMatchStats\0227\n\007matches\030\001 \003("
  "\0132&.proto.dota.CMsgDOTAFantasyPlayerStat"
  "s\"\255\007\n\024CMsgDOTABotDebugInfo\0222\n\004bots\030\001 \003(\013"
  "2$.proto.dota.CMsgDOTABotDebugInfo.Bot\022\034"
  "\n\024desire_push_lane_top\030\002 \001(\002\022\034\n\024desire_p"
  "ush_lane_mid\030\003 \001(\002\022\034\n\024desire_push_lane_b"
  "ot\030\004 \001(\002\022\036\n\026desire_defend_lane_top\030\005 \001(\002"
  "\022\036\n\026desire_defend_lane_mid\030\006 \001(\002\022\036\n\026desi"
  "re_defend_lane_bot\030\007 \001(\002\022\034\n\024desire_farm_"
  "lane_top\030\010 \001(\002\022\034\n\024desire_farm_lane_mid\030\t"
  " \001(\002\022\034\n\024desire_farm_lane_bot\030\n \001(\002\022\032\n\022de"
  "sire_farm_roshan\030\013 \001(\002\022\026\n\016execution_time"
  "\030\014 \001(\002\022\023\n\013rune_status\030\r \003(\r\032\203\004\n\003Bot\022\027\n\017p"
  "layer_owner_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\022\022\n"
  "\ndifficulty\030\003 \001(\r\022\025\n\rpower_current\030\004 \001(\r"
  "\022\021\n\tpower_max\030\005 \001(\r\022\025\n\rmove_target_x\030\006 \001"
  "(\r\022\025\n\rmove_target_y\030\007 \001(\r\022\025\n\rmove_target"
  "_z\030\010 \001(\r\022\026\n\016active_mode_id\030\t \001(\r\022\026\n\016exec"
  "ution_time\030\n \001(\002\0228\n\005modes\030\013 \003(\0132).proto."
  "dota.CMsgDOTABotDebugInfo.Bot.Mode\022;\n\006ac"
  "tion\030\014 \001(\0132+.proto.dota.CMsgDOTABotDebug"
  "Info.Bot.Action\032t\n\004Mode\022\017\n\007mode_id\030\001 \001(\r"
  "\022\016\n\006desire\030\002 \001(\002\022\025\n\rtarget_entity\030\003 \001(\r\022"
  "\020\n\010target_x\030\004 \001(\r\022\020\n\010target_y\030\005 \001(\r\022\020\n\010t"
  "arget_z\030\006 \001(\r\0322\n\006Action\022\021\n\taction_id\030\001 \001"
  "(\r\022\025\n\raction_target\030\002 \001(\t\"R\n\022CMsgSuccess"
  "fulHero\022\017\n\007hero_id\030\001 \001(\r\022\023\n\013win_percent\030"
  "\002 \001(\002\022\026\n\016longest_streak\030\003 \001(\r\"\236\002\n\023CMsgRe"
  "centMatchInfo\022\020\n\010match_id\030\001 \001(\004\022@\n\tgame_"
  "mode\030\002 \001(\0162\031.proto.dota.DOTA_GameMode:\022D"
  "OTA_GAMEMODE_NONE\022\r\n\005kills\030\003 \001(\r\022\016\n\006deat"
  "hs\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\020\n\010duration\030\006 "
  "\001(\r\022\023\n\013player_slot\030\007 \001(\r\022I\n\rmatch_outcom"
  "e\030\010 \001(\0162\031.proto.dota.EMatchOutcome:\027k_EM"
  "atchOutcome_Unknown\022\021\n\ttimestamp\030\t \001(\r\"\317"
  "\001\n\rCMsgMatchTips\0221\n\004tips\030\002 \003(\0132#.proto.d"
  "ota.CMsgMatchTips.SingleTip\032\212\001\n\tSingleTi"
  "p\022\031\n\021source_account_id\030\001 \001(\r\022\031\n\021target_a"
  "ccount_id\030\002 \001(\r\022\022\n\ntip_amount\030\003 \001(\r\0223\n\010e"
  "vent_id\030\004 \001(\0162\022.proto.dota.EEvent:\rEVENT"
  "_ID_NONE\"\302\007\n\024CMsgDOTAMatchMinimal\022\020\n\010mat"
  "ch_id\030\001 \001(\004\022\022\n\nstart_time\030\002 \001(\007\022\020\n\010durat"
  "ion\030\003 \001(\r\022@\n\tgame_mode\030\004 \001(\0162\031.proto.dot"
  "a.DOTA_GameMode:\022DOTA_GAMEMODE_NONE\0228\n\007p"
  "layers\030\006 \003(\0132\'.proto.dota.CMsgDOTAMatchM"
  "inimal.Player\0229\n\007tourney\030\007 \001(\0132(.proto.d"
  "ota.CMsgDOTAMatchMinimal.Tourney\022I\n\rmatc"
  "h_outcome\030\010 \001(\0162\031.proto.dota.EMatchOutco"
  "me:\027k_EMatchOutcome_Unknown\022\025\n\rradiant_s"
  "core\030\t \001(\r\022\022\n\ndire_score\030\n \001(\r\032\223\001\n\006Playe"
  "r\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\022\r"
  "\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assists"
  "\030\005 \001(\r\022\r\n\005items\030\006 \003(\r\022\023\n\013player_slot\030\007 \001"
  "(\r\022\020\n\010pro_name\030\010 \001(\t\032\256\003\n\007Tourney\022\021\n\tleag"
  "ue_id\030\001 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\023\n\013seri"
  "es_game\030\t \001(\r\022%\n\035weekend_tourney_tournam"
  "ent_id\030\n \001(\r\022(\n weekend_tourney_season_t"
  "rophy_id\030\013 \001(\r\022 \n\030weekend_tourney_divisi"
  "on\030\014 \001(\r\022#\n\033weekend_tourney_skill_level\030"
  "\r \001(\r\022\027\n\017radiant_team_id\030\002 \001(\r\022\031\n\021radian"
  "t_team_name\030\003 \001(\t\022\031\n\021radiant_team_logo\030\004"
  " \001(\006\022\035\n\025radiant_team_logo_url\030\016 \001(\t\022\024\n\014d"
  "ire_team_id\030\005 \001(\r\022\026\n\016dire_team_name\030\006 \001("
  "\t\022\026\n\016dire_team_logo\030\007 \001(\006\022\032\n\022dire_team_l"
  "ogo_url\030\017 \001(\t\"@\n\023CMsgConsumableUsage\022\020\n\010"
  "item_def\030\001 \001(\r\022\027\n\017quantity_change\030\002 \001(\005\""
  "\313\001\n\030CMsgMatchConsumableUsage\022Q\n\027player_c"
  "onsumables_used\030\001 \003(\01320.proto.dota.CMsgM"
  "atchConsumableUsage.PlayerUsage\032\\\n\013Playe"
  "rUsage\022\022\n\naccount_id\030\001 \001(\r\0229\n\020consumable"
  "s_used\030\002 \003(\0132\037.proto.dota.CMsgConsumable"
  "Usage*U\n\021ESpecialPingValue\022\037\n\032k_ESpecial"
  "PingValue_NoData\020\376\177\022\037\n\032k_ESpecialPingVal"
  "ue_Failed\020\377\177*\206\005\n\022EDOTAGCSessionNeed\022 \n\034k"
  "_EDOTAGCSessionNeed_Unknown\020\000\022,\n(k_EDOTA"
  "GCSessionNeed_UserNoSessionNeeded\020d\022)\n%k"
  "_EDOTAGCSessionNeed_UserInOnlineGame\020e\022("
  "\n$k_EDOTAGCSessionNeed_UserInLocalGame\020f"
  "\022-\n)k_EDOTAGCSessionNeed_UserInUIWasConn"
  "ected\020g\022/\n+k_EDOTAGCSessionNeed_UserInUI"
  "NeverConnected\020h\022&\n\"k_EDOTAGCSessionNeed"
  "_UserTutorials\020i\0221\n-k_EDOTAGCSessionNeed"
  "_UserInUIWasConnectedIdle\020j\0223\n/k_EDOTAGC"
  "SessionNeed_UserInUINeverConnectedIdle\020k"
  "\022*\n%k_EDOTAGCSessionNeed_GameServerOnlin"
  "e\020\310\001\022)\n$k_EDOTAGCSessionNeed_GameServerL"
  "ocal\020\311\001\022(\n#k_EDOTAGCSessionNeed_GameServ"
  "erIdle\020\312\001\022)\n$k_EDOTAGCSessionNeed_GameSe"
  "rverRelay\020\313\001\022/\n*k_EDOTAGCSessionNeed_Gam"
  "eServerLocalUpload\020\314\001*\366\001\n\025DOTA_Tournamen"
  "tEvents\022\022\n\016TE_FIRST_BLOOD\020\000\022\017\n\013TE_GAME_E"
  "ND\020\001\022\021\n\rTE_MULTI_KILL\020\002\022\020\n\014TE_HERO_DENY\020"
  "\003\022\021\n\rTE_AEGIS_DENY\020\004\022\023\n\017TE_AEGIS_STOLEN\020"
  "\005\022\016\n\nTE_GODLIKE\020\006\022\023\n\017TE_COURIER_KILL\020\007\022\017"
  "\n\013TE_ECHOSLAM\020\010\022\r\n\tTE_RAPIER\020\t\022\023\n\017TE_EAR"
  "LY_ROSHAN\020\n\022\021\n\rTE_BLACK_HOLE\020\013*\215\003\n\027EBroa"
  "dcastTimelineEvent\022(\n$EBroadcastTimeline"
  "Event_MatchStarted\020\001\022,\n(EBroadcastTimeli"
  "neEvent_GameStateChanged\020\002\022&\n\"EBroadcast"
  "TimelineEvent_TowerDeath\020\003\022)\n%EBroadcast"
  "TimelineEvent_BarracksDeath\020\004\022(\n$EBroadc"
  "astTimelineEvent_AncientDeath\020\005\022\'\n#EBroa"
  "dcastTimelineEvent_RoshanDeath\020\006\022%\n!EBro"
  "adcastTimelineEvent_HeroDeath\020\007\022%\n!EBroa"
  "dcastTimelineEvent_TeamFight\020\010\022&\n\"EBroad"
  "castTimelineEvent_FirstBlood\020\tB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fcommon_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fcommon_2eproto,
  "dota_gcmessages_common.proto", &assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto, 25917,
};

void AddDescriptors_dota_5fgcmessages_5fcommon_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_steammessages_2eproto,
    ::AddDescriptors_gcsdk_5fgcmessages_2eproto,
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fcommon_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fcommon_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[0];
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PartyRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PreviousSeasonRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
const int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[1];
}
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Dropped;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_NotFound;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_CantReroll;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_ServerError;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MIN;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MAX;
const int CMsgGCRerollPlayerChallengeResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[2];
}
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::KillGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::DeathAndBuybackGoldLost;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::XPEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eStat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[3];
}
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::MidLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::TopLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Jungle;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Ancients;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Other;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eLocation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[4];
}
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::EconItem;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheel;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::AbilityEffect;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::Other;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheelPointsBased;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MIN;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MAX;
const int CMsgDOTASeasonRewards::ERewardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[5];
}
bool CMsgDOTASeasonPredictions_ePredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Generic;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Hero;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Team;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Player;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Special;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::YesNo;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MIN;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MAX;
const int CMsgDOTASeasonPredictions::ePredictionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[6];
}
bool CMsgDOTASeasonPredictions_eAnswerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::AnswerTeam;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::NoAnswer;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MIN;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MAX;
const int CMsgDOTASeasonPredictions::eAnswerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[7];
}
bool CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::InvalidQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::FirstToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastRemainingQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::SumQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MIN;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MAX;
const int CMsgDOTASeasonPredictions::eResolutionType_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[8];
}
bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::EarlyGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::MidGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::LateGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::Count;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MIN;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MAX;
const int CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[9];
}
bool CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Number;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Time;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MIN;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MAX;
const int CMsgDOTASeasonPredictions::eRawValueType_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[10];
}
bool CMsgDOTAMatch_ReplayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_NOT_RECORDED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_EXPIRED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MIN;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MAX;
const int CMsgDOTAMatch::ReplayState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[11];
}
bool ESpecialPingValue_IsValid(int value) {
  switch (value) {
    case 16382:
    case 16383:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[12];
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[13];
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBroadcastTimelineEvent_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[14];
}
bool EBroadcastTimelineEvent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CSODOTAGameAccountClient::InitAsDefaultInstance() {
}
class CSODOTAGameAccountClient::HasBitSetters {
 public:
  static void set_has_account_id(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_wins(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_losses(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_xp(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_level(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_initial_skill(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_leaver_count(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_secondary_leaver_count(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_low_priority_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_prevent_text_chat_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_prevent_voice_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_prevent_public_text_chat_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_last_abandoned_game_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_last_secondary_abandoned_game_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_leaver_penalty_count(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_completed_game_streak(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_teaching(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_leadership(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_friendly(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_forgiving(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_account_disabled_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_account_disabled_count(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_match_disabled_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_match_disabled_count(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_partner_account_type(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_partner_account_state(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_shutdownlawterminatetimestamp(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_low_priority_games_remaining(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_competitive_rank(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_calibration_games_remaining(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_solo_competitive_rank(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_solo_calibration_games_remaining(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_recruitment_level(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_has_new_notifications(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_is_league_admin(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_casual_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_solo_competitive_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_party_competitive_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_casual_1v1_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_competitive_team_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_curr_all_hero_challenge_id(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_play_time_points(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_account_flags(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_play_time_level(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_player_behavior_seq_num_last_report(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_player_behavior_score_last_report(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_player_behavior_report_old_data(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_tourney_skill_level(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_tourney_recent_participation_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_favorite_team(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_anchored_phone_number_id(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_ranked_matchmaking_ban_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_recent_game_time_1(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_recent_game_time_2(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_recent_game_time_3(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_general_seasonal_ranked_rank(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_general_seasonal_ranked_calibration_games_remaining(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_general_seasonal_ranked_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_general_seasonal_ranked_rank_peak(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_general_seasonal_rank_transferred(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_solo_seasonal_ranked_rank(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_solo_seasonal_ranked_calibration_games_remaining(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_solo_seasonal_ranked_games_played(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_solo_seasonal_ranked_rank_peak(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_solo_seasonal_rank_transferred(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_favorite_team_packed(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_recent_report_time(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
  static void set_has_custom_game_disabled_until_date(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000008u;
  }
  static void set_has_recent_win_time_1(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000010u;
  }
  static void set_has_recent_win_time_2(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000020u;
  }
  static void set_has_recent_win_time_3(CSODOTAGameAccountClient* msg) {
    msg->_has_bits_[2] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAGameAccountClient::kAccountIdFieldNumber;
const int CSODOTAGameAccountClient::kWinsFieldNumber;
const int CSODOTAGameAccountClient::kLossesFieldNumber;
const int CSODOTAGameAccountClient::kXpFieldNumber;
const int CSODOTAGameAccountClient::kLevelFieldNumber;
const int CSODOTAGameAccountClient::kInitialSkillFieldNumber;
const int CSODOTAGameAccountClient::kLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kSecondaryLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventVoiceUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventPublicTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kLastAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLastSecondaryAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLeaverPenaltyCountFieldNumber;
const int CSODOTAGameAccountClient::kCompletedGameStreakFieldNumber;
const int CSODOTAGameAccountClient::kTeachingFieldNumber;
const int CSODOTAGameAccountClient::kLeadershipFieldNumber;
const int CSODOTAGameAccountClient::kFriendlyFieldNumber;
const int CSODOTAGameAccountClient::kForgivingFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountTypeFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountStateFieldNumber;
const int CSODOTAGameAccountClient::kShutdownlawterminatetimestampFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kRecruitmentLevelFieldNumber;
const int CSODOTAGameAccountClient::kHasNewNotificationsFieldNumber;
const int CSODOTAGameAccountClient::kIsLeagueAdminFieldNumber;
const int CSODOTAGameAccountClient::kCasualGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kPartyCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCasual1V1GamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveTeamGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCurrAllHeroChallengeIdFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimePointsFieldNumber;
const int CSODOTAGameAccountClient::kAccountFlagsFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimeLevelFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorSeqNumLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorScoreLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorReportOldDataFieldNumber;
const int CSODOTAGameAccountClient::kTourneySkillLevelFieldNumber;
const int CSODOTAGameAccountClient::kTourneyRecentParticipationDateFieldNumber;
const int CSODOTAGameAccountClient::kFavoriteTeamFieldNumber;
const int CSODOTAGameAccountClient::kAnchoredPhoneNumberIdFieldNumber;
const int CSODOTAGameAccountClient::kRankedMatchmakingBanUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime1FieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime2FieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime3FieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kFavoriteTeamPackedFieldNumber;
const int CSODOTAGameAccountClient::kRecentReportTimeFieldNumber;
const int CSODOTAGameAccountClient::kCustomGameDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kRecentWinTime1FieldNumber;
const int CSODOTAGameAccountClient::kRecentWinTime2FieldNumber;
const int CSODOTAGameAccountClient::kRecentWinTime3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAGameAccountClient::CSODOTAGameAccountClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAGameAccountClient)
}
CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recent_win_time_3_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(recent_win_time_3_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recent_win_time_3_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(recent_win_time_3_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAGameAccountClient)
  SharedDtor();
}

void CSODOTAGameAccountClient::SharedDtor() {
}

void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAGameAccountClient& CSODOTAGameAccountClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAGameAccountClient_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_until_date_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(low_priority_until_date_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&prevent_text_chat_until_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friendly_) -
        reinterpret_cast<char*>(&prevent_text_chat_until_date_)) + sizeof(friendly_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&forgiving_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shutdownlawterminatetimestamp_) -
        reinterpret_cast<char*>(&forgiving_)) + sizeof(shutdownlawterminatetimestamp_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&low_priority_games_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_secondary_abandoned_game_date_) -
        reinterpret_cast<char*>(&low_priority_games_remaining_)) + sizeof(last_secondary_abandoned_game_date_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&casual_games_played_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_flags_) -
        reinterpret_cast<char*>(&casual_games_played_)) + sizeof(account_flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&play_time_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tourney_skill_level_) -
        reinterpret_cast<char*>(&play_time_level_)) + sizeof(tourney_skill_level_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tourney_recent_participation_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_game_time_3_) -
        reinterpret_cast<char*>(&tourney_recent_participation_date_)) + sizeof(recent_game_time_3_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&general_seasonal_ranked_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solo_seasonal_ranked_rank_peak_) -
        reinterpret_cast<char*>(&general_seasonal_ranked_rank_)) + sizeof(solo_seasonal_ranked_rank_peak_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&favorite_team_packed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_win_time_3_) -
        reinterpret_cast<char*>(&favorite_team_packed_)) + sizeof(recent_win_time_3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAGameAccountClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAGameAccountClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wins = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xp = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_xp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_skill = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_initial_skill(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leaver_count = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_leaver_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_low_priority_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_prevent_text_chat_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_prevent_voice_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_last_abandoned_game_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_leaver_penalty_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_completed_game_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teaching = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_teaching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leadership = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_leadership(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 friendly = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_friendly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 forgiving = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_forgiving(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_account_disabled_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_account_disabled_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_match_disabled_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_match_disabled_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PartnerAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(44, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_partner_account_type(static_cast<::proto::dota::PartnerAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 partner_account_state = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_partner_account_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_shutdownlawterminatetimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_low_priority_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 competitive_rank = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_competitive_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_solo_competitive_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_solo_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recruitment_level = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_recruitment_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_new_notifications = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_has_new_notifications(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_league_admin = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_is_league_admin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_secondary_leaver_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_last_secondary_abandoned_game_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 casual_games_played = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_casual_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_solo_competitive_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_party_competitive_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 casual_1v1_games_played = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_casual_1v1_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 competitive_team_games_played = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_competitive_team_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_curr_all_hero_challenge_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 play_time_points = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_play_time_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_flags = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_account_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 play_time_level = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_play_time_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_behavior_seq_num_last_report = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_player_behavior_seq_num_last_report(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_behavior_score_last_report = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_player_behavior_score_last_report(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool player_behavior_report_old_data = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_player_behavior_report_old_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_skill_level = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_recent_participation_date = 85;
      case 85: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_tourney_recent_participation_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prevent_public_text_chat_until_date = 86;
      case 86: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_prevent_public_text_chat_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_favorite_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 anchored_phone_number_id = 88;
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_anchored_phone_number_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ranked_matchmaking_ban_until_date = 89;
      case 89: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_ranked_matchmaking_ban_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_game_time_1 = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_recent_game_time_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_game_time_2 = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_recent_game_time_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_game_time_3 = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_recent_game_time_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 general_seasonal_ranked_rank = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_general_seasonal_ranked_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 general_seasonal_ranked_games_played = 95;
      case 95: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_general_seasonal_ranked_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 general_seasonal_ranked_rank_peak = 96;
      case 96: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_general_seasonal_ranked_rank_peak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool general_seasonal_rank_transferred = 97;
      case 97: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_general_seasonal_rank_transferred(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_seasonal_ranked_rank = 98;
      case 98: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_solo_seasonal_ranked_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_seasonal_ranked_games_played = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_solo_seasonal_ranked_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 solo_seasonal_ranked_rank_peak = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_solo_seasonal_ranked_rank_peak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solo_seasonal_rank_transferred = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_solo_seasonal_rank_transferred(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 favorite_team_packed = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_favorite_team_packed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_report_time = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_recent_report_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_game_disabled_until_date = 105;
      case 105: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_custom_game_disabled_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_win_time_1 = 106;
      case 106: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_recent_win_time_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_win_time_2 = 107;
      case 107: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_recent_win_time_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recent_win_time_3 = 108;
      case 108: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_recent_win_time_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAGameAccountClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_xp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_skill = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_initial_skill(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_leaver_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_low_priority_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_prevent_text_chat_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_text_chat_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_prevent_voice_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_voice_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_last_abandoned_game_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_abandoned_game_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_leaver_penalty_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_penalty_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_completed_game_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_game_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teaching = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_teaching(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leadership = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_leadership(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadership_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friendly = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_friendly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forgiving = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_forgiving(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgiving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_account_disabled_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_account_disabled_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          HasBitSetters::set_has_match_disabled_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_match_disabled_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                44, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partner_account_state = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_partner_account_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_account_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_shutdownlawterminatetimestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdownlawterminatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_low_priority_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 competitive_rank = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_competitive_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_solo_competitive_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          HasBitSetters::set_has_solo_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recruitment_level = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {
          HasBitSetters::set_has_recruitment_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitment_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_new_notifications = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_has_new_notifications(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_new_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_league_admin = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {
          HasBitSetters::set_has_is_league_admin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_league_admin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {
          HasBitSetters::set_has_secondary_leaver_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_leaver_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_last_secondary_abandoned_game_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_secondary_abandoned_game_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 casual_games_played = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_casual_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_solo_competitive_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {
          HasBitSetters::set_has_party_competitive_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_competitive_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 casual_1v1_games_played = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_casual_1v1_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_1v1_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 competitive_team_games_played = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {
          HasBitSetters::set_has_competitive_team_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_team_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_curr_all_hero_challenge_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_all_hero_challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_time_points = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_play_time_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {
          HasBitSetters::set_has_account_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_time_level = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_play_time_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_behavior_seq_num_last_report = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          HasBitSetters::set_has_player_behavior_seq_num_last_report(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_seq_num_last_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_behavior_score_last_report = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {
          HasBitSetters::set_has_player_behavior_score_last_report(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_score_last_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool player_behavior_report_old_data = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {
          HasBitSetters::set_has_player_behavior_report_old_data(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_behavior_report_old_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {
          HasBitSetters::set_has_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_recent_participation_date = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (680 & 0xFF)) {
          HasBitSetters::set_has_tourney_recent_participation_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_recent_participation_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_public_text_chat_until_date = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (688 & 0xFF)) {
          HasBitSetters::set_has_prevent_public_text_chat_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_public_text_chat_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (696 & 0xFF)) {
          HasBitSetters::set_has_favorite_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 anchored_phone_number_id = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {
          HasBitSetters::set_has_anchored_phone_number_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anchored_phone_number_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ranked_matchmaking_ban_until_date = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (712 & 0xFF)) {
          HasBitSetters::set_has_ranked_matchmaking_ban_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranked_matchmaking_ban_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_1 = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (720 & 0xFF)) {
          HasBitSetters::set_has_recent_game_time_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_2 = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (728 & 0xFF)) {
          HasBitSetters::set_has_recent_game_time_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_3 = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {
          HasBitSetters::set_has_recent_game_time_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_rank = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (744 & 0xFF)) {
          HasBitSetters::set_has_general_seasonal_ranked_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {
          HasBitSetters::set_has_general_seasonal_ranked_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_games_played = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (760 & 0xFF)) {
          HasBitSetters::set_has_general_seasonal_ranked_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_rank_peak = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (768 & 0xFF)) {
          HasBitSetters::set_has_general_seasonal_ranked_rank_peak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool general_seasonal_rank_transferred = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (776 & 0xFF)) {
          HasBitSetters::set_has_general_seasonal_rank_transferred(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &general_seasonal_rank_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (784 & 0xFF)) {
          HasBitSetters::set_has_solo_seasonal_ranked_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (792 & 0xFF)) {
          HasBitSetters::set_has_solo_seasonal_ranked_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_games_played = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (800 & 0xFF)) {
          HasBitSetters::set_has_solo_seasonal_ranked_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank_peak = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (808 & 0xFF)) {
          HasBitSetters::set_has_solo_seasonal_ranked_rank_peak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_seasonal_rank_transferred = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (816 & 0xFF)) {
          HasBitSetters::set_has_solo_seasonal_rank_transferred(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_seasonal_rank_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 favorite_team_packed = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (824 & 0xFF)) {
          HasBitSetters::set_has_favorite_team_packed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &favorite_team_packed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_report_time = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (832 & 0xFF)) {
          HasBitSetters::set_has_recent_report_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_report_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_game_disabled_until_date = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (840 & 0xFF)) {
          HasBitSetters::set_has_custom_game_disabled_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_game_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_win_time_1 = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (848 & 0xFF)) {
          HasBitSetters::set_has_recent_win_time_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_win_time_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_win_time_2 = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (856 & 0xFF)) {
          HasBitSetters::set_has_recent_win_time_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_win_time_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_win_time_3 = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (864 & 0xFF)) {
          HasBitSetters::set_has_recent_win_time_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_win_time_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAGameAccountClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional uint32 losses = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losses(), output);
  }

  // optional uint32 xp = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->xp(), output);
  }

  // optional uint32 level = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // optional uint32 initial_skill = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_skill(), output);
  }

  // optional uint32 leaver_count = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leaver_count(), output);
  }

  // optional uint32 low_priority_until_date = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->low_priority_until_date(), output);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prevent_text_chat_until_date(), output);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prevent_voice_until_date(), output);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->last_abandoned_game_date(), output);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->leaver_penalty_count(), output);
  }

  // optional uint32 completed_game_streak = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->completed_game_streak(), output);
  }

  // optional uint32 teaching = 28;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->teaching(), output);
  }

  // optional uint32 leadership = 29;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->leadership(), output);
  }

  // optional uint32 friendly = 30;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->friendly(), output);
  }

  // optional uint32 forgiving = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->forgiving(), output);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->account_disabled_until_date(), output);
  }

  // optional uint32 account_disabled_count = 39;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->account_disabled_count(), output);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_count = 42;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->match_disabled_count(), output);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->partner_account_type(), output);
  }

  // optional uint32 partner_account_state = 45;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->partner_account_state(), output);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shutdownlawterminatetimestamp(), output);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->low_priority_games_remaining(), output);
  }

  // optional uint32 competitive_rank = 49;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->competitive_rank(), output);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->calibration_games_remaining(), output);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->solo_competitive_rank(), output);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->solo_calibration_games_remaining(), output);
  }

  // optional uint32 recruitment_level = 55;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->recruitment_level(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_new_notifications = 56;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->has_new_notifications(), output);
  }

  // optional bool is_league_admin = 57;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_league_admin(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 secondary_leaver_count = 58;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->secondary_leaver_count(), output);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_secondary_abandoned_game_date(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 casual_games_played = 60;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->casual_games_played(), output);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->solo_competitive_games_played(), output);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->party_competitive_games_played(), output);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->casual_1v1_games_played(), output);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->competitive_team_games_played(), output);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->curr_all_hero_challenge_id(), output);
  }

  // optional uint32 play_time_points = 68;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->play_time_points(), output);
  }

  // optional uint32 account_flags = 69;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->account_flags(), output);
  }

  // optional uint32 play_time_level = 70;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->play_time_level(), output);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->player_behavior_seq_num_last_report(), output);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->player_behavior_score_last_report(), output);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->player_behavior_report_old_data(), output);
  }

  // optional uint32 tourney_skill_level = 74;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->tourney_recent_participation_date(), output);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->prevent_public_text_chat_until_date(), output);
  }

  // optional uint32 favorite_team = 87;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->favorite_team(), output);
  }

  // optional uint64 anchored_phone_number_id = 88;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(88, this->anchored_phone_number_id(), output);
  }

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->ranked_matchmaking_ban_until_date(), output);
  }

  // optional uint32 recent_game_time_1 = 90;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->recent_game_time_1(), output);
  }

  // optional uint32 recent_game_time_2 = 91;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->recent_game_time_2(), output);
  }

  // optional uint32 recent_game_time_3 = 92;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->recent_game_time_3(), output);
  }

  // optional uint32 general_seasonal_ranked_rank = 93;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->general_seasonal_ranked_rank(), output);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->general_seasonal_ranked_calibration_games_remaining(), output);
  }

  // optional uint32 general_seasonal_ranked_games_played = 95;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(95, this->general_seasonal_ranked_games_played(), output);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 96;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(96, this->general_seasonal_ranked_rank_peak(), output);
  }

  // optional bool general_seasonal_rank_transferred = 97;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->general_seasonal_rank_transferred(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank = 98;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->solo_seasonal_ranked_rank(), output);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->solo_seasonal_ranked_calibration_games_remaining(), output);
  }

  // optional uint32 solo_seasonal_ranked_games_played = 100;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->solo_seasonal_ranked_games_played(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 101;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->solo_seasonal_ranked_rank_peak(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool solo_seasonal_rank_transferred = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->solo_seasonal_rank_transferred(), output);
  }

  // optional uint64 favorite_team_packed = 103;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(103, this->favorite_team_packed(), output);
  }

  // optional uint32 recent_report_time = 104;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(104, this->recent_report_time(), output);
  }

  // optional uint32 custom_game_disabled_until_date = 105;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(105, this->custom_game_disabled_until_date(), output);
  }

  // optional uint32 recent_win_time_1 = 106;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->recent_win_time_1(), output);
  }

  // optional uint32 recent_win_time_2 = 107;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(107, this->recent_win_time_2(), output);
  }

  // optional uint32 recent_win_time_3 = 108;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(108, this->recent_win_time_3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAGameAccountClient)
}

::google::protobuf::uint8* CSODOTAGameAccountClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional uint32 losses = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losses(), target);
  }

  // optional uint32 xp = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->xp(), target);
  }

  // optional uint32 level = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // optional uint32 initial_skill = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_skill(), target);
  }

  // optional uint32 leaver_count = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leaver_count(), target);
  }

  // optional uint32 low_priority_until_date = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->low_priority_until_date(), target);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prevent_text_chat_until_date(), target);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prevent_voice_until_date(), target);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->last_abandoned_game_date(), target);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->leaver_penalty_count(), target);
  }

  // optional uint32 completed_game_streak = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->completed_game_streak(), target);
  }

  // optional uint32 teaching = 28;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->teaching(), target);
  }

  // optional uint32 leadership = 29;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->leadership(), target);
  }

  // optional uint32 friendly = 30;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->friendly(), target);
  }

  // optional uint32 forgiving = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->forgiving(), target);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->account_disabled_until_date(), target);
  }

  // optional uint32 account_disabled_count = 39;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->account_disabled_count(), target);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_count = 42;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->match_disabled_count(), target);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->partner_account_type(), target);
  }

  // optional uint32 partner_account_state = 45;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->partner_account_state(), target);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shutdownlawterminatetimestamp(), target);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->low_priority_games_remaining(), target);
  }

  // optional uint32 competitive_rank = 49;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->competitive_rank(), target);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->calibration_games_remaining(), target);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->solo_competitive_rank(), target);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->solo_calibration_games_remaining(), target);
  }

  // optional uint32 recruitment_level = 55;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->recruitment_level(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_new_notifications = 56;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->has_new_notifications(), target);
  }

  // optional bool is_league_admin = 57;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_league_admin(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 secondary_leaver_count = 58;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->secondary_leaver_count(), target);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_secondary_abandoned_game_date(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 casual_games_played = 60;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->casual_games_played(), target);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->solo_competitive_games_played(), target);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->party_competitive_games_played(), target);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->casual_1v1_games_played(), target);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->competitive_team_games_played(), target);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->curr_all_hero_challenge_id(), target);
  }

  // optional uint32 play_time_points = 68;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->play_time_points(), target);
  }

  // optional uint32 account_flags = 69;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->account_flags(), target);
  }

  // optional uint32 play_time_level = 70;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->play_time_level(), target);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->player_behavior_seq_num_last_report(), target);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->player_behavior_score_last_report(), target);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->player_behavior_report_old_data(), target);
  }

  // optional uint32 tourney_skill_level = 74;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->tourney_recent_participation_date(), target);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->prevent_public_text_chat_until_date(), target);
  }

  // optional uint32 favorite_team = 87;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->favorite_team(), target);
  }

  // optional uint64 anchored_phone_number_id = 88;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(88, this->anchored_phone_number_id(), target);
  }

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->ranked_matchmaking_ban_until_date(), target);
  }

  // optional uint32 recent_game_time_1 = 90;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->recent_game_time_1(), target);
  }

  // optional uint32 recent_game_time_2 = 91;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->recent_game_time_2(), target);
  }

  // optional uint32 recent_game_time_3 = 92;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->recent_game_time_3(), target);
  }

  // optional uint32 general_seasonal_ranked_rank = 93;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->general_seasonal_ranked_rank(), target);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(94, this->general_seasonal_ranked_calibration_games_remaining(), target);
  }

  // optional uint32 general_seasonal_ranked_games_played = 95;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(95, this->general_seasonal_ranked_games_played(), target);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 96;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(96, this->general_seasonal_ranked_rank_peak(), target);
  }

  // optional bool general_seasonal_rank_transferred = 97;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->general_seasonal_rank_transferred(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank = 98;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->solo_seasonal_ranked_rank(), target);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(99, this->solo_seasonal_ranked_calibration_games_remaining(), target);
  }

  // optional uint32 solo_seasonal_ranked_games_played = 100;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->solo_seasonal_ranked_games_played(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 101;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->solo_seasonal_ranked_rank_peak(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool solo_seasonal_rank_transferred = 102;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->solo_seasonal_rank_transferred(), target);
  }

  // optional uint64 favorite_team_packed = 103;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(103, this->favorite_team_packed(), target);
  }

  // optional uint32 recent_report_time = 104;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(104, this->recent_report_time(), target);
  }

  // optional uint32 custom_game_disabled_until_date = 105;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(105, this->custom_game_disabled_until_date(), target);
  }

  // optional uint32 recent_win_time_1 = 106;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(106, this->recent_win_time_1(), target);
  }

  // optional uint32 recent_win_time_2 = 107;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(107, this->recent_win_time_2(), target);
  }

  // optional uint32 recent_win_time_3 = 108;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(108, this->recent_win_time_3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAGameAccountClient)
  return target;
}

size_t CSODOTAGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAGameAccountClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 xp = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp());
    }

    // optional uint32 level = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 initial_skill = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_skill());
    }

    // optional uint32 leaver_count = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_count());
    }

    // optional uint32 low_priority_until_date = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_until_date());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 prevent_text_chat_until_date = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_text_chat_until_date());
    }

    // optional uint32 prevent_voice_until_date = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_voice_until_date());
    }

    // optional uint32 last_abandoned_game_date = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_abandoned_game_date());
    }

    // optional uint32 leaver_penalty_count = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_penalty_count());
    }

    // optional uint32 completed_game_streak = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_game_streak());
    }

    // optional uint32 teaching = 28;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaching());
    }

    // optional uint32 leadership = 29;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadership());
    }

    // optional uint32 friendly = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 forgiving = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgiving());
    }

    // optional uint32 account_disabled_until_date = 38;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_until_date());
    }

    // optional uint32 account_disabled_count = 39;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_count());
    }

    // optional uint32 match_disabled_until_date = 41;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_count = 42;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_count());
    }

    // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 partner_account_state = 45;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_account_state());
    }

    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdownlawterminatetimestamp());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 low_priority_games_remaining = 48;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 competitive_rank = 49;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_rank());
    }

    // optional uint32 calibration_games_remaining = 51;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 solo_competitive_rank = 52;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_rank());
    }

    // optional uint32 solo_calibration_games_remaining = 54;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_calibration_games_remaining());
    }

    // optional uint32 recruitment_level = 55;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruitment_level());
    }

    // optional uint32 secondary_leaver_count = 58;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_leaver_count());
    }

    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_secondary_abandoned_game_date());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 casual_games_played = 60;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_games_played());
    }

    // optional uint32 solo_competitive_games_played = 61;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_games_played());
    }

    // optional uint32 party_competitive_games_played = 62;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_competitive_games_played());
    }

    // optional uint32 casual_1v1_games_played = 65;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_1v1_games_played());
    }

    // optional uint32 competitive_team_games_played = 66;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_team_games_played());
    }

    // optional uint32 curr_all_hero_challenge_id = 67;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_all_hero_challenge_id());
    }

    // optional uint32 play_time_points = 68;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_points());
    }

    // optional uint32 account_flags = 69;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 play_time_level = 70;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_level());
    }

    // optional bool has_new_notifications = 56;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_league_admin = 57;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool player_behavior_report_old_data = 73;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool general_seasonal_rank_transferred = 97;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 player_behavior_seq_num_last_report = 71;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_seq_num_last_report());
    }

    // optional uint32 player_behavior_score_last_report = 72;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_score_last_report());
    }

    // optional uint32 tourney_skill_level = 74;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 tourney_recent_participation_date = 85;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_recent_participation_date());
    }

    // optional uint32 prevent_public_text_chat_until_date = 86;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_public_text_chat_until_date());
    }

    // optional uint32 favorite_team = 87;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint64 anchored_phone_number_id = 88;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->anchored_phone_number_id());
    }

    // optional uint32 ranked_matchmaking_ban_until_date = 89;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranked_matchmaking_ban_until_date());
    }

    // optional uint32 recent_game_time_1 = 90;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_1());
    }

    // optional uint32 recent_game_time_2 = 91;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_2());
    }

    // optional uint32 recent_game_time_3 = 92;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_3());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 general_seasonal_ranked_rank = 93;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank());
    }

    // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_calibration_games_remaining());
    }

    // optional uint32 general_seasonal_ranked_games_played = 95;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_games_played());
    }

    // optional uint32 general_seasonal_ranked_rank_peak = 96;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank_peak());
    }

    // optional uint32 solo_seasonal_ranked_rank = 98;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank());
    }

    // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_calibration_games_remaining());
    }

    // optional uint32 solo_seasonal_ranked_games_played = 100;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_games_played());
    }

    // optional uint32 solo_seasonal_ranked_rank_peak = 101;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank_peak());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 favorite_team_packed = 103;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->favorite_team_packed());
    }

    // optional bool solo_seasonal_rank_transferred = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 recent_report_time = 104;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_report_time());
    }

    // optional uint32 custom_game_disabled_until_date = 105;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_game_disabled_until_date());
    }

    // optional uint32 recent_win_time_1 = 106;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_win_time_1());
    }

    // optional uint32 recent_win_time_2 = 107;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_win_time_2());
    }

    // optional uint32 recent_win_time_3 = 108;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_win_time_3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountClient* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAGameAccountClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAGameAccountClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAGameAccountClient)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000008u) {
      xp_ = from.xp_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_skill_ = from.initial_skill_;
    }
    if (cached_has_bits & 0x00000040u) {
      leaver_count_ = from.leaver_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_priority_until_date_ = from.low_priority_until_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      prevent_text_chat_until_date_ = from.prevent_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      prevent_voice_until_date_ = from.prevent_voice_until_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_abandoned_game_date_ = from.last_abandoned_game_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      leaver_penalty_count_ = from.leaver_penalty_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      completed_game_streak_ = from.completed_game_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      teaching_ = from.teaching_;
    }
    if (cached_has_bits & 0x00004000u) {
      leadership_ = from.leadership_;
    }
    if (cached_has_bits & 0x00008000u) {
      friendly_ = from.friendly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      forgiving_ = from.forgiving_;
    }
    if (cached_has_bits & 0x00020000u) {
      account_disabled_until_date_ = from.account_disabled_until_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      account_disabled_count_ = from.account_disabled_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00100000u) {
      match_disabled_count_ = from.match_disabled_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      partner_account_type_ = from.partner_account_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      partner_account_state_ = from.partner_account_state_;
    }
    if (cached_has_bits & 0x00800000u) {
      shutdownlawterminatetimestamp_ = from.shutdownlawterminatetimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x02000000u) {
      competitive_rank_ = from.competitive_rank_;
    }
    if (cached_has_bits & 0x04000000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    if (cached_has_bits & 0x08000000u) {
      solo_competitive_rank_ = from.solo_competitive_rank_;
    }
    if (cached_has_bits & 0x10000000u) {
      solo_calibration_games_remaining_ = from.solo_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x20000000u) {
      recruitment_level_ = from.recruitment_level_;
    }
    if (cached_has_bits & 0x40000000u) {
      secondary_leaver_count_ = from.secondary_leaver_count_;
    }
    if (cached_has_bits & 0x80000000u) {
      last_secondary_abandoned_game_date_ = from.last_secondary_abandoned_game_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      casual_games_played_ = from.casual_games_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      solo_competitive_games_played_ = from.solo_competitive_games_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_competitive_games_played_ = from.party_competitive_games_played_;
    }
    if (cached_has_bits & 0x00000008u) {
      casual_1v1_games_played_ = from.casual_1v1_games_played_;
    }
    if (cached_has_bits & 0x00000010u) {
      competitive_team_games_played_ = from.competitive_team_games_played_;
    }
    if (cached_has_bits & 0x00000020u) {
      curr_all_hero_challenge_id_ = from.curr_all_hero_challenge_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      play_time_points_ = from.play_time_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      account_flags_ = from.account_flags_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      play_time_level_ = from.play_time_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_new_notifications_ = from.has_new_notifications_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_league_admin_ = from.is_league_admin_;
    }
    if (cached_has_bits & 0x00000800u) {
      player_behavior_report_old_data_ = from.player_behavior_report_old_data_;
    }
    if (cached_has_bits & 0x00001000u) {
      general_seasonal_rank_transferred_ = from.general_seasonal_rank_transferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      player_behavior_seq_num_last_report_ = from.player_behavior_seq_num_last_report_;
    }
    if (cached_has_bits & 0x00004000u) {
      player_behavior_score_last_report_ = from.player_behavior_score_last_report_;
    }
    if (cached_has_bits & 0x00008000u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tourney_recent_participation_date_ = from.tourney_recent_participation_date_;
    }
    if (cached_has_bits & 0x00020000u) {
      prevent_public_text_chat_until_date_ = from.prevent_public_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00080000u) {
      anchored_phone_number_id_ = from.anchored_phone_number_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      ranked_matchmaking_ban_until_date_ = from.ranked_matchmaking_ban_until_date_;
    }
    if (cached_has_bits & 0x00200000u) {
      recent_game_time_1_ = from.recent_game_time_1_;
    }
    if (cached_has_bits & 0x00400000u) {
      recent_game_time_2_ = from.recent_game_time_2_;
    }
    if (cached_has_bits & 0x00800000u) {
      recent_game_time_3_ = from.recent_game_time_3_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      general_seasonal_ranked_rank_ = from.general_seasonal_ranked_rank_;
    }
    if (cached_has_bits & 0x02000000u) {
      general_seasonal_ranked_calibration_games_remaining_ = from.general_seasonal_ranked_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x04000000u) {
      general_seasonal_ranked_games_played_ = from.general_seasonal_ranked_games_played_;
    }
    if (cached_has_bits & 0x08000000u) {
      general_seasonal_ranked_rank_peak_ = from.general_seasonal_ranked_rank_peak_;
    }
    if (cached_has_bits & 0x10000000u) {
      solo_seasonal_ranked_rank_ = from.solo_seasonal_ranked_rank_;
    }
    if (cached_has_bits & 0x20000000u) {
      solo_seasonal_ranked_calibration_games_remaining_ = from.solo_seasonal_ranked_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x40000000u) {
      solo_seasonal_ranked_games_played_ = from.solo_seasonal_ranked_games_played_;
    }
    if (cached_has_bits & 0x80000000u) {
      solo_seasonal_ranked_rank_peak_ = from.solo_seasonal_ranked_rank_peak_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    if (cached_has_bits & 0x00000002u) {
      solo_seasonal_rank_transferred_ = from.solo_seasonal_rank_transferred_;
    }
    if (cached_has_bits & 0x00000004u) {
      recent_report_time_ = from.recent_report_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_disabled_until_date_ = from.custom_game_disabled_until_date_;
    }
    if (cached_has_bits & 0x00000010u) {
      recent_win_time_1_ = from.recent_win_time_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      recent_win_time_2_ = from.recent_win_time_2_;
    }
    if (cached_has_bits & 0x00000040u) {
      recent_win_time_3_ = from.recent_win_time_3_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CSODOTAGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountClient::Swap(CSODOTAGameAccountClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAGameAccountClient::InternalSwap(CSODOTAGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(account_id_, other->account_id_);
  swap(wins_, other->wins_);
  swap(losses_, other->losses_);
  swap(xp_, other->xp_);
  swap(level_, other->level_);
  swap(initial_skill_, other->initial_skill_);
  swap(leaver_count_, other->leaver_count_);
  swap(low_priority_until_date_, other->low_priority_until_date_);
  swap(prevent_text_chat_until_date_, other->prevent_text_chat_until_date_);
  swap(prevent_voice_until_date_, other->prevent_voice_until_date_);
  swap(last_abandoned_game_date_, other->last_abandoned_game_date_);
  swap(leaver_penalty_count_, other->leaver_penalty_count_);
  swap(completed_game_streak_, other->completed_game_streak_);
  swap(teaching_, other->teaching_);
  swap(leadership_, other->leadership_);
  swap(friendly_, other->friendly_);
  swap(forgiving_, other->forgiving_);
  swap(account_disabled_until_date_, other->account_disabled_until_date_);
  swap(account_disabled_count_, other->account_disabled_count_);
  swap(match_disabled_until_date_, other->match_disabled_until_date_);
  swap(match_disabled_count_, other->match_disabled_count_);
  swap(partner_account_type_, other->partner_account_type_);
  swap(partner_account_state_, other->partner_account_state_);
  swap(shutdownlawterminatetimestamp_, other->shutdownlawterminatetimestamp_);
  swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  swap(competitive_rank_, other->competitive_rank_);
  swap(calibration_games_remaining_, other->calibration_games_remaining_);
  swap(solo_competitive_rank_, other->solo_competitive_rank_);
  swap(solo_calibration_games_remaining_, other->solo_calibration_games_remaining_);
  swap(recruitment_level_, other->recruitment_level_);
  swap(secondary_leaver_count_, other->secondary_leaver_count_);
  swap(last_secondary_abandoned_game_date_, other->last_secondary_abandoned_game_date_);
  swap(casual_games_played_, other->casual_games_played_);
  swap(solo_competitive_games_played_, other->solo_competitive_games_played_);
  swap(party_competitive_games_played_, other->party_competitive_games_played_);
  swap(casual_1v1_games_played_, other->casual_1v1_games_played_);
  swap(competitive_team_games_played_, other->competitive_team_games_played_);
  swap(curr_all_hero_challenge_id_, other->curr_all_hero_challenge_id_);
  swap(play_time_points_, other->play_time_points_);
  swap(account_flags_, other->account_flags_);
  swap(play_time_level_, other->play_time_level_);
  swap(has_new_notifications_, other->has_new_notifications_);
  swap(is_league_admin_, other->is_league_admin_);
  swap(player_behavior_report_old_data_, other->player_behavior_report_old_data_);
  swap(general_seasonal_rank_transferred_, other->general_seasonal_rank_transferred_);
  swap(player_behavior_seq_num_last_report_, other->player_behavior_seq_num_last_report_);
  swap(player_behavior_score_last_report_, other->player_behavior_score_last_report_);
  swap(tourney_skill_level_, other->tourney_skill_level_);
  swap(tourney_recent_participation_date_, other->tourney_recent_participation_date_);
  swap(prevent_public_text_chat_until_date_, other->prevent_public_text_chat_until_date_);
  swap(favorite_team_, other->favorite_team_);
  swap(anchored_phone_number_id_, other->anchored_phone_number_id_);
  swap(ranked_matchmaking_ban_until_date_, other->ranked_matchmaking_ban_until_date_);
  swap(recent_game_time_1_, other->recent_game_time_1_);
  swap(recent_game_time_2_, other->recent_game_time_2_);
  swap(recent_game_time_3_, other->recent_game_time_3_);
  swap(general_seasonal_ranked_rank_, other->general_seasonal_ranked_rank_);
  swap(general_seasonal_ranked_calibration_games_remaining_, other->general_seasonal_ranked_calibration_games_remaining_);
  swap(general_seasonal_ranked_games_played_, other->general_seasonal_ranked_games_played_);
  swap(general_seasonal_ranked_rank_peak_, other->general_seasonal_ranked_rank_peak_);
  swap(solo_seasonal_ranked_rank_, other->solo_seasonal_ranked_rank_);
  swap(solo_seasonal_ranked_calibration_games_remaining_, other->solo_seasonal_ranked_calibration_games_remaining_);
  swap(solo_seasonal_ranked_games_played_, other->solo_seasonal_ranked_games_played_);
  swap(solo_seasonal_ranked_rank_peak_, other->solo_seasonal_ranked_rank_peak_);
  swap(favorite_team_packed_, other->favorite_team_packed_);
  swap(solo_seasonal_rank_transferred_, other->solo_seasonal_rank_transferred_);
  swap(recent_report_time_, other->recent_report_time_);
  swap(custom_game_disabled_until_date_, other->custom_game_disabled_until_date_);
  swap(recent_win_time_1_, other->recent_win_time_1_);
  swap(recent_win_time_2_, other->recent_win_time_2_);
  swap(recent_win_time_3_, other->recent_win_time_3_);
}

::google::protobuf::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAGameAccountPlus::InitAsDefaultInstance() {
}
class CSODOTAGameAccountPlus::HasBitSetters {
 public:
  static void set_has_account_id(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_original_start_date(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_plus_flags(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_plus_status(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_prepaid_time_start(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_prepaid_time_balance(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_next_payment_date(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steam_agreement_id(CSODOTAGameAccountPlus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAGameAccountPlus::kAccountIdFieldNumber;
const int CSODOTAGameAccountPlus::kOriginalStartDateFieldNumber;
const int CSODOTAGameAccountPlus::kPlusFlagsFieldNumber;
const int CSODOTAGameAccountPlus::kPlusStatusFieldNumber;
const int CSODOTAGameAccountPlus::kPrepaidTimeStartFieldNumber;
const int CSODOTAGameAccountPlus::kPrepaidTimeBalanceFieldNumber;
const int CSODOTAGameAccountPlus::kNextPaymentDateFieldNumber;
const int CSODOTAGameAccountPlus::kSteamAgreementIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAGameAccountPlus::CSODOTAGameAccountPlus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAGameAccountPlus)
}
CSODOTAGameAccountPlus::CSODOTAGameAccountPlus(const CSODOTAGameAccountPlus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_payment_date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAGameAccountPlus)
}

void CSODOTAGameAccountPlus::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_payment_date_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
}

CSODOTAGameAccountPlus::~CSODOTAGameAccountPlus() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAGameAccountPlus)
  SharedDtor();
}

void CSODOTAGameAccountPlus::SharedDtor() {
}

void CSODOTAGameAccountPlus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAGameAccountPlus& CSODOTAGameAccountPlus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAGameAccountPlus_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAGameAccountPlus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAGameAccountPlus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_payment_date_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAGameAccountPlus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAGameAccountPlus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 original_start_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_original_start_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 plus_flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_plus_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 plus_status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_plus_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prepaid_time_start = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_prepaid_time_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prepaid_time_balance = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_prepaid_time_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 next_payment_date = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_next_payment_date(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 steam_agreement_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_steam_agreement_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAGameAccountPlus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAGameAccountPlus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 original_start_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_original_start_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 plus_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_plus_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 plus_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_plus_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prepaid_time_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_prepaid_time_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepaid_time_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prepaid_time_balance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_prepaid_time_balance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepaid_time_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 next_payment_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_next_payment_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &next_payment_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_agreement_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_steam_agreement_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_agreement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAGameAccountPlus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAGameAccountPlus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAGameAccountPlus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAGameAccountPlus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 original_start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->original_start_date(), output);
  }

  // optional uint32 plus_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->plus_flags(), output);
  }

  // optional uint32 plus_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plus_status(), output);
  }

  // optional uint32 prepaid_time_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prepaid_time_start(), output);
  }

  // optional uint32 prepaid_time_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prepaid_time_balance(), output);
  }

  // optional fixed32 next_payment_date = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->next_payment_date(), output);
  }

  // optional fixed64 steam_agreement_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->steam_agreement_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAGameAccountPlus)
}

::google::protobuf::uint8* CSODOTAGameAccountPlus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAGameAccountPlus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 original_start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->original_start_date(), target);
  }

  // optional uint32 plus_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->plus_flags(), target);
  }

  // optional uint32 plus_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plus_status(), target);
  }

  // optional uint32 prepaid_time_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prepaid_time_start(), target);
  }

  // optional uint32 prepaid_time_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prepaid_time_balance(), target);
  }

  // optional fixed32 next_payment_date = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->next_payment_date(), target);
  }

  // optional fixed64 steam_agreement_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->steam_agreement_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAGameAccountPlus)
  return target;
}

size_t CSODOTAGameAccountPlus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAGameAccountPlus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 original_start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_start_date());
    }

    // optional uint32 plus_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus_flags());
    }

    // optional uint32 plus_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus_status());
    }

    // optional uint32 prepaid_time_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepaid_time_start());
    }

    // optional uint32 prepaid_time_balance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepaid_time_balance());
    }

    // optional fixed64 steam_agreement_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed32 next_payment_date = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAGameAccountPlus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAGameAccountPlus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountPlus* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAGameAccountPlus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAGameAccountPlus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAGameAccountPlus)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountPlus::MergeFrom(const CSODOTAGameAccountPlus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAGameAccountPlus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      original_start_date_ = from.original_start_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      plus_flags_ = from.plus_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      plus_status_ = from.plus_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepaid_time_start_ = from.prepaid_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      prepaid_time_balance_ = from.prepaid_time_balance_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_agreement_id_ = from.steam_agreement_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      next_payment_date_ = from.next_payment_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAGameAccountPlus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAGameAccountPlus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountPlus::CopyFrom(const CSODOTAGameAccountPlus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAGameAccountPlus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountPlus::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountPlus::Swap(CSODOTAGameAccountPlus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAGameAccountPlus::InternalSwap(CSODOTAGameAccountPlus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(original_start_date_, other->original_start_date_);
  swap(plus_flags_, other->plus_flags_);
  swap(plus_status_, other->plus_status_);
  swap(prepaid_time_start_, other->prepaid_time_start_);
  swap(prepaid_time_balance_, other->prepaid_time_balance_);
  swap(steam_agreement_id_, other->steam_agreement_id_);
  swap(next_payment_date_, other->next_payment_date_);
}

::google::protobuf::Metadata CSODOTAGameAccountPlus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InitAsDefaultInstance() {
}
class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hero_badge_xp(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::kHeroIdFieldNumber;
const int CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::kHeroBadgeXpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}
CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_badge_xp_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_badge_xp_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
}

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::~CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  SharedDtor();
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedDtor() {
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_badge_xp_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_badge_xp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_badge_xp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_badge_xp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_badge_xp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_badge_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 hero_badge_xp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_badge_xp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}

::google::protobuf::uint8* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 hero_badge_xp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_badge_xp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 hero_badge_xp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_badge_xp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_badge_xp_ = from.hero_badge_xp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::Swap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(hero_badge_xp_, other->hero_badge_xp_);
}

::google::protobuf::Metadata CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyPlayerPlusSubscriptionData::InitAsDefaultInstance() {
}
class CMsgLobbyPlayerPlusSubscriptionData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyPlayerPlusSubscriptionData::kHeroBadgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
}
CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(const CMsgLobbyPlayerPlusSubscriptionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hero_badges_(from.hero_badges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
}

void CMsgLobbyPlayerPlusSubscriptionData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgLobbyPlayerPlusSubscriptionData::~CMsgLobbyPlayerPlusSubscriptionData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  SharedDtor();
}

void CMsgLobbyPlayerPlusSubscriptionData::SharedDtor() {
}

void CMsgLobbyPlayerPlusSubscriptionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyPlayerPlusSubscriptionData& CMsgLobbyPlayerPlusSubscriptionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyPlayerPlusSubscriptionData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyPlayerPlusSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_badges_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyPlayerPlusSubscriptionData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyPlayerPlusSubscriptionData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalParse;
          object = msg->add_hero_badges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyPlayerPlusSubscriptionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hero_badges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyPlayerPlusSubscriptionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_badges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->hero_badges(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
}

::google::protobuf::uint8* CMsgLobbyPlayerPlusSubscriptionData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_badges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->hero_badges(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hero_badges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hero_badges(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlayerPlusSubscriptionData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyPlayerPlusSubscriptionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_badges_.MergeFrom(from.hero_badges_);
}

void CMsgLobbyPlayerPlusSubscriptionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlayerPlusSubscriptionData::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData::Swap(CMsgLobbyPlayerPlusSubscriptionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyPlayerPlusSubscriptionData::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&hero_badges_)->InternalSwap(CastToBase(&other->hero_badges_));
}

::google::protobuf::Metadata CMsgLobbyPlayerPlusSubscriptionData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyEventPoints_ChatWheelMessageRange::InitAsDefaultInstance() {
}
class CMsgLobbyEventPoints_ChatWheelMessageRange::HasBitSetters {
 public:
  static void set_has_message_id_start(CMsgLobbyEventPoints_ChatWheelMessageRange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_message_id_end(CMsgLobbyEventPoints_ChatWheelMessageRange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints_ChatWheelMessageRange::kMessageIdStartFieldNumber;
const int CMsgLobbyEventPoints_ChatWheelMessageRange::kMessageIdEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}
CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange(const CMsgLobbyEventPoints_ChatWheelMessageRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_id_start_, &from.message_id_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedCtor() {
  ::memset(&message_id_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_end_) -
      reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
}

CMsgLobbyEventPoints_ChatWheelMessageRange::~CMsgLobbyEventPoints_ChatWheelMessageRange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  SharedDtor();
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedDtor() {
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyEventPoints_ChatWheelMessageRange& CMsgLobbyEventPoints_ChatWheelMessageRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyEventPoints_ChatWheelMessageRange_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyEventPoints_ChatWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&message_id_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_end_) -
        reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyEventPoints_ChatWheelMessageRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyEventPoints_ChatWheelMessageRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id_start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_message_id_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 message_id_end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_message_id_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyEventPoints_ChatWheelMessageRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_message_id_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_id_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_message_id_end(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyEventPoints_ChatWheelMessageRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id_start(), output);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->message_id_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_ChatWheelMessageRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id_start(), target);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->message_id_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return target;
}

size_t CMsgLobbyEventPoints_ChatWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id_start());
    }

    // optional uint32 message_id_end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id_end());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_ChatWheelMessageRange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyEventPoints_ChatWheelMessageRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_start_ = from.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_end_ = from.message_id_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_ChatWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::Swap(CMsgLobbyEventPoints_ChatWheelMessageRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::InternalSwap(CMsgLobbyEventPoints_ChatWheelMessageRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_id_start_, other->message_id_start_);
  swap(message_id_end_, other->message_id_end_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_ChatWheelMessageRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyEventPoints_PeriodicResourceValues::InitAsDefaultInstance() {
}
class CMsgLobbyEventPoints_PeriodicResourceValues::HasBitSetters {
 public:
  static void set_has_remaining(CMsgLobbyEventPoints_PeriodicResourceValues* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max(CMsgLobbyEventPoints_PeriodicResourceValues* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints_PeriodicResourceValues::kRemainingFieldNumber;
const int CMsgLobbyEventPoints_PeriodicResourceValues::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints_PeriodicResourceValues::CMsgLobbyEventPoints_PeriodicResourceValues()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
}
CMsgLobbyEventPoints_PeriodicResourceValues::CMsgLobbyEventPoints_PeriodicResourceValues(const CMsgLobbyEventPoints_PeriodicResourceValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remaining_, &from.remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
}

void CMsgLobbyEventPoints_PeriodicResourceValues::SharedCtor() {
  ::memset(&remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
}

CMsgLobbyEventPoints_PeriodicResourceValues::~CMsgLobbyEventPoints_PeriodicResourceValues() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  SharedDtor();
}

void CMsgLobbyEventPoints_PeriodicResourceValues::SharedDtor() {
}

void CMsgLobbyEventPoints_PeriodicResourceValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyEventPoints_PeriodicResourceValues& CMsgLobbyEventPoints_PeriodicResourceValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyEventPoints_PeriodicResourceValues_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyEventPoints_PeriodicResourceValues::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyEventPoints_PeriodicResourceValues*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 remaining = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyEventPoints_PeriodicResourceValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remaining = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyEventPoints_PeriodicResourceValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaining(), output);
  }

  // optional uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_PeriodicResourceValues::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaining(), target);
  }

  // optional uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  return target;
}

size_t CMsgLobbyEventPoints_PeriodicResourceValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 remaining = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaining());
    }

    // optional uint32 max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_PeriodicResourceValues* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyEventPoints_PeriodicResourceValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      remaining_ = from.remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_PeriodicResourceValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_PeriodicResourceValues::CopyFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_PeriodicResourceValues::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_PeriodicResourceValues::Swap(CMsgLobbyEventPoints_PeriodicResourceValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_PeriodicResourceValues::InternalSwap(CMsgLobbyEventPoints_PeriodicResourceValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remaining_, other->remaining_);
  swap(max_, other->max_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_PeriodicResourceValues::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyEventPoints_AccountPoints::InitAsDefaultInstance() {
  ::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance.get_mutable()->plus_subscription_data_ = const_cast< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData*>(
      ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData::internal_default_instance());
  ::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance.get_mutable()->wager_tokens_ = const_cast< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::internal_default_instance());
  ::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance.get_mutable()->rank_wager_tokens_ = const_cast< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::internal_default_instance());
  ::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance.get_mutable()->tip_tokens_ = const_cast< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::internal_default_instance());
  ::proto::dota::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance.get_mutable()->periodic_point_adjustments_ = const_cast< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::internal_default_instance());
}
class CMsgLobbyEventPoints_AccountPoints::HasBitSetters {
 public:
  static void set_has_account_id(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_normal_points(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_premium_points(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_owned(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_favorite_team(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_favorite_team_level(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_points_held(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_premium_points_held(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_favorite_team_foil_level(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_active_effects_mask(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData& plus_subscription_data(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_plus_subscription_data(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_wager_tokens(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& rank_wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_rank_wager_tokens(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& tip_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_tip_tokens(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tip_amount(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& periodic_point_adjustments(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_periodic_point_adjustments(CMsgLobbyEventPoints_AccountPoints* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData&
CMsgLobbyEventPoints_AccountPoints::HasBitSetters::plus_subscription_data(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->plus_subscription_data_;
}
const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::HasBitSetters::wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->wager_tokens_;
}
const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::HasBitSetters::rank_wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->rank_wager_tokens_;
}
const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::HasBitSetters::tip_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->tip_tokens_;
}
const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::HasBitSetters::periodic_point_adjustments(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->periodic_point_adjustments_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints_AccountPoints::kAccountIdFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kNormalPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kOwnedFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFoilLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kActiveEffectsMaskFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kUnlockedChatWheelMessageRangesFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPlusSubscriptionDataFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kWagerTokensFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kRankWagerTokensFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kTipTokensFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kTipAmountFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPeriodicPointAdjustmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}
CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      unlocked_chat_wheel_message_ranges_(from.unlocked_chat_wheel_message_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plus_subscription_data()) {
    plus_subscription_data_ = new ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData(*from.plus_subscription_data_);
  } else {
    plus_subscription_data_ = nullptr;
  }
  if (from.has_wager_tokens()) {
    wager_tokens_ = new ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues(*from.wager_tokens_);
  } else {
    wager_tokens_ = nullptr;
  }
  if (from.has_rank_wager_tokens()) {
    rank_wager_tokens_ = new ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues(*from.rank_wager_tokens_);
  } else {
    rank_wager_tokens_ = nullptr;
  }
  if (from.has_tip_tokens()) {
    tip_tokens_ = new ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues(*from.tip_tokens_);
  } else {
    tip_tokens_ = nullptr;
  }
  if (from.has_periodic_point_adjustments()) {
    periodic_point_adjustments_ = new ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues(*from.periodic_point_adjustments_);
  } else {
    periodic_point_adjustments_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(tip_amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&plus_subscription_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tip_amount_) -
      reinterpret_cast<char*>(&plus_subscription_data_)) + sizeof(tip_amount_));
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
  if (this != internal_default_instance()) delete plus_subscription_data_;
  if (this != internal_default_instance()) delete wager_tokens_;
  if (this != internal_default_instance()) delete rank_wager_tokens_;
  if (this != internal_default_instance()) delete tip_tokens_;
  if (this != internal_default_instance()) delete periodic_point_adjustments_;
}

void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints_AccountPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyEventPoints_AccountPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyEventPoints_AccountPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlocked_chat_wheel_message_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(plus_subscription_data_ != nullptr);
      plus_subscription_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wager_tokens_ != nullptr);
      wager_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rank_wager_tokens_ != nullptr);
      rank_wager_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tip_tokens_ != nullptr);
      tip_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(periodic_point_adjustments_ != nullptr);
      periodic_point_adjustments_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&premium_points_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(premium_points_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&owned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tip_amount_) -
        reinterpret_cast<char*>(&owned_)) + sizeof(tip_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyEventPoints_AccountPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyEventPoints_AccountPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 normal_points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_normal_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 premium_points = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_premium_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool owned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_owned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_favorite_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team_level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_favorite_team_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 points_held = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_points_held(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 premium_points_held = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_premium_points_held(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team_foil_level = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_favorite_team_foil_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 active_effects_mask = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_active_effects_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange::_InternalParse;
          object = msg->add_unlocked_chat_wheel_message_ranges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData::_InternalParse;
        object = msg->mutable_plus_subscription_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse;
        object = msg->mutable_wager_tokens();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse;
        object = msg->mutable_rank_wager_tokens();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse;
        object = msg->mutable_tip_tokens();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 tip_amount = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_tip_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse;
        object = msg->mutable_periodic_point_adjustments();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyEventPoints_AccountPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 normal_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_normal_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_premium_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_owned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_favorite_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_favorite_team_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_held = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_points_held(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_points_held = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_premium_points_held(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team_foil_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_favorite_team_foil_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_foil_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 active_effects_mask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_active_effects_mask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_effects_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unlocked_chat_wheel_message_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plus_subscription_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wager_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rank_wager_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tip_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tip_amount = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_tip_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_periodic_point_adjustments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_points(), output);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_points(), output);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favorite_team(), output);
  }

  // optional uint32 favorite_team_level = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->favorite_team_level(), output);
  }

  // optional uint32 points_held = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->points_held(), output);
  }

  // optional uint32 premium_points_held = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->premium_points_held(), output);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->favorite_team_foil_level(), output);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->active_effects_mask(), output);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unlocked_chat_wheel_message_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->unlocked_chat_wheel_message_ranges(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::plus_subscription_data(this), output);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::wager_tokens(this), output);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::rank_wager_tokens(this), output);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::tip_tokens(this), output);
  }

  // optional uint32 tip_amount = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tip_amount(), output);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::periodic_point_adjustments(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_AccountPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_points(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favorite_team(), target);
  }

  // optional uint32 favorite_team_level = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->favorite_team_level(), target);
  }

  // optional uint32 points_held = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->points_held(), target);
  }

  // optional uint32 premium_points_held = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->premium_points_held(), target);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->favorite_team_foil_level(), target);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->active_effects_mask(), target);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unlocked_chat_wheel_message_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->unlocked_chat_wheel_message_ranges(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::plus_subscription_data(this), target);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::wager_tokens(this), target);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::rank_wager_tokens(this), target);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::tip_tokens(this), target);
  }

  // optional uint32 tip_amount = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tip_amount(), target);
  }

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::periodic_point_adjustments(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return target;
}

size_t CMsgLobbyEventPoints_AccountPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->unlocked_chat_wheel_message_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unlocked_chat_wheel_message_ranges(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *plus_subscription_data_);
    }

    // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wager_tokens_);
    }

    // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rank_wager_tokens_);
    }

    // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tip_tokens_);
    }

    // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *periodic_point_adjustments_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 normal_points = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 premium_points = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool owned = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 favorite_team = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 favorite_team_level = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_level());
    }

    // optional uint32 points_held = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_points_held = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points_held());
    }

    // optional uint64 active_effects_mask = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_effects_mask());
    }

    // optional uint32 favorite_team_foil_level = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_foil_level());
    }

    // optional uint32 tip_amount = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_AccountPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyEventPoints_AccountPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints.AccountPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints.AccountPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlocked_chat_wheel_message_ranges_.MergeFrom(from.unlocked_chat_wheel_message_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_plus_subscription_data()->::proto::dota::CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(from.plus_subscription_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wager_tokens()->::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from.wager_tokens());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rank_wager_tokens()->::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from.rank_wager_tokens());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tip_tokens()->::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from.tip_tokens());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_periodic_point_adjustments()->::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from.periodic_point_adjustments());
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      premium_points_ = from.premium_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      owned_ = from.owned_;
    }
    if (cached_has_bits & 0x00000200u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00000400u) {
      favorite_team_level_ = from.favorite_team_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      points_held_ = from.points_held_;
    }
    if (cached_has_bits & 0x00001000u) {
      premium_points_held_ = from.premium_points_held_;
    }
    if (cached_has_bits & 0x00002000u) {
      active_effects_mask_ = from.active_effects_mask_;
    }
    if (cached_has_bits & 0x00004000u) {
      favorite_team_foil_level_ = from.favorite_team_foil_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      tip_amount_ = from.tip_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_AccountPoints::Swap(CMsgLobbyEventPoints_AccountPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_AccountPoints::InternalSwap(CMsgLobbyEventPoints_AccountPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&unlocked_chat_wheel_message_ranges_)->InternalSwap(CastToBase(&other->unlocked_chat_wheel_message_ranges_));
  swap(plus_subscription_data_, other->plus_subscription_data_);
  swap(wager_tokens_, other->wager_tokens_);
  swap(rank_wager_tokens_, other->rank_wager_tokens_);
  swap(tip_tokens_, other->tip_tokens_);
  swap(periodic_point_adjustments_, other->periodic_point_adjustments_);
  swap(account_id_, other->account_id_);
  swap(normal_points_, other->normal_points_);
  swap(premium_points_, other->premium_points_);
  swap(owned_, other->owned_);
  swap(favorite_team_, other->favorite_team_);
  swap(favorite_team_level_, other->favorite_team_level_);
  swap(points_held_, other->points_held_);
  swap(premium_points_held_, other->premium_points_held_);
  swap(active_effects_mask_, other->active_effects_mask_);
  swap(favorite_team_foil_level_, other->favorite_team_foil_level_);
  swap(tip_amount_, other->tip_amount_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyEventPoints::InitAsDefaultInstance() {
}
class CMsgLobbyEventPoints::HasBitSetters {
 public:
  static void set_has_event_id(CMsgLobbyEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints::kEventIdFieldNumber;
const int CMsgLobbyEventPoints::kAccountPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints::CMsgLobbyEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints)
}
CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_points_(from.account_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  event_id_ = 0u;
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints::SharedDtor() {
}

void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyEventPoints& CMsgLobbyEventPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyEventPoints_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_points_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyEventPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyEventPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgLobbyEventPoints_AccountPoints::_InternalParse;
          object = msg->add_account_points();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_account_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->account_points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->account_points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints)
  return target;
}

size_t CMsgLobbyEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->account_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->account_points(static_cast<int>(i)));
    }
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints::MergeFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_points_.MergeFrom(from.account_points_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgLobbyEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints::Swap(CMsgLobbyEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints::InternalSwap(CMsgLobbyEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&account_points_)->InternalSwap(CastToBase(&other->account_points_));
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLocalServerFakeLobbyData::InitAsDefaultInstance() {
}
class CMsgLocalServerFakeLobbyData::HasBitSetters {
 public:
  static void set_has_account_id(CMsgLocalServerFakeLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_plus_subscriber(CMsgLocalServerFakeLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary_event_id(CMsgLocalServerFakeLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_favorite_team(CMsgLocalServerFakeLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_favorite_team_quality(CMsgLocalServerFakeLobbyData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLocalServerFakeLobbyData::kAccountIdFieldNumber;
const int CMsgLocalServerFakeLobbyData::kEventPointsFieldNumber;
const int CMsgLocalServerFakeLobbyData::kIsPlusSubscriberFieldNumber;
const int CMsgLocalServerFakeLobbyData::kPrimaryEventIdFieldNumber;
const int CMsgLocalServerFakeLobbyData::kFavoriteTeamFieldNumber;
const int CMsgLocalServerFakeLobbyData::kFavoriteTeamQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLocalServerFakeLobbyData)
}
CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(const CMsgLocalServerFakeLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_points_(from.event_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_quality_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(favorite_team_quality_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLocalServerFakeLobbyData)
}

void CMsgLocalServerFakeLobbyData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favorite_team_quality_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(favorite_team_quality_));
}

CMsgLocalServerFakeLobbyData::~CMsgLocalServerFakeLobbyData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLocalServerFakeLobbyData)
  SharedDtor();
}

void CMsgLocalServerFakeLobbyData::SharedDtor() {
}

void CMsgLocalServerFakeLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLocalServerFakeLobbyData& CMsgLocalServerFakeLobbyData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLocalServerFakeLobbyData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLocalServerFakeLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLocalServerFakeLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorite_team_quality_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(favorite_team_quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLocalServerFakeLobbyData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLocalServerFakeLobbyData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgLobbyEventPoints::_InternalParse;
          object = msg->add_event_points();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional bool is_plus_subscriber = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_plus_subscriber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 primary_event_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_primary_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_favorite_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorite_team_quality = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_favorite_team_quality(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLocalServerFakeLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLocalServerFakeLobbyData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plus_subscriber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_plus_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plus_subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 primary_event_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_primary_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primary_event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_favorite_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team_quality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_favorite_team_quality(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLocalServerFakeLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLocalServerFakeLobbyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLocalServerFakeLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLocalServerFakeLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->event_points(static_cast<int>(i)),
      output);
  }

  // optional bool is_plus_subscriber = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_plus_subscriber(), output);
  }

  // optional uint32 primary_event_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->primary_event_id(), output);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favorite_team(), output);
  }

  // optional uint32 favorite_team_quality = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->favorite_team_quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLocalServerFakeLobbyData)
}

::google::protobuf::uint8* CMsgLocalServerFakeLobbyData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLocalServerFakeLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->event_points(static_cast<int>(i)), target);
  }

  // optional bool is_plus_subscriber = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_plus_subscriber(), target);
  }

  // optional uint32 primary_event_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->primary_event_id(), target);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favorite_team(), target);
  }

  // optional uint32 favorite_team_quality = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->favorite_team_quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLocalServerFakeLobbyData)
  return target;
}

size_t CMsgLocalServerFakeLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLocalServerFakeLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->event_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_points(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool is_plus_subscriber = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 primary_event_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primary_event_id());
    }

    // optional uint32 favorite_team = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 favorite_team_quality = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_quality());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLocalServerFakeLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLocalServerFakeLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLocalServerFakeLobbyData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLocalServerFakeLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLocalServerFakeLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLocalServerFakeLobbyData)
    MergeFrom(*source);
  }
}

void CMsgLocalServerFakeLobbyData::MergeFrom(const CMsgLocalServerFakeLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLocalServerFakeLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_points_.MergeFrom(from.event_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000004u) {
      primary_event_id_ = from.primary_event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      favorite_team_quality_ = from.favorite_team_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLocalServerFakeLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLocalServerFakeLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLocalServerFakeLobbyData::CopyFrom(const CMsgLocalServerFakeLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLocalServerFakeLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLocalServerFakeLobbyData::IsInitialized() const {
  return true;
}

void CMsgLocalServerFakeLobbyData::Swap(CMsgLocalServerFakeLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLocalServerFakeLobbyData::InternalSwap(CMsgLocalServerFakeLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_points_)->InternalSwap(CastToBase(&other->event_points_));
  swap(account_id_, other->account_id_);
  swap(is_plus_subscriber_, other->is_plus_subscriber_);
  swap(primary_event_id_, other->primary_event_id_);
  swap(favorite_team_, other->favorite_team_);
  swap(favorite_team_quality_, other->favorite_team_quality_);
}

::google::protobuf::Metadata CMsgLocalServerFakeLobbyData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBattleCupVictory::InitAsDefaultInstance() {
}
class CMsgBattleCupVictory::HasBitSetters {
 public:
  static void set_has_account_id(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_win_date(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_valid_until(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_skill_level(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tournament_id(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_division_id(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_id(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_streak(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_trophy_id(CMsgBattleCupVictory* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBattleCupVictory::kAccountIdFieldNumber;
const int CMsgBattleCupVictory::kWinDateFieldNumber;
const int CMsgBattleCupVictory::kValidUntilFieldNumber;
const int CMsgBattleCupVictory::kSkillLevelFieldNumber;
const int CMsgBattleCupVictory::kTournamentIdFieldNumber;
const int CMsgBattleCupVictory::kDivisionIdFieldNumber;
const int CMsgBattleCupVictory::kTeamIdFieldNumber;
const int CMsgBattleCupVictory::kStreakFieldNumber;
const int CMsgBattleCupVictory::kTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBattleCupVictory::CMsgBattleCupVictory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBattleCupVictory)
}
CMsgBattleCupVictory::CMsgBattleCupVictory(const CMsgBattleCupVictory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBattleCupVictory)
}

void CMsgBattleCupVictory::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trophy_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
}

CMsgBattleCupVictory::~CMsgBattleCupVictory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBattleCupVictory)
  SharedDtor();
}

void CMsgBattleCupVictory::SharedDtor() {
}

void CMsgBattleCupVictory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBattleCupVictory& CMsgBattleCupVictory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBattleCupVictory_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgBattleCupVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBattleCupVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streak_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(streak_));
  }
  trophy_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBattleCupVictory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBattleCupVictory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 win_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_win_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 valid_until = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_valid_until(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 division_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 streak = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 trophy_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBattleCupVictory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBattleCupVictory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_win_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valid_until = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_valid_until(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 streak = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBattleCupVictory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBattleCupVictory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBattleCupVictory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBattleCupVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->win_date(), output);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_until(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tournament_id(), output);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->division_id(), output);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_id(), output);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->streak(), output);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBattleCupVictory)
}

::google::protobuf::uint8* CMsgBattleCupVictory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBattleCupVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->win_date(), target);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_until(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tournament_id(), target);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->division_id(), target);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_id(), target);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->streak(), target);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBattleCupVictory)
  return target;
}

size_t CMsgBattleCupVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBattleCupVictory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 win_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_date());
    }

    // optional uint32 valid_until = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_until());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 tournament_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 team_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 streak = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak());
    }

  }
  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trophy_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBattleCupVictory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBattleCupVictory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBattleCupVictory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBattleCupVictory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBattleCupVictory)
    MergeFrom(*source);
  }
}

void CMsgBattleCupVictory::MergeFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_date_ = from.win_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_until_ = from.valid_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_trophy_id(from.trophy_id());
  }
}

void CMsgBattleCupVictory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBattleCupVictory::CopyFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleCupVictory::IsInitialized() const {
  return true;
}

void CMsgBattleCupVictory::Swap(CMsgBattleCupVictory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBattleCupVictory::InternalSwap(CMsgBattleCupVictory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(win_date_, other->win_date_);
  swap(valid_until_, other->valid_until_);
  swap(skill_level_, other->skill_level_);
  swap(tournament_id_, other->tournament_id_);
  swap(division_id_, other->division_id_);
  swap(team_id_, other->team_id_);
  swap(streak_, other->streak_);
  swap(trophy_id_, other->trophy_id_);
}

::google::protobuf::Metadata CMsgBattleCupVictory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyBattleCupVictoryList::InitAsDefaultInstance() {
}
class CMsgLobbyBattleCupVictoryList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyBattleCupVictoryList::kWinnersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyBattleCupVictoryList)
}
CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      winners_(from.winners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyBattleCupVictoryList)
}

void CMsgLobbyBattleCupVictoryList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgLobbyBattleCupVictoryList::~CMsgLobbyBattleCupVictoryList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyBattleCupVictoryList)
  SharedDtor();
}

void CMsgLobbyBattleCupVictoryList::SharedDtor() {
}

void CMsgLobbyBattleCupVictoryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyBattleCupVictoryList& CMsgLobbyBattleCupVictoryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyBattleCupVictoryList_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyBattleCupVictoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winners_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyBattleCupVictoryList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyBattleCupVictoryList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgBattleCupVictory::_InternalParse;
          object = msg->add_winners();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyBattleCupVictoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_winners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyBattleCupVictoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyBattleCupVictoryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyBattleCupVictoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->winners_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->winners(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyBattleCupVictoryList)
}

::google::protobuf::uint8* CMsgLobbyBattleCupVictoryList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->winners_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->winners(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyBattleCupVictoryList)
  return target;
}

size_t CMsgLobbyBattleCupVictoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->winners_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->winners(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyBattleCupVictoryList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyBattleCupVictoryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyBattleCupVictoryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyBattleCupVictoryList)
    MergeFrom(*source);
  }
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winners_.MergeFrom(from.winners_);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyBattleCupVictoryList::IsInitialized() const {
  return true;
}

void CMsgLobbyBattleCupVictoryList::Swap(CMsgLobbyBattleCupVictoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyBattleCupVictoryList::InternalSwap(CMsgLobbyBattleCupVictoryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&winners_)->InternalSwap(CastToBase(&other->winners_));
}

::google::protobuf::Metadata CMsgLobbyBattleCupVictoryList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABroadcastNotification::InitAsDefaultInstance() {
}
class CMsgDOTABroadcastNotification::HasBitSetters {
 public:
  static void set_has_message(CMsgDOTABroadcastNotification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABroadcastNotification::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABroadcastNotification)
}
CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABroadcastNotification)
  SharedDtor();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABroadcastNotification& CMsgDOTABroadcastNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABroadcastNotification_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABroadcastNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABroadcastNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABroadcastNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABroadcastNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTABroadcastNotification.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABroadcastNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABroadcastNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTABroadcastNotification.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABroadcastNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABroadcastNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABroadcastNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABroadcastNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastNotification.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABroadcastNotification)
}

::google::protobuf::uint8* CMsgDOTABroadcastNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABroadcastNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastNotification.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABroadcastNotification)
  return target;
}

size_t CMsgDOTABroadcastNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABroadcastNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABroadcastNotification* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABroadcastNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABroadcastNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABroadcastNotification)
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {
  return true;
}

void CMsgDOTABroadcastNotification::Swap(CMsgDOTABroadcastNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABroadcastNotification::InternalSwap(CMsgDOTABroadcastNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CProtoItemHeroStatue::InitAsDefaultInstance() {
}
class CProtoItemHeroStatue::HasBitSetters {
 public:
  static void set_has_hero_id(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_status_effect_index(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sequence_name(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cycle(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_inscription(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tournament_drop(CProtoItemHeroStatue* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProtoItemHeroStatue::kHeroIdFieldNumber;
const int CProtoItemHeroStatue::kStatusEffectIndexFieldNumber;
const int CProtoItemHeroStatue::kSequenceNameFieldNumber;
const int CProtoItemHeroStatue::kCycleFieldNumber;
const int CProtoItemHeroStatue::kWearableFieldNumber;
const int CProtoItemHeroStatue::kInscriptionFieldNumber;
const int CProtoItemHeroStatue::kStyleFieldNumber;
const int CProtoItemHeroStatue::kTournamentDropFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProtoItemHeroStatue::CProtoItemHeroStatue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CProtoItemHeroStatue)
}
CProtoItemHeroStatue::CProtoItemHeroStatue(const CProtoItemHeroStatue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_name()) {
    sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
  }
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inscription()) {
    inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_drop_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto.base);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tournament_drop_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
}

CProtoItemHeroStatue::~CProtoItemHeroStatue() {
  // @@protoc_insertion_point(destructor:proto.dota.CProtoItemHeroStatue)
  SharedDtor();
}

void CProtoItemHeroStatue::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemHeroStatue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CProtoItemHeroStatue& CProtoItemHeroStatue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CProtoItemHeroStatue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CProtoItemHeroStatue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wearable_.Clear();
  style_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      inscription_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_drop_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CProtoItemHeroStatue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CProtoItemHeroStatue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_status_effect_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string sequence_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CProtoItemHeroStatue.sequence_name");
        object = msg->mutable_sequence_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float cycle = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_cycle(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_wearable(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_wearable();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string inscription = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CProtoItemHeroStatue.inscription");
        object = msg->mutable_inscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 style = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_style(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_style();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool tournament_drop = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_tournament_drop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CProtoItemHeroStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CProtoItemHeroStatue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_status_effect_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemHeroStatue.sequence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_cycle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_wearable())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), static_cast<int>(this->inscription().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemHeroStatue.inscription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_style())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tournament_drop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_tournament_drop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CProtoItemHeroStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CProtoItemHeroStatue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CProtoItemHeroStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CProtoItemHeroStatue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->wearable_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), static_cast<int>(this->inscription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->style_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  // optional bool tournament_drop = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tournament_drop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CProtoItemHeroStatue)
}

::google::protobuf::uint8* CProtoItemHeroStatue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CProtoItemHeroStatue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->wearable_, target);

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), static_cast<int>(this->inscription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->style_, target);

  // optional bool tournament_drop = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tournament_drop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CProtoItemHeroStatue)
  return target;
}

size_t CProtoItemHeroStatue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CProtoItemHeroStatue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->style_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string sequence_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional string inscription = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional float cycle = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool tournament_drop = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemHeroStatue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemHeroStatue* source =
      ::google::protobuf::DynamicCastToGenerated<CProtoItemHeroStatue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CProtoItemHeroStatue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CProtoItemHeroStatue)
    MergeFrom(*source);
  }
}

void CProtoItemHeroStatue::MergeFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tournament_drop_ = from.tournament_drop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemHeroStatue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemHeroStatue::CopyFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemHeroStatue::IsInitialized() const {
  return true;
}

void CProtoItemHeroStatue::Swap(CProtoItemHeroStatue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemHeroStatue::InternalSwap(CProtoItemHeroStatue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inscription_.Swap(&other->inscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hero_id_, other->hero_id_);
  swap(status_effect_index_, other->status_effect_index_);
  swap(cycle_, other->cycle_);
  swap(tournament_drop_, other->tournament_drop_);
}

::google::protobuf::Metadata CProtoItemHeroStatue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CProtoItemTeamShowcase::InitAsDefaultInstance() {
}
class CProtoItemTeamShowcase::HasBitSetters {
 public:
  static void set_has_hero_id(CProtoItemTeamShowcase* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_status_effect_index(CProtoItemTeamShowcase* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sequence_name(CProtoItemTeamShowcase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cycle(CProtoItemTeamShowcase* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_inscription(CProtoItemTeamShowcase* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProtoItemTeamShowcase::kHeroIdFieldNumber;
const int CProtoItemTeamShowcase::kStatusEffectIndexFieldNumber;
const int CProtoItemTeamShowcase::kSequenceNameFieldNumber;
const int CProtoItemTeamShowcase::kCycleFieldNumber;
const int CProtoItemTeamShowcase::kWearableFieldNumber;
const int CProtoItemTeamShowcase::kInscriptionFieldNumber;
const int CProtoItemTeamShowcase::kStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProtoItemTeamShowcase::CProtoItemTeamShowcase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CProtoItemTeamShowcase)
}
CProtoItemTeamShowcase::CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_name()) {
    sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
  }
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inscription()) {
    inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto.base);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
}

CProtoItemTeamShowcase::~CProtoItemTeamShowcase() {
  // @@protoc_insertion_point(destructor:proto.dota.CProtoItemTeamShowcase)
  SharedDtor();
}

void CProtoItemTeamShowcase::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemTeamShowcase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CProtoItemTeamShowcase& CProtoItemTeamShowcase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CProtoItemTeamShowcase_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CProtoItemTeamShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CProtoItemTeamShowcase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wearable_.Clear();
  style_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      inscription_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cycle_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CProtoItemTeamShowcase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CProtoItemTeamShowcase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_status_effect_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string sequence_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CProtoItemTeamShowcase.sequence_name");
        object = msg->mutable_sequence_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float cycle = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_cycle(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_wearable(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_wearable();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string inscription = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CProtoItemTeamShowcase.inscription");
        object = msg->mutable_inscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 style = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_style(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_style();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CProtoItemTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CProtoItemTeamShowcase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_status_effect_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemTeamShowcase.sequence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_cycle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_wearable())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), static_cast<int>(this->inscription().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemTeamShowcase.inscription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_style())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CProtoItemTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CProtoItemTeamShowcase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CProtoItemTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CProtoItemTeamShowcase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->wearable_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), static_cast<int>(this->inscription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->style_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CProtoItemTeamShowcase)
}

::google::protobuf::uint8* CProtoItemTeamShowcase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CProtoItemTeamShowcase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), static_cast<int>(this->sequence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->wearable_, target);

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), static_cast<int>(this->inscription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->style_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CProtoItemTeamShowcase)
  return target;
}

size_t CProtoItemTeamShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CProtoItemTeamShowcase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->style_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string sequence_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional string inscription = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional float cycle = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemTeamShowcase* source =
      ::google::protobuf::DynamicCastToGenerated<CProtoItemTeamShowcase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CProtoItemTeamShowcase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CProtoItemTeamShowcase)
    MergeFrom(*source);
  }
}

void CProtoItemTeamShowcase::MergeFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemTeamShowcase::CopyFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemTeamShowcase::IsInitialized() const {
  return true;
}

void CProtoItemTeamShowcase::Swap(CProtoItemTeamShowcase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemTeamShowcase::InternalSwap(CProtoItemTeamShowcase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inscription_.Swap(&other->inscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hero_id_, other->hero_id_);
  swap(status_effect_index_, other->status_effect_index_);
  swap(cycle_, other->cycle_);
}

::google::protobuf::Metadata CProtoItemTeamShowcase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMatchPlayerAbilityUpgrade::InitAsDefaultInstance() {
}
class CMatchPlayerAbilityUpgrade::HasBitSetters {
 public:
  static void set_has_ability(CMatchPlayerAbilityUpgrade* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time(CMatchPlayerAbilityUpgrade* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchPlayerAbilityUpgrade::kAbilityFieldNumber;
const int CMatchPlayerAbilityUpgrade::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchPlayerAbilityUpgrade)
}
CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_, &from.ability_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&ability_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
  ::memset(&ability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&ability_)) + sizeof(time_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchPlayerAbilityUpgrade)
  SharedDtor();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
}

void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchPlayerAbilityUpgrade& CMatchPlayerAbilityUpgrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMatchPlayerAbilityUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchPlayerAbilityUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&ability_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMatchPlayerAbilityUpgrade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMatchPlayerAbilityUpgrade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ability = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ability(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMatchPlayerAbilityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchPlayerAbilityUpgrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ability(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchPlayerAbilityUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchPlayerAbilityUpgrade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMatchPlayerAbilityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchPlayerAbilityUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchPlayerAbilityUpgrade)
}

::google::protobuf::uint8* CMatchPlayerAbilityUpgrade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchPlayerAbilityUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchPlayerAbilityUpgrade)
  return target;
}

size_t CMatchPlayerAbilityUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchPlayerAbilityUpgrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional uint32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerAbilityUpgrade* source =
      ::google::protobuf::DynamicCastToGenerated<CMatchPlayerAbilityUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchPlayerAbilityUpgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchPlayerAbilityUpgrade)
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {
  return true;
}

void CMatchPlayerAbilityUpgrade::Swap(CMatchPlayerAbilityUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerAbilityUpgrade::InternalSwap(CMatchPlayerAbilityUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ability_, other->ability_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMatchPlayerTimedStats::InitAsDefaultInstance() {
}
class CMatchPlayerTimedStats::HasBitSetters {
 public:
  static void set_has_time(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kills(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deaths(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_assists(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_net_worth(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_last_hits(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_denies(CMatchPlayerTimedStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchPlayerTimedStats::kTimeFieldNumber;
const int CMatchPlayerTimedStats::kKillsFieldNumber;
const int CMatchPlayerTimedStats::kDeathsFieldNumber;
const int CMatchPlayerTimedStats::kAssistsFieldNumber;
const int CMatchPlayerTimedStats::kNetWorthFieldNumber;
const int CMatchPlayerTimedStats::kLastHitsFieldNumber;
const int CMatchPlayerTimedStats::kDeniesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchPlayerTimedStats::CMatchPlayerTimedStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchPlayerTimedStats)
}
CMatchPlayerTimedStats::CMatchPlayerTimedStats(const CMatchPlayerTimedStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&denies_) -
    reinterpret_cast<char*>(&time_)) + sizeof(denies_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchPlayerTimedStats)
}

void CMatchPlayerTimedStats::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denies_) -
      reinterpret_cast<char*>(&time_)) + sizeof(denies_));
}

CMatchPlayerTimedStats::~CMatchPlayerTimedStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchPlayerTimedStats)
  SharedDtor();
}

void CMatchPlayerTimedStats::SharedDtor() {
}

void CMatchPlayerTimedStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchPlayerTimedStats& CMatchPlayerTimedStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMatchPlayerTimedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchPlayerTimedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&denies_) -
        reinterpret_cast<char*>(&time_)) + sizeof(denies_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMatchPlayerTimedStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMatchPlayerTimedStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_worth = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_hits = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMatchPlayerTimedStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchPlayerTimedStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchPlayerTimedStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchPlayerTimedStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMatchPlayerTimedStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchPlayerTimedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kills(), output);
  }

  // optional uint32 deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deaths(), output);
  }

  // optional uint32 assists = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->assists(), output);
  }

  // optional uint32 net_worth = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->net_worth(), output);
  }

  // optional uint32 last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_hits(), output);
  }

  // optional uint32 denies = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->denies(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchPlayerTimedStats)
}

::google::protobuf::uint8* CMatchPlayerTimedStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchPlayerTimedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kills(), target);
  }

  // optional uint32 deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deaths(), target);
  }

  // optional uint32 assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->assists(), target);
  }

  // optional uint32 net_worth = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->net_worth(), target);
  }

  // optional uint32 last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_hits(), target);
  }

  // optional uint32 denies = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->denies(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchPlayerTimedStats)
  return target;
}

size_t CMatchPlayerTimedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchPlayerTimedStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 net_worth = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 last_hits = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerTimedStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchPlayerTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerTimedStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMatchPlayerTimedStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchPlayerTimedStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchPlayerTimedStats)
    MergeFrom(*source);
  }
}

void CMatchPlayerTimedStats::MergeFrom(const CMatchPlayerTimedStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchPlayerTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000040u) {
      denies_ = from.denies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerTimedStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchPlayerTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerTimedStats::CopyFrom(const CMatchPlayerTimedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchPlayerTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerTimedStats::IsInitialized() const {
  return true;
}

void CMatchPlayerTimedStats::Swap(CMatchPlayerTimedStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerTimedStats::InternalSwap(CMatchPlayerTimedStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(net_worth_, other->net_worth_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
}

::google::protobuf::Metadata CMatchPlayerTimedStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMatchAdditionalUnitInventory::InitAsDefaultInstance() {
}
class CMatchAdditionalUnitInventory::HasBitSetters {
 public:
  static void set_has_unit_name(CMatchAdditionalUnitInventory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchAdditionalUnitInventory::kUnitNameFieldNumber;
const int CMatchAdditionalUnitInventory::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchAdditionalUnitInventory)
}
CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unit_name()) {
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto.base);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchAdditionalUnitInventory)
  SharedDtor();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  unit_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchAdditionalUnitInventory& CMatchAdditionalUnitInventory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMatchAdditionalUnitInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchAdditionalUnitInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unit_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMatchAdditionalUnitInventory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMatchAdditionalUnitInventory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMatchAdditionalUnitInventory.unit_name");
        object = msg->mutable_unit_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 items = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_items(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_items();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMatchAdditionalUnitInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchAdditionalUnitInventory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), static_cast<int>(this->unit_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMatchAdditionalUnitInventory.unit_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchAdditionalUnitInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchAdditionalUnitInventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMatchAdditionalUnitInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchAdditionalUnitInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), static_cast<int>(this->unit_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMatchAdditionalUnitInventory.unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // repeated uint32 items = 2;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchAdditionalUnitInventory)
}

::google::protobuf::uint8* CMatchAdditionalUnitInventory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchAdditionalUnitInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), static_cast<int>(this->unit_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMatchAdditionalUnitInventory.unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // repeated uint32 items = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->items_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchAdditionalUnitInventory)
  return target;
}

size_t CMatchAdditionalUnitInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchAdditionalUnitInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  // optional string unit_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchAdditionalUnitInventory* source =
      ::google::protobuf::DynamicCastToGenerated<CMatchAdditionalUnitInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchAdditionalUnitInventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchAdditionalUnitInventory)
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_unit_name()) {
    _has_bits_[0] |= 0x00000001u;
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {
  return true;
}

void CMatchAdditionalUnitInventory::Swap(CMatchAdditionalUnitInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchAdditionalUnitInventory::InternalSwap(CMatchAdditionalUnitInventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  unit_name_.Swap(&other->unit_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMatchPlayerPermanentBuff::InitAsDefaultInstance() {
}
class CMatchPlayerPermanentBuff::HasBitSetters {
 public:
  static void set_has_permanent_buff(CMatchPlayerPermanentBuff* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stack_count(CMatchPlayerPermanentBuff* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchPlayerPermanentBuff::kPermanentBuffFieldNumber;
const int CMatchPlayerPermanentBuff::kStackCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchPlayerPermanentBuff)
}
CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&permanent_buff_, &from.permanent_buff_,
    static_cast<size_t>(reinterpret_cast<char*>(&stack_count_) -
    reinterpret_cast<char*>(&permanent_buff_)) + sizeof(stack_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchPlayerPermanentBuff)
}

void CMatchPlayerPermanentBuff::SharedCtor() {
  ::memset(&permanent_buff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stack_count_) -
      reinterpret_cast<char*>(&permanent_buff_)) + sizeof(stack_count_));
}

CMatchPlayerPermanentBuff::~CMatchPlayerPermanentBuff() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchPlayerPermanentBuff)
  SharedDtor();
}

void CMatchPlayerPermanentBuff::SharedDtor() {
}

void CMatchPlayerPermanentBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchPlayerPermanentBuff& CMatchPlayerPermanentBuff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMatchPlayerPermanentBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchPlayerPermanentBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&permanent_buff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stack_count_) -
        reinterpret_cast<char*>(&permanent_buff_)) + sizeof(stack_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMatchPlayerPermanentBuff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMatchPlayerPermanentBuff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 permanent_buff = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_permanent_buff(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stack_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stack_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMatchPlayerPermanentBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchPlayerPermanentBuff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 permanent_buff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_permanent_buff(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permanent_buff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stack_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchPlayerPermanentBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchPlayerPermanentBuff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMatchPlayerPermanentBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchPlayerPermanentBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permanent_buff = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permanent_buff(), output);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stack_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchPlayerPermanentBuff)
}

::google::protobuf::uint8* CMatchPlayerPermanentBuff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchPlayerPermanentBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permanent_buff = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->permanent_buff(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stack_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchPlayerPermanentBuff)
  return target;
}

size_t CMatchPlayerPermanentBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchPlayerPermanentBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 permanent_buff = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permanent_buff());
    }

    // optional uint32 stack_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerPermanentBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerPermanentBuff* source =
      ::google::protobuf::DynamicCastToGenerated<CMatchPlayerPermanentBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchPlayerPermanentBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchPlayerPermanentBuff)
    MergeFrom(*source);
  }
}

void CMatchPlayerPermanentBuff::MergeFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      permanent_buff_ = from.permanent_buff_;
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerPermanentBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerPermanentBuff::CopyFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerPermanentBuff::IsInitialized() const {
  return true;
}

void CMatchPlayerPermanentBuff::Swap(CMatchPlayerPermanentBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerPermanentBuff::InternalSwap(CMatchPlayerPermanentBuff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(permanent_buff_, other->permanent_buff_);
  swap(stack_count_, other->stack_count_);
}

::google::protobuf::Metadata CMatchPlayerPermanentBuff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMatchHeroSelectEvent::InitAsDefaultInstance() {
}
class CMatchHeroSelectEvent::HasBitSetters {
 public:
  static void set_has_is_pick(CMatchHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CMatchHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMatchHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchHeroSelectEvent::kIsPickFieldNumber;
const int CMatchHeroSelectEvent::kTeamFieldNumber;
const int CMatchHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchHeroSelectEvent::CMatchHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchHeroSelectEvent)
}
CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_pick_, &from.is_pick_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::SharedCtor() {
  ::memset(&is_pick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchHeroSelectEvent)
  SharedDtor();
}

void CMatchHeroSelectEvent::SharedDtor() {
}

void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchHeroSelectEvent& CMatchHeroSelectEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMatchHeroSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&is_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMatchHeroSelectEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMatchHeroSelectEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_pick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMatchHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchHeroSelectEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_pick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchHeroSelectEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMatchHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchHeroSelectEvent)
}

::google::protobuf::uint8* CMatchHeroSelectEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchHeroSelectEvent)
  return target;
}

size_t CMatchHeroSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchHeroSelectEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_pick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchHeroSelectEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CMatchHeroSelectEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchHeroSelectEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchHeroSelectEvent)
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_pick_ = from.is_pick_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {
  return true;
}

void CMatchHeroSelectEvent::Swap(CMatchHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchHeroSelectEvent::InternalSwap(CMatchHeroSelectEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_pick_, other->is_pick_);
  swap(team_, other->team_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProcessFantasyScheduledEvent::InitAsDefaultInstance() {
}
class CMsgDOTAProcessFantasyScheduledEvent::HasBitSetters {
 public:
  static void set_has_event(CMsgDOTAProcessFantasyScheduledEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgDOTAProcessFantasyScheduledEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fantasy_league_id(CMsgDOTAProcessFantasyScheduledEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_season(CMsgDOTAProcessFantasyScheduledEvent* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_reference_data(CMsgDOTAProcessFantasyScheduledEvent* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProcessFantasyScheduledEvent::kEventFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kTimestampFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kSeasonFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kReferenceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}
CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_data_) -
    reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_data_) -
      reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  SharedDtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
}

void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProcessFantasyScheduledEvent& CMsgDOTAProcessFantasyScheduledEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProcessFantasyScheduledEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_data_) -
        reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProcessFantasyScheduledEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProcessFantasyScheduledEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_season(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reference_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_reference_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProcessFantasyScheduledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_season(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reference_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_reference_data(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  // optional uint32 season = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->season(), output);
  }

  // optional uint32 reference_data = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reference_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}

::google::protobuf::uint8* CMsgDOTAProcessFantasyScheduledEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  // optional uint32 season = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->season(), target);
  }

  // optional uint32 reference_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reference_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return target;
}

size_t CMsgDOTAProcessFantasyScheduledEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 event = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 fantasy_league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 season = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 reference_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProcessFantasyScheduledEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProcessFantasyScheduledEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000010u) {
      reference_data_ = from.reference_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {
  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::Swap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProcessFantasyScheduledEvent::InternalSwap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(timestamp_, other->timestamp_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(season_, other->season_);
  swap(reference_data_, other->reference_data_);
}

::google::protobuf::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAHasItemQuery::InitAsDefaultInstance() {
}
class CMsgDOTAHasItemQuery::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAHasItemQuery* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_id(CMsgDOTAHasItemQuery* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemQuery::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemQuery)
}
CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgDOTAHasItemQuery::~CMsgDOTAHasItemQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemQuery)
  SharedDtor();
}

void CMsgDOTAHasItemQuery::SharedDtor() {
}

void CMsgDOTAHasItemQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAHasItemQuery& CMsgDOTAHasItemQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAHasItemQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAHasItemQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAHasItemQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAHasItemQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAHasItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAHasItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemQuery)
  return target;
}

size_t CMsgDOTAHasItemQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemQuery* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAHasItemQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemQuery::MergeFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAHasItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemQuery::CopyFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemQuery::Swap(CMsgDOTAHasItemQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemQuery::InternalSwap(CMsgDOTAHasItemQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTAHasItemQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAHasItemResponse::InitAsDefaultInstance() {
}
class CMsgDOTAHasItemResponse::HasBitSetters {
 public:
  static void set_has_has_item(CMsgDOTAHasItemResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemResponse::kHasItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemResponse)
}
CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_item_ = from.has_item_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::SharedCtor() {
  has_item_ = false;
}

CMsgDOTAHasItemResponse::~CMsgDOTAHasItemResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemResponse)
  SharedDtor();
}

void CMsgDOTAHasItemResponse::SharedDtor() {
}

void CMsgDOTAHasItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAHasItemResponse& CMsgDOTAHasItemResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAHasItemResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAHasItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_item_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAHasItemResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAHasItemResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool has_item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_item(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAHasItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_has_item(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAHasItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemResponse)
  return target;
}

size_t CMsgDOTAHasItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_item = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAHasItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemResponse::MergeFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_item()) {
    set_has_item(from.has_item());
  }
}

void CMsgDOTAHasItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemResponse::CopyFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemResponse::Swap(CMsgDOTAHasItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemResponse::InternalSwap(CMsgDOTAHasItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_item_, other->has_item_);
}

::google::protobuf::Metadata CMsgDOTAHasItemResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCIsProQuery::InitAsDefaultInstance() {
}
class CMsgGCIsProQuery::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCIsProQuery* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIsProQuery::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIsProQuery::CMsgGCIsProQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIsProQuery)
}
CMsgGCIsProQuery::CMsgGCIsProQuery(const CMsgGCIsProQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIsProQuery)
}

void CMsgGCIsProQuery::SharedCtor() {
  account_id_ = 0u;
}

CMsgGCIsProQuery::~CMsgGCIsProQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIsProQuery)
  SharedDtor();
}

void CMsgGCIsProQuery::SharedDtor() {
}

void CMsgGCIsProQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCIsProQuery& CMsgGCIsProQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCIsProQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCIsProQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIsProQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCIsProQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCIsProQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCIsProQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIsProQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIsProQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIsProQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCIsProQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIsProQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIsProQuery)
}

::google::protobuf::uint8* CMsgGCIsProQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIsProQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIsProQuery)
  return target;
}

size_t CMsgGCIsProQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIsProQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIsProQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProQuery* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCIsProQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIsProQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIsProQuery)
    MergeFrom(*source);
  }
}

void CMsgGCIsProQuery::MergeFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGCIsProQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProQuery::CopyFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProQuery::IsInitialized() const {
  return true;
}

void CMsgGCIsProQuery::Swap(CMsgGCIsProQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIsProQuery::InternalSwap(CMsgGCIsProQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgGCIsProQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCIsProResponse::InitAsDefaultInstance() {
}
class CMsgGCIsProResponse::HasBitSetters {
 public:
  static void set_has_is_pro(CMsgGCIsProResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIsProResponse::kIsProFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIsProResponse::CMsgGCIsProResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIsProResponse)
}
CMsgGCIsProResponse::CMsgGCIsProResponse(const CMsgGCIsProResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_pro_ = from.is_pro_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIsProResponse)
}

void CMsgGCIsProResponse::SharedCtor() {
  is_pro_ = false;
}

CMsgGCIsProResponse::~CMsgGCIsProResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIsProResponse)
  SharedDtor();
}

void CMsgGCIsProResponse::SharedDtor() {
}

void CMsgGCIsProResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCIsProResponse& CMsgGCIsProResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCIsProResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCIsProResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIsProResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_pro_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCIsProResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCIsProResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_pro = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_pro(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCIsProResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIsProResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pro = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_pro(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIsProResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIsProResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCIsProResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIsProResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pro = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pro(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIsProResponse)
}

::google::protobuf::uint8* CMsgGCIsProResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIsProResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pro = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pro(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIsProResponse)
  return target;
}

size_t CMsgGCIsProResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIsProResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_pro = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIsProResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCIsProResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIsProResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIsProResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIsProResponse::MergeFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_pro()) {
    set_is_pro(from.is_pro());
  }
}

void CMsgGCIsProResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProResponse::CopyFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProResponse::IsInitialized() const {
  return true;
}

void CMsgGCIsProResponse::Swap(CMsgGCIsProResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIsProResponse::InternalSwap(CMsgGCIsProResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_pro_, other->is_pro_);
}

::google::protobuf::Metadata CMsgGCIsProResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAHasItemDefsQuery::InitAsDefaultInstance() {
}
class CMsgDOTAHasItemDefsQuery::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAHasItemDefsQuery* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemDefsQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemDefsQuery::kItemdefIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemDefsQuery)
}
CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemdef_ids_(from.itemdef_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::SharedCtor() {
  account_id_ = 0u;
}

CMsgDOTAHasItemDefsQuery::~CMsgDOTAHasItemDefsQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemDefsQuery)
  SharedDtor();
}

void CMsgDOTAHasItemDefsQuery::SharedDtor() {
}

void CMsgDOTAHasItemDefsQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAHasItemDefsQuery& CMsgDOTAHasItemDefsQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAHasItemDefsQuery_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAHasItemDefsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdef_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAHasItemDefsQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAHasItemDefsQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 itemdef_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_itemdef_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_itemdef_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAHasItemDefsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 itemdef_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_itemdef_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemdef_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemDefsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemDefsQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0, n = this->itemdef_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->itemdef_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemDefsQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 itemdef_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->itemdef_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemDefsQuery)
  return target;
}

size_t CMsgDOTAHasItemDefsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 itemdef_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->itemdef_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdef_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsQuery* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAHasItemDefsQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemDefsQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemDefsQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdef_ids_.MergeFrom(from.itemdef_ids_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsQuery::Swap(CMsgDOTAHasItemDefsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsQuery::InternalSwap(CMsgDOTAHasItemDefsQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemdef_ids_.InternalSwap(&other->itemdef_ids_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAHasItemDefsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAHasItemDefsResponse::HasBitSetters {
 public:
  static void set_has_has_items(CMsgDOTAHasItemDefsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemDefsResponse::kHasItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemDefsResponse)
}
CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_items_ = from.has_items_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::SharedCtor() {
  has_items_ = false;
}

CMsgDOTAHasItemDefsResponse::~CMsgDOTAHasItemDefsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemDefsResponse)
  SharedDtor();
}

void CMsgDOTAHasItemDefsResponse::SharedDtor() {
}

void CMsgDOTAHasItemDefsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAHasItemDefsResponse& CMsgDOTAHasItemDefsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAHasItemDefsResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAHasItemDefsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_items_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAHasItemDefsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAHasItemDefsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool has_items = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_items(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAHasItemDefsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_has_items(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemDefsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemDefsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_items = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_items(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemDefsResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_items(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemDefsResponse)
  return target;
}

size_t CMsgDOTAHasItemDefsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_items = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAHasItemDefsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemDefsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemDefsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_items()) {
    set_has_items(from.has_items());
  }
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsResponse::Swap(CMsgDOTAHasItemDefsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsResponse::InternalSwap(CMsgDOTAHasItemDefsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_items_, other->has_items_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPlayerCardItemInfo::InitAsDefaultInstance() {
}
class CMsgGCGetPlayerCardItemInfo::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCGetPlayerCardItemInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_all_for_event(CMsgGCGetPlayerCardItemInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfo::kPlayerCardItemIdsFieldNumber;
const int CMsgGCGetPlayerCardItemInfo::kAllForEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
}
CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_card_item_ids_(from.player_card_item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_for_event_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
}

void CMsgGCGetPlayerCardItemInfo::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_for_event_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
}

CMsgGCGetPlayerCardItemInfo::~CMsgGCGetPlayerCardItemInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfo::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPlayerCardItemInfo& CMsgGCGetPlayerCardItemInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPlayerCardItemInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPlayerCardItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&all_for_event_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPlayerCardItemInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPlayerCardItemInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 player_card_item_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_player_card_item_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_player_card_item_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 all_for_event = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_all_for_event(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPlayerCardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_card_item_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_player_card_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_card_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 all_for_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_all_for_event(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_for_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPlayerCardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint64 player_card_item_ids = 2;
  for (int i = 0, n = this->player_card_item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_card_item_ids(i), output);
  }

  // optional uint32 all_for_event = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->all_for_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint64 player_card_item_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->player_card_item_ids_, target);

  // optional uint32 all_for_event = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->all_for_event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_card_item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_card_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 all_for_event = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_for_event());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_ids_.MergeFrom(from.player_card_item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      all_for_event_ = from.all_for_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfo::Swap(CMsgGCGetPlayerCardItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfo::InternalSwap(CMsgGCGetPlayerCardItemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_card_item_ids_.InternalSwap(&other->player_card_item_ids_);
  swap(account_id_, other->account_id_);
  swap(all_for_event_, other->all_for_event_);
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InitAsDefaultInstance() {
}
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::HasBitSetters {
 public:
  static void set_has_player_card_item_id(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_account_id(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_packed_bonuses(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPlayerCardItemIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPackedBonusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}
CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_card_item_id_, &from.player_card_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedCtor() {
  ::memset(&player_card_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_card_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 player_card_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_card_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 packed_bonuses = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_packed_bonuses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_card_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_card_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_card_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packed_bonuses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_packed_bonuses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packed_bonuses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 player_card_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_card_item_id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint64 packed_bonuses = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packed_bonuses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 player_card_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_card_item_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint64 packed_bonuses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packed_bonuses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 player_card_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_card_item_id());
    }

    // optional uint64 packed_bonuses = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packed_bonuses());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      packed_bonuses_ = from.packed_bonuses_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_card_item_id_, other->player_card_item_id_);
  swap(packed_bonuses_, other->packed_bonuses_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPlayerCardItemInfoResponse::InitAsDefaultInstance() {
}
class CMsgGCGetPlayerCardItemInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfoResponse::kPlayerCardInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}
CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_card_infos_(from.player_card_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgGCGetPlayerCardItemInfoResponse::~CMsgGCGetPlayerCardItemInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPlayerCardItemInfoResponse& CMsgGCGetPlayerCardItemInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPlayerCardItemInfoResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPlayerCardItemInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPlayerCardItemInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPlayerCardItemInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_InternalParse;
          object = msg->add_player_card_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPlayerCardItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_card_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPlayerCardItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_card_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->player_card_infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_card_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_card_infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_card_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_card_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_infos_.MergeFrom(from.player_card_infos_);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse::Swap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfoResponse::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_card_infos_)->InternalSwap(CastToBase(&other->player_card_infos_));
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCFantasySetMatchLeague::InitAsDefaultInstance() {
}
class CMsgGCToGCFantasySetMatchLeague::HasBitSetters {
 public:
  static void set_has_match_id(CMsgGCToGCFantasySetMatchLeague* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgGCToGCFantasySetMatchLeague* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCFantasySetMatchLeague::kMatchIdFieldNumber;
const int CMsgGCToGCFantasySetMatchLeague::kLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}
CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
}

CMsgGCToGCFantasySetMatchLeague::~CMsgGCToGCFantasySetMatchLeague() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  SharedDtor();
}

void CMsgGCToGCFantasySetMatchLeague::SharedDtor() {
}

void CMsgGCToGCFantasySetMatchLeague::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCFantasySetMatchLeague& CMsgGCToGCFantasySetMatchLeague::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCFantasySetMatchLeague_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCFantasySetMatchLeague::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCFantasySetMatchLeague::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCFantasySetMatchLeague*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCFantasySetMatchLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}

::google::protobuf::uint8* CMsgGCToGCFantasySetMatchLeague::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return target;
}

size_t CMsgGCToGCFantasySetMatchLeague::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCFantasySetMatchLeague* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCFantasySetMatchLeague>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCFantasySetMatchLeague)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCFantasySetMatchLeague)
    MergeFrom(*source);
  }
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFantasySetMatchLeague::IsInitialized() const {
  return true;
}

void CMsgGCToGCFantasySetMatchLeague::Swap(CMsgGCToGCFantasySetMatchLeague* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCFantasySetMatchLeague::InternalSwap(CMsgGCToGCFantasySetMatchLeague* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(league_id_, other->league_id_);
}

::google::protobuf::Metadata CMsgGCToGCFantasySetMatchLeague::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAMapLocationState::InitAsDefaultInstance() {
}
class CSODOTAMapLocationState::HasBitSetters {
 public:
  static void set_has_account_id(CSODOTAMapLocationState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_location_id(CSODOTAMapLocationState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_completed(CSODOTAMapLocationState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAMapLocationState::kAccountIdFieldNumber;
const int CSODOTAMapLocationState::kLocationIdFieldNumber;
const int CSODOTAMapLocationState::kCompletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAMapLocationState::CSODOTAMapLocationState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAMapLocationState)
}
CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAMapLocationState)
  SharedDtor();
}

void CSODOTAMapLocationState::SharedDtor() {
}

void CSODOTAMapLocationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAMapLocationState& CSODOTAMapLocationState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAMapLocationState_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAMapLocationState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAMapLocationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAMapLocationState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAMapLocationState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_location_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool completed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAMapLocationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAMapLocationState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_location_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAMapLocationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAMapLocationState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAMapLocationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAMapLocationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location_id(), output);
  }

  // optional bool completed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAMapLocationState)
}

::google::protobuf::uint8* CSODOTAMapLocationState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAMapLocationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location_id(), target);
  }

  // optional bool completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAMapLocationState)
  return target;
}

size_t CSODOTAMapLocationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAMapLocationState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_id());
    }

    // optional bool completed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAMapLocationState* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAMapLocationState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAMapLocationState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAMapLocationState)
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_id_ = from.location_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAMapLocationState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {
  return true;
}

void CSODOTAMapLocationState::Swap(CSODOTAMapLocationState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAMapLocationState::InternalSwap(CSODOTAMapLocationState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(location_id_, other->location_id_);
  swap(completed_, other->completed_);
}

::google::protobuf::Metadata CSODOTAMapLocationState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeagueAdminList::InitAsDefaultInstance() {
}
class CMsgLeagueAdminList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeagueAdminList::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeagueAdminList::CMsgLeagueAdminList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeagueAdminList)
}
CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::SharedCtor() {
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeagueAdminList)
  SharedDtor();
}

void CMsgLeagueAdminList::SharedDtor() {
}

void CMsgLeagueAdminList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLeagueAdminList& CMsgLeagueAdminList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLeagueAdminList_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgLeagueAdminList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeagueAdminList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLeagueAdminList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLeagueAdminList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLeagueAdminList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeagueAdminList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeagueAdminList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeagueAdminList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLeagueAdminList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeagueAdminList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeagueAdminList)
}

::google::protobuf::uint8* CMsgLeagueAdminList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeagueAdminList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeagueAdminList)
  return target;
}

size_t CMsgLeagueAdminList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeagueAdminList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueAdminList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLeagueAdminList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeagueAdminList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeagueAdminList)
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgLeagueAdminList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {
  return true;
}

void CMsgLeagueAdminList::Swap(CMsgLeagueAdminList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeagueAdminList::InternalSwap(CMsgLeagueAdminList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
}

::google::protobuf::Metadata CMsgLeagueAdminList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCompendiumTimestampedData::InitAsDefaultInstance() {
}
class CCompendiumTimestampedData::HasBitSetters {
 public:
  static void set_has_game_time(CCompendiumTimestampedData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gpm(CCompendiumTimestampedData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_xpm(CCompendiumTimestampedData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kills(CCompendiumTimestampedData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_deaths(CCompendiumTimestampedData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumTimestampedData::kGameTimeFieldNumber;
const int CCompendiumTimestampedData::kGpmFieldNumber;
const int CCompendiumTimestampedData::kXpmFieldNumber;
const int CCompendiumTimestampedData::kKillsFieldNumber;
const int CCompendiumTimestampedData::kDeathsFieldNumber;
const int CCompendiumTimestampedData::kItemPurchasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumTimestampedData::CCompendiumTimestampedData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumTimestampedData)
}
CCompendiumTimestampedData::CCompendiumTimestampedData(const CCompendiumTimestampedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&deaths_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::SharedCtor() {
  ::memset(&game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deaths_) -
      reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
}

CCompendiumTimestampedData::~CCompendiumTimestampedData() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumTimestampedData)
  SharedDtor();
}

void CCompendiumTimestampedData::SharedDtor() {
}

void CCompendiumTimestampedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCompendiumTimestampedData& CCompendiumTimestampedData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCompendiumTimestampedData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CCompendiumTimestampedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumTimestampedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_purchases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deaths_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCompendiumTimestampedData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCompendiumTimestampedData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gpm = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gpm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xpm = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_xpm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 item_purchases = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_item_purchases(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_item_purchases();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCompendiumTimestampedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumTimestampedData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_xpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 item_purchases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_item_purchases())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_purchases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumTimestampedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumTimestampedData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCompendiumTimestampedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumTimestampedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional uint32 gpm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpm(), output);
  }

  // optional uint32 xpm = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xpm(), output);
  }

  // optional uint32 kills = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kills(), output);
  }

  // optional uint32 deaths = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deaths(), output);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0, n = this->item_purchases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->item_purchases(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumTimestampedData)
}

::google::protobuf::uint8* CCompendiumTimestampedData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumTimestampedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional uint32 gpm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpm(), target);
  }

  // optional uint32 xpm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xpm(), target);
  }

  // optional uint32 kills = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kills(), target);
  }

  // optional uint32 deaths = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deaths(), target);
  }

  // repeated uint32 item_purchases = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->item_purchases_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumTimestampedData)
  return target;
}

size_t CCompendiumTimestampedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumTimestampedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_purchases = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_purchases_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_purchases_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 gpm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumTimestampedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumTimestampedData* source =
      ::google::protobuf::DynamicCastToGenerated<CCompendiumTimestampedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumTimestampedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumTimestampedData)
    MergeFrom(*source);
  }
}

void CCompendiumTimestampedData::MergeFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000004u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      deaths_ = from.deaths_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCompendiumTimestampedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumTimestampedData::CopyFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumTimestampedData::IsInitialized() const {
  return true;
}

void CCompendiumTimestampedData::Swap(CCompendiumTimestampedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumTimestampedData::InternalSwap(CCompendiumTimestampedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_purchases_.InternalSwap(&other->item_purchases_);
  swap(game_time_, other->game_time_);
  swap(gpm_, other->gpm_);
  swap(xpm_, other->xpm_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
}

::google::protobuf::Metadata CCompendiumTimestampedData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCompendiumGameTimeline::InitAsDefaultInstance() {
}
class CCompendiumGameTimeline::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumGameTimeline::kDataFieldNumber;
const int CCompendiumGameTimeline::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumGameTimeline::CCompendiumGameTimeline()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumGameTimeline)
}
CCompendiumGameTimeline::CCompendiumGameTimeline(const CCompendiumGameTimeline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto.base);
}

CCompendiumGameTimeline::~CCompendiumGameTimeline() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumGameTimeline)
  SharedDtor();
}

void CCompendiumGameTimeline::SharedDtor() {
}

void CCompendiumGameTimeline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCompendiumGameTimeline& CCompendiumGameTimeline::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCompendiumGameTimeline_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CCompendiumGameTimeline::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumGameTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCompendiumGameTimeline::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCompendiumGameTimeline*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CCompendiumTimestampedData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CCompendiumTimestampedData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated string tags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CCompendiumGameTimeline.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCompendiumGameTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumGameTimeline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCompendiumTimestampedData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCompendiumGameTimeline.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumGameTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumGameTimeline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCompendiumGameTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumGameTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCompendiumGameTimeline.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumGameTimeline)
}

::google::protobuf::uint8* CCompendiumGameTimeline::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumGameTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCompendiumGameTimeline.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumGameTimeline)
  return target;
}

size_t CCompendiumGameTimeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumGameTimeline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // repeated string tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumGameTimeline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameTimeline* source =
      ::google::protobuf::DynamicCastToGenerated<CCompendiumGameTimeline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumGameTimeline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumGameTimeline)
    MergeFrom(*source);
  }
}

void CCompendiumGameTimeline::MergeFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  tags_.MergeFrom(from.tags_);
}

void CCompendiumGameTimeline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameTimeline::CopyFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameTimeline::IsInitialized() const {
  return true;
}

void CCompendiumGameTimeline::Swap(CCompendiumGameTimeline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameTimeline::InternalSwap(CCompendiumGameTimeline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  tags_.InternalSwap(CastToBase(&other->tags_));
}

::google::protobuf::Metadata CCompendiumGameTimeline::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCompendiumGameList::InitAsDefaultInstance() {
}
class CCompendiumGameList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumGameList::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumGameList::CCompendiumGameList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumGameList)
}
CCompendiumGameList::CCompendiumGameList(const CCompendiumGameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumGameList)
}

void CCompendiumGameList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto.base);
}

CCompendiumGameList::~CCompendiumGameList() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumGameList)
  SharedDtor();
}

void CCompendiumGameList::SharedDtor() {
}

void CCompendiumGameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCompendiumGameList& CCompendiumGameList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCompendiumGameList_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CCompendiumGameList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumGameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCompendiumGameList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCompendiumGameList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CCompendiumGameTimeline games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CCompendiumGameTimeline::_InternalParse;
          object = msg->add_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCompendiumGameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumGameList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCompendiumGameTimeline games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumGameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumGameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCompendiumGameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumGameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumGameList)
}

::google::protobuf::uint8* CCompendiumGameList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumGameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumGameList)
  return target;
}

size_t CCompendiumGameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumGameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumGameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameList* source =
      ::google::protobuf::DynamicCastToGenerated<CCompendiumGameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumGameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumGameList)
    MergeFrom(*source);
  }
}

void CCompendiumGameList::MergeFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CCompendiumGameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameList::CopyFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameList::IsInitialized() const {
  return true;
}

void CCompendiumGameList::Swap(CCompendiumGameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameList::InternalSwap(CCompendiumGameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
}

::google::protobuf::Metadata CCompendiumGameList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CAdditionalEquipSlot::InitAsDefaultInstance() {
}
class CAdditionalEquipSlot::HasBitSetters {
 public:
  static void set_has_class_id(CAdditionalEquipSlot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot_id(CAdditionalEquipSlot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_def_index(CAdditionalEquipSlot* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAdditionalEquipSlot::kClassIdFieldNumber;
const int CAdditionalEquipSlot::kSlotIdFieldNumber;
const int CAdditionalEquipSlot::kDefIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAdditionalEquipSlot::CAdditionalEquipSlot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CAdditionalEquipSlot)
}
CAdditionalEquipSlot::CAdditionalEquipSlot(const CAdditionalEquipSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::SharedCtor() {
  ::memset(&class_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_index_) -
      reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
}

CAdditionalEquipSlot::~CAdditionalEquipSlot() {
  // @@protoc_insertion_point(destructor:proto.dota.CAdditionalEquipSlot)
  SharedDtor();
}

void CAdditionalEquipSlot::SharedDtor() {
}

void CAdditionalEquipSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAdditionalEquipSlot& CAdditionalEquipSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CAdditionalEquipSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CAdditionalEquipSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CAdditionalEquipSlot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CAdditionalEquipSlot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_class_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CAdditionalEquipSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CAdditionalEquipSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_class_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CAdditionalEquipSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CAdditionalEquipSlot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CAdditionalEquipSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CAdditionalEquipSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CAdditionalEquipSlot)
}

::google::protobuf::uint8* CAdditionalEquipSlot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CAdditionalEquipSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CAdditionalEquipSlot)
  return target;
}

size_t CAdditionalEquipSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CAdditionalEquipSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 class_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAdditionalEquipSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlot* source =
      ::google::protobuf::DynamicCastToGenerated<CAdditionalEquipSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CAdditionalEquipSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CAdditionalEquipSlot)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlot::MergeFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlot::CopyFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlot::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlot::Swap(CAdditionalEquipSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlot::InternalSwap(CAdditionalEquipSlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(class_id_, other->class_id_);
  swap(slot_id_, other->slot_id_);
  swap(def_index_, other->def_index_);
}

::google::protobuf::Metadata CAdditionalEquipSlot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Trophy::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Trophy::HasBitSetters {
 public:
  static void set_has_trophy_id(CMsgDOTAProfileCard_Slot_Trophy* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_trophy_score(CMsgDOTAProfileCard_Slot_Trophy* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}
CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trophy_id_, &from.trophy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
  ::memset(&trophy_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trophy_score_) -
      reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot_Trophy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Trophy_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trophy_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trophy_score_) -
        reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Trophy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Trophy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 trophy_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 trophy_score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_trophy_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Trophy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trophy_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_trophy_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trophy_id(), output);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trophy_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Trophy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trophy_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 trophy_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Trophy* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Trophy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      trophy_score_ = from.trophy_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Trophy::InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trophy_id_, other->trophy_id_);
  swap(trophy_score_, other->trophy_score_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Stat::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Stat::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgDOTAProfileCard_Slot_Stat* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stat_score(CMsgDOTAProfileCard_Slot_Stat* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Stat::kStatIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Stat::kStatScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}
CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_score_, &from.stat_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&stat_score_)) + sizeof(stat_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
  stat_score_ = 0u;
  stat_id_ = 1;
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot_Stat::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Stat_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    stat_score_ = 0u;
    stat_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Stat::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Stat*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAProfileCard_EStatID_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_stat_id(static_cast<::proto::dota::CMsgDOTAProfileCard_EStatID>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAProfileCard_EStatID_IsValid(value)) {
            set_stat_id(static_cast< ::proto::dota::CMsgDOTAProfileCard_EStatID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_id(), output);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Stat::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_score());
    }

    // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Stat* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Stat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_score_ = from.stat_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_id_ = from.stat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Stat::InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_score_, other->stat_score_);
  swap(stat_id_, other->stat_id_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Item::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Item::HasBitSetters {
 public:
  static void set_has_serialized_item(CMsgDOTAProfileCard_Slot_Item* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_id(CMsgDOTAProfileCard_Slot_Item* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Item::kSerializedItemFieldNumber;
const int CMsgDOTAProfileCard_Slot_Item::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}
CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_item()) {
    serialized_item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_item_);
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto.base);
  serialized_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  serialized_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Item_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_item_.ClearNonDefaultToEmptyNoArena();
  }
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Item::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Item*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_item();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_item(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Item::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_item());
    }

    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Item* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Item)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serialized_item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_item_);
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Item::Swap(CMsgDOTAProfileCard_Slot_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Item::InternalSwap(CMsgDOTAProfileCard_Slot_Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_item_.Swap(&other->serialized_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_id_, other->item_id_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Hero::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Hero::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgDOTAProfileCard_Slot_Hero* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hero_wins(CMsgDOTAProfileCard_Slot_Hero* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_losses(CMsgDOTAProfileCard_Slot_Hero* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Hero::kHeroIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroWinsFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroLossesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}
CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_losses_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot_Hero::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Hero_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_losses_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Hero::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Hero*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_wins = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_losses = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_wins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_losses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_wins(), output);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_losses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Hero::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_losses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_losses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Hero* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Hero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_wins_ = from.hero_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_losses_ = from.hero_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Hero::InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(hero_wins_, other->hero_wins_);
  swap(hero_losses_, other->hero_losses_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Emoticon::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Emoticon::HasBitSetters {
 public:
  static void set_has_emoticon_id(CMsgDOTAProfileCard_Slot_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Emoticon::kEmoticonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}
CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emoticon_id_ = from.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
  emoticon_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot_Emoticon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Emoticon_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticon_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Emoticon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Emoticon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 emoticon_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_emoticon_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 emoticon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_emoticon_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emoticon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->emoticon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Emoticon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->emoticon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 emoticon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->emoticon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Emoticon* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Emoticon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_emoticon_id()) {
    set_emoticon_id(from.emoticon_id());
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Emoticon::InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emoticon_id_, other->emoticon_id_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot_Team::InitAsDefaultInstance() {
}
class CMsgDOTAProfileCard_Slot_Team::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTAProfileCard_Slot_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Team::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}
CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}

void CMsgDOTAProfileCard_Slot_Team::SharedCtor() {
  team_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Team::~CMsgDOTAProfileCard_Slot_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Team::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_Team_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Team::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Team::Swap(CMsgDOTAProfileCard_Slot_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Team::InternalSwap(CMsgDOTAProfileCard_Slot_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard_Slot::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->trophy_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::internal_default_instance());
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->stat_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Stat*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Stat::internal_default_instance());
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->item_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Item*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Item::internal_default_instance());
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->hero_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Hero*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Hero::internal_default_instance());
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->emoticon_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::internal_default_instance());
  ::proto::dota::_CMsgDOTAProfileCard_Slot_default_instance_._instance.get_mutable()->team_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Team*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Team::internal_default_instance());
}
class CMsgDOTAProfileCard_Slot::HasBitSetters {
 public:
  static void set_has_slot_id(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy& trophy(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_trophy(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat& stat(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_stat(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Item& item(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_item(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero& hero(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_hero(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon& emoticon(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_emoticon(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgDOTAProfileCard_Slot_Team& team(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_team(CMsgDOTAProfileCard_Slot* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy&
CMsgDOTAProfileCard_Slot::HasBitSetters::trophy(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->trophy_;
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat&
CMsgDOTAProfileCard_Slot::HasBitSetters::stat(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->stat_;
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Item&
CMsgDOTAProfileCard_Slot::HasBitSetters::item(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->item_;
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero&
CMsgDOTAProfileCard_Slot::HasBitSetters::hero(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->hero_;
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon&
CMsgDOTAProfileCard_Slot::HasBitSetters::emoticon(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->emoticon_;
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Team&
CMsgDOTAProfileCard_Slot::HasBitSetters::team(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->team_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot::kSlotIdFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTrophyFieldNumber;
const int CMsgDOTAProfileCard_Slot::kStatFieldNumber;
const int CMsgDOTAProfileCard_Slot::kItemFieldNumber;
const int CMsgDOTAProfileCard_Slot::kHeroFieldNumber;
const int CMsgDOTAProfileCard_Slot::kEmoticonFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot)
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trophy()) {
    trophy_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy(*from.trophy_);
  } else {
    trophy_ = nullptr;
  }
  if (from.has_stat()) {
    stat_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from.has_hero()) {
    hero_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Hero(*from.hero_);
  } else {
    hero_ = nullptr;
  }
  if (from.has_emoticon()) {
    emoticon_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon(*from.emoticon_);
  } else {
    emoticon_ = nullptr;
  }
  if (from.has_team()) {
    team_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Team(*from.team_);
  } else {
    team_ = nullptr;
  }
  slot_id_ = from.slot_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&trophy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&trophy_)) + sizeof(slot_id_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot::SharedDtor() {
  if (this != internal_default_instance()) delete trophy_;
  if (this != internal_default_instance()) delete stat_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete hero_;
  if (this != internal_default_instance()) delete emoticon_;
  if (this != internal_default_instance()) delete team_;
}

void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard_Slot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_Slot_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trophy_ != nullptr);
      trophy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != nullptr);
      stat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(item_ != nullptr);
      item_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hero_ != nullptr);
      hero_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emoticon_ != nullptr);
      emoticon_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(team_ != nullptr);
      team_->Clear();
    }
  }
  slot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard_Slot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard_Slot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::_InternalParse;
        object = msg->mutable_trophy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Stat::_InternalParse;
        object = msg->mutable_stat();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Item::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Hero::_InternalParse;
        object = msg->mutable_hero();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::_InternalParse;
        object = msg->mutable_emoticon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot_Team::_InternalParse;
        object = msg->mutable_team();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trophy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emoticon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::trophy(this), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::stat(this), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::item(this), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::hero(this), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::emoticon(this), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::team(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::trophy(this), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::stat(this), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::item(this), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::hero(this), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::emoticon(this), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::team(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot)
  return target;
}

size_t CMsgDOTAProfileCard_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trophy_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stat_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hero_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *emoticon_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_);
    }

    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trophy()->::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from.trophy());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stat()->::proto::dota::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_item()->::proto::dota::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from.item());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hero()->::proto::dota::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from.hero());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_emoticon()->::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from.emoticon());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_team()->::proto::dota::CMsgDOTAProfileCard_Slot_Team::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000040u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot::Swap(CMsgDOTAProfileCard_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot::InternalSwap(CMsgDOTAProfileCard_Slot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trophy_, other->trophy_);
  swap(stat_, other->stat_);
  swap(item_, other->item_);
  swap(hero_, other->hero_);
  swap(emoticon_, other->emoticon_);
  swap(team_, other->team_);
  swap(slot_id_, other->slot_id_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProfileCard::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAProfileCard_default_instance_._instance.get_mutable()->recent_battle_cup_victory_ = const_cast< ::proto::dota::CMsgBattleCupVictory*>(
      ::proto::dota::CMsgBattleCupVictory::internal_default_instance());
}
class CMsgDOTAProfileCard::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_background_def_index(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_badge_points(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_event_points(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_event_id(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgBattleCupVictory& recent_battle_cup_victory(const CMsgDOTAProfileCard* msg);
  static void set_has_recent_battle_cup_victory(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rank_tier(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_leaderboard_rank(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_is_plus_subscriber(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_plus_original_start_date(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_rank_tier_score(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_previous_rank_tier(CMsgDOTAProfileCard* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

const ::proto::dota::CMsgBattleCupVictory&
CMsgDOTAProfileCard::HasBitSetters::recent_battle_cup_victory(const CMsgDOTAProfileCard* msg) {
  return *msg->recent_battle_cup_victory_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard::kAccountIdFieldNumber;
const int CMsgDOTAProfileCard::kBackgroundDefIndexFieldNumber;
const int CMsgDOTAProfileCard::kSlotsFieldNumber;
const int CMsgDOTAProfileCard::kBadgePointsFieldNumber;
const int CMsgDOTAProfileCard::kEventPointsFieldNumber;
const int CMsgDOTAProfileCard::kEventIdFieldNumber;
const int CMsgDOTAProfileCard::kRecentBattleCupVictoryFieldNumber;
const int CMsgDOTAProfileCard::kRankTierFieldNumber;
const int CMsgDOTAProfileCard::kLeaderboardRankFieldNumber;
const int CMsgDOTAProfileCard::kIsPlusSubscriberFieldNumber;
const int CMsgDOTAProfileCard::kPlusOriginalStartDateFieldNumber;
const int CMsgDOTAProfileCard::kRankTierScoreFieldNumber;
const int CMsgDOTAProfileCard::kPreviousRankTierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard::CMsgDOTAProfileCard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard)
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_recent_battle_cup_victory()) {
    recent_battle_cup_victory_ = new ::proto::dota::CMsgBattleCupVictory(*from.recent_battle_cup_victory_);
  } else {
    recent_battle_cup_victory_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_rank_tier_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(previous_rank_tier_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&recent_battle_cup_victory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_rank_tier_) -
      reinterpret_cast<char*>(&recent_battle_cup_victory_)) + sizeof(previous_rank_tier_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard)
  SharedDtor();
}

void CMsgDOTAProfileCard::SharedDtor() {
  if (this != internal_default_instance()) delete recent_battle_cup_victory_;
}

void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProfileCard& CMsgDOTAProfileCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(recent_battle_cup_victory_ != nullptr);
    recent_battle_cup_victory_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderboard_rank_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(leaderboard_rank_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_plus_subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_rank_tier_) -
        reinterpret_cast<char*>(&is_plus_subscriber_)) + sizeof(previous_rank_tier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProfileCard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProfileCard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 background_def_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_background_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAProfileCard_Slot::_InternalParse;
          object = msg->add_slots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 badge_points = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_badge_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_points = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_event_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgBattleCupVictory::_InternalParse;
        object = msg->mutable_recent_battle_cup_victory();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 rank_tier = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_rank_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leaderboard_rank = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_leaderboard_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_plus_subscriber = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_plus_subscriber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 plus_original_start_date = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_plus_original_start_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank_tier_score = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_rank_tier_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 previous_rank_tier = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_previous_rank_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 background_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_background_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_badge_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_event_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recent_battle_cup_victory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_tier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_rank_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaderboard_rank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_leaderboard_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderboard_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plus_subscriber = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_plus_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plus_subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 plus_original_start_date = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_plus_original_start_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_original_start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_tier_score = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_rank_tier_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_tier_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 previous_rank_tier = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_previous_rank_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_rank_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 background_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background_def_index(), output);
  }

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->slots(static_cast<int>(i)),
      output);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_points(), output);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_points(), output);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->event_id(), output);
  }

  // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::recent_battle_cup_victory(this), output);
  }

  // optional uint32 rank_tier = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank_tier(), output);
  }

  // optional uint32 leaderboard_rank = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leaderboard_rank(), output);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_plus_subscriber(), output);
  }

  // optional uint32 plus_original_start_date = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->plus_original_start_date(), output);
  }

  // optional uint32 rank_tier_score = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rank_tier_score(), output);
  }

  // optional uint32 previous_rank_tier = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->previous_rank_tier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard)
}

::google::protobuf::uint8* CMsgDOTAProfileCard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 background_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->background_def_index(), target);
  }

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->slots(static_cast<int>(i)), target);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->event_id(), target);
  }

  // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::recent_battle_cup_victory(this), target);
  }

  // optional uint32 rank_tier = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank_tier(), target);
  }

  // optional uint32 leaderboard_rank = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leaderboard_rank(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_plus_subscriber(), target);
  }

  // optional uint32 plus_original_start_date = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->plus_original_start_date(), target);
  }

  // optional uint32 rank_tier_score = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rank_tier_score(), target);
  }

  // optional uint32 previous_rank_tier = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->previous_rank_tier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard)
  return target;
}

size_t CMsgDOTAProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slots(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *recent_battle_cup_victory_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 background_def_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_def_index());
    }

    // optional uint32 badge_points = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }

    // optional uint32 event_points = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 event_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 rank_tier = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_tier());
    }

    // optional uint32 leaderboard_rank = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderboard_rank());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 plus_original_start_date = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus_original_start_date());
    }

    // optional uint32 rank_tier_score = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_tier_score());
    }

    // optional uint32 previous_rank_tier = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_rank_tier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProfileCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_recent_battle_cup_victory()->::proto::dota::CMsgBattleCupVictory::MergeFrom(from.recent_battle_cup_victory());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      background_def_index_ = from.background_def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      badge_points_ = from.badge_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      rank_tier_ = from.rank_tier_;
    }
    if (cached_has_bits & 0x00000080u) {
      leaderboard_rank_ = from.leaderboard_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000200u) {
      plus_original_start_date_ = from.plus_original_start_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      rank_tier_score_ = from.rank_tier_score_;
    }
    if (cached_has_bits & 0x00000800u) {
      previous_rank_tier_ = from.previous_rank_tier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard::Swap(CMsgDOTAProfileCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard::InternalSwap(CMsgDOTAProfileCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&slots_)->InternalSwap(CastToBase(&other->slots_));
  swap(recent_battle_cup_victory_, other->recent_battle_cup_victory_);
  swap(account_id_, other->account_id_);
  swap(background_def_index_, other->background_def_index_);
  swap(badge_points_, other->badge_points_);
  swap(event_points_, other->event_points_);
  swap(event_id_, other->event_id_);
  swap(rank_tier_, other->rank_tier_);
  swap(leaderboard_rank_, other->leaderboard_rank_);
  swap(is_plus_subscriber_, other->is_plus_subscriber_);
  swap(plus_original_start_date_, other->plus_original_start_date_);
  swap(rank_tier_score_, other->rank_tier_score_);
  swap(previous_rank_tier_, other->previous_rank_tier_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAPlayerChallenge::InitAsDefaultInstance() {
}
class CSODOTAPlayerChallenge::HasBitSetters {
 public:
  static void set_has_account_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_slot_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_int_param_0(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_int_param_1(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_created_time(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_completed(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_sequence_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_challenge_tier(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_flags(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_attempts(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_complete_limit(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_quest_rank(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_max_quest_rank(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_instance_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_hero_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_template_id(CSODOTAPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPlayerChallenge::kAccountIdFieldNumber;
const int CSODOTAPlayerChallenge::kEventIdFieldNumber;
const int CSODOTAPlayerChallenge::kSlotIdFieldNumber;
const int CSODOTAPlayerChallenge::kIntParam0FieldNumber;
const int CSODOTAPlayerChallenge::kIntParam1FieldNumber;
const int CSODOTAPlayerChallenge::kCreatedTimeFieldNumber;
const int CSODOTAPlayerChallenge::kCompletedFieldNumber;
const int CSODOTAPlayerChallenge::kSequenceIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTierFieldNumber;
const int CSODOTAPlayerChallenge::kFlagsFieldNumber;
const int CSODOTAPlayerChallenge::kAttemptsFieldNumber;
const int CSODOTAPlayerChallenge::kCompleteLimitFieldNumber;
const int CSODOTAPlayerChallenge::kQuestRankFieldNumber;
const int CSODOTAPlayerChallenge::kMaxQuestRankFieldNumber;
const int CSODOTAPlayerChallenge::kInstanceIdFieldNumber;
const int CSODOTAPlayerChallenge::kHeroIdFieldNumber;
const int CSODOTAPlayerChallenge::kTemplateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPlayerChallenge)
}
CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&template_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(template_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&template_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(template_id_));
}

CSODOTAPlayerChallenge::~CSODOTAPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPlayerChallenge)
  SharedDtor();
}

void CSODOTAPlayerChallenge::SharedDtor() {
}

void CSODOTAPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAPlayerChallenge& CSODOTAPlayerChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(sequence_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&challenge_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&challenge_tier_)) + sizeof(hero_id_));
  }
  template_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAPlayerChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAPlayerChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 int_param_0 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_int_param_0(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 int_param_1 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_int_param_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 created_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_created_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 completed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_sequence_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_tier = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_challenge_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 attempts = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_attempts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 complete_limit = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_complete_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quest_rank = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_quest_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_quest_rank = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_max_quest_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 instance_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 template_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_template_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPlayerChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_param_0 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_int_param_0(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_param_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_int_param_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 created_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_created_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 completed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_sequence_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_tier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_challenge_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_attempts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 complete_limit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_complete_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quest_rank = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_quest_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_quest_rank = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_max_quest_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_quest_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 instance_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 template_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_template_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPlayerChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint32 int_param_0 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->int_param_0(), output);
  }

  // optional uint32 int_param_1 = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->int_param_1(), output);
  }

  // optional uint32 created_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->created_time(), output);
  }

  // optional uint32 completed = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->completed(), output);
  }

  // optional uint32 sequence_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sequence_id(), output);
  }

  // optional uint32 challenge_tier = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_tier(), output);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 attempts = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attempts(), output);
  }

  // optional uint32 complete_limit = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->complete_limit(), output);
  }

  // optional uint32 quest_rank = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->quest_rank(), output);
  }

  // optional uint32 max_quest_rank = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->max_quest_rank(), output);
  }

  // optional uint32 instance_id = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->instance_id(), output);
  }

  // optional uint32 hero_id = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->hero_id(), output);
  }

  // optional uint32 template_id = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->template_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPlayerChallenge)
}

::google::protobuf::uint8* CSODOTAPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint32 int_param_0 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->int_param_0(), target);
  }

  // optional uint32 int_param_1 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->int_param_1(), target);
  }

  // optional uint32 created_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->created_time(), target);
  }

  // optional uint32 completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->completed(), target);
  }

  // optional uint32 sequence_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sequence_id(), target);
  }

  // optional uint32 challenge_tier = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_tier(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  // optional uint32 attempts = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attempts(), target);
  }

  // optional uint32 complete_limit = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->complete_limit(), target);
  }

  // optional uint32 quest_rank = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->quest_rank(), target);
  }

  // optional uint32 max_quest_rank = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->max_quest_rank(), target);
  }

  // optional uint32 instance_id = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->instance_id(), target);
  }

  // optional uint32 hero_id = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->hero_id(), target);
  }

  // optional uint32 template_id = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->template_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPlayerChallenge)
  return target;
}

size_t CSODOTAPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 int_param_0 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_0());
    }

    // optional uint32 int_param_1 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_1());
    }

    // optional uint32 created_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_time());
    }

    // optional uint32 completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed());
    }

    // optional uint32 sequence_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 challenge_tier = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_tier());
    }

    // optional uint32 flags = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 attempts = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempts());
    }

    // optional uint32 complete_limit = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_limit());
    }

    // optional uint32 quest_rank = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_rank());
    }

    // optional uint32 max_quest_rank = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_quest_rank());
    }

    // optional uint32 instance_id = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

    // optional uint32 hero_id = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // optional uint32 template_id = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->template_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPlayerChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPlayerChallenge)
    MergeFrom(*source);
  }
}

void CSODOTAPlayerChallenge::MergeFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_param_0_ = from.int_param_0_;
    }
    if (cached_has_bits & 0x00000010u) {
      int_param_1_ = from.int_param_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      created_time_ = from.created_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      completed_ = from.completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      challenge_tier_ = from.challenge_tier_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      attempts_ = from.attempts_;
    }
    if (cached_has_bits & 0x00000800u) {
      complete_limit_ = from.complete_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      quest_rank_ = from.quest_rank_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_quest_rank_ = from.max_quest_rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_template_id(from.template_id());
  }
}

void CSODOTAPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPlayerChallenge::CopyFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPlayerChallenge::IsInitialized() const {
  return true;
}

void CSODOTAPlayerChallenge::Swap(CSODOTAPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPlayerChallenge::InternalSwap(CSODOTAPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(event_id_, other->event_id_);
  swap(slot_id_, other->slot_id_);
  swap(int_param_0_, other->int_param_0_);
  swap(int_param_1_, other->int_param_1_);
  swap(created_time_, other->created_time_);
  swap(completed_, other->completed_);
  swap(sequence_id_, other->sequence_id_);
  swap(challenge_tier_, other->challenge_tier_);
  swap(flags_, other->flags_);
  swap(attempts_, other->attempts_);
  swap(complete_limit_, other->complete_limit_);
  swap(quest_rank_, other->quest_rank_);
  swap(max_quest_rank_, other->max_quest_rank_);
  swap(instance_id_, other->instance_id_);
  swap(hero_id_, other->hero_id_);
  swap(template_id_, other->template_id_);
}

::google::protobuf::Metadata CSODOTAPlayerChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCRerollPlayerChallenge::InitAsDefaultInstance() {
}
class CMsgClientToGCRerollPlayerChallenge::HasBitSetters {
 public:
  static void set_has_event_id(CMsgClientToGCRerollPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sequence_id(CMsgClientToGCRerollPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgClientToGCRerollPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRerollPlayerChallenge::kEventIdFieldNumber;
const int CMsgClientToGCRerollPlayerChallenge::kSequenceIdFieldNumber;
const int CMsgClientToGCRerollPlayerChallenge::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}
CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
}

CMsgClientToGCRerollPlayerChallenge::~CMsgClientToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgClientToGCRerollPlayerChallenge::SharedDtor() {
}

void CMsgClientToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCRerollPlayerChallenge& CMsgClientToGCRerollPlayerChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCRerollPlayerChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCRerollPlayerChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sequence_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sequence_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgClientToGCRerollPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgClientToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRerollPlayerChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCRerollPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRerollPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCRerollPlayerChallenge::Swap(CMsgClientToGCRerollPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRerollPlayerChallenge::InternalSwap(CMsgClientToGCRerollPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_id_, other->event_id_);
  swap(sequence_id_, other->sequence_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CMsgClientToGCRerollPlayerChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRerollPlayerChallengeResponse::InitAsDefaultInstance() {
}
class CMsgGCRerollPlayerChallengeResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgGCRerollPlayerChallengeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRerollPlayerChallengeResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}
CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::SharedCtor() {
  result_ = 0;
}

CMsgGCRerollPlayerChallengeResponse::~CMsgGCRerollPlayerChallengeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  SharedDtor();
}

void CMsgGCRerollPlayerChallengeResponse::SharedDtor() {
}

void CMsgGCRerollPlayerChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCRerollPlayerChallengeResponse& CMsgGCRerollPlayerChallengeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCRerollPlayerChallengeResponse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCRerollPlayerChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCRerollPlayerChallengeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCRerollPlayerChallengeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCRerollPlayerChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}

::google::protobuf::uint8* CMsgGCRerollPlayerChallengeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return target;
}

size_t CMsgGCRerollPlayerChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRerollPlayerChallengeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCRerollPlayerChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRerollPlayerChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRerollPlayerChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRerollPlayerChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgGCRerollPlayerChallengeResponse::Swap(CMsgGCRerollPlayerChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRerollPlayerChallengeResponse::InternalSwap(CMsgGCRerollPlayerChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCRerollPlayerChallengeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCTopCustomGamesList::InitAsDefaultInstance() {
}
class CMsgGCTopCustomGamesList::HasBitSetters {
 public:
  static void set_has_game_of_the_day(CMsgGCTopCustomGamesList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCTopCustomGamesList::kTopCustomGamesFieldNumber;
const int CMsgGCTopCustomGamesList::kGameOfTheDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCTopCustomGamesList)
}
CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      top_custom_games_(from.top_custom_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_of_the_day_ = from.game_of_the_day_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::SharedCtor() {
  game_of_the_day_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCTopCustomGamesList::~CMsgGCTopCustomGamesList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCTopCustomGamesList)
  SharedDtor();
}

void CMsgGCTopCustomGamesList::SharedDtor() {
}

void CMsgGCTopCustomGamesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCTopCustomGamesList& CMsgGCTopCustomGamesList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCTopCustomGamesList_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCTopCustomGamesList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCTopCustomGamesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_custom_games_.Clear();
  game_of_the_day_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCTopCustomGamesList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCTopCustomGamesList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint64 top_custom_games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_top_custom_games(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_top_custom_games();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 game_of_the_day = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_game_of_the_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCTopCustomGamesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCTopCustomGamesList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 top_custom_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_top_custom_games())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_custom_games())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 game_of_the_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_game_of_the_day(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_of_the_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCTopCustomGamesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCTopCustomGamesList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCTopCustomGamesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCTopCustomGamesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  for (int i = 0, n = this->top_custom_games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->top_custom_games(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_of_the_day = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->game_of_the_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCTopCustomGamesList)
}

::google::protobuf::uint8* CMsgGCTopCustomGamesList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCTopCustomGamesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->top_custom_games_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_of_the_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->game_of_the_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCTopCustomGamesList)
  return target;
}

size_t CMsgGCTopCustomGamesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCTopCustomGamesList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->top_custom_games_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->top_custom_games_size());
    total_size += data_size;
  }

  // optional uint64 game_of_the_day = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->game_of_the_day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCTopCustomGamesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCTopCustomGamesList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCTopCustomGamesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCTopCustomGamesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCTopCustomGamesList)
    MergeFrom(*source);
  }
}

void CMsgGCTopCustomGamesList::MergeFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_custom_games_.MergeFrom(from.top_custom_games_);
  if (from.has_game_of_the_day()) {
    set_game_of_the_day(from.game_of_the_day());
  }
}

void CMsgGCTopCustomGamesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTopCustomGamesList::CopyFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTopCustomGamesList::IsInitialized() const {
  return true;
}

void CMsgGCTopCustomGamesList::Swap(CMsgGCTopCustomGamesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCTopCustomGamesList::InternalSwap(CMsgGCTopCustomGamesList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  top_custom_games_.InternalSwap(&other->top_custom_games_);
  swap(game_of_the_day_, other->game_of_the_day_);
}

::google::protobuf::Metadata CMsgGCTopCustomGamesList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_TeamDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_TeamDetails::HasBitSetters {
 public:
  static void set_has_team_number(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_name(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_logo(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_tag(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_score(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_net_worth(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_only_team(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_cheers(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_team_logo_url(CMsgDOTARealtimeGameStats_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamTagFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kNetWorthFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kPlayersFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kOnlyTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kCheersFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamLogoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}
CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_logo_url()) {
    team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
  }
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_worth_) -
      reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStats_TeamDetails::~CMsgDOTARealtimeGameStats_TeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_TeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats_TeamDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_team_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(only_team_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&cheers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&cheers_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_TeamDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_TeamDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional bool only_team = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_only_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cheers = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_cheers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_worth = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_tag = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_logo_url = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
        object = msg->mutable_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_only_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_cheers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_logo_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional bool only_team = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->only_team(), output);
  }

  // optional uint32 cheers = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cheers(), output);
  }

  // optional uint32 net_worth = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->net_worth(), output);
  }

  // optional string team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->team_tag(), output);
  }

  // optional string team_logo_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->team_logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_TeamDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->players(static_cast<int>(i)), target);
  }

  // optional bool only_team = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->only_team(), target);
  }

  // optional uint32 cheers = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cheers(), target);
  }

  // optional uint32 net_worth = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->net_worth(), target);
  }

  // optional string team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->team_tag(), target);
  }

  // optional string team_logo_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->team_logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_logo_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_logo_url());
    }

    // optional uint32 team_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional fixed64 team_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool only_team = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 cheers = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers());
    }

    // optional uint32 net_worth = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_TeamDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_TeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      only_team_ = from.only_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      cheers_ = from.cheers_;
    }
    if (cached_has_bits & 0x00000200u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Swap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_logo_url_.Swap(&other->team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_number_, other->team_number_);
  swap(team_id_, other->team_id_);
  swap(team_logo_, other->team_logo_);
  swap(score_, other->score_);
  swap(only_team_, other->only_team_);
  swap(cheers_, other->cheers_);
  swap(net_worth_, other->net_worth_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_TeamDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_ItemDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_ItemDetails::HasBitSetters {
 public:
  static void set_has_item_ability_id(CMsgDOTARealtimeGameStats_ItemDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTARealtimeGameStats_ItemDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time(CMsgDOTARealtimeGameStats_ItemDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sold(CMsgDOTARealtimeGameStats_ItemDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_stackcount(CMsgDOTARealtimeGameStats_ItemDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_ItemDetails::kItemAbilityIdFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kSoldFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kStackcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}
CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stackcount_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stackcount_) -
      reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
}

CMsgDOTARealtimeGameStats_ItemDetails::~CMsgDOTARealtimeGameStats_ItemDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_ItemDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_ItemDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_ItemDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_ItemDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stackcount_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_ItemDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_ItemDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sold = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stackcount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_stackcount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_ItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_sold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stackcount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_stackcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stackcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_ability_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional bool sold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sold(), output);
  }

  // optional uint32 stackcount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stackcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_ItemDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_ability_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional bool sold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sold(), target);
  }

  // optional uint32 stackcount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stackcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_ItemDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 item_ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_ability_id());
    }

    // optional int32 time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool sold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 stackcount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stackcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_ItemDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_ItemDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sold_ = from.sold_;
    }
    if (cached_has_bits & 0x00000010u) {
      stackcount_ = from.stackcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_ItemDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Swap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_ItemDetails::InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_ability_id_, other->item_ability_id_);
  swap(time_, other->time_);
  swap(sold_, other->sold_);
  swap(stackcount_, other->stackcount_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_ItemDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_AbilityDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_AbilityDetails::HasBitSetters {
 public:
  static void set_has_id(CMsgDOTARealtimeGameStats_AbilityDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTARealtimeGameStats_AbilityDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_level(CMsgDOTARealtimeGameStats_AbilityDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cooldown(CMsgDOTARealtimeGameStats_AbilityDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_cooldown_max(CMsgDOTARealtimeGameStats_AbilityDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_AbilityDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}
CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_max_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooldown_max_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
}

CMsgDOTARealtimeGameStats_AbilityDetails::~CMsgDOTARealtimeGameStats_AbilityDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_AbilityDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_AbilityDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_AbilityDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_max_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_AbilityDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_AbilityDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float cooldown = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_cooldown(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float cooldown_max = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_cooldown_max(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_AbilityDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_cooldown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_cooldown_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional float cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cooldown(), output);
  }

  // optional float cooldown_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cooldown_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional float cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cooldown(), target);
  }

  // optional float cooldown_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cooldown_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float cooldown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float cooldown_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_AbilityDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000010u) {
      cooldown_max_ = from.cooldown_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityDetails::InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(cooldown_, other->cooldown_);
  swap(cooldown_max_, other->cooldown_max_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_HeroToHeroStats::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_HeroToHeroStats::HasBitSetters {
 public:
  static void set_has_victimid(CMsgDOTARealtimeGameStats_HeroToHeroStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kills(CMsgDOTARealtimeGameStats_HeroToHeroStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_assists(CMsgDOTARealtimeGameStats_HeroToHeroStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kVictimidFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kAssistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}
CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&victimid_, &from.victimid_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedCtor() {
  ::memset(&victimid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assists_) -
      reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::~CMsgDOTARealtimeGameStats_HeroToHeroStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_HeroToHeroStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_HeroToHeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&victimid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_HeroToHeroStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_HeroToHeroStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 victimid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_victimid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victimid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_victimid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victimid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victimid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victimid(), output);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kills(), output);
  }

  // optional uint32 assists = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victimid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victimid(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kills(), target);
  }

  // optional uint32 assists = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_HeroToHeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 victimid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victimid());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 assists = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_HeroToHeroStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_HeroToHeroStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      victimid_ = from.victimid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(victimid_, other->victimid_);
  swap(kills_, other->kills_);
  swap(assists_, other->assists_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_HeroToHeroStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_AbilityList::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_AbilityList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_AbilityList::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}
CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedCtor() {
}

CMsgDOTARealtimeGameStats_AbilityList::~CMsgDOTARealtimeGameStats_AbilityList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_AbilityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_AbilityList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_AbilityList_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_AbilityList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_AbilityList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_AbilityList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_AbilityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_AbilityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityList::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityList::Swap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityList::InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.InternalSwap(&other->id_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_PlayerDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_PlayerDetails::HasBitSetters {
 public:
  static void set_has_accountid(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playerid(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_heroid(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_healthpoints(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_maxhealthpoints(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_healthregenrate(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_manapoints(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_maxmanapoints(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_manaregenrate(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_base_strength(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_base_agility(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_base_intelligence(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_base_armor(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_base_movespeed(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_base_damage(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_strength(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_agility(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_intelligence(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_armor(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_movespeed(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_damage(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_hero_damage(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_tower_damage(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_level(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_kill_count(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_death_count(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_assists_count(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_denies_count(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_lh_count(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_hero_healing(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_gold_per_min(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_xp_per_min(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_net_gold(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_gold(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_x(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_y(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_respawn_time(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_ultimate_cooldown(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_has_buyback(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_has_ultimate(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_has_ultimate_mana(CMsgDOTARealtimeGameStats_PlayerDetails* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxhealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxmanapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManaregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTowerDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAbilitiesFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroHealingFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXpPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNetGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kRespawnTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kUltimateCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasBuybackFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStashitemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemshoppinglistFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroToHeroStatsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateManaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}
CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      items_(from.items_),
      stashitems_(from.stashitems_),
      itemshoppinglist_(from.itemshoppinglist_),
      levelpoints_(from.levelpoints_),
      hero_to_hero_stats_(from.hero_to_hero_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_ultimate_mana_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(has_ultimate_mana_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_ultimate_mana_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(has_ultimate_mana_));
}

CMsgDOTARealtimeGameStats_PlayerDetails::~CMsgDOTARealtimeGameStats_PlayerDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_PlayerDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  items_.Clear();
  stashitems_.Clear();
  itemshoppinglist_.Clear();
  levelpoints_.Clear();
  hero_to_hero_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healthregenrate_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(healthregenrate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&manapoints_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_movespeed_) -
        reinterpret_cast<char*>(&manapoints_)) + sizeof(base_movespeed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&base_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_damage_) -
        reinterpret_cast<char*>(&base_damage_)) + sizeof(hero_damage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tower_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_healing_) -
        reinterpret_cast<char*>(&tower_damage_)) + sizeof(hero_healing_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gold_per_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultimate_cooldown_) -
        reinterpret_cast<char*>(&gold_per_min_)) + sizeof(ultimate_cooldown_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&has_buyback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_ultimate_mana_) -
        reinterpret_cast<char*>(&has_buyback_)) + sizeof(has_ultimate_mana_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_PlayerDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_PlayerDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_heroid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 healthpoints = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_healthpoints(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 maxhealthpoints = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_maxhealthpoints(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float healthregenrate = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_healthregenrate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 manapoints = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_manapoints(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 maxmanapoints = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_maxmanapoints(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float manaregenrate = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_manaregenrate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 base_strength = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_base_strength(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 base_agility = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_base_agility(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 base_intelligence = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_base_intelligence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 base_armor = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_base_armor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 base_movespeed = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_base_movespeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 base_damage = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_base_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 strength = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_strength(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 agility = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_agility(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 intelligence = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_intelligence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 armor = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_armor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 movespeed = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_movespeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 damage = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_hero_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_tower_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails::_InternalParse;
          object = msg->add_abilities();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 466 && (ptr += 2));
        break;
      }
      // optional uint32 level = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kill_count = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_kill_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 death_count = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_death_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists_count = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_assists_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies_count = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_denies_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lh_count = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_lh_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_healing = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_per_min = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gold_per_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xp_per_min = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_xp_per_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_gold = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_net_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 respawn_time = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_respawn_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ultimate_cooldown = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_ultimate_cooldown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_buyback = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_has_buyback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 730 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails::_InternalParse;
          object = msg->add_stashitems();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 738 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails::_InternalParse;
          object = msg->add_itemshoppinglist();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 746 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList::_InternalParse;
          object = msg->add_levelpoints();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 754 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats::_InternalParse;
          object = msg->add_hero_to_hero_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 762 && (ptr += 2));
        break;
      }
      // optional bool has_ultimate = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_has_ultimate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_ultimate_mana = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_has_ultimate_mana(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_heroid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healthpoints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_healthpoints(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxhealthpoints = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_maxhealthpoints(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhealthpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healthregenrate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_healthregenrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthregenrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 manapoints = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_manapoints(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manapoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxmanapoints = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_maxmanapoints(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmanapoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float manaregenrate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_manaregenrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &manaregenrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_strength = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_base_strength(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_agility = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_base_agility(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_agility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_intelligence = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_base_intelligence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_intelligence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_armor = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_base_armor(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_movespeed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_base_movespeed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_damage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_base_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 strength = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_strength(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 agility = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_agility(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intelligence = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_intelligence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 armor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_armor(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 movespeed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_movespeed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_hero_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_tower_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_kill_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 death_count = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_death_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists_count = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_assists_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies_count = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_denies_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lh_count = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_lh_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_hero_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_gold_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_per_min = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_xp_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_gold = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_net_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (309 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (317 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 respawn_time = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_respawn_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respawn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ultimate_cooldown = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          HasBitSetters::set_has_ultimate_cooldown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultimate_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_buyback = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_has_buyback(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_buyback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (346 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (354 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stashitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_itemshoppinglist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (370 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_levelpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (378 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hero_to_hero_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ultimate = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_has_ultimate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ultimate_mana = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_has_ultimate_mana(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_mana_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 healthpoints = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->healthpoints(), output);
  }

  // optional uint32 maxhealthpoints = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxhealthpoints(), output);
  }

  // optional float healthregenrate = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->healthregenrate(), output);
  }

  // optional uint32 manapoints = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->manapoints(), output);
  }

  // optional uint32 maxmanapoints = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxmanapoints(), output);
  }

  // optional float manaregenrate = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->manaregenrate(), output);
  }

  // optional uint32 base_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->base_strength(), output);
  }

  // optional uint32 base_agility = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->base_agility(), output);
  }

  // optional uint32 base_intelligence = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->base_intelligence(), output);
  }

  // optional int32 base_armor = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->base_armor(), output);
  }

  // optional uint32 base_movespeed = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->base_movespeed(), output);
  }

  // optional uint32 base_damage = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->base_damage(), output);
  }

  // optional uint32 strength = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->strength(), output);
  }

  // optional uint32 agility = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->agility(), output);
  }

  // optional uint32 intelligence = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->intelligence(), output);
  }

  // optional int32 armor = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->armor(), output);
  }

  // optional uint32 movespeed = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->movespeed(), output);
  }

  // optional uint32 damage = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage(), output);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26,
      this->abilities(static_cast<int>(i)),
      output);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 kill_count = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->kill_count(), output);
  }

  // optional uint32 death_count = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->death_count(), output);
  }

  // optional uint32 assists_count = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->assists_count(), output);
  }

  // optional uint32 denies_count = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->denies_count(), output);
  }

  // optional uint32 lh_count = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lh_count(), output);
  }

  // optional uint32 hero_healing = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->hero_healing(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 gold_per_min = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_min = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->xp_per_min(), output);
  }

  // optional uint32 net_gold = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->net_gold(), output);
  }

  // optional uint32 gold = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->gold(), output);
  }

  // optional float x = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->x(), output);
  }

  // optional float y = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->y(), output);
  }

  // optional int32 respawn_time = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->respawn_time(), output);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ultimate_cooldown(), output);
  }

  // optional bool has_buyback = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->has_buyback(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43,
      this->items(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stashitems_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44,
      this->stashitems(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->itemshoppinglist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45,
      this->itemshoppinglist(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->levelpoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46,
      this->levelpoints(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_to_hero_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47,
      this->hero_to_hero_stats(static_cast<int>(i)),
      output);
  }

  // optional bool has_ultimate = 48;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->has_ultimate(), output);
  }

  // optional bool has_ultimate_mana = 49;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->has_ultimate_mana(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PlayerDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 healthpoints = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->healthpoints(), target);
  }

  // optional uint32 maxhealthpoints = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxhealthpoints(), target);
  }

  // optional float healthregenrate = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->healthregenrate(), target);
  }

  // optional uint32 manapoints = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->manapoints(), target);
  }

  // optional uint32 maxmanapoints = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxmanapoints(), target);
  }

  // optional float manaregenrate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->manaregenrate(), target);
  }

  // optional uint32 base_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->base_strength(), target);
  }

  // optional uint32 base_agility = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->base_agility(), target);
  }

  // optional uint32 base_intelligence = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->base_intelligence(), target);
  }

  // optional int32 base_armor = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->base_armor(), target);
  }

  // optional uint32 base_movespeed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->base_movespeed(), target);
  }

  // optional uint32 base_damage = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->base_damage(), target);
  }

  // optional uint32 strength = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->strength(), target);
  }

  // optional uint32 agility = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->agility(), target);
  }

  // optional uint32 intelligence = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->intelligence(), target);
  }

  // optional int32 armor = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->armor(), target);
  }

  // optional uint32 movespeed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->movespeed(), target);
  }

  // optional uint32 damage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->abilities(static_cast<int>(i)), target);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 kill_count = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->kill_count(), target);
  }

  // optional uint32 death_count = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->death_count(), target);
  }

  // optional uint32 assists_count = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->assists_count(), target);
  }

  // optional uint32 denies_count = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->denies_count(), target);
  }

  // optional uint32 lh_count = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lh_count(), target);
  }

  // optional uint32 hero_healing = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->hero_healing(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 gold_per_min = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_min = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->xp_per_min(), target);
  }

  // optional uint32 net_gold = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->net_gold(), target);
  }

  // optional uint32 gold = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->gold(), target);
  }

  // optional float x = 38;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->x(), target);
  }

  // optional float y = 39;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->y(), target);
  }

  // optional int32 respawn_time = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->respawn_time(), target);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ultimate_cooldown(), target);
  }

  // optional bool has_buyback = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->has_buyback(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->items(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stashitems_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        44, this->stashitems(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->itemshoppinglist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, this->itemshoppinglist(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->levelpoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, this->levelpoints(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_to_hero_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, this->hero_to_hero_stats(static_cast<int>(i)), target);
  }

  // optional bool has_ultimate = 48;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->has_ultimate(), target);
  }

  // optional bool has_ultimate_mana = 49;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->has_ultimate_mana(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->stashitems_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stashitems(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->itemshoppinglist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->itemshoppinglist(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->levelpoints_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->levelpoints(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->hero_to_hero_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hero_to_hero_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 team = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 healthpoints = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthpoints());
    }

    // optional uint32 maxhealthpoints = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhealthpoints());
    }

    // optional float healthregenrate = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 manapoints = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manapoints());
    }

    // optional uint32 maxmanapoints = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmanapoints());
    }

    // optional float manaregenrate = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 base_strength = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_strength());
    }

    // optional uint32 base_agility = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_agility());
    }

    // optional uint32 base_intelligence = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_intelligence());
    }

    // optional int32 base_armor = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_armor());
    }

    // optional uint32 base_movespeed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_movespeed());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 base_damage = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage());
    }

    // optional uint32 strength = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 agility = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 intelligence = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional int32 armor = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional uint32 movespeed = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 damage = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 hero_damage = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tower_damage = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 level = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

    // optional uint32 assists_count = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 hero_healing = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 gold_per_min = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_min = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 net_gold = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_gold());
    }

    // optional uint32 gold = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float y = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional int32 respawn_time = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respawn_time());
    }

    // optional uint32 ultimate_cooldown = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultimate_cooldown());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool has_buyback = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate = 48;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate_mana = 49;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PlayerDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_PlayerDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  stashitems_.MergeFrom(from.stashitems_);
  itemshoppinglist_.MergeFrom(from.itemshoppinglist_);
  levelpoints_.MergeFrom(from.levelpoints_);
  hero_to_hero_stats_.MergeFrom(from.hero_to_hero_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      healthpoints_ = from.healthpoints_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxhealthpoints_ = from.maxhealthpoints_;
    }
    if (cached_has_bits & 0x00000080u) {
      healthregenrate_ = from.healthregenrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      manapoints_ = from.manapoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      maxmanapoints_ = from.maxmanapoints_;
    }
    if (cached_has_bits & 0x00000400u) {
      manaregenrate_ = from.manaregenrate_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_strength_ = from.base_strength_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_agility_ = from.base_agility_;
    }
    if (cached_has_bits & 0x00002000u) {
      base_intelligence_ = from.base_intelligence_;
    }
    if (cached_has_bits & 0x00004000u) {
      base_armor_ = from.base_armor_;
    }
    if (cached_has_bits & 0x00008000u) {
      base_movespeed_ = from.base_movespeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      base_damage_ = from.base_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      strength_ = from.strength_;
    }
    if (cached_has_bits & 0x00040000u) {
      agility_ = from.agility_;
    }
    if (cached_has_bits & 0x00080000u) {
      intelligence_ = from.intelligence_;
    }
    if (cached_has_bits & 0x00100000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00200000u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00400000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00800000u) {
      hero_damage_ = from.hero_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x04000000u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      death_count_ = from.death_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x40000000u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x80000000u) {
      hero_healing_ = from.hero_healing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_gold_ = from.net_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      has_buyback_ = from.has_buyback_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_ultimate_ = from.has_ultimate_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_ultimate_mana_ = from.has_ultimate_mana_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  CastToBase(&stashitems_)->InternalSwap(CastToBase(&other->stashitems_));
  CastToBase(&itemshoppinglist_)->InternalSwap(CastToBase(&other->itemshoppinglist_));
  CastToBase(&levelpoints_)->InternalSwap(CastToBase(&other->levelpoints_));
  CastToBase(&hero_to_hero_stats_)->InternalSwap(CastToBase(&other->hero_to_hero_stats_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(playerid_, other->playerid_);
  swap(team_, other->team_);
  swap(heroid_, other->heroid_);
  swap(healthpoints_, other->healthpoints_);
  swap(maxhealthpoints_, other->maxhealthpoints_);
  swap(healthregenrate_, other->healthregenrate_);
  swap(manapoints_, other->manapoints_);
  swap(maxmanapoints_, other->maxmanapoints_);
  swap(manaregenrate_, other->manaregenrate_);
  swap(base_strength_, other->base_strength_);
  swap(base_agility_, other->base_agility_);
  swap(base_intelligence_, other->base_intelligence_);
  swap(base_armor_, other->base_armor_);
  swap(base_movespeed_, other->base_movespeed_);
  swap(base_damage_, other->base_damage_);
  swap(strength_, other->strength_);
  swap(agility_, other->agility_);
  swap(intelligence_, other->intelligence_);
  swap(armor_, other->armor_);
  swap(movespeed_, other->movespeed_);
  swap(damage_, other->damage_);
  swap(hero_damage_, other->hero_damage_);
  swap(tower_damage_, other->tower_damage_);
  swap(level_, other->level_);
  swap(kill_count_, other->kill_count_);
  swap(death_count_, other->death_count_);
  swap(assists_count_, other->assists_count_);
  swap(denies_count_, other->denies_count_);
  swap(lh_count_, other->lh_count_);
  swap(hero_healing_, other->hero_healing_);
  swap(gold_per_min_, other->gold_per_min_);
  swap(xp_per_min_, other->xp_per_min_);
  swap(net_gold_, other->net_gold_);
  swap(gold_, other->gold_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(respawn_time_, other->respawn_time_);
  swap(ultimate_cooldown_, other->ultimate_cooldown_);
  swap(has_buyback_, other->has_buyback_);
  swap(has_ultimate_, other->has_ultimate_);
  swap(has_ultimate_mana_, other->has_ultimate_mana_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PlayerDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_BuildingDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_BuildingDetails::HasBitSetters {
 public:
  static void set_has_team(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_heading(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lane(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tier(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_type(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_x(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_y(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_destroyed(CMsgDOTARealtimeGameStats_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kDestroyedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}
CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destroyed_) -
      reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStats_BuildingDetails::~CMsgDOTARealtimeGameStats_BuildingDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats_BuildingDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroyed_) -
        reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_BuildingDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_BuildingDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float heading = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_heading(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 lane = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lane(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tier = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool destroyed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_destroyed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lane(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool destroyed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_destroyed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional float heading = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional bool destroyed = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->destroyed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BuildingDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional float heading = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional bool destroyed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->destroyed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float x = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BuildingDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_BuildingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(heading_, other->heading_);
  swap(lane_, other->lane_);
  swap(tier_, other->tier_);
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(destroyed_, other->destroyed_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BuildingDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_KillDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_KillDetails::HasBitSetters {
 public:
  static void set_has_player_id(CMsgDOTARealtimeGameStats_KillDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_death_time(CMsgDOTARealtimeGameStats_KillDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_killer_player_id(CMsgDOTARealtimeGameStats_KillDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_KillDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kDeathTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kKillerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}
CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&killer_player_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killer_player_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
}

CMsgDOTARealtimeGameStats_KillDetails::~CMsgDOTARealtimeGameStats_KillDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_KillDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_KillDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_KillDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_KillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killer_player_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_KillDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_KillDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 death_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_death_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 killer_player_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_killer_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_KillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 death_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_death_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killer_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_killer_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional int32 death_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->death_time(), output);
  }

  // optional uint32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killer_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_KillDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 death_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->death_time(), target);
  }

  // optional uint32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killer_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_KillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional int32 death_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_time());
    }

    // optional uint32 killer_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_KillDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_KillDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      killer_player_id_ = from.killer_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_KillDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_KillDetails::Swap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_KillDetails::InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
  swap(death_time_, other->death_time_);
  swap(killer_player_id_, other->killer_player_id_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_KillDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_BroadcasterDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_BroadcasterDetails::HasBitSetters {
 public:
  static void set_has_player_id(CMsgDOTARealtimeGameStats_BroadcasterDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_selected_hero(CMsgDOTARealtimeGameStats_BroadcasterDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_selected_graph(CMsgDOTARealtimeGameStats_BroadcasterDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}
CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_graph_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_graph_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::~CMsgDOTARealtimeGameStats_BroadcasterDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_BroadcasterDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_BroadcasterDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_graph_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_BroadcasterDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_BroadcasterDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 selected_hero = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_selected_hero(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 selected_graph = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_selected_graph(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_hero = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_selected_hero(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_graph = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_selected_graph(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 selected_hero = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selected_hero(), output);
  }

  // optional uint32 selected_graph = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selected_graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 selected_hero = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selected_hero(), target);
  }

  // optional uint32 selected_graph = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selected_graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BroadcasterDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 selected_hero = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_hero());
    }

    // optional uint32 selected_graph = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_graph());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BroadcasterDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_BroadcasterDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_hero_ = from.selected_hero_;
    }
    if (cached_has_bits & 0x00000004u) {
      selected_graph_ = from.selected_graph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
  swap(selected_hero_, other->selected_hero_);
  swap(selected_graph_, other->selected_graph_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BroadcasterDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_PickBanDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_PickBanDetails::HasBitSetters {
 public:
  static void set_has_hero(CMsgDOTARealtimeGameStats_PickBanDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CMsgDOTARealtimeGameStats_PickBanDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_PickBanDetails::kHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_PickBanDetails::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}
CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_, &from.hero_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedCtor() {
  ::memset(&hero_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&hero_)) + sizeof(team_));
}

CMsgDOTARealtimeGameStats_PickBanDetails::~CMsgDOTARealtimeGameStats_PickBanDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_PickBanDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_PickBanDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_PickBanDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_PickBanDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_PickBanDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PickBanDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PickBanDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PickBanDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_PickBanDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_ = from.hero_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_, other->hero_);
  swap(team_, other->team_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PickBanDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_MatchDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_MatchDetails::HasBitSetters {
 public:
  static void set_has_server_steam_id(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_matchid(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_of_day(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_nightstalker_night(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_game_time(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_state(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_teamid_radiant(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_teamid_dire(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_mode(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_league_id(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_league_node_id(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_single_team(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_cheers_peak(CMsgDOTARealtimeGameStats_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimeOfDayFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kIsNightstalkerNightFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameStateFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidRadiantFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidDireFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kPicksFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBansFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBroadcastersFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kLeagueIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kLeagueNodeIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kSingleTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kCheersPeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}
CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      picks_(from.picks_),
      bans_(from.bans_),
      kills_(from.kills_),
      broadcasters_(from.broadcasters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&server_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) -
      reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
}

CMsgDOTARealtimeGameStats_MatchDetails::~CMsgDOTARealtimeGameStats_MatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats_MatchDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picks_.Clear();
  bans_.Clear();
  kills_.Clear();
  broadcasters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_nightstalker_night_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(is_nightstalker_night_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&single_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_state_) -
        reinterpret_cast<char*>(&single_team_)) + sizeof(game_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_MatchDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_MatchDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float time_of_day = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_time_of_day(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool is_nightstalker_night = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_nightstalker_night(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teamid_radiant = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_teamid_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teamid_dire = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_teamid_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails::_InternalParse;
          object = msg->add_picks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails::_InternalParse;
          object = msg->add_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails::_InternalParse;
          object = msg->add_kills();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails::_InternalParse;
          object = msg->add_broadcasters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional uint32 game_mode = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool single_team = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_single_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cheers_peak = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_cheers_peak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_node_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_league_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_state = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_game_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_of_day = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_time_of_day(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nightstalker_night = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_nightstalker_night(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nightstalker_night_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamid_radiant = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_teamid_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamid_dire = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_teamid_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_broadcasters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool single_team = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_single_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheers_peak = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_cheers_peak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_node_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_league_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_state = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_game_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional float time_of_day = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_of_day(), output);
  }

  // optional bool is_nightstalker_night = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_nightstalker_night(), output);
  }

  // optional int32 game_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_time(), output);
  }

  // optional uint32 teamid_radiant = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->teamid_radiant(), output);
  }

  // optional uint32 teamid_dire = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->teamid_dire(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->picks(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->bans(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->kills(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcasters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->broadcasters(static_cast<int>(i)),
      output);
  }

  // optional uint32 game_mode = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->game_mode(), output);
  }

  // optional uint32 league_id = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->league_id(), output);
  }

  // optional bool single_team = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->single_team(), output);
  }

  // optional uint32 cheers_peak = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cheers_peak(), output);
  }

  // optional uint32 league_node_id = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->league_node_id(), output);
  }

  // optional uint32 game_state = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->game_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_MatchDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional float time_of_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_of_day(), target);
  }

  // optional bool is_nightstalker_night = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_nightstalker_night(), target);
  }

  // optional int32 game_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_time(), target);
  }

  // optional uint32 teamid_radiant = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->teamid_radiant(), target);
  }

  // optional uint32 teamid_dire = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->teamid_dire(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->picks(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->bans(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->kills(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcasters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->broadcasters(static_cast<int>(i)), target);
  }

  // optional uint32 game_mode = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->game_mode(), target);
  }

  // optional uint32 league_id = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->league_id(), target);
  }

  // optional bool single_team = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->single_team(), target);
  }

  // optional uint32 cheers_peak = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cheers_peak(), target);
  }

  // optional uint32 league_node_id = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->league_node_id(), target);
  }

  // optional uint32 game_state = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->game_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bans(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->kills_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->kills(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->broadcasters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->broadcasters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional float time_of_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 game_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 teamid_radiant = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_radiant());
    }

    // optional uint32 teamid_dire = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_dire());
    }

    // optional bool is_nightstalker_night = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool single_team = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional uint32 game_mode = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 cheers_peak = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers_peak());
    }

    // optional uint32 league_node_id = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_node_id());
    }

    // optional uint32 game_state = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_MatchDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  kills_.MergeFrom(from.kills_);
  broadcasters_.MergeFrom(from.broadcasters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      teamid_radiant_ = from.teamid_radiant_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_dire_ = from.teamid_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_nightstalker_night_ = from.is_nightstalker_night_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      single_team_ = from.single_team_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      cheers_peak_ = from.cheers_peak_;
    }
    if (cached_has_bits & 0x00001000u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Swap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&picks_)->InternalSwap(CastToBase(&other->picks_));
  CastToBase(&bans_)->InternalSwap(CastToBase(&other->bans_));
  CastToBase(&kills_)->InternalSwap(CastToBase(&other->kills_));
  CastToBase(&broadcasters_)->InternalSwap(CastToBase(&other->broadcasters_));
  swap(server_steam_id_, other->server_steam_id_);
  swap(matchid_, other->matchid_);
  swap(timestamp_, other->timestamp_);
  swap(time_of_day_, other->time_of_day_);
  swap(game_time_, other->game_time_);
  swap(teamid_radiant_, other->teamid_radiant_);
  swap(teamid_dire_, other->teamid_dire_);
  swap(is_nightstalker_night_, other->is_nightstalker_night_);
  swap(single_team_, other->single_team_);
  swap(game_mode_, other->game_mode_);
  swap(league_id_, other->league_id_);
  swap(cheers_peak_, other->cheers_peak_);
  swap(league_node_id_, other->league_node_id_);
  swap(game_state_, other->game_state_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_MatchDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_GraphData_LocationStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData_LocationStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedCtor() {
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::~CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_GraphData_LocationStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_GraphData_LocationStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_GraphData_LocationStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 stats = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_stats(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_stats();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_stats())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  for (int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->stats_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_LocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stats_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stats_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_LocationStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData_LocationStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_LocationStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::kLocStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      loc_stats_(from.loc_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats::_InternalParse;
          object = msg->add_loc_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_loc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loc_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->loc_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loc_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->loc_stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->loc_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->loc_stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_stats_.MergeFrom(from.loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&loc_stats_)->InternalSwap(CastToBase(&other->loc_stats_));
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats_GraphData::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStats_GraphData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData::kGraphGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphXpFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphKillFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphTowerFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphRaxFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kTeamLocStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}
CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      graph_gold_(from.graph_gold_),
      graph_xp_(from.graph_xp_),
      graph_kill_(from.graph_kill_),
      graph_tower_(from.graph_tower_),
      graph_rax_(from.graph_rax_),
      team_loc_stats_(from.team_loc_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgDOTARealtimeGameStats_GraphData::~CMsgDOTARealtimeGameStats_GraphData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats_GraphData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_GraphData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_gold_.Clear();
  graph_xp_.Clear();
  graph_kill_.Clear();
  graph_tower_.Clear();
  graph_rax_.Clear();
  team_loc_stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats_GraphData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats_GraphData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_graph_gold(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_gold();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 graph_xp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_graph_xp(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_xp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 graph_kill = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_graph_kill(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_kill();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 graph_tower = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_graph_tower(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_tower();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 graph_rax = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_graph_rax(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_rax();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_InternalParse;
          object = msg->add_team_loc_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_graph_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_xp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_graph_xp())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_xp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_kill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_graph_kill())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_kill())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_tower = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_graph_tower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_tower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_rax = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_graph_rax())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_rax())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_loc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->graph_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0, n = this->graph_xp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->graph_xp(i), output);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0, n = this->graph_kill_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->graph_kill(i), output);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0, n = this->graph_tower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->graph_tower(i), output);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0, n = this->graph_rax_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->graph_rax(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_loc_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->team_loc_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->graph_gold_, target);

  // repeated int32 graph_xp = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->graph_xp_, target);

  // repeated int32 graph_kill = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->graph_kill_, target);

  // repeated int32 graph_tower = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->graph_tower_, target);

  // repeated int32 graph_rax = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->graph_rax_, target);

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_loc_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->team_loc_stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_size());
    total_size += data_size;
  }

  // repeated int32 graph_xp = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_xp_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_xp_size());
    total_size += data_size;
  }

  // repeated int32 graph_kill = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_kill_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_kill_size());
    total_size += data_size;
  }

  // repeated int32 graph_tower = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_tower_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_tower_size());
    total_size += data_size;
  }

  // repeated int32 graph_rax = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_rax_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_rax_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->team_loc_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_loc_stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
  graph_xp_.MergeFrom(from.graph_xp_);
  graph_kill_.MergeFrom(from.graph_kill_);
  graph_tower_.MergeFrom(from.graph_tower_);
  graph_rax_.MergeFrom(from.graph_rax_);
  team_loc_stats_.MergeFrom(from.team_loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData::Swap(CMsgDOTARealtimeGameStats_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData::InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  graph_gold_.InternalSwap(&other->graph_gold_);
  graph_xp_.InternalSwap(&other->graph_xp_);
  graph_kill_.InternalSwap(&other->graph_kill_);
  graph_tower_.InternalSwap(&other->graph_tower_);
  graph_rax_.InternalSwap(&other->graph_rax_);
  CastToBase(&team_loc_stats_)->InternalSwap(CastToBase(&other->team_loc_stats_));
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStats::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTARealtimeGameStats_default_instance_._instance.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails*>(
      ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::internal_default_instance());
  ::proto::dota::_CMsgDOTARealtimeGameStats_default_instance_._instance.get_mutable()->graph_data_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData*>(
      ::proto::dota::CMsgDOTARealtimeGameStats_GraphData::internal_default_instance());
}
class CMsgDOTARealtimeGameStats::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails& match(const CMsgDOTARealtimeGameStats* msg);
  static void set_has_match(CMsgDOTARealtimeGameStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData& graph_data(const CMsgDOTARealtimeGameStats* msg);
  static void set_has_graph_data(CMsgDOTARealtimeGameStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_delta_frame(CMsgDOTARealtimeGameStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails&
CMsgDOTARealtimeGameStats::HasBitSetters::match(const CMsgDOTARealtimeGameStats* msg) {
  return *msg->match_;
}
const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData&
CMsgDOTARealtimeGameStats::HasBitSetters::graph_data(const CMsgDOTARealtimeGameStats* msg) {
  return *msg->graph_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStats::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStats::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStats::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStats::kDeltaFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats)
}
CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from.has_graph_data()) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStats_GraphData(*from.graph_data_);
  } else {
    graph_data_ = nullptr;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_frame_) -
      reinterpret_cast<char*>(&match_)) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStats::~CMsgDOTARealtimeGameStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats::SharedDtor() {
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete graph_data_;
}

void CMsgDOTARealtimeGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStats& CMsgDOTARealtimeGameStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  buildings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(graph_data_ != nullptr);
      graph_data_->Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::_InternalParse;
        object = msg->mutable_match();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails::_InternalParse;
          object = msg->add_buildings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStats_GraphData::_InternalParse;
        object = msg->mutable_graph_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_delta_frame(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_delta_frame(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::match(this), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buildings(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::graph_data(this), output);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::match(this), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->teams(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buildings(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::graph_data(this), target);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *graph_data_);
    }

    // optional bool delta_frame = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats::MergeFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_graph_data()->::proto::dota::CMsgDOTARealtimeGameStats_GraphData::MergeFrom(from.graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats::CopyFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats::Swap(CMsgDOTARealtimeGameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats::InternalSwap(CMsgDOTARealtimeGameStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  swap(match_, other->match_);
  swap(graph_data_, other->graph_data_);
  swap(delta_frame_, other->delta_frame_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_TeamDetails::HasBitSetters {
 public:
  static void set_has_team_number(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_name(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_tag(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_logo(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_score(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_net_worth(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_team_logo_url(CMsgDOTARealtimeGameStatsTerse_TeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamTagFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kNetWorthFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamLogoUrlFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}
CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_logo_url()) {
    team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
  }
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_worth_) -
      reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::~CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_TeamDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional uint32 net_worth = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_tag = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_logo_url = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
        object = msg->mutable_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_logo_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->net_worth(), output);
  }

  // optional string team_tag = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team_tag(), output);
  }

  // optional string team_logo_url = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team_logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->players(static_cast<int>(i)), target);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->net_worth(), target);
  }

  // optional string team_tag = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team_tag(), target);
  }

  // optional string team_logo_url = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team_logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_logo_url = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_logo_url());
    }

    // optional uint32 team_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional fixed64 team_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 net_worth = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_TeamDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_TeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_logo_url_.Swap(&other->team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_number_, other->team_number_);
  swap(team_id_, other->team_id_);
  swap(team_logo_, other->team_logo_);
  swap(score_, other->score_);
  swap(net_worth_, other->net_worth_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_TeamDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails::HasBitSetters {
 public:
  static void set_has_accountid(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playerid(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_heroid(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_level(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_kill_count(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_death_count(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_assists_count(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_denies_count(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_lh_count(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_gold(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_x(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_y(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_net_worth(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kNetWorthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_worth_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_count_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(death_count_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&assists_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&assists_count_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_heroid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kill_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_kill_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 death_count = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_death_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists_count = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_assists_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies_count = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_denies_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lh_count = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_lh_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 net_worth = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_heroid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_kill_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 death_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_death_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_assists_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_denies_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lh_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_lh_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 kill_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_count(), output);
  }

  // optional uint32 death_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->death_count(), output);
  }

  // optional uint32 assists_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->assists_count(), output);
  }

  // optional uint32 denies_count = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->denies_count(), output);
  }

  // optional uint32 lh_count = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lh_count(), output);
  }

  // optional uint32 gold = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold(), output);
  }

  // optional float x = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->x(), output);
  }

  // optional float y = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->y(), output);
  }

  // optional uint32 net_worth = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->net_worth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 kill_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_count(), target);
  }

  // optional uint32 death_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->death_count(), target);
  }

  // optional uint32 assists_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->assists_count(), target);
  }

  // optional uint32 denies_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->denies_count(), target);
  }

  // optional uint32 lh_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lh_count(), target);
  }

  // optional uint32 gold = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold(), target);
  }

  // optional float x = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->x(), target);
  }

  // optional float y = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->y(), target);
  }

  // optional uint32 net_worth = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->net_worth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 team = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 assists_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 gold = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float y = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional uint32 net_worth = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      death_count_ = from.death_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00001000u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00002000u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00004000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(playerid_, other->playerid_);
  swap(team_, other->team_);
  swap(heroid_, other->heroid_);
  swap(level_, other->level_);
  swap(kill_count_, other->kill_count_);
  swap(death_count_, other->death_count_);
  swap(assists_count_, other->assists_count_);
  swap(denies_count_, other->denies_count_);
  swap(lh_count_, other->lh_count_);
  swap(gold_, other->gold_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(net_worth_, other->net_worth_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_PlayerDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails::HasBitSetters {
 public:
  static void set_has_team(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_heading(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_lane(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tier(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_x(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_y(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_destroyed(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kDestroyedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}
CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destroyed_) -
      reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroyed_) -
        reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float heading = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_heading(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lane = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lane(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tier = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool destroyed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_destroyed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lane(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool destroyed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_destroyed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional float heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  // optional bool destroyed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->destroyed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional float heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  // optional bool destroyed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->destroyed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional float x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(heading_, other->heading_);
  swap(type_, other->type_);
  swap(lane_, other->lane_);
  swap(tier_, other->tier_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(destroyed_, other->destroyed_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_BuildingDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_PickBanDetails::HasBitSetters {
 public:
  static void set_has_hero(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_PickBanDetails::kHeroFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PickBanDetails::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CMsgDOTARealtimeGameStatsTerse_PickBanDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
}
CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CMsgDOTARealtimeGameStatsTerse_PickBanDetails(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_, &from.hero_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SharedCtor() {
  ::memset(&hero_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&hero_)) + sizeof(team_));
}

CMsgDOTARealtimeGameStatsTerse_PickBanDetails::~CMsgDOTARealtimeGameStatsTerse_PickBanDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_PickBanDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_PickBanDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_PickBanDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PickBanDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_ = from.hero_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::Swap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_, other->hero_);
  swap(team_, other->team_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_PickBanDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_MatchDetails::HasBitSetters {
 public:
  static void set_has_server_steam_id(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_matchid(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_time(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_mode(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_league_id(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_league_node_id(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_state(CMsgDOTARealtimeGameStatsTerse_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kSteamBroadcasterAccountIdsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kLeagueIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kLeagueNodeIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameStateFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kPicksFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}
CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steam_broadcaster_account_ids_(from.steam_broadcaster_account_ids_),
      picks_(from.picks_),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&server_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) -
      reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::~CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_MatchDetails_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_broadcaster_account_ids_.Clear();
  picks_.Clear();
  bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_state_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_MatchDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_steam_broadcaster_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_steam_broadcaster_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_node_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_league_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_state = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_game_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_InternalParse;
          object = msg->add_picks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_InternalParse;
          object = msg->add_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matchid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_steam_broadcaster_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steam_broadcaster_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_node_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_league_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_game_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0, n = this->steam_broadcaster_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->steam_broadcaster_account_ids(i), output);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  // optional uint32 league_node_id = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->league_node_id(), output);
  }

  // optional uint32 game_state = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_state(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->picks(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->bans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->steam_broadcaster_account_ids_, target);

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  // optional uint32 league_node_id = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->league_node_id(), target);
  }

  // optional uint32 game_state = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_state(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->picks(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->bans(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 steam_broadcaster_account_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->steam_broadcaster_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_broadcaster_account_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bans(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 game_mode = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 league_node_id = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_node_id());
    }

    // optional uint32 game_state = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_MatchDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steam_broadcaster_account_ids_.MergeFrom(from.steam_broadcaster_account_ids_);
  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steam_broadcaster_account_ids_.InternalSwap(&other->steam_broadcaster_account_ids_);
  CastToBase(&picks_)->InternalSwap(CastToBase(&other->picks_));
  CastToBase(&bans_)->InternalSwap(CastToBase(&other->bans_));
  swap(server_steam_id_, other->server_steam_id_);
  swap(matchid_, other->matchid_);
  swap(timestamp_, other->timestamp_);
  swap(game_time_, other->game_time_);
  swap(game_mode_, other->game_mode_);
  swap(league_id_, other->league_id_);
  swap(league_node_id_, other->league_node_id_);
  swap(game_state_, other->game_state_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_MatchDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse_GraphData::InitAsDefaultInstance() {
}
class CMsgDOTARealtimeGameStatsTerse_GraphData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_GraphData::kGraphGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}
CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      graph_gold_(from.graph_gold_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedCtor() {
}

CMsgDOTARealtimeGameStatsTerse_GraphData::~CMsgDOTARealtimeGameStatsTerse_GraphData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_GraphData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_gold_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse_GraphData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse_GraphData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_graph_gold(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_graph_gold();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_graph_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->graph_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->graph_gold_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_GraphData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_GraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  graph_gold_.InternalSwap(&other->graph_gold_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_GraphData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARealtimeGameStatsTerse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTARealtimeGameStatsTerse_default_instance_._instance.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::internal_default_instance());
  ::proto::dota::_CMsgDOTARealtimeGameStatsTerse_default_instance_._instance.get_mutable()->graph_data_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::internal_default_instance());
}
class CMsgDOTARealtimeGameStatsTerse::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match(const CMsgDOTARealtimeGameStatsTerse* msg);
  static void set_has_match(CMsgDOTARealtimeGameStatsTerse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data(const CMsgDOTARealtimeGameStatsTerse* msg);
  static void set_has_graph_data(CMsgDOTARealtimeGameStatsTerse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_delta_frame(CMsgDOTARealtimeGameStatsTerse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails&
CMsgDOTARealtimeGameStatsTerse::HasBitSetters::match(const CMsgDOTARealtimeGameStatsTerse* msg) {
  return *msg->match_;
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData&
CMsgDOTARealtimeGameStatsTerse::HasBitSetters::graph_data(const CMsgDOTARealtimeGameStatsTerse* msg) {
  return *msg->graph_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kDeltaFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}
CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from.has_graph_data()) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData(*from.graph_data_);
  } else {
    graph_data_ = nullptr;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_frame_) -
      reinterpret_cast<char*>(&match_)) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStatsTerse::~CMsgDOTARealtimeGameStatsTerse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse::SharedDtor() {
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete graph_data_;
}

void CMsgDOTARealtimeGameStatsTerse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARealtimeGameStatsTerse& CMsgDOTARealtimeGameStatsTerse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARealtimeGameStatsTerse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  buildings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(graph_data_ != nullptr);
      graph_data_->Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARealtimeGameStatsTerse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARealtimeGameStatsTerse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::_InternalParse;
        object = msg->mutable_match();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_InternalParse;
          object = msg->add_buildings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::_InternalParse;
        object = msg->mutable_graph_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_delta_frame(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARealtimeGameStatsTerse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_delta_frame(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::match(this), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buildings(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::graph_data(this), output);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::match(this), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->teams(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buildings(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::graph_data(this), target);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *graph_data_);
    }

    // optional bool delta_frame = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_graph_data()->::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(from.graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse::Swap(CMsgDOTARealtimeGameStatsTerse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse::InternalSwap(CMsgDOTARealtimeGameStatsTerse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  swap(match_, other->match_);
  swap(graph_data_, other->graph_data_);
  swap(delta_frame_, other->delta_frame_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABroadcastTimelineEvent::InitAsDefaultInstance() {
}
class CMsgDOTABroadcastTimelineEvent::HasBitSetters {
 public:
  static void set_has_event(CMsgDOTABroadcastTimelineEvent* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_timestamp(CMsgDOTABroadcastTimelineEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(CMsgDOTABroadcastTimelineEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_string_data(CMsgDOTABroadcastTimelineEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABroadcastTimelineEvent::kEventFieldNumber;
const int CMsgDOTABroadcastTimelineEvent::kTimestampFieldNumber;
const int CMsgDOTABroadcastTimelineEvent::kDataFieldNumber;
const int CMsgDOTABroadcastTimelineEvent::kStringDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABroadcastTimelineEvent::CMsgDOTABroadcastTimelineEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABroadcastTimelineEvent)
}
CMsgDOTABroadcastTimelineEvent::CMsgDOTABroadcastTimelineEvent(const CMsgDOTABroadcastTimelineEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_data()) {
    string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(event_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABroadcastTimelineEvent)
}

void CMsgDOTABroadcastTimelineEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
  event_ = 1;
}

CMsgDOTABroadcastTimelineEvent::~CMsgDOTABroadcastTimelineEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABroadcastTimelineEvent)
  SharedDtor();
}

void CMsgDOTABroadcastTimelineEvent::SharedDtor() {
  string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABroadcastTimelineEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABroadcastTimelineEvent& CMsgDOTABroadcastTimelineEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABroadcastTimelineEvent_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABroadcastTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
    event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABroadcastTimelineEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABroadcastTimelineEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EBroadcastTimelineEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event(static_cast<::proto::dota::EBroadcastTimelineEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string string_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTABroadcastTimelineEvent.string_data");
        object = msg->mutable_string_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABroadcastTimelineEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EBroadcastTimelineEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::EBroadcastTimelineEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_data(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_data().data(), static_cast<int>(this->string_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTABroadcastTimelineEvent.string_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABroadcastTimelineEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABroadcastTimelineEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABroadcastTimelineEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // optional fixed32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }

  // optional uint32 data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data(), output);
  }

  // optional string string_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_data().data(), static_cast<int>(this->string_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastTimelineEvent.string_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABroadcastTimelineEvent)
}

::google::protobuf::uint8* CMsgDOTABroadcastTimelineEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // optional fixed32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data(), target);
  }

  // optional string string_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_data().data(), static_cast<int>(this->string_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastTimelineEvent.string_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABroadcastTimelineEvent)
  return target;
}

size_t CMsgDOTABroadcastTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_data());
    }

    // optional fixed32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

    // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABroadcastTimelineEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABroadcastTimelineEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABroadcastTimelineEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABroadcastTimelineEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABroadcastTimelineEvent)
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastTimelineEvent::MergeFrom(const CMsgDOTABroadcastTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_ = from.event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABroadcastTimelineEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastTimelineEvent::CopyFrom(const CMsgDOTABroadcastTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABroadcastTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastTimelineEvent::IsInitialized() const {
  return true;
}

void CMsgDOTABroadcastTimelineEvent::Swap(CMsgDOTABroadcastTimelineEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABroadcastTimelineEvent::InternalSwap(CMsgDOTABroadcastTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_data_.Swap(&other->string_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(event_, other->event_);
}

::google::protobuf::Metadata CMsgDOTABroadcastTimelineEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientMatchGroupsVersion::InitAsDefaultInstance() {
}
class CMsgGCToClientMatchGroupsVersion::HasBitSetters {
 public:
  static void set_has_matchgroups_version(CMsgGCToClientMatchGroupsVersion* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientMatchGroupsVersion::kMatchgroupsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
}
CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchgroups_version_ = from.matchgroups_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
}

void CMsgGCToClientMatchGroupsVersion::SharedCtor() {
  matchgroups_version_ = 0u;
}

CMsgGCToClientMatchGroupsVersion::~CMsgGCToClientMatchGroupsVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
  SharedDtor();
}

void CMsgGCToClientMatchGroupsVersion::SharedDtor() {
}

void CMsgGCToClientMatchGroupsVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientMatchGroupsVersion& CMsgGCToClientMatchGroupsVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientMatchGroupsVersion_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientMatchGroupsVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchgroups_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientMatchGroupsVersion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientMatchGroupsVersion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 matchgroups_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_matchgroups_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientMatchGroupsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchgroups_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_matchgroups_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientMatchGroupsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matchgroups_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchgroups_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientMatchGroupsVersion)
}

::google::protobuf::uint8* CMsgGCToClientMatchGroupsVersion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matchgroups_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchgroups_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return target;
}

size_t CMsgGCToClientMatchGroupsVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 matchgroups_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchgroups_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientMatchGroupsVersion* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientMatchGroupsVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientMatchGroupsVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientMatchGroupsVersion)
    MergeFrom(*source);
  }
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_matchgroups_version()) {
    set_matchgroups_version(from.matchgroups_version());
  }
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientMatchGroupsVersion::IsInitialized() const {
  return true;
}

void CMsgGCToClientMatchGroupsVersion::Swap(CMsgGCToClientMatchGroupsVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientMatchGroupsVersion::InternalSwap(CMsgGCToClientMatchGroupsVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchgroups_version_, other->matchgroups_version_);
}

::google::protobuf::Metadata CMsgGCToClientMatchGroupsVersion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASDOHeroStatsHistory::InitAsDefaultInstance() {
}
class CMsgDOTASDOHeroStatsHistory::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_mode(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lobby_type(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_time(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_won(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_gpm(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_xpm(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_kills(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_deaths(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_assists(CMsgDOTASDOHeroStatsHistory* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASDOHeroStatsHistory::kMatchIdFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGameModeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kLobbyTypeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kStartTimeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kWonFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kXpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kKillsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kDeathsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kAssistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
}
CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
}

void CMsgDOTASDOHeroStatsHistory::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assists_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
}

CMsgDOTASDOHeroStatsHistory::~CMsgDOTASDOHeroStatsHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
  SharedDtor();
}

void CMsgDOTASDOHeroStatsHistory::SharedDtor() {
}

void CMsgDOTASDOHeroStatsHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASDOHeroStatsHistory& CMsgDOTASDOHeroStatsHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASDOHeroStatsHistory_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASDOHeroStatsHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(kills_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&deaths_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASDOHeroStatsHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASDOHeroStatsHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_mode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lobby_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool won = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_won(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gpm = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_gpm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xpm = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_xpm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASDOHeroStatsHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool won = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_won(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_xpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASDOHeroStatsHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_mode(), output);
  }

  // optional uint32 lobby_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lobby_type(), output);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional bool won = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->won(), output);
  }

  // optional uint32 gpm = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gpm(), output);
  }

  // optional uint32 xpm = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->xpm(), output);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kills(), output);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->deaths(), output);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASDOHeroStatsHistory)
}

::google::protobuf::uint8* CMsgDOTASDOHeroStatsHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_mode(), target);
  }

  // optional uint32 lobby_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lobby_type(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional bool won = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->won(), target);
  }

  // optional uint32 gpm = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gpm(), target);
  }

  // optional uint32 xpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->xpm(), target);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kills(), target);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->deaths(), target);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return target;
}

size_t CMsgDOTASDOHeroStatsHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 game_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 lobby_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional bool won = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 gpm = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 deaths = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASDOHeroStatsHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASDOHeroStatsHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASDOHeroStatsHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASDOHeroStatsHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      won_ = from.won_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000040u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000200u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASDOHeroStatsHistory::IsInitialized() const {
  return true;
}

void CMsgDOTASDOHeroStatsHistory::Swap(CMsgDOTASDOHeroStatsHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASDOHeroStatsHistory::InternalSwap(CMsgDOTASDOHeroStatsHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(game_mode_, other->game_mode_);
  swap(lobby_type_, other->lobby_type_);
  swap(start_time_, other->start_time_);
  swap(won_, other->won_);
  swap(gpm_, other->gpm_);
  swap(xpm_, other->xpm_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
}

::google::protobuf::Metadata CMsgDOTASDOHeroStatsHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonRewards_Reward::InitAsDefaultInstance() {
}
class CMsgDOTASeasonRewards_Reward::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_itemdef(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_importance(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_base_level(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_repeat_level(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_reward_type(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_image(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_action_id(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_effect_index(CMsgDOTASeasonRewards_Reward* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonRewards_Reward::kNameFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kItemdefFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImportanceFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kBaseLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRepeatLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRewardTypeFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImageFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kActionIdFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kEffectIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonRewards.Reward)
}
CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&itemdef_, &from.itemdef_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&itemdef_)) + sizeof(effect_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonRewards.Reward)
}

void CMsgDOTASeasonRewards_Reward::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemdef_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_index_) -
      reinterpret_cast<char*>(&itemdef_)) + sizeof(effect_index_));
}

CMsgDOTASeasonRewards_Reward::~CMsgDOTASeasonRewards_Reward() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonRewards.Reward)
  SharedDtor();
}

void CMsgDOTASeasonRewards_Reward::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonRewards_Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards_Reward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonRewards_Reward_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonRewards_Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&itemdef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&itemdef_)) + sizeof(action_id_));
  }
  effect_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonRewards_Reward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonRewards_Reward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonRewards.Reward.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 itemdef = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_itemdef(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 importance = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_importance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 base_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_base_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 repeat_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_repeat_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonRewards_ERewardType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_reward_type(static_cast<::proto::dota::CMsgDOTASeasonRewards_ERewardType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string image = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonRewards.Reward.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 action_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_action_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 effect_index = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_effect_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonRewards_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonRewards.Reward.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 itemdef = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemdef(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 importance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_importance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &importance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_base_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeat_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_repeat_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonRewards_ERewardType_IsValid(value)) {
            set_reward_type(static_cast< ::proto::dota::CMsgDOTASeasonRewards_ERewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonRewards.Reward.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_action_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effect_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_effect_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonRewards.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonRewards.Reward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonRewards_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 itemdef = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemdef(), output);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->importance(), output);
  }

  // optional uint32 base_level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_level(), output);
  }

  // optional uint32 repeat_level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->repeat_level(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reward_type(), output);
  }

  // optional string image = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->image(), output);
  }

  // optional uint32 action_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }

  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->effect_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonRewards.Reward)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards_Reward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 itemdef = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemdef(), target);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->importance(), target);
  }

  // optional uint32 base_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_level(), target);
  }

  // optional uint32 repeat_level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->repeat_level(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reward_type(), target);
  }

  // optional string image = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->image(), target);
  }

  // optional uint32 action_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }

  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->effect_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonRewards.Reward)
  return target;
}

size_t CMsgDOTASeasonRewards_Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string image = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 itemdef = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }

    // optional uint32 importance = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->importance());
    }

    // optional uint32 base_level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_level());
    }

    // optional uint32 repeat_level = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat_level());
    }

    // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // optional uint32 action_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards_Reward* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonRewards_Reward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonRewards.Reward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonRewards.Reward)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000004u) {
      itemdef_ = from.itemdef_;
    }
    if (cached_has_bits & 0x00000008u) {
      importance_ = from.importance_;
    }
    if (cached_has_bits & 0x00000010u) {
      base_level_ = from.base_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeat_level_ = from.repeat_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_type_ = from.reward_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_effect_index(from.effect_index());
  }
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards_Reward::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards_Reward::Swap(CMsgDOTASeasonRewards_Reward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonRewards_Reward::InternalSwap(CMsgDOTASeasonRewards_Reward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemdef_, other->itemdef_);
  swap(importance_, other->importance_);
  swap(base_level_, other->base_level_);
  swap(repeat_level_, other->repeat_level_);
  swap(reward_type_, other->reward_type_);
  swap(action_id_, other->action_id_);
  swap(effect_index_, other->effect_index_);
}

::google::protobuf::Metadata CMsgDOTASeasonRewards_Reward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonRewards::InitAsDefaultInstance() {
}
class CMsgDOTASeasonRewards::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonRewards::kRewardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonRewards::CMsgDOTASeasonRewards()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonRewards)
}
CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonRewards)
}

void CMsgDOTASeasonRewards::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgDOTASeasonRewards::~CMsgDOTASeasonRewards() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonRewards)
  SharedDtor();
}

void CMsgDOTASeasonRewards::SharedDtor() {
}

void CMsgDOTASeasonRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonRewards& CMsgDOTASeasonRewards::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonRewards_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonRewards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonRewards::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonRewards*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonRewards_Reward::_InternalParse;
          object = msg->add_rewards();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonRewards)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonRewards)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonRewards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rewards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rewards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonRewards)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonRewards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rewards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rewards(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonRewards)
  return target;
}

size_t CMsgDOTASeasonRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonRewards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rewards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rewards(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonRewards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonRewards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonRewards)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards::MergeFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
}

void CMsgDOTASeasonRewards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards::CopyFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards::Swap(CMsgDOTASeasonRewards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonRewards::InternalSwap(CMsgDOTASeasonRewards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&rewards_)->InternalSwap(CastToBase(&other->rewards_));
}

::google::protobuf::Metadata CMsgDOTASeasonRewards::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonAchievements_Achievement::InitAsDefaultInstance() {
}
class CMsgDOTASeasonAchievements_Achievement::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_description(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_image(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_action_id(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_grants(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_normal_points(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_tracking_achievement(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_achievement_goal(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_achievement_level(CMsgDOTASeasonAchievements_Achievement* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonAchievements_Achievement::kNameFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kDescriptionFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kImageFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kActionIdFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kMaxGrantsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kNormalPointsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kTrackingAchievementFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementGoalFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}
CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&achievement_level_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}

void CMsgDOTASeasonAchievements_Achievement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&achievement_level_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_level_));
}

CMsgDOTASeasonAchievements_Achievement::~CMsgDOTASeasonAchievements_Achievement() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  SharedDtor();
}

void CMsgDOTASeasonAchievements_Achievement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonAchievements_Achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements_Achievement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonAchievements_Achievement_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonAchievements_Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      image_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&achievement_goal_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_goal_));
  }
  achievement_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonAchievements_Achievement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonAchievements_Achievement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string image = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 action_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_action_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_grants = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_grants(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 normal_points = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_normal_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tracking_achievement = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_tracking_achievement(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 achievement_goal = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_achievement_goal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 achievement_level = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_achievement_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonAchievements_Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_action_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_grants = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_max_grants(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grants_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 normal_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_normal_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracking_achievement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_tracking_achievement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracking_achievement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_goal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_achievement_goal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_achievement_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonAchievements_Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  // optional uint32 max_grants = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_grants(), output);
  }

  // optional uint32 normal_points = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->normal_points(), output);
  }

  // optional uint32 tracking_achievement = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tracking_achievement(), output);
  }

  // optional uint32 achievement_goal = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->achievement_goal(), output);
  }

  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->achievement_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements_Achievement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  // optional uint32 max_grants = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_grants(), target);
  }

  // optional uint32 normal_points = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->normal_points(), target);
  }

  // optional uint32 tracking_achievement = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tracking_achievement(), target);
  }

  // optional uint32 achievement_goal = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->achievement_goal(), target);
  }

  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->achievement_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return target;
}

size_t CMsgDOTASeasonAchievements_Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 action_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // optional uint32 max_grants = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grants());
    }

    // optional uint32 normal_points = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 tracking_achievement = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracking_achievement());
    }

    // optional uint32 achievement_goal = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_goal());
    }

  }
  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements_Achievement* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonAchievements_Achievement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonAchievements.Achievement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonAchievements.Achievement)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_grants_ = from.max_grants_;
    }
    if (cached_has_bits & 0x00000020u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      tracking_achievement_ = from.tracking_achievement_;
    }
    if (cached_has_bits & 0x00000080u) {
      achievement_goal_ = from.achievement_goal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_achievement_level(from.achievement_level());
  }
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements_Achievement::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements_Achievement::Swap(CMsgDOTASeasonAchievements_Achievement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonAchievements_Achievement::InternalSwap(CMsgDOTASeasonAchievements_Achievement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_id_, other->action_id_);
  swap(max_grants_, other->max_grants_);
  swap(normal_points_, other->normal_points_);
  swap(tracking_achievement_, other->tracking_achievement_);
  swap(achievement_goal_, other->achievement_goal_);
  swap(achievement_level_, other->achievement_level_);
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements_Achievement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonAchievements::InitAsDefaultInstance() {
}
class CMsgDOTASeasonAchievements::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonAchievements::kAchievementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonAchievements)
}
CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonAchievements)
}

void CMsgDOTASeasonAchievements::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgDOTASeasonAchievements::~CMsgDOTASeasonAchievements() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonAchievements)
  SharedDtor();
}

void CMsgDOTASeasonAchievements::SharedDtor() {
}

void CMsgDOTASeasonAchievements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonAchievements& CMsgDOTASeasonAchievements::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonAchievements_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonAchievements::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonAchievements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievements_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonAchievements::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonAchievements*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonAchievements_Achievement::_InternalParse;
          object = msg->add_achievements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonAchievements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonAchievements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_achievements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonAchievements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonAchievements)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonAchievements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonAchievements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->achievements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonAchievements)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonAchievements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->achievements(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonAchievements)
  return target;
}

size_t CMsgDOTASeasonAchievements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonAchievements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->achievements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->achievements(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonAchievements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonAchievements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonAchievements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonAchievements)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements::MergeFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
}

void CMsgDOTASeasonAchievements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements::CopyFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements::Swap(CMsgDOTASeasonAchievements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonAchievements::InternalSwap(CMsgDOTASeasonAchievements* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&achievements_)->InternalSwap(CastToBase(&other->achievements_));
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions_Choice::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions_Choice::HasBitSetters {
 public:
  static void set_has_value(CMsgDOTASeasonPredictions_Choice* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTASeasonPredictions_Choice* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_min_raw_value(CMsgDOTASeasonPredictions_Choice* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_raw_value(CMsgDOTASeasonPredictions_Choice* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Choice::kValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMinRawValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMaxRawValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
}
CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice(const CMsgDOTASeasonPredictions_Choice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_raw_value_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
}

void CMsgDOTASeasonPredictions_Choice::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_raw_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
}

CMsgDOTASeasonPredictions_Choice::~CMsgDOTASeasonPredictions_Choice() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Choice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_Choice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Choice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_Choice_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions_Choice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_raw_value_) -
        reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions_Choice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions_Choice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.Choice.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 min_raw_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_min_raw_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_raw_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_raw_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions_Choice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_raw_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_min_raw_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_raw_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_raw_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_raw_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_raw_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions_Choice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 min_raw_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_raw_value(), output);
  }

  // optional uint32 max_raw_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_raw_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Choice)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Choice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 min_raw_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_raw_value(), target);
  }

  // optional uint32 max_raw_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_raw_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return target;
}

size_t CMsgDOTASeasonPredictions_Choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 min_raw_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_raw_value());
    }

    // optional uint32 max_raw_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_raw_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Choice* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions_Choice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Choice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Choice)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const CMsgDOTASeasonPredictions_Choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_raw_value_ = from.min_raw_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_raw_value_ = from.max_raw_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const CMsgDOTASeasonPredictions_Choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Choice::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Choice::Swap(CMsgDOTASeasonPredictions_Choice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Choice::InternalSwap(CMsgDOTASeasonPredictions_Choice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(min_raw_value_, other->min_raw_value_);
  swap(max_raw_value_, other->max_raw_value_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Choice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions_Answers::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions_Answers::HasBitSetters {
 public:
  static void set_has_answer_id(CMsgDOTASeasonPredictions_Answers* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Answers::kAnswerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
}
CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers(const CMsgDOTASeasonPredictions_Answers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_id_ = from.answer_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
}

void CMsgDOTASeasonPredictions_Answers::SharedCtor() {
  answer_id_ = 0u;
}

CMsgDOTASeasonPredictions_Answers::~CMsgDOTASeasonPredictions_Answers() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Answers::SharedDtor() {
}

void CMsgDOTASeasonPredictions_Answers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Answers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_Answers_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions_Answers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions_Answers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions_Answers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 answer_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_answer_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions_Answers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 answer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_answer_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions_Answers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 answer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->answer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Answers)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Answers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 answer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->answer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return target;
}

size_t CMsgDOTASeasonPredictions_Answers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 answer_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Answers* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions_Answers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Answers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Answers)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const CMsgDOTASeasonPredictions_Answers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_answer_id()) {
    set_answer_id(from.answer_id());
  }
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const CMsgDOTASeasonPredictions_Answers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Answers::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Answers::Swap(CMsgDOTASeasonPredictions_Answers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Answers::InternalSwap(CMsgDOTASeasonPredictions_Answers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(answer_id_, other->answer_id_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Answers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions_QueryKeyValues::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions_QueryKeyValues::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTASeasonPredictions_QueryKeyValues* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgDOTASeasonPredictions_QueryKeyValues* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_QueryKeyValues::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_QueryKeyValues::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}
CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues(const CMsgDOTASeasonPredictions_QueryKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTASeasonPredictions_QueryKeyValues::~CMsgDOTASeasonPredictions_QueryKeyValues() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_QueryKeyValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_QueryKeyValues_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions_QueryKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions_QueryKeyValues::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions_QueryKeyValues*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions_QueryKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions_QueryKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_QueryKeyValues::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return target;
}

size_t CMsgDOTASeasonPredictions_QueryKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_QueryKeyValues* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions_QueryKeyValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_QueryKeyValues::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::Swap(CMsgDOTASeasonPredictions_QueryKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_QueryKeyValues::InternalSwap(CMsgDOTASeasonPredictions_QueryKeyValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_QueryKeyValues::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions_Prediction::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions_Prediction::HasBitSetters {
 public:
  static void set_has_type(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_question(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_selection_id(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_start_date(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lock_date(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_reward(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_answer_type(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_answer_id(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_query_name(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lock_on_selection_id(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_lock_on_selection_value(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lock_on_selection_set(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_use_answer_value_ranges(CMsgDOTASeasonPredictions_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Prediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kStartDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kRewardFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswersFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryBindParamsFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionValueFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionSetFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kUseAnswerValueRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}
CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      choices_(from.choices_),
      answers_(from.answers_),
      query_bind_params_(from.query_bind_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_question()) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_name()) {
    query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_answer_value_ranges_) -
    reinterpret_cast<char*>(&type_)) + sizeof(use_answer_value_ranges_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}

void CMsgDOTASeasonPredictions_Prediction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto.base);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_answer_value_ranges_) -
      reinterpret_cast<char*>(&type_)) + sizeof(use_answer_value_ranges_));
}

CMsgDOTASeasonPredictions_Prediction::~CMsgDOTASeasonPredictions_Prediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Prediction::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions_Prediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_Prediction_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  answers_.Clear();
  query_bind_params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      question_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      query_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&answer_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(answer_type_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&answer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_answer_value_ranges_) -
        reinterpret_cast<char*>(&answer_id_)) + sizeof(use_answer_value_ranges_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions_Prediction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions_Prediction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::proto::dota::CMsgDOTASeasonPredictions_ePredictionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string question = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
        object = msg->mutable_question();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_Choice::_InternalParse;
          object = msg->add_choices();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 selection_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_selection_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_date = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_start_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lock_date = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lock_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reward = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_reward(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_answer_type(static_cast<::proto::dota::CMsgDOTASeasonPredictions_eAnswerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 answer_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_answer_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_Answers::_InternalParse;
          object = msg->add_answers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // optional string query_name = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
        object = msg->mutable_query_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 query_bind_params = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 96) {
          do {
            msg->add_query_bind_params(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 96 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_query_bind_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 lock_on_selection_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_lock_on_selection_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lock_on_selection_value = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_lock_on_selection_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool lock_on_selection_set = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_lock_on_selection_set(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool use_answer_value_ranges = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_use_answer_value_ranges(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), static_cast<int>(this->question().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selection_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_selection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_start_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_lock_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_reward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value)) {
            set_answer_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 answer_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_answer_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_answers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), static_cast<int>(this->query_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 query_bind_params = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96u, input, this->mutable_query_bind_params())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_query_bind_params())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_on_selection_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_lock_on_selection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_on_selection_value = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_lock_on_selection_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lock_on_selection_set = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_lock_on_selection_set(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_on_selection_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_answer_value_ranges = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_use_answer_value_ranges(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_answer_value_ranges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->question(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->choices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->choices(static_cast<int>(i)),
      output);
  }

  // optional uint32 selection_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_id(), output);
  }

  // optional uint32 start_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_date(), output);
  }

  // optional uint32 lock_date = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lock_date(), output);
  }

  // optional uint32 reward = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->answer_type(), output);
  }

  // optional uint32 answer_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->answer_id(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->answers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->answers(static_cast<int>(i)),
      output);
  }

  // optional string query_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), static_cast<int>(this->query_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->query_name(), output);
  }

  // repeated uint32 query_bind_params = 12;
  for (int i = 0, n = this->query_bind_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->query_bind_params(i), output);
  }

  // optional uint32 lock_on_selection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lock_on_selection_id(), output);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lock_on_selection_value(), output);
  }

  // optional bool lock_on_selection_set = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lock_on_selection_set(), output);
  }

  // optional bool use_answer_value_ranges = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_answer_value_ranges(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Prediction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->choices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->choices(static_cast<int>(i)), target);
  }

  // optional uint32 selection_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_id(), target);
  }

  // optional uint32 start_date = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_date(), target);
  }

  // optional uint32 lock_date = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lock_date(), target);
  }

  // optional uint32 reward = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->answer_type(), target);
  }

  // optional uint32 answer_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->answer_id(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->answers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->answers(static_cast<int>(i)), target);
  }

  // optional string query_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), static_cast<int>(this->query_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->query_name(), target);
  }

  // repeated uint32 query_bind_params = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(12, this->query_bind_params_, target);

  // optional uint32 lock_on_selection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lock_on_selection_id(), target);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lock_on_selection_value(), target);
  }

  // optional bool lock_on_selection_set = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lock_on_selection_set(), target);
  }

  // optional bool use_answer_value_ranges = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_answer_value_ranges(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return target;
}

size_t CMsgDOTASeasonPredictions_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->choices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->choices(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->answers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->answers(static_cast<int>(i)));
    }
  }

  // repeated uint32 query_bind_params = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->query_bind_params_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->query_bind_params_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string question = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string query_name = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 selection_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_id());
    }

    // optional uint32 start_date = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_date());
    }

    // optional uint32 lock_date = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_date());
    }

    // optional uint32 reward = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_type());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 answer_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_id());
    }

    // optional uint32 lock_on_selection_id = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_id());
    }

    // optional uint32 lock_on_selection_value = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_value());
    }

    // optional bool lock_on_selection_set = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool use_answer_value_ranges = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Prediction* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Prediction)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  answers_.MergeFrom(from.answers_);
  query_bind_params_.MergeFrom(from.query_bind_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_id_ = from.selection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_date_ = from.start_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      lock_date_ = from.lock_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000080u) {
      answer_type_ = from.answer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      answer_id_ = from.answer_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      lock_on_selection_id_ = from.lock_on_selection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_on_selection_value_ = from.lock_on_selection_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      lock_on_selection_set_ = from.lock_on_selection_set_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_answer_value_ranges_ = from.use_answer_value_ranges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Prediction::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Prediction::Swap(CMsgDOTASeasonPredictions_Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Prediction::InternalSwap(CMsgDOTASeasonPredictions_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&choices_)->InternalSwap(CastToBase(&other->choices_));
  CastToBase(&answers_)->InternalSwap(CastToBase(&other->answers_));
  query_bind_params_.InternalSwap(&other->query_bind_params_);
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_name_.Swap(&other->query_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(selection_id_, other->selection_id_);
  swap(start_date_, other->start_date_);
  swap(lock_date_, other->lock_date_);
  swap(reward_, other->reward_);
  swap(answer_type_, other->answer_type_);
  swap(answer_id_, other->answer_id_);
  swap(lock_on_selection_id_, other->lock_on_selection_id_);
  swap(lock_on_selection_value_, other->lock_on_selection_value_);
  swap(lock_on_selection_set_, other->lock_on_selection_set_);
  swap(use_answer_value_ranges_, other->use_answer_value_ranges_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Prediction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions_InGamePrediction::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions_InGamePrediction::HasBitSetters {
 public:
  static void set_has_id(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_name(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_group(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_question(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_query_name(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_answer_resolution_type(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_points_to_grant(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_reward_action(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_debug_force_selection(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_raw_value_type(CMsgDOTASeasonPredictions_InGamePrediction* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_InGamePrediction::kIdFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kGroupFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRequiredHeroesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryValuesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kAnswerResolutionTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kPointsToGrantFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRewardActionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kDebugForceSelectionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRawValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}
CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction(const CMsgDOTASeasonPredictions_InGamePrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      choices_(from.choices_),
      required_heroes_(from.required_heroes_),
      query_values_(from.query_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_question()) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_name()) {
    query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_value_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(raw_value_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_value_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(raw_value_type_));
}

CMsgDOTASeasonPredictions_InGamePrediction::~CMsgDOTASeasonPredictions_InGamePrediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_InGamePrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions_InGamePrediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_InGamePrediction_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions_InGamePrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  required_heroes_.Clear();
  query_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      question_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      query_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_to_grant_) -
        reinterpret_cast<char*>(&id_)) + sizeof(points_to_grant_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&reward_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_value_type_) -
        reinterpret_cast<char*>(&reward_action_)) + sizeof(raw_value_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions_InGamePrediction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions_InGamePrediction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::proto::dota::CMsgDOTASeasonPredictions_ePredictionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_group(static_cast<::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string question = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
        object = msg->mutable_question();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_Choice::_InternalParse;
          object = msg->add_choices();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated string required_heroes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
          object = msg->add_required_heroes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // optional string query_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
        object = msg->mutable_query_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues::_InternalParse;
          object = msg->add_query_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_answer_resolution_type(static_cast<::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 points_to_grant = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_points_to_grant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reward_action = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_reward_action(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 debug_force_selection = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_debug_force_selection(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_raw_value_type(static_cast<::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions_InGamePrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value)) {
            set_group(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string question = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), static_cast<int>(this->question().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string required_heroes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_heroes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_heroes(this->required_heroes_size() - 1).data(),
            static_cast<int>(this->required_heroes(this->required_heroes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), static_cast<int>(this->query_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value)) {
            set_answer_resolution_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_to_grant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_points_to_grant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_to_grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_action = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_reward_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 debug_force_selection = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_debug_force_selection(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_force_selection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value)) {
            set_raw_value_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions_InGamePrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->group(), output);
  }

  // optional string question = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->question(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->choices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->choices(static_cast<int>(i)),
      output);
  }

  // repeated string required_heroes = 7;
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_heroes(i).data(), static_cast<int>(this->required_heroes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->required_heroes(i), output);
  }

  // optional string query_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), static_cast<int>(this->query_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query_name(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->query_values(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->answer_resolution_type(), output);
  }

  // optional uint32 points_to_grant = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->points_to_grant(), output);
  }

  // optional uint32 reward_action = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reward_action(), output);
  }

  // optional uint32 debug_force_selection = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->debug_force_selection(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->raw_value_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_InGamePrediction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->group(), target);
  }

  // optional string question = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->question(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->choices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->choices(static_cast<int>(i)), target);
  }

  // repeated string required_heroes = 7;
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_heroes(i).data(), static_cast<int>(this->required_heroes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->required_heroes(i), target);
  }

  // optional string query_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), static_cast<int>(this->query_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->query_name(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->query_values(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->answer_resolution_type(), target);
  }

  // optional uint32 points_to_grant = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->points_to_grant(), target);
  }

  // optional uint32 reward_action = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reward_action(), target);
  }

  // optional uint32 debug_force_selection = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->debug_force_selection(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->raw_value_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return target;
}

size_t CMsgDOTASeasonPredictions_InGamePrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->choices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->choices(static_cast<int>(i)));
    }
  }

  // repeated string required_heroes = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->required_heroes_size());
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_heroes(i));
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->query_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_values(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string question = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string query_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_resolution_type());
    }

    // optional uint32 points_to_grant = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_to_grant());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 reward_action = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_action());
    }

    // optional uint32 debug_force_selection = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_force_selection());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raw_value_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_InGamePrediction* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions_InGamePrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  required_heroes_.MergeFrom(from.required_heroes_);
  query_values_.MergeFrom(from.query_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00000040u) {
      answer_resolution_type_ = from.answer_resolution_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      points_to_grant_ = from.points_to_grant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      reward_action_ = from.reward_action_;
    }
    if (cached_has_bits & 0x00000200u) {
      debug_force_selection_ = from.debug_force_selection_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_value_type_ = from.raw_value_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_InGamePrediction::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_InGamePrediction::Swap(CMsgDOTASeasonPredictions_InGamePrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_InGamePrediction::InternalSwap(CMsgDOTASeasonPredictions_InGamePrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&choices_)->InternalSwap(CastToBase(&other->choices_));
  required_heroes_.InternalSwap(CastToBase(&other->required_heroes_));
  CastToBase(&query_values_)->InternalSwap(CastToBase(&other->query_values_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_name_.Swap(&other->query_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(group_, other->group_);
  swap(answer_resolution_type_, other->answer_resolution_type_);
  swap(points_to_grant_, other->points_to_grant_);
  swap(reward_action_, other->reward_action_);
  swap(debug_force_selection_, other->debug_force_selection_);
  swap(raw_value_type_, other->raw_value_type_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_InGamePrediction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeasonPredictions::InitAsDefaultInstance() {
}
class CMsgDOTASeasonPredictions::HasBitSetters {
 public:
  static void set_has_in_game_prediction_count_per_game(CMsgDOTASeasonPredictions* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_in_game_prediction_voting_period_minutes(CMsgDOTASeasonPredictions* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions::kPredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionCountPerGameFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionVotingPeriodMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions)
}
CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_),
      in_game_predictions_(from.in_game_predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_game_prediction_count_per_game_, &from.in_game_prediction_count_per_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions)
}

void CMsgDOTASeasonPredictions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&in_game_prediction_count_per_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
      reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
}

CMsgDOTASeasonPredictions::~CMsgDOTASeasonPredictions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions)
  SharedDtor();
}

void CMsgDOTASeasonPredictions::SharedDtor() {
}

void CMsgDOTASeasonPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeasonPredictions& CMsgDOTASeasonPredictions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeasonPredictions_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeasonPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  in_game_predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&in_game_prediction_count_per_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
        reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeasonPredictions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeasonPredictions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_Prediction::_InternalParse;
          object = msg->add_predictions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction::_InternalParse;
          object = msg->add_in_game_predictions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 in_game_prediction_count_per_game = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_in_game_prediction_count_per_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 in_game_prediction_voting_period_minutes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_in_game_prediction_voting_period_minutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeasonPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_game_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game_prediction_count_per_game = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_in_game_prediction_count_per_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_count_per_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game_prediction_voting_period_minutes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_in_game_prediction_voting_period_minutes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_voting_period_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeasonPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->predictions(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_game_predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->in_game_predictions(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 in_game_prediction_count_per_game = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_game_prediction_count_per_game(), output);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game_prediction_voting_period_minutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->predictions(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_game_predictions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->in_game_predictions(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 in_game_prediction_count_per_game = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_game_prediction_count_per_game(), target);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game_prediction_voting_period_minutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions)
  return target;
}

size_t CMsgDOTASeasonPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predictions(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->in_game_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_game_predictions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 in_game_prediction_count_per_game = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_count_per_game());
    }

    // optional uint32 in_game_prediction_voting_period_minutes = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_voting_period_minutes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeasonPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions::MergeFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  in_game_predictions_.MergeFrom(from.in_game_predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      in_game_prediction_count_per_game_ = from.in_game_prediction_count_per_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_prediction_voting_period_minutes_ = from.in_game_prediction_voting_period_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions::CopyFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions::Swap(CMsgDOTASeasonPredictions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions::InternalSwap(CMsgDOTASeasonPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&predictions_)->InternalSwap(CastToBase(&other->predictions_));
  CastToBase(&in_game_predictions_)->InternalSwap(CastToBase(&other->in_game_predictions_));
  swap(in_game_prediction_count_per_game_, other->in_game_prediction_count_per_game_);
  swap(in_game_prediction_voting_period_minutes_, other->in_game_prediction_voting_period_minutes_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch_Player_CustomGameData::InitAsDefaultInstance() {
}
class CMsgDOTAMatch_Player_CustomGameData::HasBitSetters {
 public:
  static void set_has_dota_team(CMsgDOTAMatch_Player_CustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winner(CMsgDOTAMatch_Player_CustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_Player_CustomGameData::kDotaTeamFieldNumber;
const int CMsgDOTAMatch_Player_CustomGameData::kWinnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}
CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}

void CMsgDOTAMatch_Player_CustomGameData::SharedCtor() {
  ::memset(&dota_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
}

CMsgDOTAMatch_Player_CustomGameData::~CMsgDOTAMatch_Player_CustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_Player_CustomGameData::SharedDtor() {
}

void CMsgDOTAMatch_Player_CustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player_CustomGameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_Player_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch_Player_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winner_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch_Player_CustomGameData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch_Player_CustomGameData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dota_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool winner = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winner(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch_Player_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dota_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch_Player_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player_CustomGameData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_Player_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player_CustomGameData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch_Player_CustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player_CustomGameData::Swap(CMsgDOTAMatch_Player_CustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_Player_CustomGameData::InternalSwap(CMsgDOTAMatch_Player_CustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dota_team_, other->dota_team_);
  swap(winner_, other->winner_);
}

::google::protobuf::Metadata CMsgDOTAMatch_Player_CustomGameData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch_Player::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAMatch_Player_default_instance_._instance.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgDOTAMatch_Player_CustomGameData*>(
      ::proto::dota::CMsgDOTAMatch_Player_CustomGameData::internal_default_instance());
}
class CMsgDOTAMatch_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_player_slot(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_hero_id(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_item_0(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_item_1(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_item_2(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_item_3(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_item_4(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_item_5(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_item_6(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_item_7(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_item_8(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_expected_team_contribution(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_scaled_metric(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_previous_rank(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_rank_change(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_solo_rank(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_seasonal_rank(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_rank_tier_updated(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_kills(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_deaths(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_assists(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_leaver_status(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_gold(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_last_hits(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_denies(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_gold_per_min(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_xp_per_min(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_gold_spent(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_hero_damage(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_tower_damage(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_hero_healing(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_level(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_time_last_seen(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_player_name(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_support_ability_value(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_feeding_detected(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_search_rank(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_search_rank_uncertainty(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_rank_uncertainty_change(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_hero_play_count(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_party_id(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_scaled_hero_damage(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_scaled_tower_damage(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_scaled_hero_healing(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_scaled_kills(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_scaled_deaths(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_scaled_assists(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_claimed_farm_gold(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_support_gold(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_claimed_denies(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_claimed_misses(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_misses(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_pro_name(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_real_name(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData& custom_game_data(const CMsgDOTAMatch_Player* msg);
  static void set_has_custom_game_data(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_active_plus_subscription(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_net_worth(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_bot_difficulty(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_hero_pick_order(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_hero_was_randomed(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_hero_was_bonus(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_hero_was_dota_plus_suggestion(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_hero_damage_received_pre_reduction(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_hero_damage_received_post_reduction(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_seconds_dead(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_gold_lost_to_death(CMsgDOTAMatch_Player* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData&
CMsgDOTAMatch_Player::HasBitSetters::custom_game_data(const CMsgDOTAMatch_Player* msg) {
  return *msg->custom_game_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerSlotFieldNumber;
const int CMsgDOTAMatch_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatch_Player::kItem0FieldNumber;
const int CMsgDOTAMatch_Player::kItem1FieldNumber;
const int CMsgDOTAMatch_Player::kItem2FieldNumber;
const int CMsgDOTAMatch_Player::kItem3FieldNumber;
const int CMsgDOTAMatch_Player::kItem4FieldNumber;
const int CMsgDOTAMatch_Player::kItem5FieldNumber;
const int CMsgDOTAMatch_Player::kItem6FieldNumber;
const int CMsgDOTAMatch_Player::kItem7FieldNumber;
const int CMsgDOTAMatch_Player::kItem8FieldNumber;
const int CMsgDOTAMatch_Player::kExpectedTeamContributionFieldNumber;
const int CMsgDOTAMatch_Player::kScaledMetricFieldNumber;
const int CMsgDOTAMatch_Player::kPreviousRankFieldNumber;
const int CMsgDOTAMatch_Player::kRankChangeFieldNumber;
const int CMsgDOTAMatch_Player::kSoloRankFieldNumber;
const int CMsgDOTAMatch_Player::kSeasonalRankFieldNumber;
const int CMsgDOTAMatch_Player::kRankTierUpdatedFieldNumber;
const int CMsgDOTAMatch_Player::kKillsFieldNumber;
const int CMsgDOTAMatch_Player::kDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kLeaverStatusFieldNumber;
const int CMsgDOTAMatch_Player::kGoldFieldNumber;
const int CMsgDOTAMatch_Player::kLastHitsFieldNumber;
const int CMsgDOTAMatch_Player::kDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kGoldPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kXPPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kGoldSpentFieldNumber;
const int CMsgDOTAMatch_Player::kHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kLevelFieldNumber;
const int CMsgDOTAMatch_Player::kTimeLastSeenFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerNameFieldNumber;
const int CMsgDOTAMatch_Player::kSupportAbilityValueFieldNumber;
const int CMsgDOTAMatch_Player::kFeedingDetectedFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankUncertaintyFieldNumber;
const int CMsgDOTAMatch_Player::kRankUncertaintyChangeFieldNumber;
const int CMsgDOTAMatch_Player::kHeroPlayCountFieldNumber;
const int CMsgDOTAMatch_Player::kPartyIdFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kScaledKillsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedFarmGoldFieldNumber;
const int CMsgDOTAMatch_Player::kSupportGoldFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedMissesFieldNumber;
const int CMsgDOTAMatch_Player::kMissesFieldNumber;
const int CMsgDOTAMatch_Player::kAbilityUpgradesFieldNumber;
const int CMsgDOTAMatch_Player::kAdditionalUnitsInventoryFieldNumber;
const int CMsgDOTAMatch_Player::kPermanentBuffsFieldNumber;
const int CMsgDOTAMatch_Player::kProNameFieldNumber;
const int CMsgDOTAMatch_Player::kRealNameFieldNumber;
const int CMsgDOTAMatch_Player::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch_Player::kActivePlusSubscriptionFieldNumber;
const int CMsgDOTAMatch_Player::kNetWorthFieldNumber;
const int CMsgDOTAMatch_Player::kBotDifficultyFieldNumber;
const int CMsgDOTAMatch_Player::kHeroPickOrderFieldNumber;
const int CMsgDOTAMatch_Player::kHeroWasRandomedFieldNumber;
const int CMsgDOTAMatch_Player::kHeroWasBonusFieldNumber;
const int CMsgDOTAMatch_Player::kHeroWasDotaPlusSuggestionFieldNumber;
const int CMsgDOTAMatch_Player::kHeroDamageReceivedPreReductionFieldNumber;
const int CMsgDOTAMatch_Player::kHeroDamageReceivedPostReductionFieldNumber;
const int CMsgDOTAMatch_Player::kSecondsDeadFieldNumber;
const int CMsgDOTAMatch_Player::kGoldLostToDeathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_Player::CMsgDOTAMatch_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.Player)
}
CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  pro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pro_name()) {
    pro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pro_name_);
  }
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_real_name()) {
    real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_Player_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_lost_to_death_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(gold_lost_to_death_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.Player)
}

void CMsgDOTAMatch_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_game_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_lost_to_death_) -
      reinterpret_cast<char*>(&custom_game_data_)) + sizeof(gold_lost_to_death_));
}

CMsgDOTAMatch_Player::~CMsgDOTAMatch_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.Player)
  SharedDtor();
}

void CMsgDOTAMatch_Player::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pro_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgDOTAMatch_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch_Player& CMsgDOTAMatch_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pro_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      real_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_0_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_0_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&item_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_rank_) -
        reinterpret_cast<char*>(&item_1_)) + sizeof(previous_rank_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rank_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&denies_) -
        reinterpret_cast<char*>(&rank_change_)) + sizeof(denies_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&gold_per_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_last_seen_) -
        reinterpret_cast<char*>(&gold_per_min_)) + sizeof(time_last_seen_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&support_ability_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaled_deaths_) -
        reinterpret_cast<char*>(&support_ability_value_)) + sizeof(scaled_deaths_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&scaled_assists_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seasonal_rank_) -
        reinterpret_cast<char*>(&scaled_assists_)) + sizeof(seasonal_rank_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rank_tier_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_6_) -
        reinterpret_cast<char*>(&rank_tier_updated_)) + sizeof(item_6_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&item_7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_damage_received_pre_reduction_) -
        reinterpret_cast<char*>(&item_7_)) + sizeof(hero_damage_received_pre_reduction_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_damage_received_post_reduction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_lost_to_death_) -
        reinterpret_cast<char*>(&hero_damage_received_post_reduction_)) + sizeof(gold_lost_to_death_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_0 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_item_0(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_1 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_item_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_2 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_item_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_3 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_item_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_4 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_item_4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_5 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_item_5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float expected_team_contribution = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_expected_team_contribution(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float scaled_metric = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_scaled_metric(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 previous_rank = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_previous_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 rank_change = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_rank_change(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leaver_status = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_leaver_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_hits = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_per_min = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_gold_per_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 XP_per_min = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_xp_per_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_spent = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_gold_spent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_hero_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_tower_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_healing = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_hero_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_last_seen = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_time_last_seen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.Player.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 support_ability_value = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_support_ability_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool feeding_detected = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_feeding_detected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 search_rank = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_search_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 search_rank_uncertainty = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_search_rank_uncertainty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rank_uncertainty_change = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rank_uncertainty_change(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_play_count = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_hero_play_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 party_id = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_party_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional float scaled_kills = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_scaled_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float scaled_deaths = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_scaled_deaths(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float scaled_assists = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_scaled_assists(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 claimed_farm_gold = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_claimed_farm_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 support_gold = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_support_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 claimed_denies = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_claimed_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 claimed_misses = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_claimed_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 misses = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchPlayerAbilityUpgrade::_InternalParse;
          object = msg->add_ability_upgrades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 762 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchAdditionalUnitInventory::_InternalParse;
          object = msg->add_additional_units_inventory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 898 && (ptr += 2));
        break;
      }
      // optional bool solo_rank = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_solo_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatch_Player_CustomGameData::_InternalParse;
        object = msg->mutable_custom_game_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool active_plus_subscription = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_active_plus_subscription(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_worth = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool seasonal_rank = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_seasonal_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_hero_damage = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_scaled_hero_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_tower_damage = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_scaled_tower_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_hero_healing = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_scaled_hero_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchPlayerPermanentBuff::_InternalParse;
          object = msg->add_permanent_buffs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 970 && (ptr += 2));
        break;
      }
      // optional uint32 bot_difficulty = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_bot_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_6 = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_item_6(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_7 = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_item_7(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_8 = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_item_8(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_pick_order = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_hero_pick_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_randomed = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_hero_was_randomed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_bonus = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_was_bonus(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool rank_tier_updated = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rank_tier_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage_received_pre_reduction = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_damage_received_pre_reduction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage_received_post_reduction = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hero_damage_received_post_reduction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_dota_plus_suggestion = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_hero_was_dota_plus_suggestion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_dead = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_seconds_dead(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_lost_to_death = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_gold_lost_to_death(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pro_name = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.Player.pro_name");
        object = msg->mutable_pro_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string real_name = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.Player.real_name");
        object = msg->mutable_real_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_0 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_item_0(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_item_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_item_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_item_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_4 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_item_4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_5 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_item_5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float expected_team_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_expected_team_contribution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expected_team_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_metric = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_scaled_metric(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 previous_rank = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_previous_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_rank_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_leaver_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_gold_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 XP_per_min = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_xp_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_spent = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_gold_spent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_hero_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_tower_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_hero_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_seen = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_time_last_seen(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.Player.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_ability_value = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_support_ability_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool feeding_detected = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_feeding_detected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feeding_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_rank = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_search_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_rank_uncertainty = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_search_rank_uncertainty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_uncertainty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rank_uncertainty_change = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_rank_uncertainty_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_uncertainty_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_play_count = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_hero_play_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_play_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 party_id = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (305 & 0xFF)) {
          HasBitSetters::set_has_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_kills = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (317 & 0xFF)) {
          HasBitSetters::set_has_scaled_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_deaths = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (325 & 0xFF)) {
          HasBitSetters::set_has_scaled_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_assists = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (333 & 0xFF)) {
          HasBitSetters::set_has_scaled_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_farm_gold = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_claimed_farm_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_gold = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_support_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_denies = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_claimed_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_misses = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_claimed_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 misses = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (378 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_rank = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_solo_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (402 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active_plus_subscription = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_active_plus_subscription(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_plus_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seasonal_rank = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          HasBitSetters::set_has_seasonal_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seasonal_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_damage = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          HasBitSetters::set_has_scaled_hero_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_tower_damage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {
          HasBitSetters::set_has_scaled_tower_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_healing = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_scaled_hero_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (458 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_permanent_buffs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_difficulty = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {
          HasBitSetters::set_has_bot_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_6 = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_item_6(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_7 = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_item_7(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_8 = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_item_8(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_pick_order = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {
          HasBitSetters::set_has_hero_pick_order(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_pick_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_randomed = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {
          HasBitSetters::set_has_hero_was_randomed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_randomed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_bonus = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_hero_was_bonus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rank_tier_updated = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {
          HasBitSetters::set_has_rank_tier_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_tier_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage_received_pre_reduction = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_hero_damage_received_pre_reduction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_received_pre_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage_received_post_reduction = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_hero_damage_received_post_reduction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_received_post_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_dota_plus_suggestion = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {
          HasBitSetters::set_has_hero_was_dota_plus_suggestion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_dota_plus_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_dead = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_seconds_dead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_lost_to_death = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          HasBitSetters::set_has_gold_lost_to_death(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_lost_to_death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pro_name = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (578 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pro_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pro_name().data(), static_cast<int>(this->pro_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.Player.pro_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string real_name = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (586 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), static_cast<int>(this->real_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.Player.real_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 item_0 = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_0(), output);
  }

  // optional uint32 item_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_1(), output);
  }

  // optional uint32 item_2 = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_2(), output);
  }

  // optional uint32 item_3 = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_3(), output);
  }

  // optional uint32 item_4 = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_4(), output);
  }

  // optional uint32 item_5 = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->item_5(), output);
  }

  // optional float expected_team_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->expected_team_contribution(), output);
  }

  // optional float scaled_metric = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scaled_metric(), output);
  }

  // optional uint32 previous_rank = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->previous_rank(), output);
  }

  // optional sint32 rank_change = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->rank_change(), output);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kills(), output);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deaths(), output);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->assists(), output);
  }

  // optional uint32 leaver_status = 17;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->leaver_status(), output);
  }

  // optional uint32 gold = 18;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gold(), output);
  }

  // optional uint32 last_hits = 19;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->last_hits(), output);
  }

  // optional uint32 denies = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->denies(), output);
  }

  // optional uint32 gold_per_min = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->gold_per_min(), output);
  }

  // optional uint32 XP_per_min = 22;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->xp_per_min(), output);
  }

  // optional uint32 gold_spent = 23;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_spent(), output);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // optional uint32 hero_healing = 26;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->hero_healing(), output);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 time_last_seen = 28;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->time_last_seen(), output);
  }

  // optional string player_name = 29;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->player_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 support_ability_value = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->support_ability_value(), output);
  }

  // optional bool feeding_detected = 32;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->feeding_detected(), output);
  }

  // optional uint32 search_rank = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->search_rank(), output);
  }

  // optional uint32 search_rank_uncertainty = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->search_rank_uncertainty(), output);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->rank_uncertainty_change(), output);
  }

  // optional uint32 hero_play_count = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->hero_play_count(), output);
  }

  // optional fixed64 party_id = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(38, this->party_id(), output);
  }

  // optional float scaled_kills = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 41;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 43;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 44;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 45;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->claimed_misses(), output);
  }

  // optional uint32 misses = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->misses(), output);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_upgrades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47,
      this->ability_upgrades(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_units_inventory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->additional_units_inventory(static_cast<int>(i)),
      output);
  }

  // optional bool solo_rank = 49;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->solo_rank(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, HasBitSetters::custom_game_data(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool active_plus_subscription = 51;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->active_plus_subscription(), output);
  }

  // optional uint32 net_worth = 52;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->net_worth(), output);
  }

  // optional bool seasonal_rank = 53;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->seasonal_rank(), output);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->scaled_hero_damage(), output);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->scaled_tower_damage(), output);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->scaled_hero_healing(), output);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permanent_buffs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57,
      this->permanent_buffs(static_cast<int>(i)),
      output);
  }

  // optional uint32 bot_difficulty = 58;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->bot_difficulty(), output);
  }

  // optional uint32 item_6 = 59;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->item_6(), output);
  }

  // optional uint32 item_7 = 60;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->item_7(), output);
  }

  // optional uint32 item_8 = 61;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->item_8(), output);
  }

  // optional uint32 hero_pick_order = 63;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->hero_pick_order(), output);
  }

  // optional bool hero_was_randomed = 64;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->hero_was_randomed(), output);
  }

  // optional bool hero_was_bonus = 65;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->hero_was_bonus(), output);
  }

  // optional bool rank_tier_updated = 66;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->rank_tier_updated(), output);
  }

  // optional uint32 hero_damage_received_pre_reduction = 67;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->hero_damage_received_pre_reduction(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 hero_damage_received_post_reduction = 68;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->hero_damage_received_post_reduction(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool hero_was_dota_plus_suggestion = 69;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->hero_was_dota_plus_suggestion(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 seconds_dead = 70;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->seconds_dead(), output);
  }

  // optional uint32 gold_lost_to_death = 71;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->gold_lost_to_death(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pro_name = 72;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pro_name().data(), static_cast<int>(this->pro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.pro_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      72, this->pro_name(), output);
  }

  // optional string real_name = 73;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      73, this->real_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.Player)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 item_0 = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_0(), target);
  }

  // optional uint32 item_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_1(), target);
  }

  // optional uint32 item_2 = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_2(), target);
  }

  // optional uint32 item_3 = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_3(), target);
  }

  // optional uint32 item_4 = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_4(), target);
  }

  // optional uint32 item_5 = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->item_5(), target);
  }

  // optional float expected_team_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->expected_team_contribution(), target);
  }

  // optional float scaled_metric = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scaled_metric(), target);
  }

  // optional uint32 previous_rank = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->previous_rank(), target);
  }

  // optional sint32 rank_change = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->rank_change(), target);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kills(), target);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deaths(), target);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->assists(), target);
  }

  // optional uint32 leaver_status = 17;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->leaver_status(), target);
  }

  // optional uint32 gold = 18;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gold(), target);
  }

  // optional uint32 last_hits = 19;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->last_hits(), target);
  }

  // optional uint32 denies = 20;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->denies(), target);
  }

  // optional uint32 gold_per_min = 21;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->gold_per_min(), target);
  }

  // optional uint32 XP_per_min = 22;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->xp_per_min(), target);
  }

  // optional uint32 gold_spent = 23;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_spent(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // optional uint32 hero_healing = 26;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->hero_healing(), target);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 time_last_seen = 28;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->time_last_seen(), target);
  }

  // optional string player_name = 29;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->player_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 support_ability_value = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->support_ability_value(), target);
  }

  // optional bool feeding_detected = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->feeding_detected(), target);
  }

  // optional uint32 search_rank = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->search_rank(), target);
  }

  // optional uint32 search_rank_uncertainty = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->search_rank_uncertainty(), target);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->rank_uncertainty_change(), target);
  }

  // optional uint32 hero_play_count = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->hero_play_count(), target);
  }

  // optional fixed64 party_id = 38;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(38, this->party_id(), target);
  }

  // optional float scaled_kills = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 43;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 44;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 45;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->claimed_misses(), target);
  }

  // optional uint32 misses = 46;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->misses(), target);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_upgrades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, this->ability_upgrades(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_units_inventory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->additional_units_inventory(static_cast<int>(i)), target);
  }

  // optional bool solo_rank = 49;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->solo_rank(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, HasBitSetters::custom_game_data(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool active_plus_subscription = 51;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->active_plus_subscription(), target);
  }

  // optional uint32 net_worth = 52;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->net_worth(), target);
  }

  // optional bool seasonal_rank = 53;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->seasonal_rank(), target);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->scaled_hero_healing(), target);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permanent_buffs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        57, this->permanent_buffs(static_cast<int>(i)), target);
  }

  // optional uint32 bot_difficulty = 58;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->bot_difficulty(), target);
  }

  // optional uint32 item_6 = 59;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->item_6(), target);
  }

  // optional uint32 item_7 = 60;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->item_7(), target);
  }

  // optional uint32 item_8 = 61;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->item_8(), target);
  }

  // optional uint32 hero_pick_order = 63;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->hero_pick_order(), target);
  }

  // optional bool hero_was_randomed = 64;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->hero_was_randomed(), target);
  }

  // optional bool hero_was_bonus = 65;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->hero_was_bonus(), target);
  }

  // optional bool rank_tier_updated = 66;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->rank_tier_updated(), target);
  }

  // optional uint32 hero_damage_received_pre_reduction = 67;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->hero_damage_received_pre_reduction(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 hero_damage_received_post_reduction = 68;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->hero_damage_received_post_reduction(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool hero_was_dota_plus_suggestion = 69;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->hero_was_dota_plus_suggestion(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 seconds_dead = 70;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->seconds_dead(), target);
  }

  // optional uint32 gold_lost_to_death = 71;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->gold_lost_to_death(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pro_name = 72;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pro_name().data(), static_cast<int>(this->pro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.pro_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->pro_name(), target);
  }

  // optional string real_name = 73;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        73, this->real_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.Player)
  return target;
}

size_t CMsgDOTAMatch_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->ability_upgrades_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ability_upgrades(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_units_inventory_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_units_inventory(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  {
    unsigned int count = static_cast<unsigned int>(this->permanent_buffs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->permanent_buffs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string pro_name = 72;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pro_name());
    }

    // optional string real_name = 73;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 item_0 = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_0());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 item_1 = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_1());
    }

    // optional uint32 item_2 = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_2());
    }

    // optional uint32 item_3 = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_3());
    }

    // optional uint32 item_4 = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_4());
    }

    // optional uint32 item_5 = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_5());
    }

    // optional float expected_team_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float scaled_metric = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 previous_rank = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_rank());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint32 rank_change = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional uint32 kills = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

    // optional uint32 gold = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 last_hits = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 gold_per_min = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 XP_per_min = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 gold_spent = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 hero_damage = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 hero_healing = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 level = 27;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 time_last_seen = 28;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 support_ability_value = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional uint32 search_rank = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank());
    }

    // optional uint32 search_rank_uncertainty = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank_uncertainty());
    }

    // optional int32 rank_uncertainty_change = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_uncertainty_change());
    }

    // optional fixed64 party_id = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional uint32 hero_play_count = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_play_count());
    }

    // optional float scaled_kills = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float scaled_assists = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

    // optional uint32 support_gold = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional bool solo_rank = 49;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool seasonal_rank = 53;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool rank_tier_updated = 66;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool feeding_detected = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 net_worth = 52;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 scaled_hero_damage = 54;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 55;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_tower_damage());
    }

    // optional uint32 scaled_hero_healing = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_healing());
    }

    // optional uint32 bot_difficulty = 58;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_difficulty());
    }

    // optional uint32 item_6 = 59;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_6());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 item_7 = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_7());
    }

    // optional uint32 item_8 = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_8());
    }

    // optional bool active_plus_subscription = 51;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_randomed = 64;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_bonus = 65;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_dota_plus_suggestion = 69;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_pick_order = 63;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_pick_order());
    }

    // optional uint32 hero_damage_received_pre_reduction = 67;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage_received_pre_reduction());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_damage_received_post_reduction = 68;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage_received_post_reduction());
    }

    // optional uint32 seconds_dead = 70;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_dead());
    }

    // optional uint32 gold_lost_to_death = 71;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_lost_to_death());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player::MergeFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pro_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_custom_game_data()->::proto::dota::CMsgDOTAMatch_Player_CustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_0_ = from.item_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      item_1_ = from.item_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      item_2_ = from.item_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      item_3_ = from.item_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      item_4_ = from.item_4_;
    }
    if (cached_has_bits & 0x00001000u) {
      item_5_ = from.item_5_;
    }
    if (cached_has_bits & 0x00002000u) {
      expected_team_contribution_ = from.expected_team_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_metric_ = from.scaled_metric_;
    }
    if (cached_has_bits & 0x00008000u) {
      previous_rank_ = from.previous_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00020000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00040000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00080000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00100000u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00800000u) {
      denies_ = from.denies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x02000000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x04000000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x20000000u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x40000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x80000000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      search_rank_ = from.search_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_rank_uncertainty_ = from.search_rank_uncertainty_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_uncertainty_change_ = from.rank_uncertainty_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      hero_play_count_ = from.hero_play_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      scaled_kills_ = from.scaled_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      scaled_deaths_ = from.scaled_deaths_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      scaled_assists_ = from.scaled_assists_;
    }
    if (cached_has_bits & 0x00000200u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x00000800u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x00001000u) {
      claimed_misses_ = from.claimed_misses_;
    }
    if (cached_has_bits & 0x00002000u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x00004000u) {
      solo_rank_ = from.solo_rank_;
    }
    if (cached_has_bits & 0x00008000u) {
      seasonal_rank_ = from.seasonal_rank_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rank_tier_updated_ = from.rank_tier_updated_;
    }
    if (cached_has_bits & 0x00020000u) {
      feeding_detected_ = from.feeding_detected_;
    }
    if (cached_has_bits & 0x00040000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00080000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00100000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    if (cached_has_bits & 0x00200000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00400000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00800000u) {
      item_6_ = from.item_6_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      item_7_ = from.item_7_;
    }
    if (cached_has_bits & 0x02000000u) {
      item_8_ = from.item_8_;
    }
    if (cached_has_bits & 0x04000000u) {
      active_plus_subscription_ = from.active_plus_subscription_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_was_randomed_ = from.hero_was_randomed_;
    }
    if (cached_has_bits & 0x10000000u) {
      hero_was_bonus_ = from.hero_was_bonus_;
    }
    if (cached_has_bits & 0x20000000u) {
      hero_was_dota_plus_suggestion_ = from.hero_was_dota_plus_suggestion_;
    }
    if (cached_has_bits & 0x40000000u) {
      hero_pick_order_ = from.hero_pick_order_;
    }
    if (cached_has_bits & 0x80000000u) {
      hero_damage_received_pre_reduction_ = from.hero_damage_received_pre_reduction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_damage_received_post_reduction_ = from.hero_damage_received_post_reduction_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_dead_ = from.seconds_dead_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_lost_to_death_ = from.gold_lost_to_death_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player::CopyFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player::Swap(CMsgDOTAMatch_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_Player::InternalSwap(CMsgDOTAMatch_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  CastToBase(&ability_upgrades_)->InternalSwap(CastToBase(&other->ability_upgrades_));
  CastToBase(&additional_units_inventory_)->InternalSwap(CastToBase(&other->additional_units_inventory_));
  CastToBase(&permanent_buffs_)->InternalSwap(CastToBase(&other->permanent_buffs_));
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pro_name_.Swap(&other->pro_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  real_name_.Swap(&other->real_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_game_data_, other->custom_game_data_);
  swap(account_id_, other->account_id_);
  swap(player_slot_, other->player_slot_);
  swap(hero_id_, other->hero_id_);
  swap(item_0_, other->item_0_);
  swap(item_1_, other->item_1_);
  swap(item_2_, other->item_2_);
  swap(item_3_, other->item_3_);
  swap(item_4_, other->item_4_);
  swap(item_5_, other->item_5_);
  swap(expected_team_contribution_, other->expected_team_contribution_);
  swap(scaled_metric_, other->scaled_metric_);
  swap(previous_rank_, other->previous_rank_);
  swap(rank_change_, other->rank_change_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(leaver_status_, other->leaver_status_);
  swap(gold_, other->gold_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gold_per_min_, other->gold_per_min_);
  swap(xp_per_min_, other->xp_per_min_);
  swap(gold_spent_, other->gold_spent_);
  swap(hero_damage_, other->hero_damage_);
  swap(tower_damage_, other->tower_damage_);
  swap(hero_healing_, other->hero_healing_);
  swap(level_, other->level_);
  swap(time_last_seen_, other->time_last_seen_);
  swap(support_ability_value_, other->support_ability_value_);
  swap(search_rank_, other->search_rank_);
  swap(search_rank_uncertainty_, other->search_rank_uncertainty_);
  swap(rank_uncertainty_change_, other->rank_uncertainty_change_);
  swap(party_id_, other->party_id_);
  swap(hero_play_count_, other->hero_play_count_);
  swap(scaled_kills_, other->scaled_kills_);
  swap(scaled_deaths_, other->scaled_deaths_);
  swap(scaled_assists_, other->scaled_assists_);
  swap(claimed_farm_gold_, other->claimed_farm_gold_);
  swap(support_gold_, other->support_gold_);
  swap(claimed_denies_, other->claimed_denies_);
  swap(claimed_misses_, other->claimed_misses_);
  swap(misses_, other->misses_);
  swap(solo_rank_, other->solo_rank_);
  swap(seasonal_rank_, other->seasonal_rank_);
  swap(rank_tier_updated_, other->rank_tier_updated_);
  swap(feeding_detected_, other->feeding_detected_);
  swap(net_worth_, other->net_worth_);
  swap(scaled_hero_damage_, other->scaled_hero_damage_);
  swap(scaled_tower_damage_, other->scaled_tower_damage_);
  swap(scaled_hero_healing_, other->scaled_hero_healing_);
  swap(bot_difficulty_, other->bot_difficulty_);
  swap(item_6_, other->item_6_);
  swap(item_7_, other->item_7_);
  swap(item_8_, other->item_8_);
  swap(active_plus_subscription_, other->active_plus_subscription_);
  swap(hero_was_randomed_, other->hero_was_randomed_);
  swap(hero_was_bonus_, other->hero_was_bonus_);
  swap(hero_was_dota_plus_suggestion_, other->hero_was_dota_plus_suggestion_);
  swap(hero_pick_order_, other->hero_pick_order_);
  swap(hero_damage_received_pre_reduction_, other->hero_damage_received_pre_reduction_);
  swap(hero_damage_received_post_reduction_, other->hero_damage_received_post_reduction_);
  swap(seconds_dead_, other->seconds_dead_);
  swap(gold_lost_to_death_, other->gold_lost_to_death_);
}

::google::protobuf::Metadata CMsgDOTAMatch_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch_BroadcasterInfo::InitAsDefaultInstance() {
}
class CMsgDOTAMatch_BroadcasterInfo::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAMatch_BroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTAMatch_BroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_BroadcasterInfo::kAccountIdFieldNumber;
const int CMsgDOTAMatch_BroadcasterInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}
CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}

void CMsgDOTAMatch_BroadcasterInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgDOTAMatch_BroadcasterInfo::~CMsgDOTAMatch_BroadcasterInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_BroadcasterInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch_BroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch_BroadcasterInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch_BroadcasterInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch_BroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch_BroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch_BroadcasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterInfo::Swap(CMsgDOTAMatch_BroadcasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_BroadcasterInfo::InternalSwap(CMsgDOTAMatch_BroadcasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch_BroadcasterChannel::InitAsDefaultInstance() {
}
class CMsgDOTAMatch_BroadcasterChannel::HasBitSetters {
 public:
  static void set_has_country_code(CMsgDOTAMatch_BroadcasterChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_description(CMsgDOTAMatch_BroadcasterChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_language_code(CMsgDOTAMatch_BroadcasterChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_BroadcasterChannel::kCountryCodeFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kDescriptionFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kBroadcasterInfosFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}
CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      broadcaster_infos_(from.broadcaster_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}

void CMsgDOTAMatch_BroadcasterChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto.base);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTAMatch_BroadcasterChannel::~CMsgDOTAMatch_BroadcasterChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterChannel::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch_BroadcasterChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_BroadcasterChannel_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch_BroadcasterChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcaster_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch_BroadcasterChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch_BroadcasterChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatch_BroadcasterInfo::_InternalParse;
          object = msg->add_broadcaster_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional string language_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
        object = msg->mutable_language_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch_BroadcasterChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_broadcaster_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch_BroadcasterChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country_code(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcaster_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->broadcaster_infos(static_cast<int>(i)),
      output);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcaster_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->broadcaster_infos(static_cast<int>(i)), target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->broadcaster_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->broadcaster_infos(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch_BroadcasterChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcaster_infos_.MergeFrom(from.broadcaster_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
  }
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterChannel::Swap(CMsgDOTAMatch_BroadcasterChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_BroadcasterChannel::InternalSwap(CMsgDOTAMatch_BroadcasterChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&broadcaster_infos_)->InternalSwap(CastToBase(&other->broadcaster_infos_));
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch_CustomGameData::InitAsDefaultInstance() {
}
class CMsgDOTAMatch_CustomGameData::HasBitSetters {
 public:
  static void set_has_custom_game_id(CMsgDOTAMatch_CustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_map_name(CMsgDOTAMatch_CustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_CustomGameData::kCustomGameIdFieldNumber;
const int CMsgDOTAMatch_CustomGameData::kMapNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.CustomGameData)
}
CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  custom_game_id_ = from.custom_game_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.CustomGameData)
}

void CMsgDOTAMatch_CustomGameData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAMatch_CustomGameData::~CMsgDOTAMatch_CustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_CustomGameData::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_CustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch_CustomGameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_CustomGameData_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_name_.ClearNonDefaultToEmptyNoArena();
  }
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch_CustomGameData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch_CustomGameData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string map_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
        object = msg->mutable_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.CustomGameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_CustomGameData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_CustomGameData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch_CustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.CustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_CustomGameData::Swap(CMsgDOTAMatch_CustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_CustomGameData::InternalSwap(CMsgDOTAMatch_CustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_game_id_, other->custom_game_id_);
}

::google::protobuf::Metadata CMsgDOTAMatch_CustomGameData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatch::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAMatch_default_instance_._instance.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgDOTAMatch_CustomGameData*>(
      ::proto::dota::CMsgDOTAMatch_CustomGameData::internal_default_instance());
}
class CMsgDOTAMatch::HasBitSetters {
 public:
  static void set_has_duration(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_starttime(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_match_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cluster(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_first_blood_time(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_replay_salt(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_server_ip(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_server_port(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_lobby_type(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_human_players(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_average_skill(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_game_balance(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_radiant_team_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_dire_team_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_leagueid(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_radiant_team_name(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dire_team_name(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_radiant_team_logo(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_dire_team_logo(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_radiant_team_logo_url(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dire_team_logo_url(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_radiant_team_complete(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_dire_team_complete(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_positive_votes(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_negative_votes(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_game_mode(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_match_seq_num(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_replay_state(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_radiant_guild_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_dire_guild_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_radiant_team_tag(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dire_team_tag(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_series_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_series_type(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_engine(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgDOTAMatch_CustomGameData& custom_game_data(const CMsgDOTAMatch* msg);
  static void set_has_custom_game_data(CMsgDOTAMatch* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_match_flags(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_private_metadata_key(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_radiant_team_score(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_dire_team_score(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_match_outcome(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_tournament_id(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_tournament_round(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_pre_game_duration(CMsgDOTAMatch* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
};

const ::proto::dota::CMsgDOTAMatch_CustomGameData&
CMsgDOTAMatch::HasBitSetters::custom_game_data(const CMsgDOTAMatch* msg) {
  return *msg->custom_game_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch::kDurationFieldNumber;
const int CMsgDOTAMatch::kStartTimeFieldNumber;
const int CMsgDOTAMatch::kPlayersFieldNumber;
const int CMsgDOTAMatch::kMatchIdFieldNumber;
const int CMsgDOTAMatch::kTowerStatusFieldNumber;
const int CMsgDOTAMatch::kBarracksStatusFieldNumber;
const int CMsgDOTAMatch::kClusterFieldNumber;
const int CMsgDOTAMatch::kFirstBloodTimeFieldNumber;
const int CMsgDOTAMatch::kReplaySaltFieldNumber;
const int CMsgDOTAMatch::kServerIpFieldNumber;
const int CMsgDOTAMatch::kServerPortFieldNumber;
const int CMsgDOTAMatch::kLobbyTypeFieldNumber;
const int CMsgDOTAMatch::kHumanPlayersFieldNumber;
const int CMsgDOTAMatch::kAverageSkillFieldNumber;
const int CMsgDOTAMatch::kGameBalanceFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatch::kDireTeamIdFieldNumber;
const int CMsgDOTAMatch::kLeagueidFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatch::kDireTeamNameFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatch::kDireTeamLogoFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamLogoUrlFieldNumber;
const int CMsgDOTAMatch::kDireTeamLogoUrlFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kDireTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kPositiveVotesFieldNumber;
const int CMsgDOTAMatch::kNegativeVotesFieldNumber;
const int CMsgDOTAMatch::kGameModeFieldNumber;
const int CMsgDOTAMatch::kPicksBansFieldNumber;
const int CMsgDOTAMatch::kMatchSeqNumFieldNumber;
const int CMsgDOTAMatch::kReplayStateFieldNumber;
const int CMsgDOTAMatch::kRadiantGuildIdFieldNumber;
const int CMsgDOTAMatch::kDireGuildIdFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamTagFieldNumber;
const int CMsgDOTAMatch::kDireTeamTagFieldNumber;
const int CMsgDOTAMatch::kSeriesIdFieldNumber;
const int CMsgDOTAMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAMatch::kBroadcasterChannelsFieldNumber;
const int CMsgDOTAMatch::kEngineFieldNumber;
const int CMsgDOTAMatch::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch::kMatchFlagsFieldNumber;
const int CMsgDOTAMatch::kPrivateMetadataKeyFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamScoreFieldNumber;
const int CMsgDOTAMatch::kDireTeamScoreFieldNumber;
const int CMsgDOTAMatch::kMatchOutcomeFieldNumber;
const int CMsgDOTAMatch::kTournamentIdFieldNumber;
const int CMsgDOTAMatch::kTournamentRoundFieldNumber;
const int CMsgDOTAMatch::kPreGameDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch::CMsgDOTAMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch)
}
CMsgDOTAMatch::CMsgDOTAMatch(const CMsgDOTAMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      broadcaster_channels_(from.broadcaster_channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_name()) {
    radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
  }
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_name()) {
    dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
  }
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_tag()) {
    radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
  }
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_tag()) {
    dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
  }
  radiant_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_logo_url()) {
    radiant_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_logo_url_);
  }
  dire_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_logo_url()) {
    dire_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_logo_url_);
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_round_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(tournament_round_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch)
}

void CMsgDOTAMatch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_game_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tournament_round_) -
      reinterpret_cast<char*>(&custom_game_data_)) + sizeof(tournament_round_));
}

CMsgDOTAMatch::~CMsgDOTAMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch)
  SharedDtor();
}

void CMsgDOTAMatch::SharedDtor() {
  radiant_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgDOTAMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatch& CMsgDOTAMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  broadcaster_channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      radiant_team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dire_team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      radiant_team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      dire_team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
  }
  duration_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_type_) -
        reinterpret_cast<char*>(&starttime_)) + sizeof(lobby_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&human_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_logo_) -
        reinterpret_cast<char*>(&human_players_)) + sizeof(dire_team_logo_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&radiant_team_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_guild_id_) -
        reinterpret_cast<char*>(&radiant_team_complete_)) + sizeof(radiant_guild_id_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dire_guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_score_) -
        reinterpret_cast<char*>(&dire_guild_id_)) + sizeof(dire_team_score_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&match_outcome_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_round_) -
        reinterpret_cast<char*>(&match_outcome_)) + sizeof(tournament_round_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 startTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_starttime(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatch_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint64 match_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_tower_status(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_tower_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_barracks_status(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_barracks_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_first_blood_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 replay_salt = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_replay_salt(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 server_ip = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_server_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 server_port = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lobby_type = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 human_players = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_human_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 average_skill = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_average_skill(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float game_balance = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_game_balance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 radiant_team_id = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_radiant_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_team_id = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_dire_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leagueid = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_leagueid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_name = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.radiant_team_name");
        object = msg->mutable_radiant_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string dire_team_name = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.dire_team_name");
        object = msg->mutable_dire_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 radiant_team_logo = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_radiant_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 dire_team_logo = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_dire_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_team_complete = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_radiant_team_complete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_team_complete = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_dire_team_complete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 positive_votes = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_positive_votes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 negative_votes = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_negative_votes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(31, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchHeroSelectEvent::_InternalParse;
          object = msg->add_picks_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 642 && (ptr += 2));
        break;
      }
      // optional uint64 match_seq_num = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_seq_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAMatch_ReplayState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(34, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_replay_state(static_cast<::proto::dota::CMsgDOTAMatch_ReplayState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_guild_id = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_radiant_guild_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_guild_id = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_dire_guild_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_tag = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.radiant_team_tag");
        object = msg->mutable_radiant_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string dire_team_tag = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.dire_team_tag");
        object = msg->mutable_dire_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 series_id = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatch_BroadcasterChannel::_InternalParse;
          object = msg->add_broadcaster_channels();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 730 && (ptr += 2));
        break;
      }
      // optional uint32 engine = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_engine(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatch_CustomGameData::_InternalParse;
        object = msg->mutable_custom_game_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 match_flags = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_match_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 private_metadata_key = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_private_metadata_key(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 radiant_team_score = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_radiant_team_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_team_score = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_dire_team_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EMatchOutcome_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(50, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_outcome(static_cast<::proto::dota::EMatchOutcome>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_id = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_round = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_tournament_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pre_game_duration = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_pre_game_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_logo_url = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.radiant_team_logo_url");
        object = msg->mutable_radiant_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string dire_team_logo_url = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatch.dire_team_logo_url");
        object = msg->mutable_dire_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 startTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_starttime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_tower_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_barracks_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_first_blood_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 replay_salt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_replay_salt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_ip = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_server_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 human_players = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_human_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_skill = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_average_skill(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_balance = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {
          HasBitSetters::set_has_game_balance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_dire_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_leagueid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_name = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.radiant_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_name = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.dire_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 radiant_team_logo = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radiant_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dire_team_logo = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_dire_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dire_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_complete = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_complete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_complete = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_dire_team_complete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 positive_votes = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_positive_votes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positive_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 negative_votes = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_negative_votes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_seq_num = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_match_seq_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAMatch_ReplayState_IsValid(value)) {
            set_replay_state(static_cast< ::proto::dota::CMsgDOTAMatch_ReplayState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                34, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_guild_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_radiant_guild_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_guild_id = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_dire_guild_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_tag = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_tag = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.dire_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (346 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_broadcaster_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 engine = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_engine(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_flags = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_match_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 private_metadata_key = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (381 & 0xFF)) {
          HasBitSetters::set_has_private_metadata_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &private_metadata_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_score = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_score = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_dire_team_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                50, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_round = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_tournament_round(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pre_game_duration = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          HasBitSetters::set_has_pre_game_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_game_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_logo_url = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (434 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.radiant_team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_logo_url = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.dire_team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional fixed32 startTime = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->starttime(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->match_id(), output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->tower_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->barracks_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional fixed32 replay_salt = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->replay_salt(), output);
  }

  // optional fixed32 server_ip = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->server_ip(), output);
  }

  // optional uint32 server_port = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->server_port(), output);
  }

  // optional uint32 lobby_type = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lobby_type(), output);
  }

  // optional uint32 human_players = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->human_players(), output);
  }

  // optional uint32 average_skill = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->average_skill(), output);
  }

  // optional float game_balance = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->game_balance(), output);
  }

  // optional uint32 radiant_team_id = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_team_id(), output);
  }

  // optional uint32 leagueid = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->leagueid(), output);
  }

  // optional string radiant_team_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->radiant_team_name(), output);
  }

  // optional string dire_team_name = 24;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->dire_team_name(), output);
  }

  // optional uint64 radiant_team_logo = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->radiant_team_logo(), output);
  }

  // optional uint64 dire_team_logo = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->dire_team_logo(), output);
  }

  // optional uint32 radiant_team_complete = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->radiant_team_complete(), output);
  }

  // optional uint32 dire_team_complete = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->dire_team_complete(), output);
  }

  // optional uint32 positive_votes = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->positive_votes(), output);
  }

  // optional uint32 negative_votes = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->negative_votes(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->game_mode(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32,
      this->picks_bans(static_cast<int>(i)),
      output);
  }

  // optional uint64 match_seq_num = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->match_seq_num(), output);
  }

  // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->replay_state(), output);
  }

  // optional uint32 radiant_guild_id = 35;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->radiant_guild_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_guild_id = 36;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->dire_guild_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_tag = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->dire_team_tag(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 series_id = 39;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->series_id(), output);
  }

  // optional uint32 series_type = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->series_type(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcaster_channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43,
      this->broadcaster_channels(static_cast<int>(i)),
      output);
  }

  // optional uint32 engine = 44;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->engine(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, HasBitSetters::custom_game_data(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 match_flags = 46;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->match_flags(), output);
  }

  // optional fixed32 private_metadata_key = 47;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(47, this->private_metadata_key(), output);
  }

  // optional uint32 radiant_team_score = 48;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->radiant_team_score(), output);
  }

  // optional uint32 dire_team_score = 49;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->dire_team_score(), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->match_outcome(), output);
  }

  // optional uint32 tournament_id = 51;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->tournament_id(), output);
  }

  // optional uint32 tournament_round = 52;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->tournament_round(), output);
  }

  // optional uint32 pre_game_duration = 53;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->pre_game_duration(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_logo_url = 54;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->radiant_team_logo_url(), output);
  }

  // optional string dire_team_logo_url = 55;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->dire_team_logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch)
}

::google::protobuf::uint8* CMsgDOTAMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional fixed32 startTime = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->starttime(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->players(static_cast<int>(i)), target);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->match_id(), target);
  }

  // repeated uint32 tower_status = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->tower_status_, target);

  // repeated uint32 barracks_status = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->barracks_status_, target);

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional fixed32 replay_salt = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->replay_salt(), target);
  }

  // optional fixed32 server_ip = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->server_ip(), target);
  }

  // optional uint32 server_port = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->server_port(), target);
  }

  // optional uint32 lobby_type = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lobby_type(), target);
  }

  // optional uint32 human_players = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->human_players(), target);
  }

  // optional uint32 average_skill = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->average_skill(), target);
  }

  // optional float game_balance = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->game_balance(), target);
  }

  // optional uint32 radiant_team_id = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_team_id(), target);
  }

  // optional uint32 leagueid = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->leagueid(), target);
  }

  // optional string radiant_team_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->radiant_team_name(), target);
  }

  // optional string dire_team_name = 24;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->dire_team_name(), target);
  }

  // optional uint64 radiant_team_logo = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->radiant_team_logo(), target);
  }

  // optional uint64 dire_team_logo = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->dire_team_logo(), target);
  }

  // optional uint32 radiant_team_complete = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->radiant_team_complete(), target);
  }

  // optional uint32 dire_team_complete = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->dire_team_complete(), target);
  }

  // optional uint32 positive_votes = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->positive_votes(), target);
  }

  // optional uint32 negative_votes = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->negative_votes(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->game_mode(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->picks_bans(static_cast<int>(i)), target);
  }

  // optional uint64 match_seq_num = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->match_seq_num(), target);
  }

  // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->replay_state(), target);
  }

  // optional uint32 radiant_guild_id = 35;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->radiant_guild_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_guild_id = 36;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->dire_guild_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_tag = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->dire_team_tag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 series_id = 39;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->series_id(), target);
  }

  // optional uint32 series_type = 40;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->series_type(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcaster_channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->broadcaster_channels(static_cast<int>(i)), target);
  }

  // optional uint32 engine = 44;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->engine(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, HasBitSetters::custom_game_data(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 match_flags = 46;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->match_flags(), target);
  }

  // optional fixed32 private_metadata_key = 47;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(47, this->private_metadata_key(), target);
  }

  // optional uint32 radiant_team_score = 48;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->radiant_team_score(), target);
  }

  // optional uint32 dire_team_score = 49;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->dire_team_score(), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->match_outcome(), target);
  }

  // optional uint32 tournament_id = 51;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->tournament_id(), target);
  }

  // optional uint32 tournament_round = 52;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->tournament_round(), target);
  }

  // optional uint32 pre_game_duration = 53;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->pre_game_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_logo_url = 54;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->radiant_team_logo_url(), target);
  }

  // optional string dire_team_logo_url = 55;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->dire_team_logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch)
  return target;
}

size_t CMsgDOTAMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->barracks_status_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_bans_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks_bans(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->broadcaster_channels_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->broadcaster_channels(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_team_name = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional string dire_team_name = 24;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional string radiant_team_tag = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional string radiant_team_logo_url = 54;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_logo_url());
    }

    // optional string dire_team_logo_url = 55;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_logo_url());
    }

    // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed32 startTime = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint64 match_id = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 cluster = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

    // optional fixed32 replay_salt = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_ip = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 lobby_type = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 human_players = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human_players());
    }

    // optional uint32 average_skill = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_skill());
    }

    // optional float game_balance = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_id = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

    // optional uint32 leagueid = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint64 radiant_team_logo = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radiant_team_logo());
    }

    // optional uint64 dire_team_logo = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dire_team_logo());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 radiant_team_complete = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_complete());
    }

    // optional uint32 dire_team_complete = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_complete());
    }

    // optional uint32 positive_votes = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positive_votes());
    }

    // optional uint32 negative_votes = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_votes());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replay_state());
    }

    // optional uint64 match_seq_num = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_seq_num());
    }

    // optional uint32 radiant_guild_id = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_guild_id());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 dire_guild_id = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_guild_id());
    }

    // optional uint32 series_id = 39;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 engine = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

    // optional uint32 match_flags = 46;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flags());
    }

    // optional fixed32 private_metadata_key = 47;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_score = 48;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_score());
    }

    // optional uint32 dire_team_score = 49;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_score());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional uint32 pre_game_duration = 53;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_game_duration());
    }

    // optional uint32 tournament_id = 51;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_round = 52;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_round());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch::MergeFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  broadcaster_channels_.MergeFrom(from.broadcaster_channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      radiant_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_logo_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      dire_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_logo_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_custom_game_data()->::proto::dota::CMsgDOTAMatch_CustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00000800u) {
      first_blood_time_ = from.first_blood_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00002000u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00004000u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00008000u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      human_players_ = from.human_players_;
    }
    if (cached_has_bits & 0x00020000u) {
      average_skill_ = from.average_skill_;
    }
    if (cached_has_bits & 0x00040000u) {
      game_balance_ = from.game_balance_;
    }
    if (cached_has_bits & 0x00080000u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      dire_team_id_ = from.dire_team_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00400000u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00800000u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      radiant_team_complete_ = from.radiant_team_complete_;
    }
    if (cached_has_bits & 0x02000000u) {
      dire_team_complete_ = from.dire_team_complete_;
    }
    if (cached_has_bits & 0x04000000u) {
      positive_votes_ = from.positive_votes_;
    }
    if (cached_has_bits & 0x08000000u) {
      negative_votes_ = from.negative_votes_;
    }
    if (cached_has_bits & 0x10000000u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x20000000u) {
      replay_state_ = from.replay_state_;
    }
    if (cached_has_bits & 0x40000000u) {
      match_seq_num_ = from.match_seq_num_;
    }
    if (cached_has_bits & 0x80000000u) {
      radiant_guild_id_ = from.radiant_guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dire_guild_id_ = from.dire_guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_flags_ = from.match_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      private_metadata_key_ = from.private_metadata_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_score_ = from.radiant_team_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_score_ = from.dire_team_score_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00000200u) {
      pre_game_duration_ = from.pre_game_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      tournament_round_ = from.tournament_round_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTAMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch::CopyFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch::Swap(CMsgDOTAMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch::InternalSwap(CMsgDOTAMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  CastToBase(&picks_bans_)->InternalSwap(CastToBase(&other->picks_bans_));
  CastToBase(&broadcaster_channels_)->InternalSwap(CastToBase(&other->broadcaster_channels_));
  radiant_team_name_.Swap(&other->radiant_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_name_.Swap(&other->dire_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  radiant_team_tag_.Swap(&other->radiant_team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_tag_.Swap(&other->dire_team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  radiant_team_logo_url_.Swap(&other->radiant_team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_logo_url_.Swap(&other->dire_team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_game_data_, other->custom_game_data_);
  swap(duration_, other->duration_);
  swap(starttime_, other->starttime_);
  swap(match_id_, other->match_id_);
  swap(cluster_, other->cluster_);
  swap(first_blood_time_, other->first_blood_time_);
  swap(replay_salt_, other->replay_salt_);
  swap(server_ip_, other->server_ip_);
  swap(server_port_, other->server_port_);
  swap(lobby_type_, other->lobby_type_);
  swap(human_players_, other->human_players_);
  swap(average_skill_, other->average_skill_);
  swap(game_balance_, other->game_balance_);
  swap(radiant_team_id_, other->radiant_team_id_);
  swap(dire_team_id_, other->dire_team_id_);
  swap(leagueid_, other->leagueid_);
  swap(radiant_team_logo_, other->radiant_team_logo_);
  swap(dire_team_logo_, other->dire_team_logo_);
  swap(radiant_team_complete_, other->radiant_team_complete_);
  swap(dire_team_complete_, other->dire_team_complete_);
  swap(positive_votes_, other->positive_votes_);
  swap(negative_votes_, other->negative_votes_);
  swap(game_mode_, other->game_mode_);
  swap(replay_state_, other->replay_state_);
  swap(match_seq_num_, other->match_seq_num_);
  swap(radiant_guild_id_, other->radiant_guild_id_);
  swap(dire_guild_id_, other->dire_guild_id_);
  swap(series_id_, other->series_id_);
  swap(series_type_, other->series_type_);
  swap(engine_, other->engine_);
  swap(match_flags_, other->match_flags_);
  swap(private_metadata_key_, other->private_metadata_key_);
  swap(radiant_team_score_, other->radiant_team_score_);
  swap(dire_team_score_, other->dire_team_score_);
  swap(match_outcome_, other->match_outcome_);
  swap(pre_game_duration_, other->pre_game_duration_);
  swap(tournament_id_, other->tournament_id_);
  swap(tournament_round_, other->tournament_round_);
}

::google::protobuf::Metadata CMsgDOTAMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerCard_StatModifier::InitAsDefaultInstance() {
}
class CMsgPlayerCard_StatModifier::HasBitSetters {
 public:
  static void set_has_stat(CMsgPlayerCard_StatModifier* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgPlayerCard_StatModifier* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerCard_StatModifier::kStatFieldNumber;
const int CMsgPlayerCard_StatModifier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPlayerCard.StatModifier)
}
CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_, &from.stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPlayerCard.StatModifier)
}

void CMsgPlayerCard_StatModifier::SharedCtor() {
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(value_));
}

CMsgPlayerCard_StatModifier::~CMsgPlayerCard_StatModifier() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPlayerCard.StatModifier)
  SharedDtor();
}

void CMsgPlayerCard_StatModifier::SharedDtor() {
}

void CMsgPlayerCard_StatModifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPlayerCard_StatModifier& CMsgPlayerCard_StatModifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPlayerCard_StatModifier_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgPlayerCard_StatModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPlayerCard.StatModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&stat_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPlayerCard_StatModifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPlayerCard_StatModifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPlayerCard_StatModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPlayerCard.StatModifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPlayerCard.StatModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPlayerCard.StatModifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPlayerCard_StatModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPlayerCard.StatModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPlayerCard.StatModifier)
}

::google::protobuf::uint8* CMsgPlayerCard_StatModifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPlayerCard.StatModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPlayerCard.StatModifier)
  return target;
}

size_t CMsgPlayerCard_StatModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPlayerCard.StatModifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerCard_StatModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard_StatModifier* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPlayerCard_StatModifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPlayerCard.StatModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPlayerCard.StatModifier)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard_StatModifier::MergeFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_ = from.stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerCard_StatModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard_StatModifier::CopyFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard_StatModifier::IsInitialized() const {
  return true;
}

void CMsgPlayerCard_StatModifier::Swap(CMsgPlayerCard_StatModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerCard_StatModifier::InternalSwap(CMsgPlayerCard_StatModifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_, other->stat_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata CMsgPlayerCard_StatModifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerCard::InitAsDefaultInstance() {
}
class CMsgPlayerCard::HasBitSetters {
 public:
  static void set_has_account_id(CMsgPlayerCard* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerCard::kAccountIdFieldNumber;
const int CMsgPlayerCard::kStatModifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerCard::CMsgPlayerCard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPlayerCard)
}
CMsgPlayerCard::CMsgPlayerCard(const CMsgPlayerCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stat_modifier_(from.stat_modifier_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPlayerCard)
}

void CMsgPlayerCard::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto.base);
  account_id_ = 0u;
}

CMsgPlayerCard::~CMsgPlayerCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPlayerCard)
  SharedDtor();
}

void CMsgPlayerCard::SharedDtor() {
}

void CMsgPlayerCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPlayerCard& CMsgPlayerCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPlayerCard_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgPlayerCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_modifier_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPlayerCard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPlayerCard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPlayerCard_StatModifier::_InternalParse;
          object = msg->add_stat_modifier();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPlayerCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stat_modifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPlayerCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_modifier_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stat_modifier(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPlayerCard)
}

::google::protobuf::uint8* CMsgPlayerCard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_modifier_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stat_modifier(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPlayerCard)
  return target;
}

size_t CMsgPlayerCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPlayerCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_modifier_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stat_modifier(static_cast<int>(i)));
    }
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPlayerCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPlayerCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPlayerCard)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard::MergeFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_modifier_.MergeFrom(from.stat_modifier_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard::CopyFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard::IsInitialized() const {
  return true;
}

void CMsgPlayerCard::Swap(CMsgPlayerCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerCard::InternalSwap(CMsgPlayerCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stat_modifier_)->InternalSwap(CastToBase(&other->stat_modifier_));
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgPlayerCard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerStats::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerStats::HasBitSetters {
 public:
  static void set_has_player_account_id(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_completed(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_id(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_league_id(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_delay(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_series_id(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_series_type(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_kills(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_deaths(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cs(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_gpm(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_tower_kills(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_roshan_kills(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_teamfight_participation(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_wards_placed(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_camps_stacked(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_runes_grabbed(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_first_blood(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_stuns(CMsgDOTAFantasyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStats::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchCompletedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDelayFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamfightParticipationFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kWardsPlacedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCampsStackedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRunesGrabbedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kFirstBloodFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kStunsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStats)
}
CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stuns_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(stuns_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stuns_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(stuns_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_type_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(series_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wards_placed_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(wards_placed_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&camps_stacked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stuns_) -
        reinterpret_cast<char*>(&camps_stacked_)) + sizeof(stuns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool match_completed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_match_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 delay = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cs = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_cs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float gpm = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_gpm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 tower_kills = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_tower_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 roshan_kills = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_roshan_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float teamfight_participation = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_teamfight_participation(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 wards_placed = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_wards_placed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 camps_stacked = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_camps_stacked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 runes_grabbed = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_runes_grabbed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 first_blood = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_first_blood(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float stuns = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_stuns(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_completed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_match_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_cs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_kills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_tower_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roshan_kills = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_roshan_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float teamfight_participation = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {
          HasBitSetters::set_has_teamfight_participation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teamfight_participation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wards_placed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_wards_placed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 camps_stacked = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_camps_stacked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camps_stacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 runes_grabbed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_runes_grabbed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runes_grabbed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_first_blood(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {
          HasBitSetters::set_has_stuns(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool match_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->match_completed(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 delay = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay(), output);
  }

  // optional uint32 series_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_id(), output);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 kills = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->kills(), output);
  }

  // optional uint32 deaths = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->deaths(), output);
  }

  // optional uint32 cs = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cs(), output);
  }

  // optional float gpm = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->gpm(), output);
  }

  // optional uint32 tower_kills = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tower_kills(), output);
  }

  // optional uint32 roshan_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roshan_kills(), output);
  }

  // optional float teamfight_participation = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->teamfight_participation(), output);
  }

  // optional uint32 wards_placed = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wards_placed(), output);
  }

  // optional uint32 camps_stacked = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->camps_stacked(), output);
  }

  // optional uint32 runes_grabbed = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->runes_grabbed(), output);
  }

  // optional uint32 first_blood = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->first_blood(), output);
  }

  // optional float stuns = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->stuns(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool match_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->match_completed(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay(), target);
  }

  // optional uint32 series_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_id(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 kills = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->kills(), target);
  }

  // optional uint32 deaths = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->deaths(), target);
  }

  // optional uint32 cs = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cs(), target);
  }

  // optional float gpm = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->gpm(), target);
  }

  // optional uint32 tower_kills = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tower_kills(), target);
  }

  // optional uint32 roshan_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roshan_kills(), target);
  }

  // optional float teamfight_participation = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->teamfight_participation(), target);
  }

  // optional uint32 wards_placed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wards_placed(), target);
  }

  // optional uint32 camps_stacked = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->camps_stacked(), target);
  }

  // optional uint32 runes_grabbed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->runes_grabbed(), target);
  }

  // optional uint32 first_blood = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->first_blood(), target);
  }

  // optional float stuns = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->stuns(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 player_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional bool match_completed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 league_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 delay = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 series_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 kills = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 cs = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cs());
    }

    // optional float gpm = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 tower_kills = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 roshan_kills = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_kills());
    }

    // optional float teamfight_participation = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional uint32 wards_placed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_placed());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 camps_stacked = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camps_stacked());
    }

    // optional uint32 runes_grabbed = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runes_grabbed());
    }

    // optional uint32 first_blood = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood());
    }

    // optional float stuns = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_completed_ = from.match_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_type_ = from.series_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      cs_ = from.cs_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00001000u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00004000u) {
      teamfight_participation_ = from.teamfight_participation_;
    }
    if (cached_has_bits & 0x00008000u) {
      wards_placed_ = from.wards_placed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00020000u) {
      runes_grabbed_ = from.runes_grabbed_;
    }
    if (cached_has_bits & 0x00040000u) {
      first_blood_ = from.first_blood_;
    }
    if (cached_has_bits & 0x00080000u) {
      stuns_ = from.stuns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStats::Swap(CMsgDOTAFantasyPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStats::InternalSwap(CMsgDOTAFantasyPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(player_account_id_, other->player_account_id_);
  swap(match_completed_, other->match_completed_);
  swap(team_id_, other->team_id_);
  swap(league_id_, other->league_id_);
  swap(delay_, other->delay_);
  swap(series_id_, other->series_id_);
  swap(series_type_, other->series_type_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(cs_, other->cs_);
  swap(gpm_, other->gpm_);
  swap(tower_kills_, other->tower_kills_);
  swap(roshan_kills_, other->roshan_kills_);
  swap(teamfight_participation_, other->teamfight_participation_);
  swap(wards_placed_, other->wards_placed_);
  swap(camps_stacked_, other->camps_stacked_);
  swap(runes_grabbed_, other->runes_grabbed_);
  swap(first_blood_, other->first_blood_);
  swap(stuns_, other->stuns_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerMatchStats::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerMatchStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerMatchStats::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}
CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}

void CMsgDOTAFantasyPlayerMatchStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgDOTAFantasyPlayerMatchStats::~CMsgDOTAFantasyPlayerMatchStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerMatchStats::SharedDtor() {
}

void CMsgDOTAFantasyPlayerMatchStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerMatchStats& CMsgDOTAFantasyPlayerMatchStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerMatchStats_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerMatchStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerMatchStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerMatchStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerStats::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerMatchStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerMatchStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerMatchStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerMatchStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerMatchStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerMatchStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerMatchStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerMatchStats::Swap(CMsgDOTAFantasyPlayerMatchStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerMatchStats::InternalSwap(CMsgDOTAFantasyPlayerMatchStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerMatchStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABotDebugInfo_Bot_Mode::InitAsDefaultInstance() {
}
class CMsgDOTABotDebugInfo_Bot_Mode::HasBitSetters {
 public:
  static void set_has_mode_id(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_desire(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_target_entity(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_target_x(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_target_y(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_target_z(CMsgDOTABotDebugInfo_Bot_Mode* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot_Mode::kModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kDesireFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetEntityFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}
CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_id_, &from.mode_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedCtor() {
  ::memset(&mode_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_z_) -
      reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
}

CMsgDOTABotDebugInfo_Bot_Mode::~CMsgDOTABotDebugInfo_Bot_Mode() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedDtor() {
}

void CMsgDOTABotDebugInfo_Bot_Mode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot_Mode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABotDebugInfo_Bot_Mode_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABotDebugInfo_Bot_Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&mode_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_z_) -
        reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABotDebugInfo_Bot_Mode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABotDebugInfo_Bot_Mode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 mode_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mode_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float desire = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_desire(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 target_entity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_target_entity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_x = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_target_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_y = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_target_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_z = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_target_z(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABotDebugInfo_Bot_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mode_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_desire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_target_entity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_target_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_target_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_target_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABotDebugInfo_Bot_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode_id(), output);
  }

  // optional float desire = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire(), output);
  }

  // optional uint32 target_entity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_entity(), output);
  }

  // optional uint32 target_x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_x(), output);
  }

  // optional uint32 target_y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_y(), output);
  }

  // optional uint32 target_z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Mode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode_id(), target);
  }

  // optional float desire = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire(), target);
  }

  // optional uint32 target_entity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_entity(), target);
  }

  // optional uint32 target_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_x(), target);
  }

  // optional uint32 target_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_y(), target);
  }

  // optional uint32 target_z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 mode_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode_id());
    }

    // optional float desire = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 target_entity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entity());
    }

    // optional uint32 target_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_x());
    }

    // optional uint32 target_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_y());
    }

    // optional uint32 target_z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_z());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Mode* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot_Mode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mode_id_ = from.mode_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_ = from.desire_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entity_ = from.target_entity_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_x_ = from.target_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_y_ = from.target_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_z_ = from.target_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Mode::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Mode::Swap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot_Mode::InternalSwap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_id_, other->mode_id_);
  swap(desire_, other->desire_);
  swap(target_entity_, other->target_entity_);
  swap(target_x_, other->target_x_);
  swap(target_y_, other->target_y_);
  swap(target_z_, other->target_z_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Mode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABotDebugInfo_Bot_Action::InitAsDefaultInstance() {
}
class CMsgDOTABotDebugInfo_Bot_Action::HasBitSetters {
 public:
  static void set_has_action_id(CMsgDOTABotDebugInfo_Bot_Action* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_action_target(CMsgDOTABotDebugInfo_Bot_Action* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot_Action::kActionIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Action::kActionTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}
CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action_target()) {
    action_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_target_);
  }
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto.base);
  action_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_id_ = 0u;
}

CMsgDOTABotDebugInfo_Bot_Action::~CMsgDOTABotDebugInfo_Bot_Action() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedDtor() {
  action_target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABotDebugInfo_Bot_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot_Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABotDebugInfo_Bot_Action_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABotDebugInfo_Bot_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_target_.ClearNonDefaultToEmptyNoArena();
  }
  action_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABotDebugInfo_Bot_Action::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABotDebugInfo_Bot_Action*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_action_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string action_target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
        object = msg->mutable_action_target();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABotDebugInfo_Bot_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_action_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string action_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_target().data(), static_cast<int>(this->action_target().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABotDebugInfo_Bot_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }

  // optional string action_target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), static_cast<int>(this->action_target().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Action::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }

  // optional string action_target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), static_cast<int>(this->action_target().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string action_target = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_target());
    }

    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Action* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot_Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      action_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_target_);
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Action::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Action::Swap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot_Action::InternalSwap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_target_.Swap(&other->action_target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_id_, other->action_id_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Action::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABotDebugInfo_Bot::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTABotDebugInfo_Bot_default_instance_._instance.get_mutable()->action_ = const_cast< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action*>(
      ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::internal_default_instance());
}
class CMsgDOTABotDebugInfo_Bot::HasBitSetters {
 public:
  static void set_has_player_owner_id(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_difficulty(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_power_current(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_power_max(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_move_target_x(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_move_target_y(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_move_target_z(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_active_mode_id(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_execution_time(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action& action(const CMsgDOTABotDebugInfo_Bot* msg);
  static void set_has_action(CMsgDOTABotDebugInfo_Bot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action&
CMsgDOTABotDebugInfo_Bot::HasBitSetters::action(const CMsgDOTABotDebugInfo_Bot* msg) {
  return *msg->action_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot::kPlayerOwnerIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kHeroIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kDifficultyFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerCurrentFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerMaxFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetZFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActiveModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kExecutionTimeFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kModesFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
}
CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      modes_(from.modes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    action_ = new ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&player_owner_id_, &from.player_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&player_owner_id_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
}

void CMsgDOTABotDebugInfo_Bot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&action_)) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo_Bot::~CMsgDOTABotDebugInfo_Bot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot::SharedDtor() {
  if (this != internal_default_instance()) delete action_;
}

void CMsgDOTABotDebugInfo_Bot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo_Bot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABotDebugInfo_Bot_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABotDebugInfo_Bot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_ != nullptr);
    action_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&player_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_target_y_) -
        reinterpret_cast<char*>(&player_owner_id_)) + sizeof(move_target_y_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&move_target_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_time_) -
        reinterpret_cast<char*>(&move_target_z_)) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABotDebugInfo_Bot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABotDebugInfo_Bot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_owner_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_owner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 power_current = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_power_current(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 power_max = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_power_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 move_target_x = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_move_target_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 move_target_y = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_move_target_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 move_target_z = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_move_target_z(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 active_mode_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_active_mode_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float execution_time = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_execution_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode::_InternalParse;
          object = msg->add_modes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::_InternalParse;
        object = msg->mutable_action();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABotDebugInfo_Bot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_owner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 power_current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_power_current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 power_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_power_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_move_target_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_move_target_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_z = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_move_target_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_mode_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_active_mode_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_mode_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float execution_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_execution_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABotDebugInfo_Bot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_owner_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional uint32 power_current = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->power_current(), output);
  }

  // optional uint32 power_max = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power_max(), output);
  }

  // optional uint32 move_target_x = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->move_target_x(), output);
  }

  // optional uint32 move_target_y = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->move_target_y(), output);
  }

  // optional uint32 move_target_z = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->move_target_z(), output);
  }

  // optional uint32 active_mode_id = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_mode_id(), output);
  }

  // optional float execution_time = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->execution_time(), output);
  }

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->modes(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_owner_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional uint32 power_current = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->power_current(), target);
  }

  // optional uint32 power_max = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power_max(), target);
  }

  // optional uint32 move_target_x = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->move_target_x(), target);
  }

  // optional uint32 move_target_y = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->move_target_y(), target);
  }

  // optional uint32 move_target_z = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->move_target_z(), target);
  }

  // optional uint32 active_mode_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_mode_id(), target);
  }

  // optional float execution_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->execution_time(), target);
  }

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->modes(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->modes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->modes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional uint32 player_owner_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_owner_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint32 power_current = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_current());
    }

    // optional uint32 power_max = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_max());
    }

    // optional uint32 move_target_x = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_x());
    }

    // optional uint32 move_target_y = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_y());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 move_target_z = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_z());
    }

    // optional uint32 active_mode_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_mode_id());
    }

    // optional float execution_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_action()->::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000002u) {
      player_owner_id_ = from.player_owner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000010u) {
      power_current_ = from.power_current_;
    }
    if (cached_has_bits & 0x00000020u) {
      power_max_ = from.power_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      move_target_x_ = from.move_target_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      move_target_y_ = from.move_target_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      move_target_z_ = from.move_target_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_mode_id_ = from.active_mode_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot::Swap(CMsgDOTABotDebugInfo_Bot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot::InternalSwap(CMsgDOTABotDebugInfo_Bot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&modes_)->InternalSwap(CastToBase(&other->modes_));
  swap(action_, other->action_);
  swap(player_owner_id_, other->player_owner_id_);
  swap(hero_id_, other->hero_id_);
  swap(difficulty_, other->difficulty_);
  swap(power_current_, other->power_current_);
  swap(power_max_, other->power_max_);
  swap(move_target_x_, other->move_target_x_);
  swap(move_target_y_, other->move_target_y_);
  swap(move_target_z_, other->move_target_z_);
  swap(active_mode_id_, other->active_mode_id_);
  swap(execution_time_, other->execution_time_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABotDebugInfo::InitAsDefaultInstance() {
}
class CMsgDOTABotDebugInfo::HasBitSetters {
 public:
  static void set_has_desire_push_lane_top(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_desire_push_lane_mid(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_desire_push_lane_bot(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_desire_defend_lane_top(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_desire_defend_lane_mid(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_desire_defend_lane_bot(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_desire_farm_lane_top(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_desire_farm_lane_mid(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_desire_farm_lane_bot(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_desire_farm_roshan(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_execution_time(CMsgDOTABotDebugInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo::kBotsFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmRoshanFieldNumber;
const int CMsgDOTABotDebugInfo::kExecutionTimeFieldNumber;
const int CMsgDOTABotDebugInfo::kRuneStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo)
}
CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bots_(from.bots_),
      rune_status_(from.rune_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&desire_push_lane_top_, &from.desire_push_lane_top_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo)
}

void CMsgDOTABotDebugInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&desire_push_lane_top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo::~CMsgDOTABotDebugInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo)
  SharedDtor();
}

void CMsgDOTABotDebugInfo::SharedDtor() {
}

void CMsgDOTABotDebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABotDebugInfo& CMsgDOTABotDebugInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABotDebugInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABotDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bots_.Clear();
  rune_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&desire_push_lane_top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desire_farm_lane_mid_) -
        reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(desire_farm_lane_mid_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&desire_farm_lane_bot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_time_) -
        reinterpret_cast<char*>(&desire_farm_lane_bot_)) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABotDebugInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABotDebugInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTABotDebugInfo_Bot::_InternalParse;
          object = msg->add_bots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional float desire_push_lane_top = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_desire_push_lane_top(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_push_lane_mid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_desire_push_lane_mid(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_push_lane_bot = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_desire_push_lane_bot(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_defend_lane_top = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_desire_defend_lane_top(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_defend_lane_mid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_desire_defend_lane_mid(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_defend_lane_bot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_desire_defend_lane_bot(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_farm_lane_top = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_desire_farm_lane_top(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_farm_lane_mid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_desire_farm_lane_mid(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_farm_lane_bot = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_desire_farm_lane_bot(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float desire_farm_roshan = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_desire_farm_roshan(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float execution_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_execution_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated uint32 rune_status = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 104) {
          do {
            msg->add_rune_status(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 104 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_rune_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABotDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_desire_push_lane_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_mid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_desire_push_lane_mid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_bot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_desire_push_lane_bot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_top = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_desire_defend_lane_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_mid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_desire_defend_lane_mid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_bot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_desire_defend_lane_bot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_top = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_desire_farm_lane_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_mid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_desire_farm_lane_mid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_bot = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_desire_farm_lane_bot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_roshan = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_desire_farm_roshan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_roshan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float execution_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_execution_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rune_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_rune_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rune_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABotDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bots(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float desire_push_lane_top = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire_push_lane_top(), output);
  }

  // optional float desire_push_lane_mid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desire_push_lane_mid(), output);
  }

  // optional float desire_push_lane_bot = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->desire_push_lane_bot(), output);
  }

  // optional float desire_defend_lane_top = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->desire_defend_lane_top(), output);
  }

  // optional float desire_defend_lane_mid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->desire_defend_lane_mid(), output);
  }

  // optional float desire_defend_lane_bot = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->desire_defend_lane_bot(), output);
  }

  // optional float desire_farm_lane_top = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->desire_farm_lane_top(), output);
  }

  // optional float desire_farm_lane_mid = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->desire_farm_lane_mid(), output);
  }

  // optional float desire_farm_lane_bot = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->desire_farm_lane_bot(), output);
  }

  // optional float desire_farm_roshan = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->desire_farm_roshan(), output);
  }

  // optional float execution_time = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->execution_time(), output);
  }

  // repeated uint32 rune_status = 13;
  for (int i = 0, n = this->rune_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->rune_status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bots(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float desire_push_lane_top = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire_push_lane_top(), target);
  }

  // optional float desire_push_lane_mid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desire_push_lane_mid(), target);
  }

  // optional float desire_push_lane_bot = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->desire_push_lane_bot(), target);
  }

  // optional float desire_defend_lane_top = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->desire_defend_lane_top(), target);
  }

  // optional float desire_defend_lane_mid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->desire_defend_lane_mid(), target);
  }

  // optional float desire_defend_lane_bot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->desire_defend_lane_bot(), target);
  }

  // optional float desire_farm_lane_top = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->desire_farm_lane_top(), target);
  }

  // optional float desire_farm_lane_mid = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->desire_farm_lane_mid(), target);
  }

  // optional float desire_farm_lane_bot = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->desire_farm_lane_bot(), target);
  }

  // optional float desire_farm_roshan = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->desire_farm_roshan(), target);
  }

  // optional float execution_time = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->execution_time(), target);
  }

  // repeated uint32 rune_status = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->rune_status_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo)
  return target;
}

size_t CMsgDOTABotDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bots(static_cast<int>(i)));
    }
  }

  // repeated uint32 rune_status = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rune_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rune_status_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float desire_push_lane_top = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_mid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_bot = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_top = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_mid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_bot = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_top = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_mid = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float desire_farm_lane_bot = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_roshan = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float execution_time = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABotDebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo::MergeFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bots_.MergeFrom(from.bots_);
  rune_status_.MergeFrom(from.rune_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      desire_push_lane_top_ = from.desire_push_lane_top_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_push_lane_mid_ = from.desire_push_lane_mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      desire_push_lane_bot_ = from.desire_push_lane_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      desire_defend_lane_top_ = from.desire_defend_lane_top_;
    }
    if (cached_has_bits & 0x00000010u) {
      desire_defend_lane_mid_ = from.desire_defend_lane_mid_;
    }
    if (cached_has_bits & 0x00000020u) {
      desire_defend_lane_bot_ = from.desire_defend_lane_bot_;
    }
    if (cached_has_bits & 0x00000040u) {
      desire_farm_lane_top_ = from.desire_farm_lane_top_;
    }
    if (cached_has_bits & 0x00000080u) {
      desire_farm_lane_mid_ = from.desire_farm_lane_mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      desire_farm_lane_bot_ = from.desire_farm_lane_bot_;
    }
    if (cached_has_bits & 0x00000200u) {
      desire_farm_roshan_ = from.desire_farm_roshan_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo::CopyFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo::Swap(CMsgDOTABotDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo::InternalSwap(CMsgDOTABotDebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bots_)->InternalSwap(CastToBase(&other->bots_));
  rune_status_.InternalSwap(&other->rune_status_);
  swap(desire_push_lane_top_, other->desire_push_lane_top_);
  swap(desire_push_lane_mid_, other->desire_push_lane_mid_);
  swap(desire_push_lane_bot_, other->desire_push_lane_bot_);
  swap(desire_defend_lane_top_, other->desire_defend_lane_top_);
  swap(desire_defend_lane_mid_, other->desire_defend_lane_mid_);
  swap(desire_defend_lane_bot_, other->desire_defend_lane_bot_);
  swap(desire_farm_lane_top_, other->desire_farm_lane_top_);
  swap(desire_farm_lane_mid_, other->desire_farm_lane_mid_);
  swap(desire_farm_lane_bot_, other->desire_farm_lane_bot_);
  swap(desire_farm_roshan_, other->desire_farm_roshan_);
  swap(execution_time_, other->execution_time_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSuccessfulHero::InitAsDefaultInstance() {
}
class CMsgSuccessfulHero::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgSuccessfulHero* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_win_percent(CMsgSuccessfulHero* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_longest_streak(CMsgSuccessfulHero* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSuccessfulHero::kHeroIdFieldNumber;
const int CMsgSuccessfulHero::kWinPercentFieldNumber;
const int CMsgSuccessfulHero::kLongestStreakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSuccessfulHero::CMsgSuccessfulHero()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSuccessfulHero)
}
CMsgSuccessfulHero::CMsgSuccessfulHero(const CMsgSuccessfulHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&longest_streak_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSuccessfulHero)
}

void CMsgSuccessfulHero::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longest_streak_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
}

CMsgSuccessfulHero::~CMsgSuccessfulHero() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSuccessfulHero)
  SharedDtor();
}

void CMsgSuccessfulHero::SharedDtor() {
}

void CMsgSuccessfulHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSuccessfulHero& CMsgSuccessfulHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSuccessfulHero_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgSuccessfulHero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSuccessfulHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longest_streak_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSuccessfulHero::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSuccessfulHero*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float win_percent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_win_percent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 longest_streak = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_longest_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSuccessfulHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSuccessfulHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float win_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_win_percent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &win_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 longest_streak = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_longest_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &longest_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSuccessfulHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSuccessfulHero)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSuccessfulHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSuccessfulHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional float win_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->win_percent(), output);
  }

  // optional uint32 longest_streak = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->longest_streak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSuccessfulHero)
}

::google::protobuf::uint8* CMsgSuccessfulHero::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSuccessfulHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional float win_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->win_percent(), target);
  }

  // optional uint32 longest_streak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->longest_streak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSuccessfulHero)
  return target;
}

size_t CMsgSuccessfulHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSuccessfulHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional float win_percent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 longest_streak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->longest_streak());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSuccessfulHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSuccessfulHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSuccessfulHero* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSuccessfulHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSuccessfulHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSuccessfulHero)
    MergeFrom(*source);
  }
}

void CMsgSuccessfulHero::MergeFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSuccessfulHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_percent_ = from.win_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      longest_streak_ = from.longest_streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSuccessfulHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSuccessfulHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSuccessfulHero::CopyFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSuccessfulHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuccessfulHero::IsInitialized() const {
  return true;
}

void CMsgSuccessfulHero::Swap(CMsgSuccessfulHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSuccessfulHero::InternalSwap(CMsgSuccessfulHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(win_percent_, other->win_percent_);
  swap(longest_streak_, other->longest_streak_);
}

::google::protobuf::Metadata CMsgSuccessfulHero::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRecentMatchInfo::InitAsDefaultInstance() {
}
class CMsgRecentMatchInfo::HasBitSetters {
 public:
  static void set_has_match_id(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_mode(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kills(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deaths(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_assists(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_duration(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_player_slot(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_match_outcome(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_timestamp(CMsgRecentMatchInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRecentMatchInfo::kMatchIdFieldNumber;
const int CMsgRecentMatchInfo::kGameModeFieldNumber;
const int CMsgRecentMatchInfo::kKillsFieldNumber;
const int CMsgRecentMatchInfo::kDeathsFieldNumber;
const int CMsgRecentMatchInfo::kAssistsFieldNumber;
const int CMsgRecentMatchInfo::kDurationFieldNumber;
const int CMsgRecentMatchInfo::kPlayerSlotFieldNumber;
const int CMsgRecentMatchInfo::kMatchOutcomeFieldNumber;
const int CMsgRecentMatchInfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRecentMatchInfo::CMsgRecentMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRecentMatchInfo)
}
CMsgRecentMatchInfo::CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRecentMatchInfo)
}

void CMsgRecentMatchInfo::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgRecentMatchInfo::~CMsgRecentMatchInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRecentMatchInfo)
  SharedDtor();
}

void CMsgRecentMatchInfo::SharedDtor() {
}

void CMsgRecentMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRecentMatchInfo& CMsgRecentMatchInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRecentMatchInfo_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgRecentMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRecentMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_outcome_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(match_outcome_));
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRecentMatchInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRecentMatchInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 duration = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_slot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EMatchOutcome_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_outcome(static_cast<::proto::dota::EMatchOutcome>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRecentMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRecentMatchInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRecentMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRecentMatchInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRecentMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRecentMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_mode(), output);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // optional uint32 duration = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->duration(), output);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->player_slot(), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->match_outcome(), output);
  }

  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRecentMatchInfo)
}

::google::protobuf::uint8* CMsgRecentMatchInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRecentMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_mode(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // optional uint32 duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->duration(), target);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->player_slot(), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->match_outcome(), target);
  }

  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRecentMatchInfo)
  return target;
}

size_t CMsgRecentMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRecentMatchInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 player_slot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

  }
  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRecentMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecentMatchInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRecentMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRecentMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRecentMatchInfo)
    MergeFrom(*source);
  }
}

void CMsgRecentMatchInfo::MergeFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_outcome_ = from.match_outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void CMsgRecentMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecentMatchInfo::CopyFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecentMatchInfo::IsInitialized() const {
  return true;
}

void CMsgRecentMatchInfo::Swap(CMsgRecentMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRecentMatchInfo::InternalSwap(CMsgRecentMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(game_mode_, other->game_mode_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(duration_, other->duration_);
  swap(player_slot_, other->player_slot_);
  swap(match_outcome_, other->match_outcome_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgRecentMatchInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchTips_SingleTip::InitAsDefaultInstance() {
}
class CMsgMatchTips_SingleTip::HasBitSetters {
 public:
  static void set_has_source_account_id(CMsgMatchTips_SingleTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_account_id(CMsgMatchTips_SingleTip* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tip_amount(CMsgMatchTips_SingleTip* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_event_id(CMsgMatchTips_SingleTip* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchTips_SingleTip::kSourceAccountIdFieldNumber;
const int CMsgMatchTips_SingleTip::kTargetAccountIdFieldNumber;
const int CMsgMatchTips_SingleTip::kTipAmountFieldNumber;
const int CMsgMatchTips_SingleTip::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgMatchTips.SingleTip)
}
CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_account_id_, &from.source_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgMatchTips.SingleTip)
}

void CMsgMatchTips_SingleTip::SharedCtor() {
  ::memset(&source_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
}

CMsgMatchTips_SingleTip::~CMsgMatchTips_SingleTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgMatchTips.SingleTip)
  SharedDtor();
}

void CMsgMatchTips_SingleTip::SharedDtor() {
}

void CMsgMatchTips_SingleTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMatchTips_SingleTip& CMsgMatchTips_SingleTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMatchTips_SingleTip_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgMatchTips_SingleTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgMatchTips.SingleTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMatchTips_SingleTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMatchTips_SingleTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 source_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_source_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_target_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tip_amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tip_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMatchTips_SingleTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgMatchTips.SingleTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_source_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tip_amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tip_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgMatchTips.SingleTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgMatchTips.SingleTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMatchTips_SingleTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgMatchTips.SingleTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_account_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tip_amount(), output);
  }

  // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgMatchTips.SingleTip)
}

::google::protobuf::uint8* CMsgMatchTips_SingleTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgMatchTips.SingleTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_account_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tip_amount(), target);
  }

  // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgMatchTips.SingleTip)
  return target;
}

size_t CMsgMatchTips_SingleTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgMatchTips.SingleTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_account_id());
    }

    // optional uint32 target_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_amount());
    }

    // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips_SingleTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips_SingleTip* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMatchTips_SingleTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgMatchTips.SingleTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgMatchTips.SingleTip)
    MergeFrom(*source);
  }
}

void CMsgMatchTips_SingleTip::MergeFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_account_id_ = from.source_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tip_amount_ = from.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchTips_SingleTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips_SingleTip::CopyFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips_SingleTip::IsInitialized() const {
  return true;
}

void CMsgMatchTips_SingleTip::Swap(CMsgMatchTips_SingleTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchTips_SingleTip::InternalSwap(CMsgMatchTips_SingleTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_account_id_, other->source_account_id_);
  swap(target_account_id_, other->target_account_id_);
  swap(tip_amount_, other->tip_amount_);
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgMatchTips_SingleTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchTips::InitAsDefaultInstance() {
}
class CMsgMatchTips::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchTips::kTipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchTips::CMsgMatchTips()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgMatchTips)
}
CMsgMatchTips::CMsgMatchTips(const CMsgMatchTips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgMatchTips)
}

void CMsgMatchTips::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgMatchTips::~CMsgMatchTips() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgMatchTips)
  SharedDtor();
}

void CMsgMatchTips::SharedDtor() {
}

void CMsgMatchTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMatchTips& CMsgMatchTips::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgMatchTips::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgMatchTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMatchTips::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMatchTips*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgMatchTips_SingleTip::_InternalParse;
          object = msg->add_tips();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMatchTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgMatchTips)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgMatchTips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgMatchTips)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMatchTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgMatchTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgMatchTips)
}

::google::protobuf::uint8* CMsgMatchTips::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgMatchTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tips(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgMatchTips)
  return target;
}

size_t CMsgMatchTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgMatchTips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tips(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMatchTips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgMatchTips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgMatchTips)
    MergeFrom(*source);
  }
}

void CMsgMatchTips::MergeFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
}

void CMsgMatchTips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips::CopyFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips::IsInitialized() const {
  return true;
}

void CMsgMatchTips::Swap(CMsgMatchTips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchTips::InternalSwap(CMsgMatchTips* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tips_)->InternalSwap(CastToBase(&other->tips_));
}

::google::protobuf::Metadata CMsgMatchTips::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatchMinimal_Player::InitAsDefaultInstance() {
}
class CMsgDOTAMatchMinimal_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kills(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_deaths(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_assists(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_player_slot(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_pro_name(CMsgDOTAMatchMinimal_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kKillsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kDeathsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kAssistsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kItemsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kPlayerSlotFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kProNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal.Player)
}
CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pro_name()) {
    pro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pro_name_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal.Player)
}

void CMsgDOTAMatchMinimal_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  pro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_slot_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
}

CMsgDOTAMatchMinimal_Player::~CMsgDOTAMatchMinimal_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal.Player)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Player::SharedDtor() {
  pro_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatchMinimal_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatchMinimal_Player_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatchMinimal_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pro_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_slot_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatchMinimal_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatchMinimal_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 items = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_items(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_items();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 player_slot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pro_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatchMinimal.Player.pro_name");
        object = msg->mutable_pro_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatchMinimal_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pro_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pro_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pro_name().data(), static_cast<int>(this->pro_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Player.pro_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatchMinimal_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // repeated uint32 items = 6;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->items(i), output);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->player_slot(), output);
  }

  // optional string pro_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pro_name().data(), static_cast<int>(this->pro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Player.pro_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pro_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal.Player)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // repeated uint32 items = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->items_, target);

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->player_slot(), target);
  }

  // optional string pro_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pro_name().data(), static_cast<int>(this->pro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Player.pro_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pro_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal.Player)
  return target;
}

size_t CMsgDOTAMatchMinimal_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string pro_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pro_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 player_slot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatchMinimal_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pro_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Player::Swap(CMsgDOTAMatchMinimal_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal_Player::InternalSwap(CMsgDOTAMatchMinimal_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  pro_name_.Swap(&other->pro_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(hero_id_, other->hero_id_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(player_slot_, other->player_slot_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatchMinimal_Tourney::InitAsDefaultInstance() {
}
class CMsgDOTAMatchMinimal_Tourney::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_series_type(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_series_game(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_weekend_tourney_tournament_id(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_weekend_tourney_season_trophy_id(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_weekend_tourney_division(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_weekend_tourney_skill_level(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_radiant_team_id(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_radiant_team_name(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_radiant_team_logo(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_radiant_team_logo_url(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dire_team_id(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_dire_team_name(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dire_team_logo(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_dire_team_logo_url(CMsgDOTAMatchMinimal_Tourney* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal_Tourney::kLeagueIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesTypeFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesGameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyTournamentIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySeasonTrophyIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyDivisionFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySkillLevelFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamLogoUrlFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamLogoFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamLogoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}
CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_name()) {
    radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
  }
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_name()) {
    dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
  }
  radiant_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_logo_url()) {
    radiant_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_logo_url_);
  }
  dire_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_logo_url()) {
    dire_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_logo_url_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(weekend_tourney_skill_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}

void CMsgDOTAMatchMinimal_Tourney::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto.base);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(weekend_tourney_skill_level_));
}

CMsgDOTAMatchMinimal_Tourney::~CMsgDOTAMatchMinimal_Tourney() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Tourney::SharedDtor() {
  radiant_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatchMinimal_Tourney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal_Tourney::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatchMinimal_Tourney_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatchMinimal_Tourney::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      radiant_team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dire_team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(dire_team_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&series_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
        reinterpret_cast<char*>(&series_type_)) + sizeof(weekend_tourney_skill_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatchMinimal_Tourney::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatchMinimal_Tourney*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_radiant_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
        object = msg->mutable_radiant_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 radiant_team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_radiant_team_logo(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 dire_team_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dire_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string dire_team_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
        object = msg->mutable_dire_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 dire_team_logo = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_dire_team_logo(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_game = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_series_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_tournament_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_weekend_tourney_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_season_trophy_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_weekend_tourney_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_division = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_weekend_tourney_division(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_skill_level = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_weekend_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_logo_url = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
        object = msg->mutable_radiant_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string dire_team_logo_url = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
        object = msg->mutable_dire_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatchMinimal_Tourney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 radiant_team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &radiant_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dire_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 dire_team_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_dire_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dire_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_series_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_season_trophy_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_division(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_logo_url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_logo_url = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatchMinimal_Tourney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 radiant_team_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radiant_team_id(), output);
  }

  // optional string radiant_team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->radiant_team_name(), output);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->radiant_team_logo(), output);
  }

  // optional uint32 dire_team_id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dire_team_id(), output);
  }

  // optional string dire_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dire_team_name(), output);
  }

  // optional fixed64 dire_team_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->dire_team_logo(), output);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 series_game = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->series_game(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weekend_tourney_season_trophy_id(), output);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weekend_tourney_skill_level(), output);
  }

  // optional string radiant_team_logo_url = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->radiant_team_logo_url(), output);
  }

  // optional string dire_team_logo_url = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->dire_team_logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Tourney::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 radiant_team_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radiant_team_id(), target);
  }

  // optional string radiant_team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), static_cast<int>(this->radiant_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->radiant_team_name(), target);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->radiant_team_logo(), target);
  }

  // optional uint32 dire_team_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dire_team_id(), target);
  }

  // optional string dire_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), static_cast<int>(this->dire_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dire_team_name(), target);
  }

  // optional fixed64 dire_team_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->dire_team_logo(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 series_game = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->series_game(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weekend_tourney_season_trophy_id(), target);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weekend_tourney_skill_level(), target);
  }

  // optional string radiant_team_logo_url = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_logo_url().data(), static_cast<int>(this->radiant_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->radiant_team_logo_url(), target);
  }

  // optional string dire_team_logo_url = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_logo_url().data(), static_cast<int>(this->dire_team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->dire_team_logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return target;
}

size_t CMsgDOTAMatchMinimal_Tourney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional string dire_team_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional string radiant_team_logo_url = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_logo_url());
    }

    // optional string dire_team_logo_url = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_logo_url());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 radiant_team_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional fixed64 radiant_team_logo = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 dire_team_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 series_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional fixed64 dire_team_logo = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 series_game = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

    // optional uint32 weekend_tourney_tournament_id = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

    // optional uint32 weekend_tourney_season_trophy_id = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_season_trophy_id());
    }

    // optional uint32 weekend_tourney_division = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Tourney* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatchMinimal_Tourney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal.Tourney)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal.Tourney)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      radiant_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_logo_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      dire_team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_logo_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_id_ = from.dire_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    if (cached_has_bits & 0x00000400u) {
      series_game_ = from.series_game_;
    }
    if (cached_has_bits & 0x00000800u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      weekend_tourney_season_trophy_id_ = from.weekend_tourney_season_trophy_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x00004000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Tourney::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Tourney::Swap(CMsgDOTAMatchMinimal_Tourney* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal_Tourney::InternalSwap(CMsgDOTAMatchMinimal_Tourney* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radiant_team_name_.Swap(&other->radiant_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_name_.Swap(&other->dire_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  radiant_team_logo_url_.Swap(&other->radiant_team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_logo_url_.Swap(&other->dire_team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_id_, other->league_id_);
  swap(radiant_team_id_, other->radiant_team_id_);
  swap(radiant_team_logo_, other->radiant_team_logo_);
  swap(dire_team_id_, other->dire_team_id_);
  swap(series_type_, other->series_type_);
  swap(dire_team_logo_, other->dire_team_logo_);
  swap(series_game_, other->series_game_);
  swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
  swap(weekend_tourney_season_trophy_id_, other->weekend_tourney_season_trophy_id_);
  swap(weekend_tourney_division_, other->weekend_tourney_division_);
  swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Tourney::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMatchMinimal::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAMatchMinimal_default_instance_._instance.get_mutable()->tourney_ = const_cast< ::proto::dota::CMsgDOTAMatchMinimal_Tourney*>(
      ::proto::dota::CMsgDOTAMatchMinimal_Tourney::internal_default_instance());
}
class CMsgDOTAMatchMinimal::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_time(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_duration(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_mode(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& tourney(const CMsgDOTAMatchMinimal* msg);
  static void set_has_tourney(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_outcome(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_radiant_score(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_dire_score(CMsgDOTAMatchMinimal* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

const ::proto::dota::CMsgDOTAMatchMinimal_Tourney&
CMsgDOTAMatchMinimal::HasBitSetters::tourney(const CMsgDOTAMatchMinimal* msg) {
  return *msg->tourney_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal::kMatchIdFieldNumber;
const int CMsgDOTAMatchMinimal::kStartTimeFieldNumber;
const int CMsgDOTAMatchMinimal::kDurationFieldNumber;
const int CMsgDOTAMatchMinimal::kGameModeFieldNumber;
const int CMsgDOTAMatchMinimal::kPlayersFieldNumber;
const int CMsgDOTAMatchMinimal::kTourneyFieldNumber;
const int CMsgDOTAMatchMinimal::kMatchOutcomeFieldNumber;
const int CMsgDOTAMatchMinimal::kRadiantScoreFieldNumber;
const int CMsgDOTAMatchMinimal::kDireScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal)
}
CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tourney()) {
    tourney_ = new ::proto::dota::CMsgDOTAMatchMinimal_Tourney(*from.tourney_);
  } else {
    tourney_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_score_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(dire_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal)
}

void CMsgDOTAMatchMinimal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base);
  ::memset(&tourney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dire_score_) -
      reinterpret_cast<char*>(&tourney_)) + sizeof(dire_score_));
}

CMsgDOTAMatchMinimal::~CMsgDOTAMatchMinimal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal)
  SharedDtor();
}

void CMsgDOTAMatchMinimal::SharedDtor() {
  if (this != internal_default_instance()) delete tourney_;
}

void CMsgDOTAMatchMinimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMatchMinimal& CMsgDOTAMatchMinimal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMatchMinimal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tourney_ != nullptr);
    tourney_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_score_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(dire_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMatchMinimal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMatchMinimal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_start_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 duration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal_Tourney::_InternalParse;
        object = msg->mutable_tourney();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EMatchOutcome_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_outcome(static_cast<::proto::dota::EMatchOutcome>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_score = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_radiant_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_score = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_dire_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMatchMinimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tourney()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_radiant_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_dire_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMatchMinimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->start_time(), output);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::tourney(this), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->match_outcome(), output);
  }

  // optional uint32 radiant_score = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->radiant_score(), output);
  }

  // optional uint32 dire_score = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dire_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->start_time(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->players(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::tourney(this), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->match_outcome(), target);
  }

  // optional uint32 radiant_score = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->radiant_score(), target);
  }

  // optional uint32 dire_score = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dire_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal)
  return target;
}

size_t CMsgDOTAMatchMinimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tourney_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 start_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional uint32 radiant_score = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_score());
    }

    // optional uint32 dire_score = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMatchMinimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal::MergeFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tourney()->::proto::dota::CMsgDOTAMatchMinimal_Tourney::MergeFrom(from.tourney());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_score_ = from.radiant_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_score_ = from.dire_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal::CopyFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal::Swap(CMsgDOTAMatchMinimal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal::InternalSwap(CMsgDOTAMatchMinimal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(tourney_, other->tourney_);
  swap(match_id_, other->match_id_);
  swap(start_time_, other->start_time_);
  swap(duration_, other->duration_);
  swap(game_mode_, other->game_mode_);
  swap(match_outcome_, other->match_outcome_);
  swap(radiant_score_, other->radiant_score_);
  swap(dire_score_, other->dire_score_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgConsumableUsage::InitAsDefaultInstance() {
}
class CMsgConsumableUsage::HasBitSetters {
 public:
  static void set_has_item_def(CMsgConsumableUsage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_quantity_change(CMsgConsumableUsage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConsumableUsage::kItemDefFieldNumber;
const int CMsgConsumableUsage::kQuantityChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConsumableUsage::CMsgConsumableUsage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConsumableUsage)
}
CMsgConsumableUsage::CMsgConsumableUsage(const CMsgConsumableUsage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_change_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConsumableUsage)
}

void CMsgConsumableUsage::SharedCtor() {
  ::memset(&item_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_change_) -
      reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
}

CMsgConsumableUsage::~CMsgConsumableUsage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConsumableUsage)
  SharedDtor();
}

void CMsgConsumableUsage::SharedDtor() {
}

void CMsgConsumableUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgConsumableUsage& CMsgConsumableUsage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgConsumableUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_change_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgConsumableUsage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgConsumableUsage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_def(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 quantity_change = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_quantity_change(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgConsumableUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConsumableUsage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_def(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quantity_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_quantity_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConsumableUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConsumableUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgConsumableUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional int32 quantity_change = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConsumableUsage)
}

::google::protobuf::uint8* CMsgConsumableUsage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional int32 quantity_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConsumableUsage)
  return target;
}

size_t CMsgConsumableUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConsumableUsage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional int32 quantity_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity_change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConsumableUsage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConsumableUsage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgConsumableUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConsumableUsage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConsumableUsage)
    MergeFrom(*source);
  }
}

void CMsgConsumableUsage::MergeFrom(const CMsgConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_change_ = from.quantity_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConsumableUsage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumableUsage::CopyFrom(const CMsgConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableUsage::IsInitialized() const {
  return true;
}

void CMsgConsumableUsage::Swap(CMsgConsumableUsage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConsumableUsage::InternalSwap(CMsgConsumableUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_, other->item_def_);
  swap(quantity_change_, other->quantity_change_);
}

::google::protobuf::Metadata CMsgConsumableUsage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchConsumableUsage_PlayerUsage::InitAsDefaultInstance() {
}
class CMsgMatchConsumableUsage_PlayerUsage::HasBitSetters {
 public:
  static void set_has_account_id(CMsgMatchConsumableUsage_PlayerUsage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchConsumableUsage_PlayerUsage::kAccountIdFieldNumber;
const int CMsgMatchConsumableUsage_PlayerUsage::kConsumablesUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchConsumableUsage_PlayerUsage::CMsgMatchConsumableUsage_PlayerUsage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
}
CMsgMatchConsumableUsage_PlayerUsage::CMsgMatchConsumableUsage_PlayerUsage(const CMsgMatchConsumableUsage_PlayerUsage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      consumables_used_(from.consumables_used_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
}

void CMsgMatchConsumableUsage_PlayerUsage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  account_id_ = 0u;
}

CMsgMatchConsumableUsage_PlayerUsage::~CMsgMatchConsumableUsage_PlayerUsage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  SharedDtor();
}

void CMsgMatchConsumableUsage_PlayerUsage::SharedDtor() {
}

void CMsgMatchConsumableUsage_PlayerUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMatchConsumableUsage_PlayerUsage& CMsgMatchConsumableUsage_PlayerUsage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMatchConsumableUsage_PlayerUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgMatchConsumableUsage_PlayerUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumables_used_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMatchConsumableUsage_PlayerUsage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMatchConsumableUsage_PlayerUsage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgConsumableUsage::_InternalParse;
          object = msg->add_consumables_used();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMatchConsumableUsage_PlayerUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_consumables_used()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMatchConsumableUsage_PlayerUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumables_used_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->consumables_used(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
}

::google::protobuf::uint8* CMsgMatchConsumableUsage_PlayerUsage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumables_used_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->consumables_used(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  return target;
}

size_t CMsgMatchConsumableUsage_PlayerUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->consumables_used_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->consumables_used(static_cast<int>(i)));
    }
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchConsumableUsage_PlayerUsage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchConsumableUsage_PlayerUsage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMatchConsumableUsage_PlayerUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
    MergeFrom(*source);
  }
}

void CMsgMatchConsumableUsage_PlayerUsage::MergeFrom(const CMsgMatchConsumableUsage_PlayerUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumables_used_.MergeFrom(from.consumables_used_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgMatchConsumableUsage_PlayerUsage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchConsumableUsage_PlayerUsage::CopyFrom(const CMsgMatchConsumableUsage_PlayerUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchConsumableUsage_PlayerUsage::IsInitialized() const {
  return true;
}

void CMsgMatchConsumableUsage_PlayerUsage::Swap(CMsgMatchConsumableUsage_PlayerUsage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchConsumableUsage_PlayerUsage::InternalSwap(CMsgMatchConsumableUsage_PlayerUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&consumables_used_)->InternalSwap(CastToBase(&other->consumables_used_));
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgMatchConsumableUsage_PlayerUsage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchConsumableUsage::InitAsDefaultInstance() {
}
class CMsgMatchConsumableUsage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchConsumableUsage::kPlayerConsumablesUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchConsumableUsage::CMsgMatchConsumableUsage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgMatchConsumableUsage)
}
CMsgMatchConsumableUsage::CMsgMatchConsumableUsage(const CMsgMatchConsumableUsage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_consumables_used_(from.player_consumables_used_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgMatchConsumableUsage)
}

void CMsgMatchConsumableUsage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base);
}

CMsgMatchConsumableUsage::~CMsgMatchConsumableUsage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgMatchConsumableUsage)
  SharedDtor();
}

void CMsgMatchConsumableUsage::SharedDtor() {
}

void CMsgMatchConsumableUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMatchConsumableUsage& CMsgMatchConsumableUsage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMatchConsumableUsage_dota_5fgcmessages_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void CMsgMatchConsumableUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgMatchConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_consumables_used_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMatchConsumableUsage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMatchConsumableUsage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage::_InternalParse;
          object = msg->add_player_consumables_used();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMatchConsumableUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgMatchConsumableUsage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_consumables_used()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgMatchConsumableUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgMatchConsumableUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMatchConsumableUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgMatchConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_consumables_used_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->player_consumables_used(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgMatchConsumableUsage)
}

::google::protobuf::uint8* CMsgMatchConsumableUsage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgMatchConsumableUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_consumables_used_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_consumables_used(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgMatchConsumableUsage)
  return target;
}

size_t CMsgMatchConsumableUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgMatchConsumableUsage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_consumables_used_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_consumables_used(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchConsumableUsage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgMatchConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchConsumableUsage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMatchConsumableUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgMatchConsumableUsage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgMatchConsumableUsage)
    MergeFrom(*source);
  }
}

void CMsgMatchConsumableUsage::MergeFrom(const CMsgMatchConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgMatchConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_consumables_used_.MergeFrom(from.player_consumables_used_);
}

void CMsgMatchConsumableUsage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgMatchConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchConsumableUsage::CopyFrom(const CMsgMatchConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgMatchConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchConsumableUsage::IsInitialized() const {
  return true;
}

void CMsgMatchConsumableUsage::Swap(CMsgMatchConsumableUsage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchConsumableUsage::InternalSwap(CMsgMatchConsumableUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_consumables_used_)->InternalSwap(CastToBase(&other->player_consumables_used_));
}

::google::protobuf::Metadata CMsgMatchConsumableUsage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAGameAccountClient* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAGameAccountClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAGameAccountPlus* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAGameAccountPlus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAGameAccountPlus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyEventPoints_AccountPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyEventPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyEventPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLocalServerFakeLobbyData* Arena::CreateMaybeMessage< ::proto::dota::CMsgLocalServerFakeLobbyData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLocalServerFakeLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgBattleCupVictory* Arena::CreateMaybeMessage< ::proto::dota::CMsgBattleCupVictory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgBattleCupVictory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyBattleCupVictoryList* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyBattleCupVictoryList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyBattleCupVictoryList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABroadcastNotification* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABroadcastNotification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABroadcastNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CProtoItemHeroStatue* Arena::CreateMaybeMessage< ::proto::dota::CProtoItemHeroStatue >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CProtoItemHeroStatue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CProtoItemTeamShowcase* Arena::CreateMaybeMessage< ::proto::dota::CProtoItemTeamShowcase >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CProtoItemTeamShowcase >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMatchPlayerAbilityUpgrade* Arena::CreateMaybeMessage< ::proto::dota::CMatchPlayerAbilityUpgrade >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMatchPlayerAbilityUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMatchPlayerTimedStats* Arena::CreateMaybeMessage< ::proto::dota::CMatchPlayerTimedStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMatchPlayerTimedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMatchAdditionalUnitInventory* Arena::CreateMaybeMessage< ::proto::dota::CMatchAdditionalUnitInventory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMatchAdditionalUnitInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMatchPlayerPermanentBuff* Arena::CreateMaybeMessage< ::proto::dota::CMatchPlayerPermanentBuff >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMatchPlayerPermanentBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMatchHeroSelectEvent* Arena::CreateMaybeMessage< ::proto::dota::CMatchHeroSelectEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMatchHeroSelectEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAHasItemQuery* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAHasItemQuery >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAHasItemQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAHasItemResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAHasItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAHasItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCIsProQuery* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCIsProQuery >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCIsProQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCIsProResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCIsProResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCIsProResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAHasItemDefsQuery* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAHasItemDefsQuery >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAHasItemDefsQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAHasItemDefsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAHasItemDefsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAHasItemDefsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPlayerCardItemInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPlayerCardItemInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPlayerCardItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCFantasySetMatchLeague* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCFantasySetMatchLeague >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCFantasySetMatchLeague >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAMapLocationState* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAMapLocationState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAMapLocationState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLeagueAdminList* Arena::CreateMaybeMessage< ::proto::dota::CMsgLeagueAdminList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLeagueAdminList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCompendiumTimestampedData* Arena::CreateMaybeMessage< ::proto::dota::CCompendiumTimestampedData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCompendiumTimestampedData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCompendiumGameTimeline* Arena::CreateMaybeMessage< ::proto::dota::CCompendiumGameTimeline >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCompendiumGameTimeline >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCompendiumGameList* Arena::CreateMaybeMessage< ::proto::dota::CCompendiumGameList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCompendiumGameList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CAdditionalEquipSlot* Arena::CreateMaybeMessage< ::proto::dota::CAdditionalEquipSlot >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CAdditionalEquipSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Stat >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Item >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Hero >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard_Slot >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard_Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProfileCard* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProfileCard >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProfileCard >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAPlayerChallenge* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAPlayerChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCRerollPlayerChallenge* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCRerollPlayerChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCRerollPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCRerollPlayerChallengeResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCRerollPlayerChallengeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCRerollPlayerChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCTopCustomGamesList* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCTopCustomGamesList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCTopCustomGamesList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARealtimeGameStatsTerse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARealtimeGameStatsTerse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARealtimeGameStatsTerse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABroadcastTimelineEvent* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABroadcastTimelineEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABroadcastTimelineEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientMatchGroupsVersion* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientMatchGroupsVersion >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientMatchGroupsVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASDOHeroStatsHistory* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASDOHeroStatsHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASDOHeroStatsHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonRewards_Reward* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonRewards_Reward >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonRewards_Reward >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonRewards* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonRewards >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonAchievements_Achievement* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonAchievements* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonAchievements >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonAchievements >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions_Choice* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions_Choice >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions_Choice >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions_Answers* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions_Answers >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions_Answers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions_Prediction* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeasonPredictions* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeasonPredictions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeasonPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch_Player_CustomGameData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch_Player_CustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch_CustomGameData* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch_CustomGameData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch_CustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPlayerCard_StatModifier* Arena::CreateMaybeMessage< ::proto::dota::CMsgPlayerCard_StatModifier >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPlayerCard_StatModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPlayerCard* Arena::CreateMaybeMessage< ::proto::dota::CMsgPlayerCard >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPlayerCard >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerMatchStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerMatchStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerMatchStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABotDebugInfo_Bot* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABotDebugInfo_Bot >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABotDebugInfo_Bot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABotDebugInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABotDebugInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABotDebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSuccessfulHero* Arena::CreateMaybeMessage< ::proto::dota::CMsgSuccessfulHero >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSuccessfulHero >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgRecentMatchInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgRecentMatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgRecentMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage< ::proto::dota::CMsgMatchTips_SingleTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgMatchTips_SingleTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgMatchTips* Arena::CreateMaybeMessage< ::proto::dota::CMsgMatchTips >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgMatchTips >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatchMinimal_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatchMinimal_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatchMinimal_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatchMinimal_Tourney* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatchMinimal_Tourney >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatchMinimal_Tourney >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMatchMinimal* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMatchMinimal >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMatchMinimal >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgConsumableUsage* Arena::CreateMaybeMessage< ::proto::dota::CMsgConsumableUsage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgConsumableUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* Arena::CreateMaybeMessage< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgMatchConsumableUsage* Arena::CreateMaybeMessage< ::proto::dota::CMsgMatchConsumableUsage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgMatchConsumableUsage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
