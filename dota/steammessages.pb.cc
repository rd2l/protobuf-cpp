// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#include "steammessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CIPASNInfo_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CIPLocationInfo_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgSetOptions_MessageRange_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCRoutingInfo_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPackageLicense_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWebAPIKey_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgHttpRequest_steammessages_2eproto;
namespace proto {
namespace dota {
class CMsgProtoBufHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtoBufHeader> _instance;
} _CMsgProtoBufHeader_default_instance_;
class CMsgWebAPIKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWebAPIKey> _instance;
} _CMsgWebAPIKey_default_instance_;
class CMsgHttpRequest_RequestHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest_RequestHeader> _instance;
} _CMsgHttpRequest_RequestHeader_default_instance_;
class CMsgHttpRequest_QueryParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest_QueryParam> _instance;
} _CMsgHttpRequest_QueryParam_default_instance_;
class CMsgHttpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest> _instance;
} _CMsgHttpRequest_default_instance_;
class CMsgWebAPIRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWebAPIRequest> _instance;
} _CMsgWebAPIRequest_default_instance_;
class CMsgHttpResponse_ResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpResponse_ResponseHeader> _instance;
} _CMsgHttpResponse_ResponseHeader_default_instance_;
class CMsgHttpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpResponse> _instance;
} _CMsgHttpResponse_default_instance_;
class CMsgAMFindAccountsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMFindAccounts> _instance;
} _CMsgAMFindAccounts_default_instance_;
class CMsgAMFindAccountsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMFindAccountsResponse> _instance;
} _CMsgAMFindAccountsResponse_default_instance_;
class CMsgNotifyWatchdogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotifyWatchdog> _instance;
} _CMsgNotifyWatchdog_default_instance_;
class CMsgAMGetLicensesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetLicenses> _instance;
} _CMsgAMGetLicenses_default_instance_;
class CMsgPackageLicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPackageLicense> _instance;
} _CMsgPackageLicense_default_instance_;
class CMsgAMGetLicensesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetLicensesResponse> _instance;
} _CMsgAMGetLicensesResponse_default_instance_;
class CMsgAMGetUserGameStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStats> _instance;
} _CMsgAMGetUserGameStats_default_instance_;
class CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse_Stats> _instance;
} _CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
class CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse_Achievement_Blocks> _instance;
} _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
class CMsgAMGetUserGameStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse> _instance;
} _CMsgAMGetUserGameStatsResponse_default_instance_;
class CMsgGCGetCommandListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetCommandList> _instance;
} _CMsgGCGetCommandList_default_instance_;
class CMsgGCGetCommandListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetCommandListResponse> _instance;
} _CMsgGCGetCommandListResponse_default_instance_;
class CGCMsgMemCachedGetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGet> _instance;
} _CGCMsgMemCachedGet_default_instance_;
class CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGetResponse_ValueTag> _instance;
} _CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
class CGCMsgMemCachedGetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGetResponse> _instance;
} _CGCMsgMemCachedGetResponse_default_instance_;
class CGCMsgMemCachedSet_KeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedSet_KeyPair> _instance;
} _CGCMsgMemCachedSet_KeyPair_default_instance_;
class CGCMsgMemCachedSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedSet> _instance;
} _CGCMsgMemCachedSet_default_instance_;
class CGCMsgMemCachedDeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedDelete> _instance;
} _CGCMsgMemCachedDelete_default_instance_;
class CGCMsgMemCachedStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedStats> _instance;
} _CGCMsgMemCachedStats_default_instance_;
class CGCMsgMemCachedStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedStatsResponse> _instance;
} _CGCMsgMemCachedStatsResponse_default_instance_;
class CGCMsgSQLStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSQLStats> _instance;
} _CGCMsgSQLStats_default_instance_;
class CGCMsgSQLStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSQLStatsResponse> _instance;
} _CGCMsgSQLStatsResponse_default_instance_;
class CMsgAMAddFreeLicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMAddFreeLicense> _instance;
} _CMsgAMAddFreeLicense_default_instance_;
class CMsgAMAddFreeLicenseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMAddFreeLicenseResponse> _instance;
} _CMsgAMAddFreeLicenseResponse_default_instance_;
class CGCMsgGetIPLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPLocation> _instance;
} _CGCMsgGetIPLocation_default_instance_;
class CIPLocationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CIPLocationInfo> _instance;
} _CIPLocationInfo_default_instance_;
class CGCMsgGetIPLocationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPLocationResponse> _instance;
} _CGCMsgGetIPLocationResponse_default_instance_;
class CGCMsgGetIPASNDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPASN> _instance;
} _CGCMsgGetIPASN_default_instance_;
class CIPASNInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CIPASNInfo> _instance;
} _CIPASNInfo_default_instance_;
class CGCMsgGetIPASNResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPASNResponse> _instance;
} _CGCMsgGetIPASNResponse_default_instance_;
class CGCMsgSystemStatsSchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSystemStatsSchema> _instance;
} _CGCMsgSystemStatsSchema_default_instance_;
class CGCMsgGetSystemStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetSystemStats> _instance;
} _CGCMsgGetSystemStats_default_instance_;
class CGCMsgGetSystemStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetSystemStatsResponse> _instance;
} _CGCMsgGetSystemStatsResponse_default_instance_;
class CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail_ReplacementToken> _instance;
} _CMsgAMSendEmail_ReplacementToken_default_instance_;
class CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail_PersonaNameReplacementToken> _instance;
} _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
class CMsgAMSendEmailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail> _instance;
} _CMsgAMSendEmail_default_instance_;
class CMsgAMSendEmailResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmailResponse> _instance;
} _CMsgAMSendEmailResponse_default_instance_;
class CMsgGCGetEmailTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetEmailTemplate> _instance;
} _CMsgGCGetEmailTemplate_default_instance_;
class CMsgGCGetEmailTemplateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetEmailTemplateResponse> _instance;
} _CMsgGCGetEmailTemplateResponse_default_instance_;
class CMsgAMGrantGuestPasses2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGrantGuestPasses2> _instance;
} _CMsgAMGrantGuestPasses2_default_instance_;
class CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGrantGuestPasses2Response> _instance;
} _CMsgAMGrantGuestPasses2Response_default_instance_;
class CGCSystemMsg_GetAccountDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetAccountDetails> _instance;
} _CGCSystemMsg_GetAccountDetails_default_instance_;
class CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetAccountDetails_Response> _instance;
} _CGCSystemMsg_GetAccountDetails_Response_default_instance_;
class CMsgGCGetPersonaNamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames> _instance;
} _CMsgGCGetPersonaNames_default_instance_;
class CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames_Response_PersonaName> _instance;
} _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
class CMsgGCGetPersonaNames_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames_Response> _instance;
} _CMsgGCGetPersonaNames_Response_default_instance_;
class CMsgGCCheckFriendshipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckFriendship> _instance;
} _CMsgGCCheckFriendship_default_instance_;
class CMsgGCCheckFriendship_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckFriendship_Response> _instance;
} _CMsgGCCheckFriendship_Response_default_instance_;
class CMsgGCGetAppFriendsListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetAppFriendsList> _instance;
} _CMsgGCGetAppFriendsList_default_instance_;
class CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetAppFriendsList_Response> _instance;
} _CMsgGCGetAppFriendsList_Response_default_instance_;
class CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory_SubGC> _instance;
} _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
class CMsgGCMsgMasterSetDirectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory> _instance;
} _CMsgGCMsgMasterSetDirectory_default_instance_;
class CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory_Response> _instance;
} _CMsgGCMsgMasterSetDirectory_Response_default_instance_;
class CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgWebAPIJobRequestForwardResponse> _instance;
} _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetPurchaseTrust_Request> _instance;
} _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetPurchaseTrust_Response> _instance;
} _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
class CMsgGCHAccountVacStatusChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHAccountVacStatusChange> _instance;
} _CMsgGCHAccountVacStatusChange_default_instance_;
class CMsgGCGetPartnerAccountLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPartnerAccountLink> _instance;
} _CMsgGCGetPartnerAccountLink_default_instance_;
class CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPartnerAccountLink_Response> _instance;
} _CMsgGCGetPartnerAccountLink_Response_default_instance_;
class CMsgGCRoutingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRoutingInfo> _instance;
} _CMsgGCRoutingInfo_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting_Entry> _instance;
} _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting> _instance;
} _CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting_Entry> _instance;
} _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting> _instance;
} _CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting_Response> _instance;
} _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting_Response> _instance;
} _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
class CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgSetOptions_MessageRange> _instance;
} _CMsgGCMsgSetOptions_MessageRange_default_instance_;
class CMsgGCMsgSetOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgSetOptions> _instance;
} _CMsgGCMsgSetOptions_default_instance_;
class CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHUpdateSession_ExtraField> _instance;
} _CMsgGCHUpdateSession_ExtraField_default_instance_;
class CMsgGCHUpdateSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHUpdateSession> _instance;
} _CMsgGCHUpdateSession_default_instance_;
class CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances> _instance;
} _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
class CMsgNotificationOfSuspiciousActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationOfSuspiciousActivity> _instance;
} _CMsgNotificationOfSuspiciousActivity_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns_PartnerMicroTxn> _instance;
} _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns_PartnerInfo> _instance;
} _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
class CMsgDPPartnerMicroTxnsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns> _instance;
} _CMsgDPPartnerMicroTxns_default_instance_;
class CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxnsResponse> _instance;
} _CMsgDPPartnerMicroTxnsResponse_default_instance_;
class CMsgGCHVacVerificationChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHVacVerificationChange> _instance;
} _CMsgGCHVacVerificationChange_default_instance_;
class CMsgGCHAccountTwoFactorChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHAccountTwoFactorChange> _instance;
} _CMsgGCHAccountTwoFactorChange_default_instance_;
class CMsgGCCheckClanMembershipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckClanMembership> _instance;
} _CMsgGCCheckClanMembership_default_instance_;
class CMsgGCCheckClanMembership_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckClanMembership_Response> _instance;
} _CMsgGCCheckClanMembership_Response_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgProtoBufHeader_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgProtoBufHeader_default_instance_;
    new (ptr) ::proto::dota::CMsgProtoBufHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgProtoBufHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgProtoBufHeader_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgProtoBufHeader_steammessages_2eproto}, {}};

static void InitDefaultsCMsgWebAPIKey_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWebAPIKey_default_instance_;
    new (ptr) ::proto::dota::CMsgWebAPIKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWebAPIKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWebAPIKey_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWebAPIKey_steammessages_2eproto}, {}};

static void InitDefaultsCMsgHttpRequest_RequestHeader_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgHttpRequest_RequestHeader_default_instance_;
    new (ptr) ::proto::dota::CMsgHttpRequest_RequestHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgHttpRequest_RequestHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHttpRequest_RequestHeader_steammessages_2eproto}, {}};

static void InitDefaultsCMsgHttpRequest_QueryParam_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgHttpRequest_QueryParam_default_instance_;
    new (ptr) ::proto::dota::CMsgHttpRequest_QueryParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgHttpRequest_QueryParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHttpRequest_QueryParam_steammessages_2eproto}, {}};

static void InitDefaultsCMsgHttpRequest_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgHttpRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgHttpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgHttpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgHttpRequest_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgHttpRequest_steammessages_2eproto}, {
      &scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto.base,
      &scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto.base,}};

static void InitDefaultsCMsgWebAPIRequest_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWebAPIRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgWebAPIRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWebAPIRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgWebAPIRequest_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgWebAPIRequest_steammessages_2eproto}, {
      &scc_info_CMsgWebAPIKey_steammessages_2eproto.base,
      &scc_info_CMsgHttpRequest_steammessages_2eproto.base,}};

static void InitDefaultsCMsgHttpResponse_ResponseHeader_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgHttpResponse_ResponseHeader_default_instance_;
    new (ptr) ::proto::dota::CMsgHttpResponse_ResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgHttpResponse_ResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHttpResponse_ResponseHeader_steammessages_2eproto}, {}};

static void InitDefaultsCMsgHttpResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgHttpResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgHttpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgHttpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgHttpResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgHttpResponse_steammessages_2eproto}, {
      &scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto.base,}};

static void InitDefaultsCMsgAMFindAccounts_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMFindAccounts_default_instance_;
    new (ptr) ::proto::dota::CMsgAMFindAccounts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMFindAccounts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMFindAccounts_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMFindAccounts_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMFindAccountsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMFindAccountsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAMFindAccountsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMFindAccountsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMFindAccountsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMFindAccountsResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgNotifyWatchdog_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgNotifyWatchdog_default_instance_;
    new (ptr) ::proto::dota::CMsgNotifyWatchdog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgNotifyWatchdog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNotifyWatchdog_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgNotifyWatchdog_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGetLicenses_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetLicenses_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetLicenses();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetLicenses::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetLicenses_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGetLicenses_steammessages_2eproto}, {}};

static void InitDefaultsCMsgPackageLicense_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPackageLicense_default_instance_;
    new (ptr) ::proto::dota::CMsgPackageLicense();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPackageLicense::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPackageLicense_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPackageLicense_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGetLicensesResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetLicensesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetLicensesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetLicensesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgAMGetLicensesResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgAMGetLicensesResponse_steammessages_2eproto}, {
      &scc_info_CMsgPackageLicense_steammessages_2eproto.base,}};

static void InitDefaultsCMsgAMGetUserGameStats_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetUserGameStats_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetUserGameStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetUserGameStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetUserGameStats_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGetUserGameStats_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGetUserGameStatsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGetUserGameStatsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGetUserGameStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGetUserGameStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgAMGetUserGameStatsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgAMGetUserGameStatsResponse_steammessages_2eproto}, {
      &scc_info_CMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto.base,
      &scc_info_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCGetCommandList_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetCommandList_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetCommandList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetCommandList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetCommandList_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetCommandList_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetCommandListResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetCommandListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetCommandListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetCommandListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetCommandListResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetCommandListResponse_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedGet_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedGet_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedGet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedGet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedGet_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedGet_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedGetResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedGetResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedGetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedGetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCMsgMemCachedGetResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCMsgMemCachedGetResponse_steammessages_2eproto}, {
      &scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto.base,}};

static void InitDefaultsCGCMsgMemCachedSet_KeyPair_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedSet_KeyPair_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedSet_KeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedSet_KeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedSet_KeyPair_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedSet_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedSet_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCMsgMemCachedSet_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCMsgMemCachedSet_steammessages_2eproto}, {
      &scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto.base,}};

static void InitDefaultsCGCMsgMemCachedDelete_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedDelete_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedDelete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedDelete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedDelete_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedDelete_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedStats_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedStats_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedStats_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedStats_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgMemCachedStatsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgMemCachedStatsResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgMemCachedStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgMemCachedStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgMemCachedStatsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgMemCachedStatsResponse_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgSQLStats_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgSQLStats_default_instance_;
    new (ptr) ::proto::dota::CGCMsgSQLStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgSQLStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgSQLStats_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgSQLStats_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgSQLStatsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgSQLStatsResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgSQLStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgSQLStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgSQLStatsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgSQLStatsResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMAddFreeLicense_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMAddFreeLicense_default_instance_;
    new (ptr) ::proto::dota::CMsgAMAddFreeLicense();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMAddFreeLicense::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMAddFreeLicense_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMAddFreeLicense_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMAddFreeLicenseResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMAddFreeLicenseResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAMAddFreeLicenseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMAddFreeLicenseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMAddFreeLicenseResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMAddFreeLicenseResponse_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgGetIPLocation_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetIPLocation_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetIPLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetIPLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgGetIPLocation_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgGetIPLocation_steammessages_2eproto}, {}};

static void InitDefaultsCIPLocationInfo_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CIPLocationInfo_default_instance_;
    new (ptr) ::proto::dota::CIPLocationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CIPLocationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CIPLocationInfo_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCIPLocationInfo_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgGetIPLocationResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetIPLocationResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetIPLocationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetIPLocationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCMsgGetIPLocationResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCMsgGetIPLocationResponse_steammessages_2eproto}, {
      &scc_info_CIPLocationInfo_steammessages_2eproto.base,}};

static void InitDefaultsCGCMsgGetIPASN_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetIPASN_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetIPASN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetIPASN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgGetIPASN_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgGetIPASN_steammessages_2eproto}, {}};

static void InitDefaultsCIPASNInfo_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CIPASNInfo_default_instance_;
    new (ptr) ::proto::dota::CIPASNInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CIPASNInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CIPASNInfo_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCIPASNInfo_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgGetIPASNResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetIPASNResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetIPASNResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetIPASNResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCMsgGetIPASNResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCMsgGetIPASNResponse_steammessages_2eproto}, {
      &scc_info_CIPASNInfo_steammessages_2eproto.base,}};

static void InitDefaultsCGCMsgSystemStatsSchema_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgSystemStatsSchema_default_instance_;
    new (ptr) ::proto::dota::CGCMsgSystemStatsSchema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgSystemStatsSchema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgSystemStatsSchema_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgSystemStatsSchema_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgGetSystemStats_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetSystemStats_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetSystemStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetSystemStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgGetSystemStats_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgGetSystemStats_steammessages_2eproto}, {}};

static void InitDefaultsCGCMsgGetSystemStatsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgGetSystemStatsResponse_default_instance_;
    new (ptr) ::proto::dota::CGCMsgGetSystemStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgGetSystemStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgGetSystemStatsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgGetSystemStatsResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMSendEmail_ReplacementToken_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMSendEmail_ReplacementToken_default_instance_;
    new (ptr) ::proto::dota::CMsgAMSendEmail_ReplacementToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMSendEmail_ReplacementToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMSendEmail_ReplacementToken_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
    new (ptr) ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMSendEmail_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMSendEmail_default_instance_;
    new (ptr) ::proto::dota::CMsgAMSendEmail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMSendEmail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgAMSendEmail_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgAMSendEmail_steammessages_2eproto}, {
      &scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto.base,
      &scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto.base,}};

static void InitDefaultsCMsgAMSendEmailResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMSendEmailResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAMSendEmailResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMSendEmailResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMSendEmailResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMSendEmailResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetEmailTemplate_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetEmailTemplate_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetEmailTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetEmailTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetEmailTemplate_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetEmailTemplate_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetEmailTemplateResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetEmailTemplateResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetEmailTemplateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetEmailTemplateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetEmailTemplateResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetEmailTemplateResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGrantGuestPasses2_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGrantGuestPasses2_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGrantGuestPasses2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGrantGuestPasses2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGrantGuestPasses2_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGrantGuestPasses2_steammessages_2eproto}, {}};

static void InitDefaultsCMsgAMGrantGuestPasses2Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAMGrantGuestPasses2Response_default_instance_;
    new (ptr) ::proto::dota::CMsgAMGrantGuestPasses2Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAMGrantGuestPasses2Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAMGrantGuestPasses2Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAMGrantGuestPasses2Response_steammessages_2eproto}, {}};

static void InitDefaultsCGCSystemMsg_GetAccountDetails_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCSystemMsg_GetAccountDetails_default_instance_;
    new (ptr) ::proto::dota::CGCSystemMsg_GetAccountDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCSystemMsg_GetAccountDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCSystemMsg_GetAccountDetails_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCSystemMsg_GetAccountDetails_steammessages_2eproto}, {}};

static void InitDefaultsCGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCSystemMsg_GetAccountDetails_Response_default_instance_;
    new (ptr) ::proto::dota::CGCSystemMsg_GetAccountDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCSystemMsg_GetAccountDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetPersonaNames_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPersonaNames_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPersonaNames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPersonaNames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPersonaNames_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPersonaNames_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetPersonaNames_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPersonaNames_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPersonaNames_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPersonaNames_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCGetPersonaNames_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCGetPersonaNames_Response_steammessages_2eproto}, {
      &scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCCheckFriendship_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCCheckFriendship_default_instance_;
    new (ptr) ::proto::dota::CMsgGCCheckFriendship();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCCheckFriendship::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCheckFriendship_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCheckFriendship_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCCheckFriendship_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCCheckFriendship_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCCheckFriendship_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCCheckFriendship_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCheckFriendship_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCheckFriendship_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetAppFriendsList_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetAppFriendsList_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetAppFriendsList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetAppFriendsList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetAppFriendsList_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetAppFriendsList_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetAppFriendsList_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetAppFriendsList_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetAppFriendsList_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetAppFriendsList_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetAppFriendsList_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetAppFriendsList_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgMasterSetDirectory_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetDirectory_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetDirectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetDirectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetDirectory_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgMasterSetDirectory_steammessages_2eproto}, {
      &scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetDirectory_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetDirectory_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetDirectory_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgWebAPIJobRequestForwardResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgWebAPIJobRequestForwardResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgWebAPIJobRequestForwardResponse_steammessages_2eproto}, {}};

static void InitDefaultsCGCSystemMsg_GetPurchaseTrust_Request_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
    new (ptr) ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCSystemMsg_GetPurchaseTrust_Request_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCSystemMsg_GetPurchaseTrust_Request_steammessages_2eproto}, {}};

static void InitDefaultsCGCSystemMsg_GetPurchaseTrust_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
    new (ptr) ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCSystemMsg_GetPurchaseTrust_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCSystemMsg_GetPurchaseTrust_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCHAccountVacStatusChange_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCHAccountVacStatusChange_default_instance_;
    new (ptr) ::proto::dota::CMsgGCHAccountVacStatusChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCHAccountVacStatusChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCHAccountVacStatusChange_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCHAccountVacStatusChange_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetPartnerAccountLink_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPartnerAccountLink_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPartnerAccountLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPartnerAccountLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPartnerAccountLink_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPartnerAccountLink_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCGetPartnerAccountLink_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGetPartnerAccountLink_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGetPartnerAccountLink_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGetPartnerAccountLink_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGetPartnerAccountLink_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGetPartnerAccountLink_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCRoutingInfo_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCRoutingInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGCRoutingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCRoutingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCRoutingInfo_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCRoutingInfo_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto}, {
      &scc_info_CMsgGCRoutingInfo_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto}, {
      &scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto}, {
      &scc_info_CMsgGCRoutingInfo_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto}, {
      &scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgMasterSetWebAPIRouting_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgMasterSetWebAPIRouting_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgMasterSetClientMsgRouting_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgMasterSetClientMsgRouting_Response_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgSetOptions_MessageRange_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgSetOptions_MessageRange_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgSetOptions_MessageRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgSetOptions_MessageRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMsgSetOptions_MessageRange_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMsgSetOptions_MessageRange_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCMsgSetOptions_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMsgSetOptions_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMsgSetOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMsgSetOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCMsgSetOptions_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCMsgSetOptions_steammessages_2eproto}, {
      &scc_info_CMsgGCMsgSetOptions_MessageRange_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCHUpdateSession_ExtraField_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCHUpdateSession_ExtraField_default_instance_;
    new (ptr) ::proto::dota::CMsgGCHUpdateSession_ExtraField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCHUpdateSession_ExtraField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCHUpdateSession_ExtraField_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCHUpdateSession_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCHUpdateSession_default_instance_;
    new (ptr) ::proto::dota::CMsgGCHUpdateSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCHUpdateSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCHUpdateSession_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCHUpdateSession_steammessages_2eproto}, {
      &scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto.base,}};

static void InitDefaultsCMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
    new (ptr) ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto}, {}};

static void InitDefaultsCMsgNotificationOfSuspiciousActivity_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgNotificationOfSuspiciousActivity_default_instance_;
    new (ptr) ::proto::dota::CMsgNotificationOfSuspiciousActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgNotificationOfSuspiciousActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgNotificationOfSuspiciousActivity_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgNotificationOfSuspiciousActivity_steammessages_2eproto}, {
      &scc_info_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto.base,}};

static void InitDefaultsCMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
    new (ptr) ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto}, {}};

static void InitDefaultsCMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto}, {}};

static void InitDefaultsCMsgDPPartnerMicroTxns_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDPPartnerMicroTxns_default_instance_;
    new (ptr) ::proto::dota::CMsgDPPartnerMicroTxns();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDPPartnerMicroTxns::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDPPartnerMicroTxns_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDPPartnerMicroTxns_steammessages_2eproto}, {
      &scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto.base,
      &scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto.base,}};

static void InitDefaultsCMsgDPPartnerMicroTxnsResponse_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDPPartnerMicroTxnsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDPPartnerMicroTxnsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDPPartnerMicroTxnsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDPPartnerMicroTxnsResponse_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDPPartnerMicroTxnsResponse_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCHVacVerificationChange_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCHVacVerificationChange_default_instance_;
    new (ptr) ::proto::dota::CMsgGCHVacVerificationChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCHVacVerificationChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCHVacVerificationChange_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCHVacVerificationChange_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCHAccountTwoFactorChange_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCHAccountTwoFactorChange_default_instance_;
    new (ptr) ::proto::dota::CMsgGCHAccountTwoFactorChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCHAccountTwoFactorChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCHAccountTwoFactorChange_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCHAccountTwoFactorChange_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCCheckClanMembership_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCCheckClanMembership_default_instance_;
    new (ptr) ::proto::dota::CMsgGCCheckClanMembership();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCCheckClanMembership::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCheckClanMembership_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCheckClanMembership_steammessages_2eproto}, {}};

static void InitDefaultsCMsgGCCheckClanMembership_Response_steammessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCCheckClanMembership_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgGCCheckClanMembership_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCCheckClanMembership_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCheckClanMembership_Response_steammessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCheckClanMembership_Response_steammessages_2eproto}, {}};

void InitDefaults_steammessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgProtoBufHeader_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWebAPIKey_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHttpRequest_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWebAPIRequest_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHttpResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMFindAccounts_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMFindAccountsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNotifyWatchdog_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetLicenses_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPackageLicense_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetLicensesResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetUserGameStats_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGetUserGameStatsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetCommandList_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetCommandListResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedGet_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedGetResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedSet_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedDelete_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedStats_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgMemCachedStatsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgSQLStats_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgSQLStatsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMAddFreeLicense_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMAddFreeLicenseResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetIPLocation_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CIPLocationInfo_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetIPLocationResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetIPASN_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CIPASNInfo_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetIPASNResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgSystemStatsSchema_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetSystemStats_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgGetSystemStatsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMSendEmail_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMSendEmailResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetEmailTemplate_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetEmailTemplateResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGrantGuestPasses2_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAMGrantGuestPasses2Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCSystemMsg_GetAccountDetails_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPersonaNames_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPersonaNames_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCheckFriendship_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCheckFriendship_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetAppFriendsList_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetAppFriendsList_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetDirectory_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgWebAPIJobRequestForwardResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCSystemMsg_GetPurchaseTrust_Request_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCSystemMsg_GetPurchaseTrust_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCHAccountVacStatusChange_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPartnerAccountLink_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGetPartnerAccountLink_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCRoutingInfo_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetWebAPIRouting_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgMasterSetClientMsgRouting_Response_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgSetOptions_MessageRange_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMsgSetOptions_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCHUpdateSession_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNotificationOfSuspiciousActivity_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDPPartnerMicroTxns_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDPPartnerMicroTxnsResponse_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCHVacVerificationChange_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCHAccountTwoFactorChange_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCheckClanMembership_steammessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCheckClanMembership_Response_steammessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_2eproto[88];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, client_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, source_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, job_id_source_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, job_id_target_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, target_job_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, error_message_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, gc_msg_src_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgProtoBufHeader, gc_dir_index_source_),
  2,
  3,
  4,
  8,
  9,
  0,
  7,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, publisher_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, key_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIKey, domain_),
  4,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_RequestHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_RequestHeader, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_RequestHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_QueryParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_QueryParam, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest_QueryParam, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, request_method_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, get_params_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, post_params_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, body_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpRequest, absolute_timeout_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, unused_job_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, interface_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, method_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, api_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, request_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWebAPIRequest, routing_app_id_),
  0,
  1,
  2,
  5,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse_ResponseHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse_ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse_ResponseHeader, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse_ResponseHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse, headers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgHttpResponse, body_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccounts, search_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccounts, search_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccountsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMFindAccountsResponse, steam_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, source_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, alert_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, critical_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, text_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotifyWatchdog, recipient_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicenses, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicenses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicenses, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPackageLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPackageLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPackageLicense, package_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPackageLicense, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPackageLicense, owner_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicensesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicensesResponse, license_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetLicensesResponse, result_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStats, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStats, stats_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_bit_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, unlock_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGetUserGameStatsResponse, achievement_blocks_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandList, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandList, command_prefix_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetCommandListResponse, command_name_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGet, keys_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse_ValueTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse_ValueTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse_ValueTag, found_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse_ValueTag, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedGetResponse, values_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet_KeyPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet_KeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet_KeyPair, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet_KeyPair, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedSet, keys_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedDelete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedDelete, keys_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, curr_connections_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, cmd_get_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, cmd_set_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, cmd_flush_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, get_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, get_misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, delete_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, delete_misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, bytes_read_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, bytes_written_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, limit_maxbytes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, curr_items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, evictions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgMemCachedStatsResponse, bytes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStats, schema_catalog_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, threads_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, threads_connected_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, threads_active_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, operations_submitted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, non_prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, deadlock_retries_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, operations_timed_out_in_queue_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSQLStatsResponse, errors_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, ip_public_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, packageid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicense, store_country_code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicenseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicenseResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicenseResponse, purchase_result_detail_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMAddFreeLicenseResponse, transid_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocation, ips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, country_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPLocationInfo, city_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPLocationResponse, infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASN, ips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPASNInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPASNInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPASNInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CIPASNInfo, asn_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASNResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetIPASNResponse, infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSystemStatsSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSystemStatsSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSystemStatsSchema, gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgSystemStatsSchema, schema_kv_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, stats_kv_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, active_jobs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, yielding_jobs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, user_sessions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, game_server_sessions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, socaches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, socaches_to_unload_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, socaches_loading_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, writeback_queue_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, steamid_locks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, logon_queue_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgGetSystemStatsResponse, logon_jobs_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_ReplacementToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_ReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_ReplacementToken, token_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_ReplacementToken, token_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken, token_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, email_format_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, persona_name_tokens_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, source_gc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmail, tokens_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmailResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMSendEmailResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, email_lang_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplate, email_format_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplateResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplateResponse, template_exists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetEmailTemplateResponse, template__),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, package_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, passes_to_grant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, days_to_expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2, action_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2Response, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAMGrantGuestPasses2Response, passes_granted_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, eresult_deprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, account_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_profile_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_profile_public_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_inventory_public_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_vac_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_cyber_cafe_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_school_account_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_limited_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_subscribed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, package_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_free_trial_account_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, free_trial_expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_low_violence_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_account_locked_down_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_community_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_trade_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, suspension_end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, currency_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, steam_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, friend_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, account_creation_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, two_factor_enabled_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, phone_verification_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, phone_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, rt_identity_linked_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, rt_birth_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetAccountDetails_Response, txn_country_code_),
  34,
  0,
  1,
  8,
  9,
  10,
  11,
  4,
  5,
  6,
  7,
  12,
  14,
  13,
  15,
  16,
  17,
  24,
  18,
  19,
  20,
  2,
  21,
  22,
  23,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames, steamids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName, persona_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response, succeeded_lookups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPersonaNames_Response, failed_lookup_steamids_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship, steamid_left_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship, steamid_right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship_Response, success_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckFriendship_Response, found_friendship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList, include_friendship_timestamps_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, success_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, steamids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, friendship_timestamps_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetAppFriendsList_Response, last_playtimes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, box_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, command_line_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC, gc_binary_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory, master_dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory, dir_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_Response, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetDirectory_Response, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse, dir_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, has_prior_purchase_history_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, has_no_recent_password_resets_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, is_wallet_cash_trusted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response, time_all_trusted_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, rtime_vacban_starts_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, is_banned_now_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountVacStatusChange, is_banned_future_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink_Response, pwid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGetPartnerAccountLink_Response, nexonid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, method_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, fallback_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, protobuf_field_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRoutingInfo, webapi_param_),
  ~0u,
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry, interface_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry, method_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry, routing_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting, entries_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry, msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry, routing_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting, entries_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions_MessageRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions_MessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions_MessageRange, low_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions_MessageRange, high_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions, options_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions, client_msg_ranges_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMsgSetOptions, gcsql_version_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession_ExtraField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession_ExtraField, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession_ExtraField, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, online_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, server_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, os_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, client_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHUpdateSession, extra_fields_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, app_instance_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, other_steamids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgNotificationOfSuspiciousActivity, multiple_instances_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, init_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, txn_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, line_item_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_usd_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_usd_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, purchase_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, steam_txn_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, region_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, quantity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn, ref_trans_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  8,
  9,
  12,
  13,
  11,
  14,
  0,
  1,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, partner_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, partner_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, currency_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo, currency_name_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, gc_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, partner_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxns, transactions_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxnsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxnsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDPPartnerMicroTxnsResponse, eerrorcode_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHVacVerificationChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHVacVerificationChange, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHVacVerificationChange, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHVacVerificationChange, is_verified_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountTwoFactorChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountTwoFactorChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountTwoFactorChange, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountTwoFactorChange, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCHAccountTwoFactorChange, twofactor_enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership, clanid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCheckClanMembership_Response, ismember_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::proto::dota::CMsgProtoBufHeader)},
  { 25, 35, sizeof(::proto::dota::CMsgWebAPIKey)},
  { 40, 47, sizeof(::proto::dota::CMsgHttpRequest_RequestHeader)},
  { 49, 56, sizeof(::proto::dota::CMsgHttpRequest_QueryParam)},
  { 58, 71, sizeof(::proto::dota::CMsgHttpRequest)},
  { 79, 91, sizeof(::proto::dota::CMsgWebAPIRequest)},
  { 98, 105, sizeof(::proto::dota::CMsgHttpResponse_ResponseHeader)},
  { 107, 115, sizeof(::proto::dota::CMsgHttpResponse)},
  { 118, 125, sizeof(::proto::dota::CMsgAMFindAccounts)},
  { 127, 133, sizeof(::proto::dota::CMsgAMFindAccountsResponse)},
  { 134, 146, sizeof(::proto::dota::CMsgNotifyWatchdog)},
  { 153, 159, sizeof(::proto::dota::CMsgAMGetLicenses)},
  { 160, 168, sizeof(::proto::dota::CMsgPackageLicense)},
  { 171, 178, sizeof(::proto::dota::CMsgAMGetLicensesResponse)},
  { 180, 188, sizeof(::proto::dota::CMsgAMGetUserGameStats)},
  { 191, 198, sizeof(::proto::dota::CMsgAMGetUserGameStatsResponse_Stats)},
  { 200, 208, sizeof(::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks)},
  { 211, 221, sizeof(::proto::dota::CMsgAMGetUserGameStatsResponse)},
  { 226, 233, sizeof(::proto::dota::CMsgGCGetCommandList)},
  { 235, 241, sizeof(::proto::dota::CMsgGCGetCommandListResponse)},
  { 242, 248, sizeof(::proto::dota::CGCMsgMemCachedGet)},
  { 249, 256, sizeof(::proto::dota::CGCMsgMemCachedGetResponse_ValueTag)},
  { 258, 264, sizeof(::proto::dota::CGCMsgMemCachedGetResponse)},
  { 265, 272, sizeof(::proto::dota::CGCMsgMemCachedSet_KeyPair)},
  { 274, 280, sizeof(::proto::dota::CGCMsgMemCachedSet)},
  { 281, 287, sizeof(::proto::dota::CGCMsgMemCachedDelete)},
  { 288, 293, sizeof(::proto::dota::CGCMsgMemCachedStats)},
  { 293, 312, sizeof(::proto::dota::CGCMsgMemCachedStatsResponse)},
  { 326, 332, sizeof(::proto::dota::CGCMsgSQLStats)},
  { 333, 347, sizeof(::proto::dota::CGCMsgSQLStatsResponse)},
  { 356, 365, sizeof(::proto::dota::CMsgAMAddFreeLicense)},
  { 369, 377, sizeof(::proto::dota::CMsgAMAddFreeLicenseResponse)},
  { 380, 386, sizeof(::proto::dota::CGCMsgGetIPLocation)},
  { 387, 398, sizeof(::proto::dota::CIPLocationInfo)},
  { 404, 410, sizeof(::proto::dota::CGCMsgGetIPLocationResponse)},
  { 411, 417, sizeof(::proto::dota::CGCMsgGetIPASN)},
  { 418, 425, sizeof(::proto::dota::CIPASNInfo)},
  { 427, 433, sizeof(::proto::dota::CGCMsgGetIPASNResponse)},
  { 434, 441, sizeof(::proto::dota::CGCMsgSystemStatsSchema)},
  { 443, 448, sizeof(::proto::dota::CGCMsgGetSystemStats)},
  { 448, 466, sizeof(::proto::dota::CGCMsgGetSystemStatsResponse)},
  { 479, 486, sizeof(::proto::dota::CMsgAMSendEmail_ReplacementToken)},
  { 488, 495, sizeof(::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken)},
  { 497, 508, sizeof(::proto::dota::CMsgAMSendEmail)},
  { 514, 520, sizeof(::proto::dota::CMsgAMSendEmailResponse)},
  { 521, 530, sizeof(::proto::dota::CMsgGCGetEmailTemplate)},
  { 534, 542, sizeof(::proto::dota::CMsgGCGetEmailTemplateResponse)},
  { 545, 555, sizeof(::proto::dota::CMsgAMGrantGuestPasses2)},
  { 560, 567, sizeof(::proto::dota::CMsgAMGrantGuestPasses2Response)},
  { 569, 576, sizeof(::proto::dota::CGCSystemMsg_GetAccountDetails)},
  { 578, 618, sizeof(::proto::dota::CGCSystemMsg_GetAccountDetails_Response)},
  { 653, 659, sizeof(::proto::dota::CMsgGCGetPersonaNames)},
  { 660, 667, sizeof(::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName)},
  { 669, 676, sizeof(::proto::dota::CMsgGCGetPersonaNames_Response)},
  { 678, 685, sizeof(::proto::dota::CMsgGCCheckFriendship)},
  { 687, 694, sizeof(::proto::dota::CMsgGCCheckFriendship_Response)},
  { 696, 703, sizeof(::proto::dota::CMsgGCGetAppFriendsList)},
  { 705, 714, sizeof(::proto::dota::CMsgGCGetAppFriendsList_Response)},
  { 718, 728, sizeof(::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC)},
  { 733, 740, sizeof(::proto::dota::CMsgGCMsgMasterSetDirectory)},
  { 742, 749, sizeof(::proto::dota::CMsgGCMsgMasterSetDirectory_Response)},
  { 751, 757, sizeof(::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse)},
  { 758, 764, sizeof(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request)},
  { 765, 774, sizeof(::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response)},
  { 778, 788, sizeof(::proto::dota::CMsgGCHAccountVacStatusChange)},
  { 793, 799, sizeof(::proto::dota::CMsgGCGetPartnerAccountLink)},
  { 800, 807, sizeof(::proto::dota::CMsgGCGetPartnerAccountLink_Response)},
  { 809, 819, sizeof(::proto::dota::CMsgGCRoutingInfo)},
  { 824, 832, sizeof(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry)},
  { 835, 841, sizeof(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting)},
  { 842, 849, sizeof(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry)},
  { 851, 857, sizeof(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting)},
  { 858, 864, sizeof(::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response)},
  { 865, 871, sizeof(::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response)},
  { 872, 879, sizeof(::proto::dota::CMsgGCMsgSetOptions_MessageRange)},
  { 881, 889, sizeof(::proto::dota::CMsgGCMsgSetOptions)},
  { 892, 899, sizeof(::proto::dota::CMsgGCHUpdateSession_ExtraField)},
  { 901, 915, sizeof(::proto::dota::CMsgGCHUpdateSession)},
  { 924, 931, sizeof(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances)},
  { 933, 941, sizeof(::proto::dota::CMsgNotificationOfSuspiciousActivity)},
  { 944, 966, sizeof(::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn)},
  { 983, 992, sizeof(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo)},
  { 996, 1005, sizeof(::proto::dota::CMsgDPPartnerMicroTxns)},
  { 1009, 1016, sizeof(::proto::dota::CMsgDPPartnerMicroTxnsResponse)},
  { 1018, 1026, sizeof(::proto::dota::CMsgGCHVacVerificationChange)},
  { 1029, 1037, sizeof(::proto::dota::CMsgGCHAccountTwoFactorChange)},
  { 1040, 1047, sizeof(::proto::dota::CMsgGCCheckClanMembership)},
  { 1049, 1055, sizeof(::proto::dota::CMsgGCCheckClanMembership_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWebAPIKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgHttpRequest_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgHttpRequest_QueryParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgHttpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWebAPIRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgHttpResponse_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgHttpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMFindAccounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMFindAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgNotifyWatchdog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetLicenses_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPackageLicense_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetLicensesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetUserGameStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetUserGameStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGetUserGameStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetCommandList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetCommandListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedGet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedGetResponse_ValueTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedSet_KeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgMemCachedStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgSQLStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgSQLStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMAddFreeLicense_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMAddFreeLicenseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetIPLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CIPLocationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetIPLocationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetIPASN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CIPASNInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetIPASNResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgSystemStatsSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetSystemStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgGetSystemStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMSendEmail_ReplacementToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMSendEmail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMSendEmailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetEmailTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetEmailTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGrantGuestPasses2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAMGrantGuestPasses2Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCSystemMsg_GetAccountDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCSystemMsg_GetAccountDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPersonaNames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPersonaNames_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCCheckFriendship_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCCheckFriendship_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetAppFriendsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetAppFriendsList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetDirectory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCHAccountVacStatusChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPartnerAccountLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGetPartnerAccountLink_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCRoutingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgSetOptions_MessageRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMsgSetOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCHUpdateSession_ExtraField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCHUpdateSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgNotificationOfSuspiciousActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDPPartnerMicroTxns_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDPPartnerMicroTxnsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCHVacVerificationChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCHAccountTwoFactorChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCCheckClanMembership_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCCheckClanMembership_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_2eproto = {
  {}, AddDescriptors_steammessages_2eproto, "steammessages.proto", schemas,
  file_default_instances, TableStruct_steammessages_2eproto::offsets,
  file_level_metadata_steammessages_2eproto, 88, file_level_enum_descriptors_steammessages_2eproto, file_level_service_descriptors_steammessages_2eproto,
};

const char descriptor_table_protodef_steammessages_2eproto[] =
  "\n\023steammessages.proto\022\nproto.dota\032 googl"
  "e/protobuf/descriptor.proto\"\370\002\n\022CMsgProt"
  "oBufHeader\022\027\n\017client_steam_id\030\001 \001(\006\022\031\n\021c"
  "lient_session_id\030\002 \001(\005\022\025\n\rsource_app_id\030"
  "\003 \001(\r\022+\n\rjob_id_source\030\n \001(\006:\0241844674407"
  "3709551615\022+\n\rjob_id_target\030\013 \001(\006:\02418446"
  "744073709551615\022\027\n\017target_job_name\030\014 \001(\t"
  "\022\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_message\030\016 "
  "\001(\t\022O\n\ngc_msg_src\030\310\001 \001(\0162\034.proto.dota.GC"
  "ProtoBufMsgSrc:\034GCProtoBufMsgSrc_Unspeci"
  "fied\022\034\n\023gc_dir_index_source\030\311\001 \001(\r:\n\200\246\035\200"
  "\002\210\246\035\200\010\"z\n\rCMsgWebAPIKey\022\023\n\006status\030\001 \001(\r:"
  "\003255\022\025\n\naccount_id\030\002 \001(\r:\0010\022\035\n\022publisher"
  "_group_id\030\003 \001(\r:\0010\022\016\n\006key_id\030\004 \001(\r\022\016\n\006do"
  "main\030\005 \001(\t\"\376\002\n\017CMsgHttpRequest\022\026\n\016reques"
  "t_method\030\001 \001(\r\022\020\n\010hostname\030\002 \001(\t\022\013\n\003url\030"
  "\003 \001(\t\022:\n\007headers\030\004 \003(\0132).proto.dota.CMsg"
  "HttpRequest.RequestHeader\022:\n\nget_params\030"
  "\005 \003(\0132&.proto.dota.CMsgHttpRequest.Query"
  "Param\022;\n\013post_params\030\006 \003(\0132&.proto.dota."
  "CMsgHttpRequest.QueryParam\022\014\n\004body\030\007 \001(\014"
  "\022\030\n\020absolute_timeout\030\010 \001(\r\032,\n\rRequestHea"
  "der\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032)\n\nQuer"
  "yParam\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\334\001\n\021"
  "CMsgWebAPIRequest\022\027\n\017UNUSED_job_name\030\001 \001"
  "(\t\022\026\n\016interface_name\030\002 \001(\t\022\023\n\013method_nam"
  "e\030\003 \001(\t\022\017\n\007version\030\004 \001(\r\022*\n\007api_key\030\005 \001("
  "\0132\031.proto.dota.CMsgWebAPIKey\022,\n\007request\030"
  "\006 \001(\0132\033.proto.dota.CMsgHttpRequest\022\026\n\016ro"
  "uting_app_id\030\007 \001(\r\"\242\001\n\020CMsgHttpResponse\022"
  "\023\n\013status_code\030\001 \001(\r\022<\n\007headers\030\002 \003(\0132+."
  "proto.dota.CMsgHttpResponse.ResponseHead"
  "er\022\014\n\004body\030\003 \001(\014\032-\n\016ResponseHeader\022\014\n\004na"
  "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CMsgAMFindAcc"
  "ounts\022\023\n\013search_type\030\001 \001(\r\022\025\n\rsearch_str"
  "ing\030\002 \001(\t\".\n\032CMsgAMFindAccountsResponse\022"
  "\020\n\010steam_id\030\001 \003(\006\"\210\001\n\022CMsgNotifyWatchdog"
  "\022\016\n\006source\030\001 \001(\r\022\022\n\nalert_type\030\002 \001(\r\022\020\n\010"
  "critical\030\004 \001(\010\022\014\n\004time\030\005 \001(\r\022\r\n\005appid\030\006 "
  "\001(\r\022\014\n\004text\030\007 \001(\t\022\021\n\trecipient\030\014 \001(\t\"$\n\021"
  "CMsgAMGetLicenses\022\017\n\007steamid\030\001 \001(\006\"P\n\022CM"
  "sgPackageLicense\022\022\n\npackage_id\030\001 \001(\r\022\024\n\014"
  "time_created\030\002 \001(\r\022\020\n\010owner_id\030\003 \001(\r\"\\\n\031"
  "CMsgAMGetLicensesResponse\022/\n\007license\030\001 \003"
  "(\0132\036.proto.dota.CMsgPackageLicense\022\016\n\006re"
  "sult\030\002 \001(\r\"J\n\026CMsgAMGetUserGameStats\022\020\n\010"
  "steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\r\n\005stats"
  "\030\003 \003(\r\"\200\003\n\036CMsgAMGetUserGameStatsRespons"
  "e\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\022\n\007"
  "eresult\030\003 \001(\005:\0012\022\?\n\005stats\030\004 \003(\01320.proto."
  "dota.CMsgAMGetUserGameStatsResponse.Stat"
  "s\022Y\n\022achievement_blocks\030\005 \003(\0132=.proto.do"
  "ta.CMsgAMGetUserGameStatsResponse.Achiev"
  "ement_Blocks\032,\n\005Stats\022\017\n\007stat_id\030\001 \001(\r\022\022"
  "\n\nstat_value\030\002 \001(\r\032]\n\022Achievement_Blocks"
  "\022\026\n\016achievement_id\030\001 \001(\r\022\032\n\022achievement_"
  "bit_id\030\002 \001(\r\022\023\n\013unlock_time\030\003 \001(\007\">\n\024CMs"
  "gGCGetCommandList\022\016\n\006app_id\030\001 \001(\r\022\026\n\016com"
  "mand_prefix\030\002 \001(\t\"4\n\034CMsgGCGetCommandLis"
  "tResponse\022\024\n\014command_name\030\001 \003(\t\"\"\n\022CGCMs"
  "gMemCachedGet\022\014\n\004keys\030\001 \003(\t\"\207\001\n\032CGCMsgMe"
  "mCachedGetResponse\022\?\n\006values\030\001 \003(\0132/.pro"
  "to.dota.CGCMsgMemCachedGetResponse.Value"
  "Tag\032(\n\010ValueTag\022\r\n\005found\030\001 \001(\010\022\r\n\005value\030"
  "\002 \001(\014\"r\n\022CGCMsgMemCachedSet\0224\n\004keys\030\001 \003("
  "\0132&.proto.dota.CGCMsgMemCachedSet.KeyPai"
  "r\032&\n\007KeyPair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\014\"%\n\025CGCMsgMemCachedDelete\022\014\n\004keys\030\001 \003(\t"
  "\"\026\n\024CGCMsgMemCachedStats\"\270\002\n\034CGCMsgMemCa"
  "chedStatsResponse\022\030\n\020curr_connections\030\001 "
  "\001(\004\022\017\n\007cmd_get\030\002 \001(\004\022\017\n\007cmd_set\030\003 \001(\004\022\021\n"
  "\tcmd_flush\030\004 \001(\004\022\020\n\010get_hits\030\005 \001(\004\022\022\n\nge"
  "t_misses\030\006 \001(\004\022\023\n\013delete_hits\030\007 \001(\004\022\025\n\rd"
  "elete_misses\030\010 \001(\004\022\022\n\nbytes_read\030\t \001(\004\022\025"
  "\n\rbytes_written\030\n \001(\004\022\026\n\016limit_maxbytes\030"
  "\013 \001(\004\022\022\n\ncurr_items\030\014 \001(\004\022\021\n\tevictions\030\r"
  " \001(\004\022\r\n\005bytes\030\016 \001(\004\"(\n\016CGCMsgSQLStats\022\026\n"
  "\016schema_catalog\030\001 \001(\r\"\233\002\n\026CGCMsgSQLStats"
  "Response\022\017\n\007threads\030\001 \001(\r\022\031\n\021threads_con"
  "nected\030\002 \001(\r\022\026\n\016threads_active\030\003 \001(\r\022\034\n\024"
  "operations_submitted\030\004 \001(\r\022$\n\034prepared_s"
  "tatements_executed\030\005 \001(\r\022(\n non_prepared"
  "_statements_executed\030\006 \001(\r\022\030\n\020deadlock_r"
  "etries\030\007 \001(\r\022%\n\035operations_timed_out_in_"
  "queue\030\010 \001(\r\022\016\n\006errors\030\t \001(\r\"i\n\024CMsgAMAdd"
  "FreeLicense\022\017\n\007steamid\030\001 \001(\006\022\021\n\tip_publi"
  "c\030\002 \001(\r\022\021\n\tpackageid\030\003 \001(\r\022\032\n\022store_coun"
  "try_code\030\004 \001(\t\"c\n\034CMsgAMAddFreeLicenseRe"
  "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\036\n\026purchase_r"
  "esult_detail\030\002 \001(\005\022\017\n\007transid\030\003 \001(\006\"\"\n\023C"
  "GCMsgGetIPLocation\022\013\n\003ips\030\001 \003(\007\"p\n\017CIPLo"
  "cationInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002"
  "\022\021\n\tlongitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005"
  "state\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\"I\n\033CGCMsgGetIP"
  "LocationResponse\022*\n\005infos\030\001 \003(\0132\033.proto."
  "dota.CIPLocationInfo\"\035\n\016CGCMsgGetIPASN\022\013"
  "\n\003ips\030\001 \003(\007\"%\n\nCIPASNInfo\022\n\n\002ip\030\001 \001(\007\022\013\n"
  "\003asn\030\002 \001(\r\"\?\n\026CGCMsgGetIPASNResponse\022%\n\005"
  "infos\030\001 \003(\0132\026.proto.dota.CIPASNInfo\"\?\n\027C"
  "GCMsgSystemStatsSchema\022\021\n\tgc_app_id\030\001 \001("
  "\r\022\021\n\tschema_kv\030\002 \001(\014\"\026\n\024CGCMsgGetSystemS"
  "tats\"\305\002\n\034CGCMsgGetSystemStatsResponse\022\021\n"
  "\tgc_app_id\030\001 \001(\r\022\020\n\010stats_kv\030\002 \001(\014\022\023\n\013ac"
  "tive_jobs\030\003 \001(\r\022\025\n\ryielding_jobs\030\004 \001(\r\022\025"
  "\n\ruser_sessions\030\005 \001(\r\022\034\n\024game_server_ses"
  "sions\030\006 \001(\r\022\020\n\010socaches\030\007 \001(\r\022\032\n\022socache"
  "s_to_unload\030\010 \001(\r\022\030\n\020socaches_loading\030\t "
  "\001(\r\022\027\n\017writeback_queue\030\n \001(\r\022\025\n\rsteamid_"
  "locks\030\013 \001(\r\022\023\n\013logon_queue\030\014 \001(\r\022\022\n\nlogo"
  "n_jobs\030\r \001(\r\"\370\002\n\017CMsgAMSendEmail\022\017\n\007stea"
  "mid\030\001 \001(\006\022\026\n\016email_msg_type\030\002 \001(\r\022\024\n\014ema"
  "il_format\030\003 \001(\r\022T\n\023persona_name_tokens\030\005"
  " \003(\01327.proto.dota.CMsgAMSendEmail.Person"
  "aNameReplacementToken\022\021\n\tsource_gc\030\006 \001(\r"
  "\022<\n\006tokens\030\007 \003(\0132,.proto.dota.CMsgAMSend"
  "Email.ReplacementToken\032;\n\020ReplacementTok"
  "en\022\022\n\ntoken_name\030\001 \001(\t\022\023\n\013token_value\030\002 "
  "\001(\t\032B\n\033PersonaNameReplacementToken\022\017\n\007st"
  "eamid\030\001 \001(\006\022\022\n\ntoken_name\030\002 \001(\t\"-\n\027CMsgA"
  "MSendEmailResponse\022\022\n\007eresult\030\001 \001(\r:\0012\"j"
  "\n\026CMsgGCGetEmailTemplate\022\016\n\006app_id\030\001 \001(\r"
  "\022\026\n\016email_msg_type\030\002 \001(\r\022\022\n\nemail_lang\030\003"
  " \001(\005\022\024\n\014email_format\030\004 \001(\005\"_\n\036CMsgGCGetE"
  "mailTemplateResponse\022\022\n\007eresult\030\001 \001(\r:\0012"
  "\022\027\n\017template_exists\030\002 \001(\010\022\020\n\010template\030\003 "
  "\001(\t\"\204\001\n\027CMsgAMGrantGuestPasses2\022\020\n\010steam"
  "_id\030\001 \001(\006\022\022\n\npackage_id\030\002 \001(\r\022\027\n\017passes_"
  "to_grant\030\003 \001(\005\022\032\n\022days_to_expiration\030\004 \001"
  "(\005\022\016\n\006action\030\005 \001(\005\"P\n\037CMsgAMGrantGuestPa"
  "sses2Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\031\n\016pas"
  "ses_granted\030\002 \001(\005:\0010\"L\n\036CGCSystemMsg_Get"
  "AccountDetails\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid"
  "\030\002 \001(\r:\n\200\246\035\200\001\210\246\035\200\004\"\315\007\n\'CGCSystemMsg_GetA"
  "ccountDetails_Response\022\035\n\022eresult_deprec"
  "ated\030\001 \001(\r:\0012\022\024\n\014account_name\030\002 \001(\t\022\024\n\014p"
  "ersona_name\030\003 \001(\t\022\032\n\022is_profile_created\030"
  "\032 \001(\010\022\031\n\021is_profile_public\030\004 \001(\010\022\033\n\023is_i"
  "nventory_public\030\005 \001(\010\022\025\n\ris_vac_banned\030\007"
  " \001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022\031\n\021is_school"
  "_account\030\t \001(\010\022\022\n\nis_limited\030\n \001(\010\022\025\n\ris"
  "_subscribed\030\013 \001(\010\022\017\n\007package\030\014 \001(\r\022\035\n\025is"
  "_free_trial_account\030\r \001(\010\022\035\n\025free_trial_"
  "expiration\030\016 \001(\r\022\027\n\017is_low_violence\030\017 \001("
  "\010\022\036\n\026is_account_locked_down\030\020 \001(\010\022\033\n\023is_"
  "community_banned\030\021 \001(\010\022\027\n\017is_trade_banne"
  "d\030\022 \001(\010\022\034\n\024trade_ban_expiration\030\023 \001(\r\022\021\n"
  "\taccountid\030\024 \001(\r\022\033\n\023suspension_end_time\030"
  "\025 \001(\r\022\020\n\010currency\030\026 \001(\t\022\023\n\013steam_level\030\027"
  " \001(\r\022\024\n\014friend_count\030\030 \001(\r\022\035\n\025account_cr"
  "eation_time\030\031 \001(\r\022\035\n\025is_steamguard_enabl"
  "ed\030\033 \001(\010\022\031\n\021is_phone_verified\030\034 \001(\010\022\"\n\032i"
  "s_two_factor_auth_enabled\030\035 \001(\010\022\037\n\027two_f"
  "actor_enabled_time\030\036 \001(\r\022\037\n\027phone_verifi"
  "cation_time\030\037 \001(\r\022\020\n\010phone_id\030! \001(\004\022\034\n\024i"
  "s_phone_identifying\030\" \001(\010\022\032\n\022rt_identity"
  "_linked\030# \001(\r\022\025\n\rrt_birth_date\030$ \001(\r\022\030\n\020"
  "txn_country_code\030% \001(\t:\n\200\246\035\200\001\210\246\035\200\004\")\n\025CM"
  "sgGCGetPersonaNames\022\020\n\010steamids\030\001 \003(\006\"\311\001"
  "\n\036CMsgGCGetPersonaNames_Response\022Q\n\021succ"
  "eeded_lookups\030\001 \003(\01326.proto.dota.CMsgGCG"
  "etPersonaNames_Response.PersonaName\022\036\n\026f"
  "ailed_lookup_steamids\030\002 \003(\006\0324\n\013PersonaNa"
  "me\022\017\n\007steamid\030\001 \001(\006\022\024\n\014persona_name\030\002 \001("
  "\t\"D\n\025CMsgGCCheckFriendship\022\024\n\014steamid_le"
  "ft\030\001 \001(\006\022\025\n\rsteamid_right\030\002 \001(\006\"K\n\036CMsgG"
  "CCheckFriendship_Response\022\017\n\007success\030\001 \001"
  "(\010\022\030\n\020found_friendship\030\002 \001(\010\"Q\n\027CMsgGCGe"
  "tAppFriendsList\022\017\n\007steamid\030\001 \001(\006\022%\n\035incl"
  "ude_friendship_timestamps\030\002 \001(\010\"|\n CMsgG"
  "CGetAppFriendsList_Response\022\017\n\007success\030\001"
  " \001(\010\022\020\n\010steamids\030\002 \003(\006\022\035\n\025friendship_tim"
  "estamps\030\003 \003(\007\022\026\n\016last_playtimes\030\004 \003(\007\"\323\001"
  "\n\033CMsgGCMsgMasterSetDirectory\022\030\n\020master_"
  "dir_index\030\001 \001(\r\022:\n\003dir\030\002 \003(\0132-.proto.dot"
  "a.CMsgGCMsgMasterSetDirectory.SubGC\032^\n\005S"
  "ubGC\022\021\n\tdir_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n"
  "\003box\030\003 \001(\t\022\024\n\014command_line\030\004 \001(\t\022\021\n\tgc_b"
  "inary\030\005 \001(\t\"K\n$CMsgGCMsgMasterSetDirecto"
  "ry_Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\017\n\007messa"
  "ge\030\002 \001(\t\"=\n(CMsgGCMsgWebAPIJobRequestFor"
  "wardResponse\022\021\n\tdir_index\030\001 \001(\r\"8\n%CGCSy"
  "stemMsg_GetPurchaseTrust_Request\022\017\n\007stea"
  "mid\030\001 \001(\006\"\255\001\n&CGCSystemMsg_GetPurchaseTr"
  "ust_Response\022\"\n\032has_prior_purchase_histo"
  "ry\030\001 \001(\010\022%\n\035has_no_recent_password_reset"
  "s\030\002 \001(\010\022\036\n\026is_wallet_cash_trusted\030\003 \001(\010\022"
  "\030\n\020time_all_trusted\030\004 \001(\r\"\217\001\n\035CMsgGCHAcc"
  "ountVacStatusChange\022\020\n\010steam_id\030\001 \001(\006\022\016\n"
  "\006app_id\030\002 \001(\r\022\033\n\023rtime_vacban_starts\030\003 \001"
  "(\r\022\025\n\ris_banned_now\030\004 \001(\010\022\030\n\020is_banned_f"
  "uture\030\005 \001(\010\".\n\033CMsgGCGetPartnerAccountLi"
  "nk\022\017\n\007steamid\030\001 \001(\006\"E\n$CMsgGCGetPartnerA"
  "ccountLink_Response\022\014\n\004pwid\030\001 \001(\r\022\017\n\007nex"
  "onid\030\002 \001(\r\"\361\002\n\021CMsgGCRoutingInfo\022\021\n\tdir_"
  "index\030\001 \003(\r\022C\n\006method\030\002 \001(\0162+.proto.dota"
  ".CMsgGCRoutingInfo.RoutingMethod:\006RANDOM"
  "\022F\n\010fallback\030\003 \001(\0162+.proto.dota.CMsgGCRo"
  "utingInfo.RoutingMethod:\007DISCARD\022\026\n\016prot"
  "obuf_field\030\004 \001(\r\022\024\n\014webapi_param\030\005 \001(\t\"\215"
  "\001\n\rRoutingMethod\022\n\n\006RANDOM\020\000\022\013\n\007DISCARD\020"
  "\001\022\022\n\016CLIENT_STEAMID\020\002\022\031\n\025PROTOBUF_FIELD_"
  "UINT64\020\003\022\020\n\014WEBAPI_PARAM\020\004\022\"\n\036WEBAPI_PAR"
  "AM_STEAMID_ACCOUNTID\020\005\"\313\001\n\037CMsgGCMsgMast"
  "erSetWebAPIRouting\022B\n\007entries\030\001 \003(\01321.pr"
  "oto.dota.CMsgGCMsgMasterSetWebAPIRouting"
  ".Entry\032d\n\005Entry\022\026\n\016interface_name\030\001 \001(\t\022"
  "\023\n\013method_name\030\002 \001(\t\022.\n\007routing\030\003 \001(\0132\035."
  "proto.dota.CMsgGCRoutingInfo\"\266\001\n\"CMsgGCM"
  "sgMasterSetClientMsgRouting\022E\n\007entries\030\001"
  " \003(\01324.proto.dota.CMsgGCMsgMasterSetClie"
  "ntMsgRouting.Entry\032I\n\005Entry\022\020\n\010msg_type\030"
  "\001 \001(\r\022.\n\007routing\030\002 \001(\0132\035.proto.dota.CMsg"
  "GCRoutingInfo\">\n(CMsgGCMsgMasterSetWebAP"
  "IRouting_Response\022\022\n\007eresult\030\001 \001(\005:\0012\"A\n"
  "+CMsgGCMsgMasterSetClientMsgRouting_Resp"
  "onse\022\022\n\007eresult\030\001 \001(\005:\0012\"\327\003\n\023CMsgGCMsgSe"
  "tOptions\0227\n\007options\030\001 \003(\0162&.proto.dota.C"
  "MsgGCMsgSetOptions.Option\022G\n\021client_msg_"
  "ranges\030\002 \003(\0132,.proto.dota.CMsgGCMsgSetOp"
  "tions.MessageRange\022[\n\rgcsql_version\030\003 \001("
  "\0162,.proto.dota.CMsgGCMsgSetOptions.GCSQL"
  "Version:\026GCSQL_VERSION_BASELINE\032)\n\014Messa"
  "geRange\022\013\n\003low\030\001 \002(\r\022\014\n\004high\030\002 \002(\r\"n\n\006Op"
  "tion\022\030\n\024NOTIFY_USER_SESSIONS\020\000\022\032\n\026NOTIFY"
  "_SERVER_SESSIONS\020\001\022\027\n\023NOTIFY_ACHIEVEMENT"
  "S\020\002\022\025\n\021NOTIFY_VAC_ACTION\020\003\"F\n\014GCSQLVersi"
  "on\022\032\n\026GCSQL_VERSION_BASELINE\020\001\022\032\n\026GCSQL_"
  "VERSION_BOOLTYPE\020\002\"\237\002\n\024CMsgGCHUpdateSess"
  "ion\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006app_id\030\002 \001(\r\022\016\n"
  "\006online\030\003 \001(\010\022\027\n\017server_steam_id\030\004 \001(\006\022\023"
  "\n\013server_addr\030\005 \001(\r\022\023\n\013server_port\030\006 \001(\r"
  "\022\017\n\007os_type\030\007 \001(\r\022\023\n\013client_addr\030\010 \001(\r\022A"
  "\n\014extra_fields\030\t \003(\0132+.proto.dota.CMsgGC"
  "HUpdateSession.ExtraField\032)\n\nExtraField\022"
  "\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\367\001\n$CMsgNot"
  "ificationOfSuspiciousActivity\022\017\n\007steamid"
  "\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022b\n\022multiple_instan"
  "ces\030\003 \001(\0132F.proto.dota.CMsgNotificationO"
  "fSuspiciousActivity.MultipleGameInstance"
  "s\032K\n\025MultipleGameInstances\022\032\n\022app_instan"
  "ce_count\030\001 \001(\r\022\026\n\016other_steamids\030\002 \003(\006\"\210"
  "\005\n\026CMsgDPPartnerMicroTxns\022\r\n\005appid\030\001 \001(\r"
  "\022\017\n\007gc_name\030\002 \001(\t\022\?\n\007partner\030\003 \001(\0132..pro"
  "to.dota.CMsgDPPartnerMicroTxns.PartnerIn"
  "fo\022H\n\014transactions\030\004 \003(\01322.proto.dota.CM"
  "sgDPPartnerMicroTxns.PartnerMicroTxn\032\333\002\n"
  "\017PartnerMicroTxn\022\021\n\tinit_time\030\001 \001(\r\022\030\n\020l"
  "ast_update_time\030\002 \001(\r\022\016\n\006txn_id\030\003 \001(\004\022\022\n"
  "\naccount_id\030\004 \001(\r\022\021\n\tline_item\030\005 \001(\r\022\017\n\007"
  "item_id\030\006 \001(\004\022\021\n\tdef_index\030\007 \001(\r\022\r\n\005pric"
  "e\030\010 \001(\004\022\013\n\003tax\030\t \001(\004\022\021\n\tprice_usd\030\n \001(\004\022"
  "\017\n\007tax_usd\030\013 \001(\004\022\025\n\rpurchase_type\030\014 \001(\r\022"
  "\026\n\016steam_txn_type\030\r \001(\r\022\024\n\014country_code\030"
  "\016 \001(\t\022\023\n\013region_code\030\017 \001(\t\022\020\n\010quantity\030\020"
  " \001(\005\022\024\n\014ref_trans_id\030\021 \001(\004\032e\n\013PartnerInf"
  "o\022\022\n\npartner_id\030\001 \001(\r\022\024\n\014partner_name\030\002 "
  "\001(\t\022\025\n\rcurrency_code\030\003 \001(\t\022\025\n\rcurrency_n"
  "ame\030\004 \001(\t\"\211\003\n\036CMsgDPPartnerMicroTxnsResp"
  "onse\022\022\n\007eresult\030\001 \001(\r:\0012\022U\n\neerrorcode\030\002"
  " \001(\01625.proto.dota.CMsgDPPartnerMicroTxns"
  "Response.EErrorCode:\nk_MsgValid\"\373\001\n\nEErr"
  "orCode\022\016\n\nk_MsgValid\020\000\022\025\n\021k_MsgInvalidAp"
  "pID\020\001\022\033\n\027k_MsgInvalidPartnerInfo\020\002\022\027\n\023k_"
  "MsgNoTransactions\020\003\022\023\n\017k_MsgSQLFailure\020\004"
  "\022\037\n\033k_MsgPartnerInfoDiscrepancy\020\005\022 \n\034k_M"
  "sgTransactionInsertFailed\020\007\022\027\n\023k_MsgAlre"
  "adyRunning\020\010\022\037\n\033k_MsgInvalidTransactionD"
  "ata\020\t\"S\n\034CMsgGCHVacVerificationChange\022\017\n"
  "\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\023\n\013is_veri"
  "fied\030\003 \001(\010\"Z\n\035CMsgGCHAccountTwoFactorCha"
  "nge\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\031\n\021t"
  "wofactor_enabled\030\003 \001(\010\"<\n\031CMsgGCCheckCla"
  "nMembership\022\017\n\007steamid\030\001 \001(\006\022\016\n\006clanid\030\002"
  " \001(\r\"6\n\"CMsgGCCheckClanMembership_Respon"
  "se\022\020\n\010ismember\030\001 \001(\010*\333\001\n\020GCProtoBufMsgSr"
  "c\022 \n\034GCProtoBufMsgSrc_Unspecified\020\000\022\037\n\033G"
  "CProtoBufMsgSrc_FromSystem\020\001\022 \n\034GCProtoB"
  "ufMsgSrc_FromSteamID\020\002\022\033\n\027GCProtoBufMsgS"
  "rc_FromGC\020\003\022 \n\034GCProtoBufMsgSrc_ReplySys"
  "tem\020\004\022#\n\037GCProtoBufMsgSrc_SpoofedSteamID"
  "\020\005:9\n\tkey_field\022\035.google.protobuf.FieldO"
  "ptions\030\340\324\003 \001(\010:\005false:A\n\022msgpool_soft_li"
  "mit\022\037.google.protobuf.MessageOptions\030\340\324\003"
  " \001(\005:\00232:B\n\022msgpool_hard_limit\022\037.google."
  "protobuf.MessageOptions\030\341\324\003 \001(\005:\003384B\005H\001"
  "\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_2eproto = {
  false, InitDefaults_steammessages_2eproto, 
  descriptor_table_protodef_steammessages_2eproto,
  "steammessages.proto", &assign_descriptors_table_steammessages_2eproto, 11403,
};

void AddDescriptors_steammessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fdescriptor_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_2eproto = []() { AddDescriptors_steammessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgGCRoutingInfo_RoutingMethod_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[0];
}
bool CMsgGCRoutingInfo_RoutingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RANDOM;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::DISCARD;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::CLIENT_STEAMID;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::PROTOBUF_FIELD_UINT64;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM_STEAMID_ACCOUNTID;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MIN;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MAX;
const int CMsgGCRoutingInfo::RoutingMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCMsgSetOptions_Option_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[1];
}
bool CMsgGCMsgSetOptions_Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_USER_SESSIONS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_SERVER_SESSIONS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_ACHIEVEMENTS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_VAC_ACTION;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MIN;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MAX;
const int CMsgGCMsgSetOptions::Option_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCMsgSetOptions_GCSQLVersion_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[2];
}
bool CMsgGCMsgSetOptions_GCSQLVersion_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BASELINE;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BOOLTYPE;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MIN;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MAX;
const int CMsgGCMsgSetOptions::GCSQLVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[3];
}
bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgValid;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidAppID;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidPartnerInfo;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgNoTransactions;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgSQLFailure;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgPartnerInfoDiscrepancy;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgTransactionInsertFailed;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgAlreadyRunning;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidTransactionData;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MIN;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MAX;
const int CMsgDPPartnerMicroTxnsResponse::EErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GCProtoBufMsgSrc_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[4];
}
bool GCProtoBufMsgSrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}
class CMsgProtoBufHeader::HasBitSetters {
 public:
  static void set_has_client_steam_id(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_session_id(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_source_app_id(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_job_id_source(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_job_id_target(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_target_job_name(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_eresult(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_error_message(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gc_msg_src(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_gc_dir_index_source(CMsgProtoBufHeader* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtoBufHeader::kClientSteamIdFieldNumber;
const int CMsgProtoBufHeader::kClientSessionIdFieldNumber;
const int CMsgProtoBufHeader::kSourceAppIdFieldNumber;
const int CMsgProtoBufHeader::kJobIdSourceFieldNumber;
const int CMsgProtoBufHeader::kJobIdTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kGcMsgSrcFieldNumber;
const int CMsgProtoBufHeader::kGcDirIndexSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_job_name()) {
    target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&client_steam_id_, &from.client_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_id_target_) -
    reinterpret_cast<char*>(&client_steam_id_)) + sizeof(job_id_target_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgProtoBufHeader)
}

void CMsgProtoBufHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgProtoBufHeader_steammessages_2eproto.base);
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gc_dir_index_source_) -
      reinterpret_cast<char*>(&client_steam_id_)) + sizeof(gc_dir_index_source_));
  eresult_ = 2;
  job_id_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
  job_id_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgProtoBufHeader)
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  target_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgProtoBufHeader_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_job_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&client_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_dir_index_source_) -
        reinterpret_cast<char*>(&client_steam_id_)) + sizeof(gc_dir_index_source_));
    eresult_ = 2;
  }
  if (cached_has_bits & 0x00000300u) {
    job_id_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
    job_id_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgProtoBufHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgProtoBufHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 client_steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_client_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 client_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_job_id_source(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_job_id_target(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string target_job_name = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgProtoBufHeader.target_job_name");
        object = msg->mutable_target_job_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string error_message = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgProtoBufHeader.error_message");
        object = msg->mutable_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
      case 200: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::GCProtoBufMsgSrc_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(200, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gc_msg_src(static_cast<::proto::dota::GCProtoBufMsgSrc>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gc_dir_index_source = 201;
      case 201: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_gc_dir_index_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgProtoBufHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_client_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_source_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_job_id_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_job_id_target(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgProtoBufHeader.target_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgProtoBufHeader.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (1600 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::GCProtoBufMsgSrc_IsValid(value)) {
            set_gc_msg_src(static_cast< ::proto::dota::GCProtoBufMsgSrc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                200, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_dir_index_source = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (1608 & 0xFF)) {
          HasBitSetters::set_has_gc_dir_index_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_dir_index_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgProtoBufHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgProtoBufHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_steam_id(), output);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_session_id(), output);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_app_id(), output);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->job_id_source(), output);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->job_id_target(), output);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.target_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->error_message(), output);
  }

  // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      200, this->gc_msg_src(), output);
  }

  // optional uint32 gc_dir_index_source = 201;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(201, this->gc_dir_index_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgProtoBufHeader)
}

::google::protobuf::uint8* CMsgProtoBufHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.target_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      200, this->gc_msg_src(), target);
  }

  // optional uint32 gc_dir_index_source = 201;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(201, this->gc_dir_index_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgProtoBufHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional fixed64 client_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 client_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_app_id());
    }

    // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gc_msg_src());
    }

    // optional uint32 gc_dir_index_source = 201;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_dir_index_source());
    }

    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgProtoBufHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgProtoBufHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgProtoBufHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_session_id_ = from.client_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_app_id_ = from.source_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gc_msg_src_ = from.gc_msg_src_;
    }
    if (cached_has_bits & 0x00000040u) {
      gc_dir_index_source_ = from.gc_dir_index_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      job_id_source_ = from.job_id_source_;
    }
    if (cached_has_bits & 0x00000200u) {
      job_id_target_ = from.job_id_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_job_name_.Swap(&other->target_job_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_steam_id_, other->client_steam_id_);
  swap(client_session_id_, other->client_session_id_);
  swap(source_app_id_, other->source_app_id_);
  swap(gc_msg_src_, other->gc_msg_src_);
  swap(gc_dir_index_source_, other->gc_dir_index_source_);
  swap(eresult_, other->eresult_);
  swap(job_id_source_, other->job_id_source_);
  swap(job_id_target_, other->job_id_target_);
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWebAPIKey::InitAsDefaultInstance() {
}
class CMsgWebAPIKey::HasBitSetters {
 public:
  static void set_has_status(CMsgWebAPIKey* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_account_id(CMsgWebAPIKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_publisher_group_id(CMsgWebAPIKey* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_key_id(CMsgWebAPIKey* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_domain(CMsgWebAPIKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWebAPIKey::kStatusFieldNumber;
const int CMsgWebAPIKey::kAccountIdFieldNumber;
const int CMsgWebAPIKey::kPublisherGroupIdFieldNumber;
const int CMsgWebAPIKey::kKeyIdFieldNumber;
const int CMsgWebAPIKey::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWebAPIKey::CMsgWebAPIKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWebAPIKey)
}
CMsgWebAPIKey::CMsgWebAPIKey(const CMsgWebAPIKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWebAPIKey)
}

void CMsgWebAPIKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgWebAPIKey_steammessages_2eproto.base);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(key_id_));
  status_ = 255u;
}

CMsgWebAPIKey::~CMsgWebAPIKey() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWebAPIKey)
  SharedDtor();
}

void CMsgWebAPIKey::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgWebAPIKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWebAPIKey& CMsgWebAPIKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWebAPIKey_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgWebAPIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWebAPIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(key_id_));
    status_ = 255u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWebAPIKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWebAPIKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 status = 1 [default = 255];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_publisher_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 key_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_key_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string domain = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgWebAPIKey.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWebAPIKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWebAPIKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1 [default = 255];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_publisher_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_key_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIKey.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWebAPIKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWebAPIKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWebAPIKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWebAPIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->publisher_group_id(), output);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_id(), output);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIKey.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWebAPIKey)
}

::google::protobuf::uint8* CMsgWebAPIKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWebAPIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->publisher_group_id(), target);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_id(), target);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIKey.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWebAPIKey)
  return target;
}

size_t CMsgWebAPIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWebAPIKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string domain = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional uint32 account_id = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 publisher_group_id = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

    // optional uint32 key_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

    // optional uint32 status = 1 [default = 255];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWebAPIKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWebAPIKey* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWebAPIKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWebAPIKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWebAPIKey)
    MergeFrom(*source);
  }
}

void CMsgWebAPIKey::MergeFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWebAPIKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIKey::CopyFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIKey::IsInitialized() const {
  return true;
}

void CMsgWebAPIKey::Swap(CMsgWebAPIKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWebAPIKey::InternalSwap(CMsgWebAPIKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(publisher_group_id_, other->publisher_group_id_);
  swap(key_id_, other->key_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgWebAPIKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHttpRequest_RequestHeader::InitAsDefaultInstance() {
}
class CMsgHttpRequest_RequestHeader::HasBitSetters {
 public:
  static void set_has_name(CMsgHttpRequest_RequestHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgHttpRequest_RequestHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest_RequestHeader::kNameFieldNumber;
const int CMsgHttpRequest_RequestHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest.RequestHeader)
}
CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest.RequestHeader)
}

void CMsgHttpRequest_RequestHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest.RequestHeader)
  SharedDtor();
}

void CMsgHttpRequest_RequestHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHttpRequest_RequestHeader& CMsgHttpRequest_RequestHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHttpRequest_RequestHeader_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHttpRequest_RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHttpRequest_RequestHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHttpRequest_RequestHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpRequest.RequestHeader.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpRequest.RequestHeader.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHttpRequest_RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest.RequestHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.RequestHeader.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.RequestHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest.RequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHttpRequest_RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest.RequestHeader)
}

::google::protobuf::uint8* CMsgHttpRequest_RequestHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest.RequestHeader)
  return target;
}

size_t CMsgHttpRequest_RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest.RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest_RequestHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHttpRequest_RequestHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest.RequestHeader)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_RequestHeader::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_RequestHeader::Swap(CMsgHttpRequest_RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest_RequestHeader::InternalSwap(CMsgHttpRequest_RequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgHttpRequest_RequestHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHttpRequest_QueryParam::InitAsDefaultInstance() {
}
class CMsgHttpRequest_QueryParam::HasBitSetters {
 public:
  static void set_has_name(CMsgHttpRequest_QueryParam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgHttpRequest_QueryParam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest_QueryParam::kNameFieldNumber;
const int CMsgHttpRequest_QueryParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest.QueryParam)
}
CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest.QueryParam)
}

void CMsgHttpRequest_QueryParam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest.QueryParam)
  SharedDtor();
}

void CMsgHttpRequest_QueryParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_QueryParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHttpRequest_QueryParam& CMsgHttpRequest_QueryParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHttpRequest_QueryParam_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHttpRequest_QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest.QueryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHttpRequest_QueryParam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHttpRequest_QueryParam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpRequest.QueryParam.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHttpRequest_QueryParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest.QueryParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.QueryParam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest.QueryParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest.QueryParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHttpRequest_QueryParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest.QueryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.QueryParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest.QueryParam)
}

::google::protobuf::uint8* CMsgHttpRequest_QueryParam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest.QueryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.QueryParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest.QueryParam)
  return target;
}

size_t CMsgHttpRequest_QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest.QueryParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHttpRequest_QueryParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest_QueryParam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHttpRequest_QueryParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest.QueryParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest.QueryParam)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_QueryParam::MergeFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpRequest_QueryParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_QueryParam::CopyFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_QueryParam::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_QueryParam::Swap(CMsgHttpRequest_QueryParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest_QueryParam::InternalSwap(CMsgHttpRequest_QueryParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgHttpRequest_QueryParam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHttpRequest::InitAsDefaultInstance() {
}
class CMsgHttpRequest::HasBitSetters {
 public:
  static void set_has_request_method(CMsgHttpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_hostname(CMsgHttpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url(CMsgHttpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_body(CMsgHttpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_absolute_timeout(CMsgHttpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest::kRequestMethodFieldNumber;
const int CMsgHttpRequest::kHostnameFieldNumber;
const int CMsgHttpRequest::kUrlFieldNumber;
const int CMsgHttpRequest::kHeadersFieldNumber;
const int CMsgHttpRequest::kGetParamsFieldNumber;
const int CMsgHttpRequest::kPostParamsFieldNumber;
const int CMsgHttpRequest::kBodyFieldNumber;
const int CMsgHttpRequest::kAbsoluteTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest::CMsgHttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest)
}
CMsgHttpRequest::CMsgHttpRequest(const CMsgHttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      headers_(from.headers_),
      get_params_(from.get_params_),
      post_params_(from.post_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&request_method_, &from.request_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_timeout_) -
    reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest)
}

void CMsgHttpRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgHttpRequest_steammessages_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_timeout_) -
      reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
}

CMsgHttpRequest::~CMsgHttpRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest)
  SharedDtor();
}

void CMsgHttpRequest::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHttpRequest& CMsgHttpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHttpRequest_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  get_params_.Clear();
  post_params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_timeout_) -
        reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHttpRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHttpRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 request_method = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_request_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string hostname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpRequest.hostname");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpRequest.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgHttpRequest_RequestHeader::_InternalParse;
          object = msg->add_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgHttpRequest_QueryParam::_InternalParse;
          object = msg->add_get_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgHttpRequest_QueryParam::_InternalParse;
          object = msg->add_post_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional bytes body = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 absolute_timeout = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_absolute_timeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_method(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_get_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_post_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_timeout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_absolute_timeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_method(), output);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->headers(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->get_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->get_params(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->post_params(static_cast<int>(i)),
      output);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->body(), output);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->absolute_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest)
}

::google::protobuf::uint8* CMsgHttpRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_method(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->headers(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->get_params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->get_params(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->post_params(static_cast<int>(i)), target);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->body(), target);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->absolute_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest)
  return target;
}

size_t CMsgHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->get_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->get_params(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->post_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->post_params(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes body = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 request_method = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_method());
    }

    // optional uint32 absolute_timeout = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHttpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest::MergeFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  get_params_.MergeFrom(from.get_params_);
  post_params_.MergeFrom(from.post_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_method_ = from.request_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      absolute_timeout_ = from.absolute_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest::CopyFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest::IsInitialized() const {
  return true;
}

void CMsgHttpRequest::Swap(CMsgHttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest::InternalSwap(CMsgHttpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  CastToBase(&get_params_)->InternalSwap(CastToBase(&other->get_params_));
  CastToBase(&post_params_)->InternalSwap(CastToBase(&other->post_params_));
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_method_, other->request_method_);
  swap(absolute_timeout_, other->absolute_timeout_);
}

::google::protobuf::Metadata CMsgHttpRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWebAPIRequest::InitAsDefaultInstance() {
  ::proto::dota::_CMsgWebAPIRequest_default_instance_._instance.get_mutable()->api_key_ = const_cast< ::proto::dota::CMsgWebAPIKey*>(
      ::proto::dota::CMsgWebAPIKey::internal_default_instance());
  ::proto::dota::_CMsgWebAPIRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::proto::dota::CMsgHttpRequest*>(
      ::proto::dota::CMsgHttpRequest::internal_default_instance());
}
class CMsgWebAPIRequest::HasBitSetters {
 public:
  static void set_has_unused_job_name(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_interface_name(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_method_name(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_version(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgWebAPIKey& api_key(const CMsgWebAPIRequest* msg);
  static void set_has_api_key(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgHttpRequest& request(const CMsgWebAPIRequest* msg);
  static void set_has_request(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_routing_app_id(CMsgWebAPIRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::proto::dota::CMsgWebAPIKey&
CMsgWebAPIRequest::HasBitSetters::api_key(const CMsgWebAPIRequest* msg) {
  return *msg->api_key_;
}
const ::proto::dota::CMsgHttpRequest&
CMsgWebAPIRequest::HasBitSetters::request(const CMsgWebAPIRequest* msg) {
  return *msg->request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWebAPIRequest::kUNUSEDJobNameFieldNumber;
const int CMsgWebAPIRequest::kInterfaceNameFieldNumber;
const int CMsgWebAPIRequest::kMethodNameFieldNumber;
const int CMsgWebAPIRequest::kVersionFieldNumber;
const int CMsgWebAPIRequest::kApiKeyFieldNumber;
const int CMsgWebAPIRequest::kRequestFieldNumber;
const int CMsgWebAPIRequest::kRoutingAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWebAPIRequest::CMsgWebAPIRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWebAPIRequest)
}
CMsgWebAPIRequest::CMsgWebAPIRequest(const CMsgWebAPIRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unused_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unused_job_name()) {
    unused_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused_job_name_);
  }
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interface_name()) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_api_key()) {
    api_key_ = new ::proto::dota::CMsgWebAPIKey(*from.api_key_);
  } else {
    api_key_ = nullptr;
  }
  if (from.has_request()) {
    request_ = new ::proto::dota::CMsgHttpRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_app_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(routing_app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWebAPIRequest)
}

void CMsgWebAPIRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgWebAPIRequest_steammessages_2eproto.base);
  unused_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&api_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routing_app_id_) -
      reinterpret_cast<char*>(&api_key_)) + sizeof(routing_app_id_));
}

CMsgWebAPIRequest::~CMsgWebAPIRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWebAPIRequest)
  SharedDtor();
}

void CMsgWebAPIRequest::SharedDtor() {
  unused_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete api_key_;
  if (this != internal_default_instance()) delete request_;
}

void CMsgWebAPIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWebAPIRequest& CMsgWebAPIRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWebAPIRequest_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgWebAPIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWebAPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      unused_job_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      interface_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(api_key_ != nullptr);
      api_key_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&routing_app_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(routing_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWebAPIRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWebAPIRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string UNUSED_job_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
        object = msg->mutable_unused_job_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string interface_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgWebAPIRequest.interface_name");
        object = msg->mutable_interface_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string method_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgWebAPIRequest.method_name");
        object = msg->mutable_method_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgWebAPIKey api_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgWebAPIKey::_InternalParse;
        object = msg->mutable_api_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgHttpRequest request = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgHttpRequest::_InternalParse;
        object = msg->mutable_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 routing_app_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_routing_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWebAPIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWebAPIRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UNUSED_job_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unused_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unused_job_name().data(), static_cast<int>(this->unused_job_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string interface_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface_name().data(), static_cast<int>(this->interface_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.interface_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgWebAPIKey api_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_api_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgHttpRequest request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routing_app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_routing_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWebAPIRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWebAPIRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWebAPIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWebAPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UNUSED_job_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused_job_name().data(), static_cast<int>(this->unused_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unused_job_name(), output);
  }

  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_name(), output);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // optional .proto.dota.CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::api_key(this), output);
  }

  // optional .proto.dota.CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::request(this), output);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->routing_app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWebAPIRequest)
}

::google::protobuf::uint8* CMsgWebAPIRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWebAPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UNUSED_job_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused_job_name().data(), static_cast<int>(this->unused_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unused_job_name(), target);
  }

  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // optional .proto.dota.CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::api_key(this), target);
  }

  // optional .proto.dota.CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::request(this), target);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->routing_app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWebAPIRequest)
  return target;
}

size_t CMsgWebAPIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWebAPIRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string UNUSED_job_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unused_job_name());
    }

    // optional string interface_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_name());
    }

    // optional string method_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional .proto.dota.CMsgWebAPIKey api_key = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *api_key_);
    }

    // optional .proto.dota.CMsgHttpRequest request = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 routing_app_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWebAPIRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWebAPIRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWebAPIRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWebAPIRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWebAPIRequest)
    MergeFrom(*source);
  }
}

void CMsgWebAPIRequest::MergeFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unused_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_api_key()->::proto::dota::CMsgWebAPIKey::MergeFrom(from.api_key());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_request()->::proto::dota::CMsgHttpRequest::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      routing_app_id_ = from.routing_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWebAPIRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIRequest::CopyFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIRequest::IsInitialized() const {
  return true;
}

void CMsgWebAPIRequest::Swap(CMsgWebAPIRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWebAPIRequest::InternalSwap(CMsgWebAPIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unused_job_name_.Swap(&other->unused_job_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_name_.Swap(&other->interface_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(api_key_, other->api_key_);
  swap(request_, other->request_);
  swap(version_, other->version_);
  swap(routing_app_id_, other->routing_app_id_);
}

::google::protobuf::Metadata CMsgWebAPIRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHttpResponse_ResponseHeader::InitAsDefaultInstance() {
}
class CMsgHttpResponse_ResponseHeader::HasBitSetters {
 public:
  static void set_has_name(CMsgHttpResponse_ResponseHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgHttpResponse_ResponseHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpResponse_ResponseHeader::kNameFieldNumber;
const int CMsgHttpResponse_ResponseHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpResponse.ResponseHeader)
}
CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpResponse.ResponseHeader)
}

void CMsgHttpResponse_ResponseHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpResponse.ResponseHeader)
  SharedDtor();
}

void CMsgHttpResponse_ResponseHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse_ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHttpResponse_ResponseHeader& CMsgHttpResponse_ResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHttpResponse_ResponseHeader_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHttpResponse_ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHttpResponse_ResponseHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHttpResponse_ResponseHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpResponse.ResponseHeader.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgHttpResponse.ResponseHeader.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHttpResponse_ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpResponse.ResponseHeader.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpResponse.ResponseHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpResponse.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpResponse.ResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHttpResponse_ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpResponse.ResponseHeader)
}

::google::protobuf::uint8* CMsgHttpResponse_ResponseHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpResponse.ResponseHeader)
  return target;
}

size_t CMsgHttpResponse_ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpResponse_ResponseHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHttpResponse_ResponseHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpResponse.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpResponse.ResponseHeader)
    MergeFrom(*source);
  }
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse_ResponseHeader::IsInitialized() const {
  return true;
}

void CMsgHttpResponse_ResponseHeader::Swap(CMsgHttpResponse_ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpResponse_ResponseHeader::InternalSwap(CMsgHttpResponse_ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgHttpResponse_ResponseHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHttpResponse::InitAsDefaultInstance() {
}
class CMsgHttpResponse::HasBitSetters {
 public:
  static void set_has_status_code(CMsgHttpResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_body(CMsgHttpResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpResponse::kStatusCodeFieldNumber;
const int CMsgHttpResponse::kHeadersFieldNumber;
const int CMsgHttpResponse::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpResponse::CMsgHttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpResponse)
}
CMsgHttpResponse::CMsgHttpResponse(const CMsgHttpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpResponse)
}

void CMsgHttpResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgHttpResponse_steammessages_2eproto.base);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0u;
}

CMsgHttpResponse::~CMsgHttpResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpResponse)
  SharedDtor();
}

void CMsgHttpResponse::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHttpResponse& CMsgHttpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHttpResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    body_.ClearNonDefaultToEmptyNoArena();
  }
  status_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHttpResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHttpResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 status_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_status_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgHttpResponse_ResponseHeader::_InternalParse;
          object = msg->add_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional bytes body = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_status_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->headers(static_cast<int>(i)),
      output);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpResponse)
}

::google::protobuf::uint8* CMsgHttpResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->headers(static_cast<int>(i)), target);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpResponse)
  return target;
}

size_t CMsgHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes body = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 status_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHttpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpResponse)
    MergeFrom(*source);
  }
}

void CMsgHttpResponse::MergeFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_code_ = from.status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse::CopyFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse::IsInitialized() const {
  return true;
}

void CMsgHttpResponse::Swap(CMsgHttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpResponse::InternalSwap(CMsgHttpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_code_, other->status_code_);
}

::google::protobuf::Metadata CMsgHttpResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMFindAccounts::InitAsDefaultInstance() {
}
class CMsgAMFindAccounts::HasBitSetters {
 public:
  static void set_has_search_type(CMsgAMFindAccounts* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_search_string(CMsgAMFindAccounts* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMFindAccounts::kSearchTypeFieldNumber;
const int CMsgAMFindAccounts::kSearchStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMFindAccounts::CMsgAMFindAccounts()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMFindAccounts)
}
CMsgAMFindAccounts::CMsgAMFindAccounts(const CMsgAMFindAccounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_string()) {
    search_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_string_);
  }
  search_type_ = from.search_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMFindAccounts)
}

void CMsgAMFindAccounts::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMFindAccounts_steammessages_2eproto.base);
  search_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_type_ = 0u;
}

CMsgAMFindAccounts::~CMsgAMFindAccounts() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMFindAccounts)
  SharedDtor();
}

void CMsgAMFindAccounts::SharedDtor() {
  search_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMFindAccounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMFindAccounts& CMsgAMFindAccounts::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMFindAccounts_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMFindAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMFindAccounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_string_.ClearNonDefaultToEmptyNoArena();
  }
  search_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMFindAccounts::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMFindAccounts*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 search_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_search_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string search_string = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgAMFindAccounts.search_string");
        object = msg->mutable_search_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMFindAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMFindAccounts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 search_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_search_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_string().data(), static_cast<int>(this->search_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMFindAccounts.search_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMFindAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMFindAccounts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMFindAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMFindAccounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_type(), output);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), static_cast<int>(this->search_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMFindAccounts.search_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->search_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMFindAccounts)
}

::google::protobuf::uint8* CMsgAMFindAccounts::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMFindAccounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_type(), target);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), static_cast<int>(this->search_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMFindAccounts.search_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMFindAccounts)
  return target;
}

size_t CMsgAMFindAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMFindAccounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string search_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }

    // optional uint32 search_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMFindAccounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMFindAccounts* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMFindAccounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMFindAccounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMFindAccounts)
    MergeFrom(*source);
  }
}

void CMsgAMFindAccounts::MergeFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      search_type_ = from.search_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMFindAccounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccounts::CopyFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccounts::IsInitialized() const {
  return true;
}

void CMsgAMFindAccounts::Swap(CMsgAMFindAccounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMFindAccounts::InternalSwap(CMsgAMFindAccounts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_string_.Swap(&other->search_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(search_type_, other->search_type_);
}

::google::protobuf::Metadata CMsgAMFindAccounts::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMFindAccountsResponse::InitAsDefaultInstance() {
}
class CMsgAMFindAccountsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMFindAccountsResponse::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMFindAccountsResponse)
}
CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steam_id_(from.steam_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMFindAccountsResponse)
}

void CMsgAMFindAccountsResponse::SharedCtor() {
}

CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMFindAccountsResponse)
  SharedDtor();
}

void CMsgAMFindAccountsResponse::SharedDtor() {
}

void CMsgAMFindAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMFindAccountsResponse& CMsgAMFindAccountsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMFindAccountsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMFindAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMFindAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMFindAccountsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMFindAccountsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steam_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMFindAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMFindAccountsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_steam_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMFindAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMFindAccountsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMFindAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMFindAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  for (int i = 0, n = this->steam_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steam_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMFindAccountsResponse)
}

::google::protobuf::uint8* CMsgAMFindAccountsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMFindAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->steam_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMFindAccountsResponse)
  return target;
}

size_t CMsgAMFindAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMFindAccountsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->steam_id_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMFindAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMFindAccountsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMFindAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMFindAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMFindAccountsResponse)
    MergeFrom(*source);
  }
}

void CMsgAMFindAccountsResponse::MergeFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steam_id_.MergeFrom(from.steam_id_);
}

void CMsgAMFindAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccountsResponse::CopyFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccountsResponse::IsInitialized() const {
  return true;
}

void CMsgAMFindAccountsResponse::Swap(CMsgAMFindAccountsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMFindAccountsResponse::InternalSwap(CMsgAMFindAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steam_id_.InternalSwap(&other->steam_id_);
}

::google::protobuf::Metadata CMsgAMFindAccountsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNotifyWatchdog::InitAsDefaultInstance() {
}
class CMsgNotifyWatchdog::HasBitSetters {
 public:
  static void set_has_source(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_alert_type(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_critical(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_time(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_appid(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_text(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_recipient(CMsgNotifyWatchdog* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotifyWatchdog::kSourceFieldNumber;
const int CMsgNotifyWatchdog::kAlertTypeFieldNumber;
const int CMsgNotifyWatchdog::kCriticalFieldNumber;
const int CMsgNotifyWatchdog::kTimeFieldNumber;
const int CMsgNotifyWatchdog::kAppidFieldNumber;
const int CMsgNotifyWatchdog::kTextFieldNumber;
const int CMsgNotifyWatchdog::kRecipientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotifyWatchdog::CMsgNotifyWatchdog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotifyWatchdog)
}
CMsgNotifyWatchdog::CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recipient()) {
    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&source_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotifyWatchdog)
}

void CMsgNotifyWatchdog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgNotifyWatchdog_steammessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&source_)) + sizeof(appid_));
}

CMsgNotifyWatchdog::~CMsgNotifyWatchdog() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotifyWatchdog)
  SharedDtor();
}

void CMsgNotifyWatchdog::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgNotifyWatchdog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNotifyWatchdog& CMsgNotifyWatchdog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNotifyWatchdog_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNotifyWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotifyWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      recipient_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&source_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNotifyWatchdog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNotifyWatchdog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 source = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 alert_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_alert_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool critical = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_critical(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 appid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgNotifyWatchdog.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string recipient = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgNotifyWatchdog.recipient");
        object = msg->mutable_recipient();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNotifyWatchdog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotifyWatchdog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 alert_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_alert_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alert_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool critical = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_critical(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgNotifyWatchdog.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recipient = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recipient().data(), static_cast<int>(this->recipient().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgNotifyWatchdog.recipient");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotifyWatchdog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotifyWatchdog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNotifyWatchdog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotifyWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->alert_type(), output);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->critical(), output);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text(), output);
  }

  // optional string recipient = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->recipient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotifyWatchdog)
}

::google::protobuf::uint8* CMsgNotifyWatchdog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotifyWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->alert_type(), target);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->critical(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->text(), target);
  }

  // optional string recipient = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->recipient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotifyWatchdog)
  return target;
}

size_t CMsgNotifyWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotifyWatchdog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string text = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string recipient = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipient());
    }

    // optional uint32 source = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 alert_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alert_type());
    }

    // optional bool critical = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotifyWatchdog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotifyWatchdog* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNotifyWatchdog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotifyWatchdog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotifyWatchdog)
    MergeFrom(*source);
  }
}

void CMsgNotifyWatchdog::MergeFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000008u) {
      alert_type_ = from.alert_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      critical_ = from.critical_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotifyWatchdog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotifyWatchdog::CopyFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyWatchdog::IsInitialized() const {
  return true;
}

void CMsgNotifyWatchdog::Swap(CMsgNotifyWatchdog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotifyWatchdog::InternalSwap(CMsgNotifyWatchdog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_.Swap(&other->recipient_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(alert_type_, other->alert_type_);
  swap(critical_, other->critical_);
  swap(time_, other->time_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgNotifyWatchdog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetLicenses::InitAsDefaultInstance() {
}
class CMsgAMGetLicenses::HasBitSetters {
 public:
  static void set_has_steamid(CMsgAMGetLicenses* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetLicenses::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetLicenses::CMsgAMGetLicenses()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetLicenses)
}
CMsgAMGetLicenses::CMsgAMGetLicenses(const CMsgAMGetLicenses& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetLicenses)
}

void CMsgAMGetLicenses::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgAMGetLicenses::~CMsgAMGetLicenses() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetLicenses)
  SharedDtor();
}

void CMsgAMGetLicenses::SharedDtor() {
}

void CMsgAMGetLicenses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetLicenses& CMsgAMGetLicenses::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetLicenses_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetLicenses::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetLicenses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetLicenses::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetLicenses*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetLicenses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetLicenses)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetLicenses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetLicenses)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetLicenses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetLicenses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetLicenses)
}

::google::protobuf::uint8* CMsgAMGetLicenses::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetLicenses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetLicenses)
  return target;
}

size_t CMsgAMGetLicenses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetLicenses)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetLicenses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetLicenses* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetLicenses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetLicenses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetLicenses)
    MergeFrom(*source);
  }
}

void CMsgAMGetLicenses::MergeFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgAMGetLicenses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicenses::CopyFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicenses::IsInitialized() const {
  return true;
}

void CMsgAMGetLicenses::Swap(CMsgAMGetLicenses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetLicenses::InternalSwap(CMsgAMGetLicenses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgAMGetLicenses::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPackageLicense::InitAsDefaultInstance() {
}
class CMsgPackageLicense::HasBitSetters {
 public:
  static void set_has_package_id(CMsgPackageLicense* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_created(CMsgPackageLicense* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owner_id(CMsgPackageLicense* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPackageLicense::kPackageIdFieldNumber;
const int CMsgPackageLicense::kTimeCreatedFieldNumber;
const int CMsgPackageLicense::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPackageLicense::CMsgPackageLicense()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPackageLicense)
}
CMsgPackageLicense::CMsgPackageLicense(const CMsgPackageLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPackageLicense)
}

void CMsgPackageLicense::SharedCtor() {
  ::memset(&package_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
}

CMsgPackageLicense::~CMsgPackageLicense() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPackageLicense)
  SharedDtor();
}

void CMsgPackageLicense::SharedDtor() {
}

void CMsgPackageLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPackageLicense& CMsgPackageLicense::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPackageLicense_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPackageLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPackageLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_id_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPackageLicense::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPackageLicense*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_package_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_owner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPackageLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPackageLicense)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_package_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_owner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPackageLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPackageLicense)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPackageLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPackageLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_created(), output);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPackageLicense)
}

::google::protobuf::uint8* CMsgPackageLicense::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPackageLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_created(), target);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPackageLicense)
  return target;
}

size_t CMsgPackageLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPackageLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 time_created = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 owner_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPackageLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPackageLicense* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPackageLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPackageLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPackageLicense)
    MergeFrom(*source);
  }
}

void CMsgPackageLicense::MergeFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPackageLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPackageLicense::CopyFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPackageLicense::IsInitialized() const {
  return true;
}

void CMsgPackageLicense::Swap(CMsgPackageLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPackageLicense::InternalSwap(CMsgPackageLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(package_id_, other->package_id_);
  swap(time_created_, other->time_created_);
  swap(owner_id_, other->owner_id_);
}

::google::protobuf::Metadata CMsgPackageLicense::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetLicensesResponse::InitAsDefaultInstance() {
}
class CMsgAMGetLicensesResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgAMGetLicensesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetLicensesResponse::kLicenseFieldNumber;
const int CMsgAMGetLicensesResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetLicensesResponse)
}
CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      license_(from.license_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetLicensesResponse)
}

void CMsgAMGetLicensesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMGetLicensesResponse_steammessages_2eproto.base);
  result_ = 0u;
}

CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetLicensesResponse)
  SharedDtor();
}

void CMsgAMGetLicensesResponse::SharedDtor() {
}

void CMsgAMGetLicensesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetLicensesResponse& CMsgAMGetLicensesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetLicensesResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetLicensesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetLicensesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetLicensesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgPackageLicense license = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPackageLicense::_InternalParse;
          object = msg->add_license();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetLicensesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetLicensesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPackageLicense license = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetLicensesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetLicensesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetLicensesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetLicensesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPackageLicense license = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->license_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->license(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetLicensesResponse)
}

::google::protobuf::uint8* CMsgAMGetLicensesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetLicensesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPackageLicense license = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->license_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->license(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetLicensesResponse)
  return target;
}

size_t CMsgAMGetLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetLicensesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPackageLicense license = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->license_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->license(static_cast<int>(i)));
    }
  }

  // optional uint32 result = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetLicensesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetLicensesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetLicensesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetLicensesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetLicensesResponse)
    MergeFrom(*source);
  }
}

void CMsgAMGetLicensesResponse::MergeFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  license_.MergeFrom(from.license_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgAMGetLicensesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicensesResponse::CopyFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicensesResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetLicensesResponse::Swap(CMsgAMGetLicensesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetLicensesResponse::InternalSwap(CMsgAMGetLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&license_)->InternalSwap(CastToBase(&other->license_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgAMGetLicensesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetUserGameStats::InitAsDefaultInstance() {
}
class CMsgAMGetUserGameStats::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgAMGetUserGameStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgAMGetUserGameStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStats::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStats::kGameIdFieldNumber;
const int CMsgAMGetUserGameStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStats)
}
CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStats)
}

void CMsgAMGetUserGameStats::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
}

CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStats)
  SharedDtor();
}

void CMsgAMGetUserGameStats::SharedDtor() {
}

void CMsgAMGetUserGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetUserGameStats& CMsgAMGetUserGameStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetUserGameStats_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetUserGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetUserGameStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetUserGameStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated uint32 stats = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_stats(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_stats();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetUserGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_stats())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetUserGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // repeated uint32 stats = 3;
  for (int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStats)
}

::google::protobuf::uint8* CMsgAMGetUserGameStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // repeated uint32 stats = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->stats_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStats)
  return target;
}

size_t CMsgAMGetUserGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stats = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stats_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stats_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetUserGameStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetUserGameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStats)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStats::MergeFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStats::CopyFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStats::Swap(CMsgAMGetUserGameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStats::InternalSwap(CMsgAMGetUserGameStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  swap(steam_id_, other->steam_id_);
  swap(game_id_, other->game_id_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetUserGameStatsResponse_Stats::InitAsDefaultInstance() {
}
class CMsgAMGetUserGameStatsResponse_Stats::HasBitSetters {
 public:
  static void set_has_stat_id(CMsgAMGetUserGameStatsResponse_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stat_value(CMsgAMGetUserGameStatsResponse_Stats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}
CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedCtor() {
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetUserGameStatsResponse_Stats_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetUserGameStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetUserGameStatsResponse_Stats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetUserGameStatsResponse_Stats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stat_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetUserGameStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stat_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetUserGameStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Stats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Stats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetUserGameStatsResponse_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Stats::Swap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse_Stats::InternalSwap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_id_, other->stat_id_);
  swap(stat_value_, other->stat_value_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InitAsDefaultInstance() {
}
class CMsgAMGetUserGameStatsResponse_Achievement_Blocks::HasBitSetters {
 public:
  static void set_has_achievement_id(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_achievement_bit_id(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_unlock_time(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementBitIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}
CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&achievement_id_, &from.achievement_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_time_) -
    reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedCtor() {
  ::memset(&achievement_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_time_) -
      reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&achievement_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_time_) -
        reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetUserGameStatsResponse_Achievement_Blocks*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_achievement_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 achievement_bit_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_achievement_bit_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 unlock_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_unlock_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_achievement_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_bit_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_achievement_bit_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_bit_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 unlock_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_unlock_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &unlock_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievement_bit_id(), output);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->unlock_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievement_bit_id(), target);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->unlock_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 achievement_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

    // optional uint32 achievement_bit_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_bit_id());
    }

    // optional fixed32 unlock_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Achievement_Blocks* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetUserGameStatsResponse_Achievement_Blocks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      achievement_id_ = from.achievement_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      achievement_bit_id_ = from.achievement_bit_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_time_ = from.unlock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(achievement_id_, other->achievement_id_);
  swap(achievement_bit_id_, other->achievement_bit_id_);
  swap(unlock_time_, other->unlock_time_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGetUserGameStatsResponse::InitAsDefaultInstance() {
}
class CMsgAMGetUserGameStatsResponse::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgAMGetUserGameStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgAMGetUserGameStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eresult(CMsgAMGetUserGameStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kGameIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kEresultFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kStatsFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse)
}
CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse)
}

void CMsgAMGetUserGameStatsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMGetUserGameStatsResponse_steammessages_2eproto.base);
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
  eresult_ = 2;
}

CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGetUserGameStatsResponse& CMsgAMGetUserGameStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGetUserGameStatsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGetUserGameStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  achievement_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGetUserGameStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGetUserGameStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalParse;
          object = msg->add_achievement_blocks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGetUserGameStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_achievement_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGetUserGameStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stats(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->achievement_blocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stats(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->achievement_blocks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->achievement_blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->achievement_blocks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGetUserGameStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse::Swap(CMsgAMGetUserGameStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse::InternalSwap(CMsgAMGetUserGameStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  CastToBase(&achievement_blocks_)->InternalSwap(CastToBase(&other->achievement_blocks_));
  swap(steam_id_, other->steam_id_);
  swap(game_id_, other->game_id_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetCommandList::InitAsDefaultInstance() {
}
class CMsgGCGetCommandList::HasBitSetters {
 public:
  static void set_has_app_id(CMsgGCGetCommandList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_command_prefix(CMsgGCGetCommandList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetCommandList::kAppIdFieldNumber;
const int CMsgGCGetCommandList::kCommandPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetCommandList::CMsgGCGetCommandList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetCommandList)
}
CMsgGCGetCommandList::CMsgGCGetCommandList(const CMsgGCGetCommandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_prefix()) {
    command_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_prefix_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetCommandList)
}

void CMsgGCGetCommandList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetCommandList_steammessages_2eproto.base);
  command_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgGCGetCommandList::~CMsgGCGetCommandList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetCommandList)
  SharedDtor();
}

void CMsgGCGetCommandList::SharedDtor() {
  command_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetCommandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetCommandList& CMsgGCGetCommandList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetCommandList_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetCommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetCommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_prefix_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetCommandList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetCommandList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string command_prefix = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCGetCommandList.command_prefix");
        object = msg->mutable_command_prefix();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetCommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetCommandList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_prefix().data(), static_cast<int>(this->command_prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetCommandList.command_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetCommandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetCommandList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetCommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetCommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_prefix().data(), static_cast<int>(this->command_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandList.command_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->command_prefix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetCommandList)
}

::google::protobuf::uint8* CMsgGCGetCommandList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetCommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_prefix().data(), static_cast<int>(this->command_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandList.command_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_prefix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetCommandList)
  return target;
}

size_t CMsgGCGetCommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetCommandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string command_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_prefix());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetCommandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetCommandList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetCommandList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetCommandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetCommandList)
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandList::MergeFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      command_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetCommandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandList::CopyFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandList::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandList::Swap(CMsgGCGetCommandList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetCommandList::InternalSwap(CMsgGCGetCommandList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_prefix_.Swap(&other->command_prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgGCGetCommandList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetCommandListResponse::InitAsDefaultInstance() {
}
class CMsgGCGetCommandListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetCommandListResponse::kCommandNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetCommandListResponse)
}
CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      command_name_(from.command_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetCommandListResponse)
}

void CMsgGCGetCommandListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetCommandListResponse_steammessages_2eproto.base);
}

CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetCommandListResponse)
  SharedDtor();
}

void CMsgGCGetCommandListResponse::SharedDtor() {
}

void CMsgGCGetCommandListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetCommandListResponse& CMsgGCGetCommandListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetCommandListResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetCommandListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetCommandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetCommandListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetCommandListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string command_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCGetCommandListResponse.command_name");
          object = msg->add_command_name();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetCommandListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetCommandListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string command_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_name(this->command_name_size() - 1).data(),
            static_cast<int>(this->command_name(this->command_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetCommandListResponse.command_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetCommandListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetCommandListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetCommandListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetCommandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_name(i).data(), static_cast<int>(this->command_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandListResponse.command_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetCommandListResponse)
}

::google::protobuf::uint8* CMsgGCGetCommandListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetCommandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_name(i).data(), static_cast<int>(this->command_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandListResponse.command_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->command_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetCommandListResponse)
  return target;
}

size_t CMsgGCGetCommandListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetCommandListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_name_size());
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetCommandListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetCommandListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetCommandListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetCommandListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetCommandListResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandListResponse::MergeFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_name_.MergeFrom(from.command_name_);
}

void CMsgGCGetCommandListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandListResponse::CopyFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandListResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandListResponse::Swap(CMsgGCGetCommandListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetCommandListResponse::InternalSwap(CMsgGCGetCommandListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_name_.InternalSwap(CastToBase(&other->command_name_));
}

::google::protobuf::Metadata CMsgGCGetCommandListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedGet::InitAsDefaultInstance() {
}
class CGCMsgMemCachedGet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGet::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGet::CGCMsgMemCachedGet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGet)
}
CGCMsgMemCachedGet::CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGet)
}

void CGCMsgMemCachedGet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedGet_steammessages_2eproto.base);
}

CGCMsgMemCachedGet::~CGCMsgMemCachedGet() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGet)
  SharedDtor();
}

void CGCMsgMemCachedGet::SharedDtor() {
}

void CGCMsgMemCachedGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedGet& CGCMsgMemCachedGet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedGet_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedGet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedGet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedGet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CGCMsgMemCachedGet.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedGet.keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedGet.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGet)
}

::google::protobuf::uint8* CGCMsgMemCachedGet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedGet.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGet)
  return target;
}

size_t CGCMsgMemCachedGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedGet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGet* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedGet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGet)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGet::MergeFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedGet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGet::CopyFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGet::Swap(CGCMsgMemCachedGet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGet::InternalSwap(CGCMsgMemCachedGet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(CastToBase(&other->keys_));
}

::google::protobuf::Metadata CGCMsgMemCachedGet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedGetResponse_ValueTag::InitAsDefaultInstance() {
}
class CGCMsgMemCachedGetResponse_ValueTag::HasBitSetters {
 public:
  static void set_has_found(CGCMsgMemCachedGetResponse_ValueTag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_value(CGCMsgMemCachedGetResponse_ValueTag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGetResponse_ValueTag::kFoundFieldNumber;
const int CGCMsgMemCachedGetResponse_ValueTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}
CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  found_ = false;
}

CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  SharedDtor();
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse_ValueTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedGetResponse_ValueTag_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedGetResponse_ValueTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  found_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedGetResponse_ValueTag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedGetResponse_ValueTag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool found = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_found(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedGetResponse_ValueTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_found(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedGetResponse_ValueTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse_ValueTag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return target;
}

size_t CGCMsgMemCachedGetResponse_ValueTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bool found = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse_ValueTag* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedGetResponse_ValueTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      found_ = from.found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse_ValueTag::Swap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGetResponse_ValueTag::InternalSwap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(found_, other->found_);
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedGetResponse::InitAsDefaultInstance() {
}
class CGCMsgMemCachedGetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGetResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGetResponse)
}
CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGetResponse)
}

void CGCMsgMemCachedGetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedGetResponse_steammessages_2eproto.base);
}

CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGetResponse)
  SharedDtor();
}

void CGCMsgMemCachedGetResponse::SharedDtor() {
}

void CGCMsgMemCachedGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedGetResponse& CGCMsgMemCachedGetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedGetResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedGetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedGetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag::_InternalParse;
          object = msg->add_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGetResponse)
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGetResponse)
  return target;
}

size_t CGCMsgMemCachedGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGetResponse)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse::MergeFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse::Swap(CGCMsgMemCachedGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGetResponse::InternalSwap(CGCMsgMemCachedGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedSet_KeyPair::InitAsDefaultInstance() {
}
class CGCMsgMemCachedSet_KeyPair::HasBitSetters {
 public:
  static void set_has_name(CGCMsgMemCachedSet_KeyPair* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CGCMsgMemCachedSet_KeyPair* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedSet_KeyPair::kNameFieldNumber;
const int CGCMsgMemCachedSet_KeyPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
}
CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
}

void CGCMsgMemCachedSet_KeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
  SharedDtor();
}

void CGCMsgMemCachedSet_KeyPair::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedSet_KeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet_KeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedSet_KeyPair_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedSet_KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedSet_KeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedSet_KeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCMsgMemCachedSet.KeyPair.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedSet_KeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedSet_KeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedSet.KeyPair)
}

::google::protobuf::uint8* CGCMsgMemCachedSet_KeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return target;
}

size_t CGCMsgMemCachedSet_KeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedSet_KeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedSet_KeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedSet.KeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedSet.KeyPair)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet_KeyPair::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet_KeyPair::Swap(CGCMsgMemCachedSet_KeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedSet_KeyPair::InternalSwap(CGCMsgMemCachedSet_KeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CGCMsgMemCachedSet_KeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedSet::InitAsDefaultInstance() {
}
class CGCMsgMemCachedSet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedSet::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedSet::CGCMsgMemCachedSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedSet)
}
CGCMsgMemCachedSet::CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedSet)
}

void CGCMsgMemCachedSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedSet_steammessages_2eproto.base);
}

CGCMsgMemCachedSet::~CGCMsgMemCachedSet() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedSet)
  SharedDtor();
}

void CGCMsgMemCachedSet::SharedDtor() {
}

void CGCMsgMemCachedSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedSet& CGCMsgMemCachedSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedSet_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGCMsgMemCachedSet_KeyPair::_InternalParse;
          object = msg->add_keys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedSet)
}

::google::protobuf::uint8* CGCMsgMemCachedSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedSet)
  return target;
}

size_t CGCMsgMemCachedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedSet* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedSet)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet::MergeFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet::CopyFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet::Swap(CGCMsgMemCachedSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedSet::InternalSwap(CGCMsgMemCachedSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
}

::google::protobuf::Metadata CGCMsgMemCachedSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedDelete::InitAsDefaultInstance() {
}
class CGCMsgMemCachedDelete::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedDelete::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedDelete)
}
CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedDelete)
}

void CGCMsgMemCachedDelete::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgMemCachedDelete_steammessages_2eproto.base);
}

CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedDelete)
  SharedDtor();
}

void CGCMsgMemCachedDelete::SharedDtor() {
}

void CGCMsgMemCachedDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedDelete& CGCMsgMemCachedDelete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedDelete_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedDelete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedDelete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CGCMsgMemCachedDelete.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedDelete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedDelete.keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedDelete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedDelete.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedDelete)
}

::google::protobuf::uint8* CGCMsgMemCachedDelete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedDelete.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedDelete)
  return target;
}

size_t CGCMsgMemCachedDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedDelete* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedDelete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedDelete)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedDelete::MergeFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedDelete::CopyFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedDelete::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedDelete::Swap(CGCMsgMemCachedDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedDelete::InternalSwap(CGCMsgMemCachedDelete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(CastToBase(&other->keys_));
}

::google::protobuf::Metadata CGCMsgMemCachedDelete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedStats::InitAsDefaultInstance() {
}
class CGCMsgMemCachedStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedStats::CGCMsgMemCachedStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedStats)
}
CGCMsgMemCachedStats::CGCMsgMemCachedStats(const CGCMsgMemCachedStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedStats)
}

void CGCMsgMemCachedStats::SharedCtor() {
}

CGCMsgMemCachedStats::~CGCMsgMemCachedStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedStats)
  SharedDtor();
}

void CGCMsgMemCachedStats::SharedDtor() {
}

void CGCMsgMemCachedStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedStats& CGCMsgMemCachedStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedStats_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedStats)
}

::google::protobuf::uint8* CGCMsgMemCachedStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedStats)
  return target;
}

size_t CGCMsgMemCachedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedStats* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedStats)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedStats::MergeFrom(const CGCMsgMemCachedStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGCMsgMemCachedStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedStats::CopyFrom(const CGCMsgMemCachedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStats::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStats::Swap(CGCMsgMemCachedStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedStats::InternalSwap(CGCMsgMemCachedStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CGCMsgMemCachedStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgMemCachedStatsResponse::InitAsDefaultInstance() {
}
class CGCMsgMemCachedStatsResponse::HasBitSetters {
 public:
  static void set_has_curr_connections(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cmd_get(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cmd_set(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cmd_flush(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_get_hits(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_get_misses(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_delete_hits(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_delete_misses(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_bytes_read(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_bytes_written(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_limit_maxbytes(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_curr_items(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_evictions(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_bytes(CGCMsgMemCachedStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedStatsResponse::kCurrConnectionsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdGetFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdSetFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdFlushFieldNumber;
const int CGCMsgMemCachedStatsResponse::kGetHitsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kGetMissesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kDeleteHitsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kDeleteMissesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesReadFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesWrittenFieldNumber;
const int CGCMsgMemCachedStatsResponse::kLimitMaxbytesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCurrItemsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kEvictionsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedStatsResponse)
}
CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(const CGCMsgMemCachedStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curr_connections_, &from.curr_connections_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&curr_connections_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedStatsResponse)
}

void CGCMsgMemCachedStatsResponse::SharedCtor() {
  ::memset(&curr_connections_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&curr_connections_)) + sizeof(bytes_));
}

CGCMsgMemCachedStatsResponse::~CGCMsgMemCachedStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedStatsResponse)
  SharedDtor();
}

void CGCMsgMemCachedStatsResponse::SharedDtor() {
}

void CGCMsgMemCachedStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgMemCachedStatsResponse& CGCMsgMemCachedStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgMemCachedStatsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgMemCachedStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&curr_connections_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delete_misses_) -
        reinterpret_cast<char*>(&curr_connections_)) + sizeof(delete_misses_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&bytes_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_) -
        reinterpret_cast<char*>(&bytes_read_)) + sizeof(bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgMemCachedStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgMemCachedStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 curr_connections = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_curr_connections(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 cmd_get = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cmd_get(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 cmd_set = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cmd_set(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 cmd_flush = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cmd_flush(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 get_hits = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_get_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 get_misses = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_get_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 delete_hits = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_delete_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 delete_misses = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_delete_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_read = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_bytes_read(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_written = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_bytes_written(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 limit_maxbytes = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_limit_maxbytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 curr_items = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_curr_items(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 evictions = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_evictions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgMemCachedStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 curr_connections = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_curr_connections(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_get = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_cmd_get(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_get_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_set = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cmd_set(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_flush = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cmd_flush(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_flush_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 get_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_get_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 get_misses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_get_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 delete_hits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_delete_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delete_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 delete_misses = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_delete_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delete_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_read = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_bytes_read(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_written = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_bytes_written(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 limit_maxbytes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_limit_maxbytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_maxbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 curr_items = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_curr_items(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 evictions = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_evictions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &evictions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_bytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgMemCachedStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->curr_connections(), output);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cmd_get(), output);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cmd_set(), output);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cmd_flush(), output);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->get_hits(), output);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->get_misses(), output);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->delete_hits(), output);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->delete_misses(), output);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bytes_read(), output);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bytes_written(), output);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->limit_maxbytes(), output);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->curr_items(), output);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->evictions(), output);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedStatsResponse)
}

::google::protobuf::uint8* CGCMsgMemCachedStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->curr_connections(), target);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cmd_get(), target);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cmd_set(), target);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cmd_flush(), target);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->get_hits(), target);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->get_misses(), target);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->delete_hits(), target);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->delete_misses(), target);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->bytes_read(), target);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->bytes_written(), target);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->limit_maxbytes(), target);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->curr_items(), target);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->evictions(), target);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedStatsResponse)
  return target;
}

size_t CGCMsgMemCachedStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 curr_connections = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_connections());
    }

    // optional uint64 cmd_get = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_get());
    }

    // optional uint64 cmd_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_set());
    }

    // optional uint64 cmd_flush = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_flush());
    }

    // optional uint64 get_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->get_hits());
    }

    // optional uint64 get_misses = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->get_misses());
    }

    // optional uint64 delete_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delete_hits());
    }

    // optional uint64 delete_misses = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delete_misses());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 bytes_read = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional uint64 bytes_written = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 limit_maxbytes = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->limit_maxbytes());
    }

    // optional uint64 curr_items = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_items());
    }

    // optional uint64 evictions = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->evictions());
    }

    // optional uint64 bytes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgMemCachedStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgMemCachedStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedStatsResponse::MergeFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      curr_connections_ = from.curr_connections_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_get_ = from.cmd_get_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_set_ = from.cmd_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_flush_ = from.cmd_flush_;
    }
    if (cached_has_bits & 0x00000010u) {
      get_hits_ = from.get_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      get_misses_ = from.get_misses_;
    }
    if (cached_has_bits & 0x00000040u) {
      delete_hits_ = from.delete_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      delete_misses_ = from.delete_misses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000400u) {
      limit_maxbytes_ = from.limit_maxbytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      curr_items_ = from.curr_items_;
    }
    if (cached_has_bits & 0x00001000u) {
      evictions_ = from.evictions_;
    }
    if (cached_has_bits & 0x00002000u) {
      bytes_ = from.bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStatsResponse::Swap(CGCMsgMemCachedStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedStatsResponse::InternalSwap(CGCMsgMemCachedStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curr_connections_, other->curr_connections_);
  swap(cmd_get_, other->cmd_get_);
  swap(cmd_set_, other->cmd_set_);
  swap(cmd_flush_, other->cmd_flush_);
  swap(get_hits_, other->get_hits_);
  swap(get_misses_, other->get_misses_);
  swap(delete_hits_, other->delete_hits_);
  swap(delete_misses_, other->delete_misses_);
  swap(bytes_read_, other->bytes_read_);
  swap(bytes_written_, other->bytes_written_);
  swap(limit_maxbytes_, other->limit_maxbytes_);
  swap(curr_items_, other->curr_items_);
  swap(evictions_, other->evictions_);
  swap(bytes_, other->bytes_);
}

::google::protobuf::Metadata CGCMsgMemCachedStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgSQLStats::InitAsDefaultInstance() {
}
class CGCMsgSQLStats::HasBitSetters {
 public:
  static void set_has_schema_catalog(CGCMsgSQLStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSQLStats::kSchemaCatalogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSQLStats::CGCMsgSQLStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSQLStats)
}
CGCMsgSQLStats::CGCMsgSQLStats(const CGCMsgSQLStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_catalog_ = from.schema_catalog_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSQLStats)
}

void CGCMsgSQLStats::SharedCtor() {
  schema_catalog_ = 0u;
}

CGCMsgSQLStats::~CGCMsgSQLStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSQLStats)
  SharedDtor();
}

void CGCMsgSQLStats::SharedDtor() {
}

void CGCMsgSQLStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgSQLStats& CGCMsgSQLStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgSQLStats_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgSQLStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSQLStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_catalog_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgSQLStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgSQLStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 schema_catalog = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_schema_catalog(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgSQLStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSQLStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schema_catalog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_schema_catalog(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schema_catalog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSQLStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSQLStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgSQLStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSQLStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schema_catalog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSQLStats)
}

::google::protobuf::uint8* CGCMsgSQLStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSQLStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schema_catalog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSQLStats)
  return target;
}

size_t CGCMsgSQLStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSQLStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 schema_catalog = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schema_catalog());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgSQLStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSQLStats* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgSQLStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSQLStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSQLStats)
    MergeFrom(*source);
  }
}

void CGCMsgSQLStats::MergeFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schema_catalog()) {
    set_schema_catalog(from.schema_catalog());
  }
}

void CGCMsgSQLStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSQLStats::CopyFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStats::IsInitialized() const {
  return true;
}

void CGCMsgSQLStats::Swap(CGCMsgSQLStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSQLStats::InternalSwap(CGCMsgSQLStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(schema_catalog_, other->schema_catalog_);
}

::google::protobuf::Metadata CGCMsgSQLStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgSQLStatsResponse::InitAsDefaultInstance() {
}
class CGCMsgSQLStatsResponse::HasBitSetters {
 public:
  static void set_has_threads(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_threads_connected(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_threads_active(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_operations_submitted(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_prepared_statements_executed(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_non_prepared_statements_executed(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_deadlock_retries(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_operations_timed_out_in_queue(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_errors(CGCMsgSQLStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSQLStatsResponse::kThreadsFieldNumber;
const int CGCMsgSQLStatsResponse::kThreadsConnectedFieldNumber;
const int CGCMsgSQLStatsResponse::kThreadsActiveFieldNumber;
const int CGCMsgSQLStatsResponse::kOperationsSubmittedFieldNumber;
const int CGCMsgSQLStatsResponse::kPreparedStatementsExecutedFieldNumber;
const int CGCMsgSQLStatsResponse::kNonPreparedStatementsExecutedFieldNumber;
const int CGCMsgSQLStatsResponse::kDeadlockRetriesFieldNumber;
const int CGCMsgSQLStatsResponse::kOperationsTimedOutInQueueFieldNumber;
const int CGCMsgSQLStatsResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSQLStatsResponse)
}
CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(const CGCMsgSQLStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threads_, &from.threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&threads_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSQLStatsResponse)
}

void CGCMsgSQLStatsResponse::SharedCtor() {
  ::memset(&threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&threads_)) + sizeof(errors_));
}

CGCMsgSQLStatsResponse::~CGCMsgSQLStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSQLStatsResponse)
  SharedDtor();
}

void CGCMsgSQLStatsResponse::SharedDtor() {
}

void CGCMsgSQLStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgSQLStatsResponse& CGCMsgSQLStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgSQLStatsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgSQLStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSQLStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&threads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operations_timed_out_in_queue_) -
        reinterpret_cast<char*>(&threads_)) + sizeof(operations_timed_out_in_queue_));
  }
  errors_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgSQLStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgSQLStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 threads = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_threads(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 threads_connected = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_threads_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 threads_active = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_threads_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 operations_submitted = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_operations_submitted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prepared_statements_executed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_prepared_statements_executed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 non_prepared_statements_executed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_non_prepared_statements_executed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deadlock_retries = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_deadlock_retries(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 operations_timed_out_in_queue = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_operations_timed_out_in_queue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 errors = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_errors(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgSQLStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSQLStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 threads = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_threads(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 threads_connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_threads_connected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 threads_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_threads_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 operations_submitted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_operations_submitted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operations_submitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prepared_statements_executed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_prepared_statements_executed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepared_statements_executed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 non_prepared_statements_executed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_non_prepared_statements_executed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &non_prepared_statements_executed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deadlock_retries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_deadlock_retries(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadlock_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 operations_timed_out_in_queue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_operations_timed_out_in_queue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operations_timed_out_in_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 errors = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_errors(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSQLStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSQLStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgSQLStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSQLStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->threads(), output);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->threads_connected(), output);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->threads_active(), output);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operations_submitted(), output);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prepared_statements_executed(), output);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->non_prepared_statements_executed(), output);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deadlock_retries(), output);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->operations_timed_out_in_queue(), output);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSQLStatsResponse)
}

::google::protobuf::uint8* CGCMsgSQLStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSQLStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->threads(), target);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->threads_connected(), target);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->threads_active(), target);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operations_submitted(), target);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prepared_statements_executed(), target);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->non_prepared_statements_executed(), target);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deadlock_retries(), target);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->operations_timed_out_in_queue(), target);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSQLStatsResponse)
  return target;
}

size_t CGCMsgSQLStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSQLStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 threads = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads());
    }

    // optional uint32 threads_connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads_connected());
    }

    // optional uint32 threads_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads_active());
    }

    // optional uint32 operations_submitted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operations_submitted());
    }

    // optional uint32 prepared_statements_executed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepared_statements_executed());
    }

    // optional uint32 non_prepared_statements_executed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->non_prepared_statements_executed());
    }

    // optional uint32 deadlock_retries = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadlock_retries());
    }

    // optional uint32 operations_timed_out_in_queue = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operations_timed_out_in_queue());
    }

  }
  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgSQLStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSQLStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgSQLStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSQLStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSQLStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgSQLStatsResponse::MergeFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      threads_ = from.threads_;
    }
    if (cached_has_bits & 0x00000002u) {
      threads_connected_ = from.threads_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      threads_active_ = from.threads_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      operations_submitted_ = from.operations_submitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepared_statements_executed_ = from.prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000020u) {
      non_prepared_statements_executed_ = from.non_prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000040u) {
      deadlock_retries_ = from.deadlock_retries_;
    }
    if (cached_has_bits & 0x00000080u) {
      operations_timed_out_in_queue_ = from.operations_timed_out_in_queue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_errors(from.errors());
  }
}

void CGCMsgSQLStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSQLStatsResponse::CopyFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgSQLStatsResponse::Swap(CGCMsgSQLStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSQLStatsResponse::InternalSwap(CGCMsgSQLStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threads_, other->threads_);
  swap(threads_connected_, other->threads_connected_);
  swap(threads_active_, other->threads_active_);
  swap(operations_submitted_, other->operations_submitted_);
  swap(prepared_statements_executed_, other->prepared_statements_executed_);
  swap(non_prepared_statements_executed_, other->non_prepared_statements_executed_);
  swap(deadlock_retries_, other->deadlock_retries_);
  swap(operations_timed_out_in_queue_, other->operations_timed_out_in_queue_);
  swap(errors_, other->errors_);
}

::google::protobuf::Metadata CGCMsgSQLStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMAddFreeLicense::InitAsDefaultInstance() {
}
class CMsgAMAddFreeLicense::HasBitSetters {
 public:
  static void set_has_steamid(CMsgAMAddFreeLicense* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ip_public(CMsgAMAddFreeLicense* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_packageid(CMsgAMAddFreeLicense* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_store_country_code(CMsgAMAddFreeLicense* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMAddFreeLicense::kSteamidFieldNumber;
const int CMsgAMAddFreeLicense::kIpPublicFieldNumber;
const int CMsgAMAddFreeLicense::kPackageidFieldNumber;
const int CMsgAMAddFreeLicense::kStoreCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMAddFreeLicense)
}
CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_country_code()) {
    store_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_country_code_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMAddFreeLicense)
}

void CMsgAMAddFreeLicense::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMAddFreeLicense_steammessages_2eproto.base);
  store_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
}

CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMAddFreeLicense)
  SharedDtor();
}

void CMsgAMAddFreeLicense::SharedDtor() {
  store_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMAddFreeLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMAddFreeLicense& CMsgAMAddFreeLicense::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMAddFreeLicense_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMAddFreeLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMAddFreeLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    store_country_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMAddFreeLicense::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMAddFreeLicense*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 ip_public = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ip_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 packageid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_packageid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string store_country_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgAMAddFreeLicense.store_country_code");
        object = msg->mutable_store_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMAddFreeLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMAddFreeLicense)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip_public = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ip_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packageid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_packageid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_country_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_country_code().data(), static_cast<int>(this->store_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMAddFreeLicense.store_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMAddFreeLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMAddFreeLicense)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMAddFreeLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMAddFreeLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip_public(), output);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packageid(), output);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_country_code().data(), static_cast<int>(this->store_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMAddFreeLicense.store_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->store_country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMAddFreeLicense)
}

::google::protobuf::uint8* CMsgAMAddFreeLicense::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMAddFreeLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip_public(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packageid(), target);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_country_code().data(), static_cast<int>(this->store_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMAddFreeLicense.store_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->store_country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMAddFreeLicense)
  return target;
}

size_t CMsgAMAddFreeLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMAddFreeLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string store_country_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_country_code());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip_public = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_public());
    }

    // optional uint32 packageid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMAddFreeLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMAddFreeLicense* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMAddFreeLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMAddFreeLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMAddFreeLicense)
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicense::MergeFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      store_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ip_public_ = from.ip_public_;
    }
    if (cached_has_bits & 0x00000008u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMAddFreeLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicense::CopyFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicense::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicense::Swap(CMsgAMAddFreeLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMAddFreeLicense::InternalSwap(CMsgAMAddFreeLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  store_country_code_.Swap(&other->store_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(ip_public_, other->ip_public_);
  swap(packageid_, other->packageid_);
}

::google::protobuf::Metadata CMsgAMAddFreeLicense::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMAddFreeLicenseResponse::InitAsDefaultInstance() {
}
class CMsgAMAddFreeLicenseResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgAMAddFreeLicenseResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_purchase_result_detail(CMsgAMAddFreeLicenseResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_transid(CMsgAMAddFreeLicenseResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMAddFreeLicenseResponse::kEresultFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kPurchaseResultDetailFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kTransidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMAddFreeLicenseResponse)
}
CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transid_, &from.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMAddFreeLicenseResponse)
}

void CMsgAMAddFreeLicenseResponse::SharedCtor() {
  ::memset(&transid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purchase_result_detail_) -
      reinterpret_cast<char*>(&transid_)) + sizeof(purchase_result_detail_));
  eresult_ = 2;
}

CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMAddFreeLicenseResponse)
  SharedDtor();
}

void CMsgAMAddFreeLicenseResponse::SharedDtor() {
}

void CMsgAMAddFreeLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMAddFreeLicenseResponse& CMsgAMAddFreeLicenseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMAddFreeLicenseResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMAddFreeLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_result_detail_) -
        reinterpret_cast<char*>(&transid_)) + sizeof(purchase_result_detail_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMAddFreeLicenseResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMAddFreeLicenseResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 purchase_result_detail = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_purchase_result_detail(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 transid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_transid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMAddFreeLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 purchase_result_detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_purchase_result_detail(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_result_detail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 transid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_transid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &transid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMAddFreeLicenseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMAddFreeLicenseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMAddFreeLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_result_detail(), output);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->transid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMAddFreeLicenseResponse)
}

::google::protobuf::uint8* CMsgAMAddFreeLicenseResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_result_detail(), target);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->transid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMAddFreeLicenseResponse)
  return target;
}

size_t CMsgAMAddFreeLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 transid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 purchase_result_detail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_result_detail());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMAddFreeLicenseResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMAddFreeLicenseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMAddFreeLicenseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMAddFreeLicenseResponse)
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      transid_ = from.transid_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_result_detail_ = from.purchase_result_detail_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicenseResponse::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicenseResponse::Swap(CMsgAMAddFreeLicenseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMAddFreeLicenseResponse::InternalSwap(CMsgAMAddFreeLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transid_, other->transid_);
  swap(purchase_result_detail_, other->purchase_result_detail_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgAMAddFreeLicenseResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetIPLocation::InitAsDefaultInstance() {
}
class CGCMsgGetIPLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPLocation::kIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPLocation::CGCMsgGetIPLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPLocation)
}
CGCMsgGetIPLocation::CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPLocation)
}

void CGCMsgGetIPLocation::SharedCtor() {
}

CGCMsgGetIPLocation::~CGCMsgGetIPLocation() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPLocation)
  SharedDtor();
}

void CGCMsgGetIPLocation::SharedDtor() {
}

void CGCMsgGetIPLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetIPLocation& CGCMsgGetIPLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetIPLocation_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetIPLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetIPLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetIPLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 13) {
          do {
            msg->add_ips(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ips();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetIPLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_ips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetIPLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPLocation)
}

::google::protobuf::uint8* CGCMsgGetIPLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(1, this->ips_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPLocation)
  return target;
}

size_t CGCMsgGetIPLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ips_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ips_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetIPLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPLocation* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetIPLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPLocation)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocation::MergeFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
}

void CGCMsgGetIPLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocation::CopyFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocation::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocation::Swap(CGCMsgGetIPLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPLocation::InternalSwap(CGCMsgGetIPLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ips_.InternalSwap(&other->ips_);
}

::google::protobuf::Metadata CGCMsgGetIPLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CIPLocationInfo::InitAsDefaultInstance() {
}
class CIPLocationInfo::HasBitSetters {
 public:
  static void set_has_ip(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_latitude(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_longitude(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_country(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_state(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_city(CIPLocationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPLocationInfo::kIpFieldNumber;
const int CIPLocationInfo::kLatitudeFieldNumber;
const int CIPLocationInfo::kLongitudeFieldNumber;
const int CIPLocationInfo::kCountryFieldNumber;
const int CIPLocationInfo::kStateFieldNumber;
const int CIPLocationInfo::kCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPLocationInfo::CIPLocationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CIPLocationInfo)
}
CIPLocationInfo::CIPLocationInfo(const CIPLocationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CIPLocationInfo)
}

void CIPLocationInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CIPLocationInfo_steammessages_2eproto.base);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
}

CIPLocationInfo::~CIPLocationInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CIPLocationInfo)
  SharedDtor();
}

void CIPLocationInfo::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CIPLocationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIPLocationInfo& CIPLocationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CIPLocationInfo_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CIPLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CIPLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      state_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      city_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CIPLocationInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CIPLocationInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float latitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float longitude = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string country = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CIPLocationInfo.country");
        object = msg->mutable_country();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string state = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CIPLocationInfo.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string city = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CIPLocationInfo.city");
        object = msg->mutable_city();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CIPLocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CIPLocationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string city = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), static_cast<int>(this->city().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.city");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CIPLocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CIPLocationInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CIPLocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CIPLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->state(), output);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CIPLocationInfo)
}

::google::protobuf::uint8* CIPLocationInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CIPLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->state(), target);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CIPLocationInfo)
  return target;
}

size_t CIPLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CIPLocationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string state = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string city = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional float latitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIPLocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPLocationInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CIPLocationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CIPLocationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CIPLocationInfo)
    MergeFrom(*source);
  }
}

void CIPLocationInfo::MergeFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000008u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CIPLocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPLocationInfo::IsInitialized() const {
  return true;
}

void CIPLocationInfo::Swap(CIPLocationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPLocationInfo::InternalSwap(CIPLocationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_.Swap(&other->country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_, other->ip_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::google::protobuf::Metadata CIPLocationInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetIPLocationResponse::InitAsDefaultInstance() {
}
class CGCMsgGetIPLocationResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPLocationResponse::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPLocationResponse)
}
CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPLocationResponse)
}

void CGCMsgGetIPLocationResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgGetIPLocationResponse_steammessages_2eproto.base);
}

CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPLocationResponse)
  SharedDtor();
}

void CGCMsgGetIPLocationResponse::SharedDtor() {
}

void CGCMsgGetIPLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetIPLocationResponse& CGCMsgGetIPLocationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetIPLocationResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetIPLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetIPLocationResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetIPLocationResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CIPLocationInfo infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CIPLocationInfo::_InternalParse;
          object = msg->add_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetIPLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPLocationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CIPLocationInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPLocationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPLocationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetIPLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPLocationInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPLocationResponse)
}

::google::protobuf::uint8* CGCMsgGetIPLocationResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPLocationInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPLocationResponse)
  return target;
}

size_t CGCMsgGetIPLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPLocationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CIPLocationInfo infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetIPLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPLocationResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetIPLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPLocationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPLocationResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocationResponse::MergeFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocationResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocationResponse::Swap(CGCMsgGetIPLocationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPLocationResponse::InternalSwap(CGCMsgGetIPLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
}

::google::protobuf::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetIPASN::InitAsDefaultInstance() {
}
class CGCMsgGetIPASN::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPASN::kIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPASN::CGCMsgGetIPASN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPASN)
}
CGCMsgGetIPASN::CGCMsgGetIPASN(const CGCMsgGetIPASN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPASN)
}

void CGCMsgGetIPASN::SharedCtor() {
}

CGCMsgGetIPASN::~CGCMsgGetIPASN() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPASN)
  SharedDtor();
}

void CGCMsgGetIPASN::SharedDtor() {
}

void CGCMsgGetIPASN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetIPASN& CGCMsgGetIPASN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetIPASN_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetIPASN::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPASN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetIPASN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetIPASN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 13) {
          do {
            msg->add_ips(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ips();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetIPASN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPASN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_ips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPASN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPASN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetIPASN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPASN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPASN)
}

::google::protobuf::uint8* CGCMsgGetIPASN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPASN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(1, this->ips_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPASN)
  return target;
}

size_t CGCMsgGetIPASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPASN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ips_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ips_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetIPASN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPASN)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPASN* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetIPASN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPASN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPASN)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPASN::MergeFrom(const CGCMsgGetIPASN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPASN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
}

void CGCMsgGetIPASN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPASN::CopyFrom(const CGCMsgGetIPASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASN::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASN::Swap(CGCMsgGetIPASN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPASN::InternalSwap(CGCMsgGetIPASN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ips_.InternalSwap(&other->ips_);
}

::google::protobuf::Metadata CGCMsgGetIPASN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CIPASNInfo::InitAsDefaultInstance() {
}
class CIPASNInfo::HasBitSetters {
 public:
  static void set_has_ip(CIPASNInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_asn(CIPASNInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPASNInfo::kIpFieldNumber;
const int CIPASNInfo::kAsnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPASNInfo::CIPASNInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CIPASNInfo)
}
CIPASNInfo::CIPASNInfo(const CIPASNInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&asn_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(asn_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CIPASNInfo)
}

void CIPASNInfo::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asn_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(asn_));
}

CIPASNInfo::~CIPASNInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CIPASNInfo)
  SharedDtor();
}

void CIPASNInfo::SharedDtor() {
}

void CIPASNInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIPASNInfo& CIPASNInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CIPASNInfo_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CIPASNInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CIPASNInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asn_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(asn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CIPASNInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CIPASNInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 asn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_asn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CIPASNInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CIPASNInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_asn(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CIPASNInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CIPASNInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CIPASNInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CIPASNInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional uint32 asn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->asn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CIPASNInfo)
}

::google::protobuf::uint8* CIPASNInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CIPASNInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional uint32 asn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->asn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CIPASNInfo)
  return target;
}

size_t CIPASNInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CIPASNInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 asn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIPASNInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CIPASNInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPASNInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CIPASNInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CIPASNInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CIPASNInfo)
    MergeFrom(*source);
  }
}

void CIPASNInfo::MergeFrom(const CIPASNInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CIPASNInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      asn_ = from.asn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CIPASNInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CIPASNInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPASNInfo::CopyFrom(const CIPASNInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CIPASNInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPASNInfo::IsInitialized() const {
  return true;
}

void CIPASNInfo::Swap(CIPASNInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPASNInfo::InternalSwap(CIPASNInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ip_, other->ip_);
  swap(asn_, other->asn_);
}

::google::protobuf::Metadata CIPASNInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetIPASNResponse::InitAsDefaultInstance() {
}
class CGCMsgGetIPASNResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPASNResponse::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPASNResponse)
}
CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse(const CGCMsgGetIPASNResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPASNResponse)
}

void CGCMsgGetIPASNResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgGetIPASNResponse_steammessages_2eproto.base);
}

CGCMsgGetIPASNResponse::~CGCMsgGetIPASNResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPASNResponse)
  SharedDtor();
}

void CGCMsgGetIPASNResponse::SharedDtor() {
}

void CGCMsgGetIPASNResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetIPASNResponse& CGCMsgGetIPASNResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetIPASNResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetIPASNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPASNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetIPASNResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetIPASNResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CIPASNInfo infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CIPASNInfo::_InternalParse;
          object = msg->add_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetIPASNResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPASNResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CIPASNInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPASNResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPASNResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetIPASNResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPASNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPASNInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPASNResponse)
}

::google::protobuf::uint8* CGCMsgGetIPASNResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPASNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPASNInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPASNResponse)
  return target;
}

size_t CGCMsgGetIPASNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPASNResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CIPASNInfo infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetIPASNResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPASNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPASNResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetIPASNResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPASNResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPASNResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPASNResponse::MergeFrom(const CGCMsgGetIPASNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPASNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CGCMsgGetIPASNResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPASNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPASNResponse::CopyFrom(const CGCMsgGetIPASNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPASNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASNResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASNResponse::Swap(CGCMsgGetIPASNResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPASNResponse::InternalSwap(CGCMsgGetIPASNResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
}

::google::protobuf::Metadata CGCMsgGetIPASNResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgSystemStatsSchema::InitAsDefaultInstance() {
}
class CGCMsgSystemStatsSchema::HasBitSetters {
 public:
  static void set_has_gc_app_id(CGCMsgSystemStatsSchema* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_schema_kv(CGCMsgSystemStatsSchema* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSystemStatsSchema::kGcAppIdFieldNumber;
const int CGCMsgSystemStatsSchema::kSchemaKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSystemStatsSchema)
}
CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_kv()) {
    schema_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_kv_);
  }
  gc_app_id_ = from.gc_app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSystemStatsSchema)
}

void CGCMsgSystemStatsSchema::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgSystemStatsSchema_steammessages_2eproto.base);
  schema_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_app_id_ = 0u;
}

CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSystemStatsSchema)
  SharedDtor();
}

void CGCMsgSystemStatsSchema::SharedDtor() {
  schema_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgSystemStatsSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgSystemStatsSchema& CGCMsgSystemStatsSchema::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgSystemStatsSchema_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgSystemStatsSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSystemStatsSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_kv_.ClearNonDefaultToEmptyNoArena();
  }
  gc_app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgSystemStatsSchema::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgSystemStatsSchema*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gc_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes schema_kv = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_schema_kv();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgSystemStatsSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSystemStatsSchema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gc_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSystemStatsSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSystemStatsSchema)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgSystemStatsSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSystemStatsSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->schema_kv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSystemStatsSchema)
}

::google::protobuf::uint8* CGCMsgSystemStatsSchema::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSystemStatsSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->schema_kv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSystemStatsSchema)
  return target;
}

size_t CGCMsgSystemStatsSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSystemStatsSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes schema_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgSystemStatsSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSystemStatsSchema* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgSystemStatsSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSystemStatsSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSystemStatsSchema)
    MergeFrom(*source);
  }
}

void CGCMsgSystemStatsSchema::MergeFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      schema_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgSystemStatsSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSystemStatsSchema::CopyFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSystemStatsSchema::IsInitialized() const {
  return true;
}

void CGCMsgSystemStatsSchema::Swap(CGCMsgSystemStatsSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSystemStatsSchema::InternalSwap(CGCMsgSystemStatsSchema* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  schema_kv_.Swap(&other->schema_kv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gc_app_id_, other->gc_app_id_);
}

::google::protobuf::Metadata CGCMsgSystemStatsSchema::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetSystemStats::InitAsDefaultInstance() {
}
class CGCMsgGetSystemStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetSystemStats::CGCMsgGetSystemStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetSystemStats)
}
CGCMsgGetSystemStats::CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetSystemStats)
}

void CGCMsgGetSystemStats::SharedCtor() {
}

CGCMsgGetSystemStats::~CGCMsgGetSystemStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetSystemStats)
  SharedDtor();
}

void CGCMsgGetSystemStats::SharedDtor() {
}

void CGCMsgGetSystemStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetSystemStats& CGCMsgGetSystemStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetSystemStats_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetSystemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetSystemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetSystemStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetSystemStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetSystemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetSystemStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetSystemStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetSystemStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetSystemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetSystemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetSystemStats)
}

::google::protobuf::uint8* CGCMsgGetSystemStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetSystemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetSystemStats)
  return target;
}

size_t CGCMsgGetSystemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetSystemStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetSystemStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetSystemStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetSystemStats* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetSystemStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetSystemStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetSystemStats)
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStats::MergeFrom(const CGCMsgGetSystemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetSystemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGCMsgGetSystemStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetSystemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStats::CopyFrom(const CGCMsgGetSystemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetSystemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStats::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStats::Swap(CGCMsgGetSystemStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetSystemStats::InternalSwap(CGCMsgGetSystemStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CGCMsgGetSystemStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGetSystemStatsResponse::InitAsDefaultInstance() {
}
class CGCMsgGetSystemStatsResponse::HasBitSetters {
 public:
  static void set_has_gc_app_id(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stats_kv(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_active_jobs(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_yielding_jobs(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_user_sessions(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_server_sessions(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_socaches(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_socaches_to_unload(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_socaches_loading(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_writeback_queue(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_steamid_locks(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_logon_queue(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_logon_jobs(CGCMsgGetSystemStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetSystemStatsResponse::kGcAppIdFieldNumber;
const int CGCMsgGetSystemStatsResponse::kStatsKvFieldNumber;
const int CGCMsgGetSystemStatsResponse::kActiveJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kYieldingJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kUserSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kGameServerSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesToUnloadFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesLoadingFieldNumber;
const int CGCMsgGetSystemStatsResponse::kWritebackQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSteamidLocksFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonJobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetSystemStatsResponse)
}
CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stats_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stats_kv()) {
    stats_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stats_kv_);
  }
  ::memcpy(&gc_app_id_, &from.gc_app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_jobs_) -
    reinterpret_cast<char*>(&gc_app_id_)) + sizeof(logon_jobs_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetSystemStatsResponse)
}

void CGCMsgGetSystemStatsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgGetSystemStatsResponse_steammessages_2eproto.base);
  stats_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gc_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logon_jobs_) -
      reinterpret_cast<char*>(&gc_app_id_)) + sizeof(logon_jobs_));
}

CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetSystemStatsResponse)
  SharedDtor();
}

void CGCMsgGetSystemStatsResponse::SharedDtor() {
  stats_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgGetSystemStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgGetSystemStatsResponse& CGCMsgGetSystemStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgGetSystemStatsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgGetSystemStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetSystemStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stats_kv_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&gc_app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socaches_to_unload_) -
        reinterpret_cast<char*>(&gc_app_id_)) + sizeof(socaches_to_unload_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&socaches_loading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_jobs_) -
        reinterpret_cast<char*>(&socaches_loading_)) + sizeof(logon_jobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgGetSystemStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgGetSystemStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gc_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes stats_kv = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_stats_kv();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 active_jobs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_active_jobs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 yielding_jobs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_yielding_jobs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 user_sessions = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_user_sessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_server_sessions = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_game_server_sessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 socaches = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_socaches(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 socaches_to_unload = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_socaches_to_unload(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 socaches_loading = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_socaches_loading(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 writeback_queue = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_writeback_queue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steamid_locks = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_steamid_locks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 logon_queue = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_logon_queue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 logon_jobs = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_logon_jobs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgGetSystemStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetSystemStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gc_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes stats_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_jobs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_active_jobs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 yielding_jobs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_yielding_jobs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yielding_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_sessions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_user_sessions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_game_server_sessions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_socaches(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches_to_unload = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_socaches_to_unload(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_to_unload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches_loading = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_socaches_loading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_loading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 writeback_queue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_writeback_queue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writeback_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamid_locks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_steamid_locks(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamid_locks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 logon_queue = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_logon_queue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 logon_jobs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_logon_jobs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetSystemStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetSystemStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgGetSystemStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetSystemStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stats_kv(), output);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_jobs(), output);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yielding_jobs(), output);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_sessions(), output);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_server_sessions(), output);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->socaches(), output);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->socaches_to_unload(), output);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->socaches_loading(), output);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->writeback_queue(), output);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->steamid_locks(), output);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->logon_queue(), output);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->logon_jobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetSystemStatsResponse)
}

::google::protobuf::uint8* CGCMsgGetSystemStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetSystemStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stats_kv(), target);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_jobs(), target);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yielding_jobs(), target);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_sessions(), target);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_server_sessions(), target);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->socaches(), target);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->socaches_to_unload(), target);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->socaches_loading(), target);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->writeback_queue(), target);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->steamid_locks(), target);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->logon_queue(), target);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->logon_jobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetSystemStatsResponse)
  return target;
}

size_t CGCMsgGetSystemStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetSystemStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes stats_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

    // optional uint32 active_jobs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_jobs());
    }

    // optional uint32 yielding_jobs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yielding_jobs());
    }

    // optional uint32 user_sessions = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 game_server_sessions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_sessions());
    }

    // optional uint32 socaches = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches());
    }

    // optional uint32 socaches_to_unload = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_to_unload());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 socaches_loading = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_loading());
    }

    // optional uint32 writeback_queue = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writeback_queue());
    }

    // optional uint32 steamid_locks = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamid_locks());
    }

    // optional uint32 logon_queue = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_queue());
    }

    // optional uint32 logon_jobs = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_jobs());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetSystemStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgGetSystemStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetSystemStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetSystemStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stats_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stats_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_jobs_ = from.active_jobs_;
    }
    if (cached_has_bits & 0x00000008u) {
      yielding_jobs_ = from.yielding_jobs_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_server_sessions_ = from.game_server_sessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      socaches_ = from.socaches_;
    }
    if (cached_has_bits & 0x00000080u) {
      socaches_to_unload_ = from.socaches_to_unload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      socaches_loading_ = from.socaches_loading_;
    }
    if (cached_has_bits & 0x00000200u) {
      writeback_queue_ = from.writeback_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_locks_ = from.steamid_locks_;
    }
    if (cached_has_bits & 0x00000800u) {
      logon_queue_ = from.logon_queue_;
    }
    if (cached_has_bits & 0x00001000u) {
      logon_jobs_ = from.logon_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStatsResponse::Swap(CGCMsgGetSystemStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetSystemStatsResponse::InternalSwap(CGCMsgGetSystemStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_kv_.Swap(&other->stats_kv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gc_app_id_, other->gc_app_id_);
  swap(active_jobs_, other->active_jobs_);
  swap(yielding_jobs_, other->yielding_jobs_);
  swap(user_sessions_, other->user_sessions_);
  swap(game_server_sessions_, other->game_server_sessions_);
  swap(socaches_, other->socaches_);
  swap(socaches_to_unload_, other->socaches_to_unload_);
  swap(socaches_loading_, other->socaches_loading_);
  swap(writeback_queue_, other->writeback_queue_);
  swap(steamid_locks_, other->steamid_locks_);
  swap(logon_queue_, other->logon_queue_);
  swap(logon_jobs_, other->logon_jobs_);
}

::google::protobuf::Metadata CGCMsgGetSystemStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMSendEmail_ReplacementToken::InitAsDefaultInstance() {
}
class CMsgAMSendEmail_ReplacementToken::HasBitSetters {
 public:
  static void set_has_token_name(CMsgAMSendEmail_ReplacementToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_token_value(CMsgAMSendEmail_ReplacementToken* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail_ReplacementToken::kTokenNameFieldNumber;
const int CMsgAMSendEmail_ReplacementToken::kTokenValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
}
CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_name()) {
    token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
  }
  token_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_value()) {
    token_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
}

void CMsgAMSendEmail_ReplacementToken::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto.base);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
  SharedDtor();
}

void CMsgAMSendEmail_ReplacementToken::SharedDtor() {
  token_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_ReplacementToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail_ReplacementToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMSendEmail_ReplacementToken_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMSendEmail_ReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMSendEmail_ReplacementToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMSendEmail_ReplacementToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string token_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
        object = msg->mutable_token_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string token_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
        object = msg->mutable_token_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMSendEmail_ReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_name().data(), static_cast<int>(this->token_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_value().data(), static_cast<int>(this->token_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMSendEmail_ReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), static_cast<int>(this->token_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token_name(), output);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_value().data(), static_cast<int>(this->token_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail.ReplacementToken)
}

::google::protobuf::uint8* CMsgAMSendEmail_ReplacementToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), static_cast<int>(this->token_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token_name(), target);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_value().data(), static_cast<int>(this->token_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_ReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

    // optional string token_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail_ReplacementToken* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMSendEmail_ReplacementToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail.ReplacementToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail.ReplacementToken)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      token_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_value_);
    }
  }
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_ReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_ReplacementToken::Swap(CMsgAMSendEmail_ReplacementToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail_ReplacementToken::InternalSwap(CMsgAMSendEmail_ReplacementToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_name_.Swap(&other->token_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_value_.Swap(&other->token_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgAMSendEmail_ReplacementToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMSendEmail_PersonaNameReplacementToken::InitAsDefaultInstance() {
}
class CMsgAMSendEmail_PersonaNameReplacementToken::HasBitSetters {
 public:
  static void set_has_steamid(CMsgAMSendEmail_PersonaNameReplacementToken* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_token_name(CMsgAMSendEmail_PersonaNameReplacementToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail_PersonaNameReplacementToken::kSteamidFieldNumber;
const int CMsgAMSendEmail_PersonaNameReplacementToken::kTokenNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}
CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_name()) {
    token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto.base);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  SharedDtor();
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedDtor() {
  token_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail_PersonaNameReplacementToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMSendEmail_PersonaNameReplacementToken_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMSendEmail_PersonaNameReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_name_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMSendEmail_PersonaNameReplacementToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMSendEmail_PersonaNameReplacementToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string token_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
        object = msg->mutable_token_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMSendEmail_PersonaNameReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_name().data(), static_cast<int>(this->token_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMSendEmail_PersonaNameReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), static_cast<int>(this->token_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}

::google::protobuf::uint8* CMsgAMSendEmail_PersonaNameReplacementToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), static_cast<int>(this->token_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_PersonaNameReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail_PersonaNameReplacementToken* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMSendEmail_PersonaNameReplacementToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Swap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail_PersonaNameReplacementToken::InternalSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_name_.Swap(&other->token_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMSendEmail::InitAsDefaultInstance() {
}
class CMsgAMSendEmail::HasBitSetters {
 public:
  static void set_has_steamid(CMsgAMSendEmail* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_email_msg_type(CMsgAMSendEmail* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_email_format(CMsgAMSendEmail* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_source_gc(CMsgAMSendEmail* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail::kSteamidFieldNumber;
const int CMsgAMSendEmail::kEmailMsgTypeFieldNumber;
const int CMsgAMSendEmail::kEmailFormatFieldNumber;
const int CMsgAMSendEmail::kPersonaNameTokensFieldNumber;
const int CMsgAMSendEmail::kSourceGcFieldNumber;
const int CMsgAMSendEmail::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail::CMsgAMSendEmail()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail)
}
CMsgAMSendEmail::CMsgAMSendEmail(const CMsgAMSendEmail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      persona_name_tokens_(from.persona_name_tokens_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail)
}

void CMsgAMSendEmail::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAMSendEmail_steammessages_2eproto.base);
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_gc_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
}

CMsgAMSendEmail::~CMsgAMSendEmail() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail)
  SharedDtor();
}

void CMsgAMSendEmail::SharedDtor() {
}

void CMsgAMSendEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMSendEmail& CMsgAMSendEmail::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMSendEmail_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMSendEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_name_tokens_.Clear();
  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_gc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMSendEmail::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMSendEmail*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_email_msg_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 email_format = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_email_format(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken::_InternalParse;
          object = msg->add_persona_name_tokens();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint32 source_gc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_source_gc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgAMSendEmail_ReplacementToken::_InternalParse;
          object = msg->add_tokens();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMSendEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_email_msg_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_email_format(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_persona_name_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_gc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_source_gc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_gc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMSendEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->email_format(), output);
  }

  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_name_tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->persona_name_tokens(static_cast<int>(i)),
      output);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_gc(), output);
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->tokens(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail)
}

::google::protobuf::uint8* CMsgAMSendEmail::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->email_format(), target);
  }

  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_name_tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->persona_name_tokens(static_cast<int>(i)), target);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_gc(), target);
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->tokens(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail)
  return target;
}

size_t CMsgAMSendEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->persona_name_tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->persona_name_tokens(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional uint32 email_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_format());
    }

    // optional uint32 source_gc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_gc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMSendEmail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMSendEmail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail::MergeFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persona_name_tokens_.MergeFrom(from.persona_name_tokens_);
  tokens_.MergeFrom(from.tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_format_ = from.email_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_gc_ = from.source_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMSendEmail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail::CopyFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail::Swap(CMsgAMSendEmail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail::InternalSwap(CMsgAMSendEmail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&persona_name_tokens_)->InternalSwap(CastToBase(&other->persona_name_tokens_));
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
  swap(steamid_, other->steamid_);
  swap(email_msg_type_, other->email_msg_type_);
  swap(email_format_, other->email_format_);
  swap(source_gc_, other->source_gc_);
}

::google::protobuf::Metadata CMsgAMSendEmail::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMSendEmailResponse::InitAsDefaultInstance() {
}
class CMsgAMSendEmailResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgAMSendEmailResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmailResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmailResponse)
}
CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmailResponse)
}

void CMsgAMSendEmailResponse::SharedCtor() {
  eresult_ = 2u;
}

CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmailResponse)
  SharedDtor();
}

void CMsgAMSendEmailResponse::SharedDtor() {
}

void CMsgAMSendEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMSendEmailResponse& CMsgAMSendEmailResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMSendEmailResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMSendEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMSendEmailResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMSendEmailResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMSendEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmailResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmailResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMSendEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmailResponse)
}

::google::protobuf::uint8* CMsgAMSendEmailResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmailResponse)
  return target;
}

size_t CMsgAMSendEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMSendEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmailResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMSendEmailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmailResponse)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmailResponse::MergeFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgAMSendEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmailResponse::CopyFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmailResponse::IsInitialized() const {
  return true;
}

void CMsgAMSendEmailResponse::Swap(CMsgAMSendEmailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmailResponse::InternalSwap(CMsgAMSendEmailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgAMSendEmailResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetEmailTemplate::InitAsDefaultInstance() {
}
class CMsgGCGetEmailTemplate::HasBitSetters {
 public:
  static void set_has_app_id(CMsgGCGetEmailTemplate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_email_msg_type(CMsgGCGetEmailTemplate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_email_lang(CMsgGCGetEmailTemplate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_email_format(CMsgGCGetEmailTemplate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetEmailTemplate::kAppIdFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailMsgTypeFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailLangFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetEmailTemplate)
}
CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&email_format_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetEmailTemplate)
}

void CMsgGCGetEmailTemplate::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&email_format_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
}

CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetEmailTemplate)
  SharedDtor();
}

void CMsgGCGetEmailTemplate::SharedDtor() {
}

void CMsgGCGetEmailTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetEmailTemplate& CMsgGCGetEmailTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetEmailTemplate_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetEmailTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetEmailTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&email_format_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetEmailTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetEmailTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_email_msg_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 email_lang = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_email_lang(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 email_format = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_email_format(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetEmailTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetEmailTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_email_msg_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 email_lang = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_email_lang(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_lang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 email_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_email_format(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetEmailTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetEmailTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetEmailTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetEmailTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->email_lang(), output);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->email_format(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetEmailTemplate)
}

::google::protobuf::uint8* CMsgGCGetEmailTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetEmailTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->email_lang(), target);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->email_format(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetEmailTemplate)
  return target;
}

size_t CMsgGCGetEmailTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetEmailTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional int32 email_lang = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_lang());
    }

    // optional int32 email_format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetEmailTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetEmailTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetEmailTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetEmailTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetEmailTemplate)
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplate::MergeFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_lang_ = from.email_lang_;
    }
    if (cached_has_bits & 0x00000008u) {
      email_format_ = from.email_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetEmailTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplate::CopyFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplate::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplate::Swap(CMsgGCGetEmailTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetEmailTemplate::InternalSwap(CMsgGCGetEmailTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
  swap(email_msg_type_, other->email_msg_type_);
  swap(email_lang_, other->email_lang_);
  swap(email_format_, other->email_format_);
}

::google::protobuf::Metadata CMsgGCGetEmailTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetEmailTemplateResponse::InitAsDefaultInstance() {
}
class CMsgGCGetEmailTemplateResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgGCGetEmailTemplateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_template_exists(CMsgGCGetEmailTemplateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_template_(CMsgGCGetEmailTemplateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetEmailTemplateResponse::kEresultFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateExistsFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetEmailTemplateResponse)
}
CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_template_()) {
    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  ::memcpy(&template_exists_, &from.template_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&template_exists_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetEmailTemplateResponse)
}

void CMsgGCGetEmailTemplateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetEmailTemplateResponse_steammessages_2eproto.base);
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_exists_ = false;
  eresult_ = 2u;
}

CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetEmailTemplateResponse)
  SharedDtor();
}

void CMsgGCGetEmailTemplateResponse::SharedDtor() {
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetEmailTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetEmailTemplateResponse& CMsgGCGetEmailTemplateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetEmailTemplateResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetEmailTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    template__.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    template_exists_ = false;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetEmailTemplateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetEmailTemplateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool template_exists = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_template_exists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string template = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCGetEmailTemplateResponse.template");
        object = msg->mutable_template_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetEmailTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool template_exists = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_template_exists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &template_exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_().data(), static_cast<int>(this->template_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetEmailTemplateResponse.template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetEmailTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetEmailTemplateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetEmailTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->template_exists(), output);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), static_cast<int>(this->template_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetEmailTemplateResponse.template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetEmailTemplateResponse)
}

::google::protobuf::uint8* CMsgGCGetEmailTemplateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->template_exists(), target);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), static_cast<int>(this->template_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetEmailTemplateResponse.template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetEmailTemplateResponse)
  return target;
}

size_t CMsgGCGetEmailTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string template = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_());
    }

    // optional bool template_exists = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetEmailTemplateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetEmailTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetEmailTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetEmailTemplateResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
    }
    if (cached_has_bits & 0x00000002u) {
      template_exists_ = from.template_exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplateResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplateResponse::Swap(CMsgGCGetEmailTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetEmailTemplateResponse::InternalSwap(CMsgGCGetEmailTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  template__.Swap(&other->template__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(template_exists_, other->template_exists_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgGCGetEmailTemplateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGrantGuestPasses2::InitAsDefaultInstance() {
}
class CMsgAMGrantGuestPasses2::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgAMGrantGuestPasses2* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_package_id(CMsgAMGrantGuestPasses2* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_passes_to_grant(CMsgAMGrantGuestPasses2* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_days_to_expiration(CMsgAMGrantGuestPasses2* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_action(CMsgAMGrantGuestPasses2* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGrantGuestPasses2::kSteamIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPackageIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPassesToGrantFieldNumber;
const int CMsgAMGrantGuestPasses2::kDaysToExpirationFieldNumber;
const int CMsgAMGrantGuestPasses2::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGrantGuestPasses2)
}
CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGrantGuestPasses2)
}

void CMsgAMGrantGuestPasses2::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
}

CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGrantGuestPasses2)
  SharedDtor();
}

void CMsgAMGrantGuestPasses2::SharedDtor() {
}

void CMsgAMGrantGuestPasses2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGrantGuestPasses2& CMsgAMGrantGuestPasses2::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGrantGuestPasses2_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGrantGuestPasses2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGrantGuestPasses2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGrantGuestPasses2::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGrantGuestPasses2*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 package_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_package_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 passes_to_grant = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_passes_to_grant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 days_to_expiration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_days_to_expiration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 action = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_action(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGrantGuestPasses2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGrantGuestPasses2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_package_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passes_to_grant = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_passes_to_grant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_to_grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 days_to_expiration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_days_to_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_to_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 action = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGrantGuestPasses2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGrantGuestPasses2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGrantGuestPasses2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGrantGuestPasses2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passes_to_grant(), output);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->days_to_expiration(), output);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGrantGuestPasses2)
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGrantGuestPasses2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->package_id(), target);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passes_to_grant(), target);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->days_to_expiration(), target);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGrantGuestPasses2)
  return target;
}

size_t CMsgAMGrantGuestPasses2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGrantGuestPasses2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 package_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional int32 passes_to_grant = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_to_grant());
    }

    // optional int32 days_to_expiration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_to_expiration());
    }

    // optional int32 action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGrantGuestPasses2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGrantGuestPasses2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGrantGuestPasses2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGrantGuestPasses2)
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2::MergeFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      passes_to_grant_ = from.passes_to_grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      days_to_expiration_ = from.days_to_expiration_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGrantGuestPasses2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2::CopyFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2::Swap(CMsgAMGrantGuestPasses2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGrantGuestPasses2::InternalSwap(CMsgAMGrantGuestPasses2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(package_id_, other->package_id_);
  swap(passes_to_grant_, other->passes_to_grant_);
  swap(days_to_expiration_, other->days_to_expiration_);
  swap(action_, other->action_);
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAMGrantGuestPasses2Response::InitAsDefaultInstance() {
}
class CMsgAMGrantGuestPasses2Response::HasBitSetters {
 public:
  static void set_has_eresult(CMsgAMGrantGuestPasses2Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_passes_granted(CMsgAMGrantGuestPasses2Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGrantGuestPasses2Response::kEresultFieldNumber;
const int CMsgAMGrantGuestPasses2Response::kPassesGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGrantGuestPasses2Response)
}
CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&passes_granted_, &from.passes_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&passes_granted_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGrantGuestPasses2Response)
}

void CMsgAMGrantGuestPasses2Response::SharedCtor() {
  passes_granted_ = 0;
  eresult_ = 2;
}

CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGrantGuestPasses2Response)
  SharedDtor();
}

void CMsgAMGrantGuestPasses2Response::SharedDtor() {
}

void CMsgAMGrantGuestPasses2Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAMGrantGuestPasses2Response& CMsgAMGrantGuestPasses2Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAMGrantGuestPasses2Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAMGrantGuestPasses2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    passes_granted_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAMGrantGuestPasses2Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAMGrantGuestPasses2Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 passes_granted = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_passes_granted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAMGrantGuestPasses2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passes_granted = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_passes_granted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGrantGuestPasses2Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGrantGuestPasses2Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAMGrantGuestPasses2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passes_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGrantGuestPasses2Response)
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passes_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGrantGuestPasses2Response)
  return target;
}

size_t CMsgAMGrantGuestPasses2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 passes_granted = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_granted());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAMGrantGuestPasses2Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGrantGuestPasses2Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGrantGuestPasses2Response)
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      passes_granted_ = from.passes_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2Response::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2Response::Swap(CMsgAMGrantGuestPasses2Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGrantGuestPasses2Response::InternalSwap(CMsgAMGrantGuestPasses2Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(passes_granted_, other->passes_granted_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCSystemMsg_GetAccountDetails::InitAsDefaultInstance() {
}
class CGCSystemMsg_GetAccountDetails::HasBitSetters {
 public:
  static void set_has_steamid(CGCSystemMsg_GetAccountDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CGCSystemMsg_GetAccountDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetAccountDetails::kSteamidFieldNumber;
const int CGCSystemMsg_GetAccountDetails::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetAccountDetails)
}
CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetAccountDetails)
}

void CGCSystemMsg_GetAccountDetails::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetAccountDetails)
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails::SharedDtor() {
}

void CGCSystemMsg_GetAccountDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCSystemMsg_GetAccountDetails& CGCSystemMsg_GetAccountDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCSystemMsg_GetAccountDetails_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCSystemMsg_GetAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCSystemMsg_GetAccountDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCSystemMsg_GetAccountDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCSystemMsg_GetAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetAccountDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetAccountDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCSystemMsg_GetAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetAccountDetails)
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetAccountDetails)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CGCSystemMsg_GetAccountDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetAccountDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetAccountDetails)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails::Swap(CGCSystemMsg_GetAccountDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetAccountDetails::InternalSwap(CGCSystemMsg_GetAccountDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCSystemMsg_GetAccountDetails_Response::InitAsDefaultInstance() {
}
class CGCSystemMsg_GetAccountDetails_Response::HasBitSetters {
 public:
  static void set_has_eresult_deprecated(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_account_name(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_persona_name(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_profile_created(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_is_profile_public(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_inventory_public(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_is_vac_banned(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_is_cyber_cafe(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_school_account(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_is_limited(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_is_subscribed(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_package(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_is_free_trial_account(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_free_trial_expiration(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_is_low_violence(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_is_account_locked_down(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_is_community_banned(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_is_trade_banned(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_trade_ban_expiration(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_accountid(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_suspension_end_time(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_currency(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_level(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_friend_count(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_account_creation_time(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_is_steamguard_enabled(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_is_phone_verified(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_is_two_factor_auth_enabled(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_two_factor_enabled_time(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_phone_verification_time(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_phone_id(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_is_phone_identifying(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_rt_identity_linked(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_rt_birth_date(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_txn_country_code(CGCSystemMsg_GetAccountDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetAccountDetails_Response::kEresultDeprecatedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPersonaNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsProfileCreatedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsProfilePublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsInventoryPublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsVacBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCyberCafeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSchoolAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLimitedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSubscribedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPackageFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsFreeTrialAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kFreeTrialExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLowViolenceFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsAccountLockedDownFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCommunityBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTradeBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTradeBanExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountidFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kSuspensionEndTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kCurrencyFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kSteamLevelFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kFriendCountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountCreationTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSteamguardEnabledFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsPhoneVerifiedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTwoFactorAuthEnabledFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTwoFactorEnabledTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPhoneVerificationTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPhoneIdFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsPhoneIdentifyingFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kRtIdentityLinkedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kRtBirthDateFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTxnCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}
CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  txn_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_country_code()) {
    txn_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_country_code_);
  }
  ::memcpy(&is_cyber_cafe_, &from.is_cyber_cafe_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_deprecated_) -
    reinterpret_cast<char*>(&is_cyber_cafe_)) + sizeof(eresult_deprecated_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}

void CGCSystemMsg_GetAccountDetails_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto.base);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_cyber_cafe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rt_birth_date_) -
      reinterpret_cast<char*>(&is_cyber_cafe_)) + sizeof(rt_birth_date_));
  eresult_deprecated_ = 2u;
}

CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCSystemMsg_GetAccountDetails_Response& CGCSystemMsg_GetAccountDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCSystemMsg_GetAccountDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      currency_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      txn_country_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&is_cyber_cafe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_subscribed_) -
        reinterpret_cast<char*>(&is_cyber_cafe_)) + sizeof(is_subscribed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_profile_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_low_violence_) -
        reinterpret_cast<char*>(&is_profile_created_)) + sizeof(is_low_violence_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_account_locked_down_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_creation_time_) -
        reinterpret_cast<char*>(&is_account_locked_down_)) + sizeof(account_creation_time_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&is_trade_banned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_phone_identifying_) -
        reinterpret_cast<char*>(&is_trade_banned_)) + sizeof(is_phone_identifying_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rt_identity_linked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_birth_date_) -
        reinterpret_cast<char*>(&rt_identity_linked_)) + sizeof(rt_birth_date_));
    eresult_deprecated_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCSystemMsg_GetAccountDetails_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCSystemMsg_GetAccountDetails_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult_deprecated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string account_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string persona_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_profile_public = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_profile_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_inventory_public = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_inventory_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_vac_banned = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_vac_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_cyber_cafe = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is_cyber_cafe(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_school_account = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_is_school_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_limited = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_limited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_subscribed = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_is_subscribed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 package = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_package(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_free_trial_account = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_is_free_trial_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 free_trial_expiration = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_free_trial_expiration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_low_violence = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_is_low_violence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_account_locked_down = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_is_account_locked_down(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_community_banned = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_is_community_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_trade_banned = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_is_trade_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 trade_ban_expiration = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_trade_ban_expiration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 accountid = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 suspension_end_time = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_suspension_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string currency = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
        object = msg->mutable_currency();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 steam_level = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_steam_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 friend_count = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_friend_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_creation_time = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_account_creation_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_profile_created = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_is_profile_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_steamguard_enabled = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_is_steamguard_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_phone_verified = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_is_phone_verified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_two_factor_auth_enabled = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_is_two_factor_auth_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 two_factor_enabled_time = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_two_factor_enabled_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 phone_verification_time = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_phone_verification_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 phone_id = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_phone_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_phone_identifying = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_phone_identifying(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rt_identity_linked = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rt_identity_linked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rt_birth_date = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rt_birth_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string txn_country_code = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
        object = msg->mutable_txn_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCSystemMsg_GetAccountDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult_deprecated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_profile_public = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_profile_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_profile_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inventory_public = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_inventory_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inventory_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vac_banned = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_vac_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vac_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_cyber_cafe = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is_cyber_cafe(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cyber_cafe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_school_account = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_is_school_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_school_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_limited = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_limited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_subscribed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_is_subscribed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subscribed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 package = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_package(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_free_trial_account = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_is_free_trial_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_free_trial_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 free_trial_expiration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_free_trial_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_trial_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_low_violence = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_is_low_violence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_violence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_account_locked_down = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_is_account_locked_down(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_account_locked_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_community_banned = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_is_community_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_community_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trade_banned = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_is_trade_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trade_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trade_ban_expiration = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_trade_ban_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suspension_end_time = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_suspension_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspension_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), static_cast<int>(this->currency().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_level = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_steam_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friend_count = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_friend_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_creation_time = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_account_creation_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_profile_created = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_is_profile_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_profile_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steamguard_enabled = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_is_steamguard_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_verified = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_is_phone_verified(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_two_factor_auth_enabled = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_is_two_factor_auth_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_two_factor_auth_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 two_factor_enabled_time = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_two_factor_enabled_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &two_factor_enabled_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phone_verification_time = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_phone_verification_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phone_verification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 phone_id = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_phone_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_identifying = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_is_phone_identifying(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_identifying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rt_identity_linked = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_rt_identity_linked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rt_identity_linked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rt_birth_date = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_rt_birth_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rt_birth_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string txn_country_code = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCSystemMsg_GetAccountDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult_deprecated(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_name(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_profile_public(), output);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_inventory_public(), output);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vac_banned(), output);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_cyber_cafe(), output);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_school_account(), output);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_limited(), output);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_subscribed(), output);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->package(), output);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_free_trial_account(), output);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->free_trial_expiration(), output);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_low_violence(), output);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_account_locked_down(), output);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_community_banned(), output);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_trade_banned(), output);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->trade_ban_expiration(), output);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->accountid(), output);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->suspension_end_time(), output);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->currency(), output);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->steam_level(), output);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->friend_count(), output);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->account_creation_time(), output);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_profile_created(), output);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_steamguard_enabled(), output);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_phone_verified(), output);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_two_factor_auth_enabled(), output);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->two_factor_enabled_time(), output);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->phone_verification_time(), output);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->phone_id(), output);
  }

  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_phone_identifying(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rt_identity_linked = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->rt_identity_linked(), output);
  }

  // optional uint32 rt_birth_date = 36;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->rt_birth_date(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string txn_country_code = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->txn_country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult_deprecated(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_inventory_public(), target);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->accountid(), target);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->suspension_end_time(), target);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->currency(), target);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->steam_level(), target);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->friend_count(), target);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->account_creation_time(), target);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_profile_created(), target);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_steamguard_enabled(), target);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_phone_verified(), target);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_two_factor_auth_enabled(), target);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->two_factor_enabled_time(), target);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->phone_verification_time(), target);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->phone_id(), target);
  }

  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_phone_identifying(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rt_identity_linked = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->rt_identity_linked(), target);
  }

  // optional uint32 rt_birth_date = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->rt_birth_date(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string txn_country_code = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->txn_country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string currency = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string txn_country_code = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txn_country_code());
    }

    // optional bool is_cyber_cafe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_school_account = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_profile_created = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_profile_public = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_inventory_public = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_vac_banned = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package());
    }

    // optional uint32 free_trial_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_trial_expiration());
    }

    // optional bool is_free_trial_account = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_low_violence = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_account_locked_down = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_community_banned = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 suspension_end_time = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspension_end_time());
    }

    // optional uint32 steam_level = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_level());
    }

    // optional uint32 friend_count = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_count());
    }

    // optional uint32 account_creation_time = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_creation_time());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_trade_banned = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steamguard_enabled = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_verified = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_two_factor_auth_enabled = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_enabled_time = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->two_factor_enabled_time());
    }

    // optional uint32 phone_verification_time = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phone_verification_time());
    }

    // optional uint64 phone_id = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_id());
    }

    // optional bool is_phone_identifying = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 rt_identity_linked = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rt_identity_linked());
    }

    // optional uint32 rt_birth_date = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rt_birth_date());
    }

    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult_deprecated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CGCSystemMsg_GetAccountDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      txn_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_country_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      is_cyber_cafe_ = from.is_cyber_cafe_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_school_account_ = from.is_school_account_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_subscribed_ = from.is_subscribed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_profile_created_ = from.is_profile_created_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_profile_public_ = from.is_profile_public_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_inventory_public_ = from.is_inventory_public_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_vac_banned_ = from.is_vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      package_ = from.package_;
    }
    if (cached_has_bits & 0x00002000u) {
      free_trial_expiration_ = from.free_trial_expiration_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_free_trial_account_ = from.is_free_trial_account_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_low_violence_ = from.is_low_violence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_account_locked_down_ = from.is_account_locked_down_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_community_banned_ = from.is_community_banned_;
    }
    if (cached_has_bits & 0x00040000u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00080000u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00100000u) {
      suspension_end_time_ = from.suspension_end_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      steam_level_ = from.steam_level_;
    }
    if (cached_has_bits & 0x00400000u) {
      friend_count_ = from.friend_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      account_creation_time_ = from.account_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      is_trade_banned_ = from.is_trade_banned_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_steamguard_enabled_ = from.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_two_factor_auth_enabled_ = from.is_two_factor_auth_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      two_factor_enabled_time_ = from.two_factor_enabled_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      phone_verification_time_ = from.phone_verification_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      phone_id_ = from.phone_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rt_identity_linked_ = from.rt_identity_linked_;
    }
    if (cached_has_bits & 0x00000002u) {
      rt_birth_date_ = from.rt_birth_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_deprecated_ = from.eresult_deprecated_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails_Response::Swap(CGCSystemMsg_GetAccountDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetAccountDetails_Response::InternalSwap(CGCSystemMsg_GetAccountDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_.Swap(&other->currency_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txn_country_code_.Swap(&other->txn_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_cyber_cafe_, other->is_cyber_cafe_);
  swap(is_school_account_, other->is_school_account_);
  swap(is_limited_, other->is_limited_);
  swap(is_subscribed_, other->is_subscribed_);
  swap(is_profile_created_, other->is_profile_created_);
  swap(is_profile_public_, other->is_profile_public_);
  swap(is_inventory_public_, other->is_inventory_public_);
  swap(is_vac_banned_, other->is_vac_banned_);
  swap(package_, other->package_);
  swap(free_trial_expiration_, other->free_trial_expiration_);
  swap(is_free_trial_account_, other->is_free_trial_account_);
  swap(is_low_violence_, other->is_low_violence_);
  swap(is_account_locked_down_, other->is_account_locked_down_);
  swap(is_community_banned_, other->is_community_banned_);
  swap(trade_ban_expiration_, other->trade_ban_expiration_);
  swap(accountid_, other->accountid_);
  swap(suspension_end_time_, other->suspension_end_time_);
  swap(steam_level_, other->steam_level_);
  swap(friend_count_, other->friend_count_);
  swap(account_creation_time_, other->account_creation_time_);
  swap(is_trade_banned_, other->is_trade_banned_);
  swap(is_steamguard_enabled_, other->is_steamguard_enabled_);
  swap(is_phone_verified_, other->is_phone_verified_);
  swap(is_two_factor_auth_enabled_, other->is_two_factor_auth_enabled_);
  swap(two_factor_enabled_time_, other->two_factor_enabled_time_);
  swap(phone_verification_time_, other->phone_verification_time_);
  swap(phone_id_, other->phone_id_);
  swap(is_phone_identifying_, other->is_phone_identifying_);
  swap(rt_identity_linked_, other->rt_identity_linked_);
  swap(rt_birth_date_, other->rt_birth_date_);
  swap(eresult_deprecated_, other->eresult_deprecated_);
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPersonaNames::InitAsDefaultInstance() {
}
class CMsgGCGetPersonaNames::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames)
}
CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames)
}

void CMsgGCGetPersonaNames::SharedCtor() {
}

CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames)
  SharedDtor();
}

void CMsgGCGetPersonaNames::SharedDtor() {
}

void CMsgGCGetPersonaNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPersonaNames& CMsgGCGetPersonaNames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPersonaNames_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPersonaNames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPersonaNames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPersonaNames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 steamids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPersonaNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPersonaNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames)
  return target;
}

size_t CMsgGCGetPersonaNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPersonaNames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPersonaNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames::MergeFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
}

void CMsgGCGetPersonaNames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames::CopyFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames::Swap(CMsgGCGetPersonaNames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames::InternalSwap(CMsgGCGetPersonaNames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPersonaNames_Response_PersonaName::InitAsDefaultInstance() {
}
class CMsgGCGetPersonaNames_Response_PersonaName::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCGetPersonaNames_Response_PersonaName* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgGCGetPersonaNames_Response_PersonaName* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames_Response_PersonaName::kSteamidFieldNumber;
const int CMsgGCGetPersonaNames_Response_PersonaName::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}
CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response_PersonaName::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPersonaNames_Response_PersonaName_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPersonaNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPersonaNames_Response_PersonaName::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPersonaNames_Response_PersonaName*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPersonaNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPersonaNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response_PersonaName::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return target;
}

size_t CMsgGCGetPersonaNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response_PersonaName* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPersonaNames_Response_PersonaName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response_PersonaName::Swap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames_Response_PersonaName::InternalSwap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPersonaNames_Response::InitAsDefaultInstance() {
}
class CMsgGCGetPersonaNames_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames_Response::kSucceededLookupsFieldNumber;
const int CMsgGCGetPersonaNames_Response::kFailedLookupSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames_Response)
}
CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      succeeded_lookups_(from.succeeded_lookups_),
      failed_lookup_steamids_(from.failed_lookup_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames_Response)
}

void CMsgGCGetPersonaNames_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCGetPersonaNames_Response_steammessages_2eproto.base);
}

CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames_Response)
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response::SharedDtor() {
}

void CMsgGCGetPersonaNames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPersonaNames_Response& CMsgGCGetPersonaNames_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPersonaNames_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPersonaNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succeeded_lookups_.Clear();
  failed_lookup_steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPersonaNames_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPersonaNames_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName::_InternalParse;
          object = msg->add_succeeded_lookups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated fixed64 failed_lookup_steamids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_failed_lookup_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_failed_lookup_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPersonaNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_succeeded_lookups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 failed_lookup_steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_failed_lookup_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_lookup_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPersonaNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->succeeded_lookups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->succeeded_lookups(static_cast<int>(i)),
      output);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0, n = this->failed_lookup_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->failed_lookup_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames_Response)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->succeeded_lookups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->succeeded_lookups(static_cast<int>(i)), target);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->failed_lookup_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames_Response)
  return target;
}

size_t CMsgGCGetPersonaNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->succeeded_lookups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->succeeded_lookups(static_cast<int>(i)));
    }
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->failed_lookup_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failed_lookup_steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPersonaNames_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succeeded_lookups_.MergeFrom(from.succeeded_lookups_);
  failed_lookup_steamids_.MergeFrom(from.failed_lookup_steamids_);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response::Swap(CMsgGCGetPersonaNames_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames_Response::InternalSwap(CMsgGCGetPersonaNames_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&succeeded_lookups_)->InternalSwap(CastToBase(&other->succeeded_lookups_));
  failed_lookup_steamids_.InternalSwap(&other->failed_lookup_steamids_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCheckFriendship::InitAsDefaultInstance() {
}
class CMsgGCCheckFriendship::HasBitSetters {
 public:
  static void set_has_steamid_left(CMsgGCCheckFriendship* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steamid_right(CMsgGCCheckFriendship* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckFriendship::kSteamidLeftFieldNumber;
const int CMsgGCCheckFriendship::kSteamidRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckFriendship::CMsgGCCheckFriendship()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckFriendship)
}
CMsgGCCheckFriendship::CMsgGCCheckFriendship(const CMsgGCCheckFriendship& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_left_, &from.steamid_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_right_) -
    reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckFriendship)
}

void CMsgGCCheckFriendship::SharedCtor() {
  ::memset(&steamid_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_right_) -
      reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
}

CMsgGCCheckFriendship::~CMsgGCCheckFriendship() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckFriendship)
  SharedDtor();
}

void CMsgGCCheckFriendship::SharedDtor() {
}

void CMsgGCCheckFriendship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCheckFriendship& CMsgGCCheckFriendship::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCCheckFriendship_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCheckFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckFriendship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_right_) -
        reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCCheckFriendship::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCCheckFriendship*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_left(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steamid_right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid_right(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCCheckFriendship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckFriendship)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid_right(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckFriendship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckFriendship)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCCheckFriendship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckFriendship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_left(), output);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckFriendship)
}

::google::protobuf::uint8* CMsgGCCheckFriendship::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckFriendship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_left(), target);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckFriendship)
  return target;
}

size_t CMsgGCCheckFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckFriendship)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_right = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCheckFriendship::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckFriendship* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCCheckFriendship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckFriendship)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckFriendship)
    MergeFrom(*source);
  }
}

void CMsgGCCheckFriendship::MergeFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_left_ = from.steamid_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_right_ = from.steamid_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCheckFriendship::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckFriendship::CopyFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship::Swap(CMsgGCCheckFriendship* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckFriendship::InternalSwap(CMsgGCCheckFriendship* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_left_, other->steamid_left_);
  swap(steamid_right_, other->steamid_right_);
}

::google::protobuf::Metadata CMsgGCCheckFriendship::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCheckFriendship_Response::InitAsDefaultInstance() {
}
class CMsgGCCheckFriendship_Response::HasBitSetters {
 public:
  static void set_has_success(CMsgGCCheckFriendship_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_found_friendship(CMsgGCCheckFriendship_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckFriendship_Response::kSuccessFieldNumber;
const int CMsgGCCheckFriendship_Response::kFoundFriendshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckFriendship_Response)
}
CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(const CMsgGCCheckFriendship_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_friendship_) -
    reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckFriendship_Response)
}

void CMsgGCCheckFriendship_Response::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_friendship_) -
      reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
}

CMsgGCCheckFriendship_Response::~CMsgGCCheckFriendship_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckFriendship_Response)
  SharedDtor();
}

void CMsgGCCheckFriendship_Response::SharedDtor() {
}

void CMsgGCCheckFriendship_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCheckFriendship_Response& CMsgGCCheckFriendship_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCCheckFriendship_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCheckFriendship_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckFriendship_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_friendship_) -
      reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCCheckFriendship_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCCheckFriendship_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool found_friendship = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_found_friendship(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCCheckFriendship_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckFriendship_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool found_friendship = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_found_friendship(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_friendship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckFriendship_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckFriendship_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCCheckFriendship_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckFriendship_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->found_friendship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckFriendship_Response)
}

::google::protobuf::uint8* CMsgGCCheckFriendship_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckFriendship_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->found_friendship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckFriendship_Response)
  return target;
}

size_t CMsgGCCheckFriendship_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckFriendship_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool found_friendship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCheckFriendship_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckFriendship_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCCheckFriendship_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckFriendship_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckFriendship_Response)
    MergeFrom(*source);
  }
}

void CMsgGCCheckFriendship_Response::MergeFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      found_friendship_ = from.found_friendship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCheckFriendship_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckFriendship_Response::CopyFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship_Response::Swap(CMsgGCCheckFriendship_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckFriendship_Response::InternalSwap(CMsgGCCheckFriendship_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
  swap(found_friendship_, other->found_friendship_);
}

::google::protobuf::Metadata CMsgGCCheckFriendship_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetAppFriendsList::InitAsDefaultInstance() {
}
class CMsgGCGetAppFriendsList::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCGetAppFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_include_friendship_timestamps(CMsgGCGetAppFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetAppFriendsList::kSteamidFieldNumber;
const int CMsgGCGetAppFriendsList::kIncludeFriendshipTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetAppFriendsList)
}
CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList(const CMsgGCGetAppFriendsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_friendship_timestamps_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_friendship_timestamps_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetAppFriendsList)
}

void CMsgGCGetAppFriendsList::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_friendship_timestamps_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(include_friendship_timestamps_));
}

CMsgGCGetAppFriendsList::~CMsgGCGetAppFriendsList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetAppFriendsList)
  SharedDtor();
}

void CMsgGCGetAppFriendsList::SharedDtor() {
}

void CMsgGCGetAppFriendsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetAppFriendsList& CMsgGCGetAppFriendsList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetAppFriendsList_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetAppFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetAppFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_friendship_timestamps_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_friendship_timestamps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetAppFriendsList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetAppFriendsList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool include_friendship_timestamps = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_include_friendship_timestamps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetAppFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetAppFriendsList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_friendship_timestamps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_include_friendship_timestamps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_friendship_timestamps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetAppFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetAppFriendsList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetAppFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetAppFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_friendship_timestamps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_friendship_timestamps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetAppFriendsList)
}

::google::protobuf::uint8* CMsgGCGetAppFriendsList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetAppFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_friendship_timestamps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_friendship_timestamps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetAppFriendsList)
  return target;
}

size_t CMsgGCGetAppFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetAppFriendsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_friendship_timestamps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetAppFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetAppFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAppFriendsList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetAppFriendsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetAppFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetAppFriendsList)
    MergeFrom(*source);
  }
}

void CMsgGCGetAppFriendsList::MergeFrom(const CMsgGCGetAppFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetAppFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_friendship_timestamps_ = from.include_friendship_timestamps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetAppFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetAppFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAppFriendsList::CopyFrom(const CMsgGCGetAppFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetAppFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList::Swap(CMsgGCGetAppFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetAppFriendsList::InternalSwap(CMsgGCGetAppFriendsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(include_friendship_timestamps_, other->include_friendship_timestamps_);
}

::google::protobuf::Metadata CMsgGCGetAppFriendsList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetAppFriendsList_Response::InitAsDefaultInstance() {
}
class CMsgGCGetAppFriendsList_Response::HasBitSetters {
 public:
  static void set_has_success(CMsgGCGetAppFriendsList_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetAppFriendsList_Response::kSuccessFieldNumber;
const int CMsgGCGetAppFriendsList_Response::kSteamidsFieldNumber;
const int CMsgGCGetAppFriendsList_Response::kFriendshipTimestampsFieldNumber;
const int CMsgGCGetAppFriendsList_Response::kLastPlaytimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetAppFriendsList_Response)
}
CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response(const CMsgGCGetAppFriendsList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_),
      friendship_timestamps_(from.friendship_timestamps_),
      last_playtimes_(from.last_playtimes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetAppFriendsList_Response)
}

void CMsgGCGetAppFriendsList_Response::SharedCtor() {
  success_ = false;
}

CMsgGCGetAppFriendsList_Response::~CMsgGCGetAppFriendsList_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetAppFriendsList_Response)
  SharedDtor();
}

void CMsgGCGetAppFriendsList_Response::SharedDtor() {
}

void CMsgGCGetAppFriendsList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetAppFriendsList_Response& CMsgGCGetAppFriendsList_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetAppFriendsList_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetAppFriendsList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  friendship_timestamps_.Clear();
  last_playtimes_.Clear();
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetAppFriendsList_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetAppFriendsList_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed64 steamids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 friendship_timestamps = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 29) {
          do {
            msg->add_friendship_timestamps(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_friendship_timestamps();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 last_playtimes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 37) {
          do {
            msg->add_last_playtimes(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_last_playtimes();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetAppFriendsList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 friendship_timestamps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_friendship_timestamps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_friendship_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 last_playtimes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_last_playtimes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_last_playtimes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetAppFriendsList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetAppFriendsList_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetAppFriendsList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // repeated fixed64 steamids = 2;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamids(i), output);
  }

  // repeated fixed32 friendship_timestamps = 3;
  for (int i = 0, n = this->friendship_timestamps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->friendship_timestamps(i), output);
  }

  // repeated fixed32 last_playtimes = 4;
  for (int i = 0, n = this->last_playtimes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->last_playtimes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetAppFriendsList_Response)
}

::google::protobuf::uint8* CMsgGCGetAppFriendsList_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // repeated fixed64 steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamids_, target);

  // repeated fixed32 friendship_timestamps = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(3, this->friendship_timestamps_, target);

  // repeated fixed32 last_playtimes = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(4, this->last_playtimes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetAppFriendsList_Response)
  return target;
}

size_t CMsgGCGetAppFriendsList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  // repeated fixed32 friendship_timestamps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->friendship_timestamps_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friendship_timestamps_size());
    total_size += data_size;
  }

  // repeated fixed32 last_playtimes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->last_playtimes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->last_playtimes_size());
    total_size += data_size;
  }

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetAppFriendsList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAppFriendsList_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetAppFriendsList_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetAppFriendsList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetAppFriendsList_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetAppFriendsList_Response::MergeFrom(const CMsgGCGetAppFriendsList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  friendship_timestamps_.MergeFrom(from.friendship_timestamps_);
  last_playtimes_.MergeFrom(from.last_playtimes_);
  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCGetAppFriendsList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAppFriendsList_Response::CopyFrom(const CMsgGCGetAppFriendsList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList_Response::Swap(CMsgGCGetAppFriendsList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetAppFriendsList_Response::InternalSwap(CMsgGCGetAppFriendsList_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
  friendship_timestamps_.InternalSwap(&other->friendship_timestamps_);
  last_playtimes_.InternalSwap(&other->last_playtimes_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata CMsgGCGetAppFriendsList_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetDirectory_SubGC::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetDirectory_SubGC::HasBitSetters {
 public:
  static void set_has_dir_index(CMsgGCMsgMasterSetDirectory_SubGC* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CMsgGCMsgMasterSetDirectory_SubGC* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_box(CMsgGCMsgMasterSetDirectory_SubGC* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_command_line(CMsgGCMsgMasterSetDirectory_SubGC* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gc_binary(CMsgGCMsgMasterSetDirectory_SubGC* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory_SubGC::kDirIndexFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kNameFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kBoxFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kCommandLineFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kGcBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}
CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(const CMsgGCMsgMasterSetDirectory_SubGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_box()) {
    box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_);
  }
  command_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_line()) {
    command_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_line_);
  }
  gc_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gc_binary()) {
    gc_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_binary_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}

void CMsgGCMsgMasterSetDirectory_SubGC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory_SubGC::~CMsgGCMsgMasterSetDirectory_SubGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory_SubGC::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_SubGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetDirectory_SubGC& CMsgGCMsgMasterSetDirectory_SubGC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetDirectory_SubGC_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetDirectory_SubGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      box_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      command_line_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      gc_binary_.ClearNonDefaultToEmptyNoArena();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetDirectory_SubGC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetDirectory_SubGC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string box = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
        object = msg->mutable_box();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string command_line = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
        object = msg->mutable_command_line();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string gc_binary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
        object = msg->mutable_gc_binary();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetDirectory_SubGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_box()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->box().data(), static_cast<int>(this->box().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_line().data(), static_cast<int>(this->command_line().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gc_binary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gc_binary().data(), static_cast<int>(this->gc_binary().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetDirectory_SubGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box().data(), static_cast<int>(this->box().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->box(), output);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_line().data(), static_cast<int>(this->command_line().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->command_line(), output);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_binary().data(), static_cast<int>(this->gc_binary().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gc_binary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory_SubGC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box().data(), static_cast<int>(this->box().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->box(), target);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_line().data(), static_cast<int>(this->command_line().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->command_line(), target);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_binary().data(), static_cast<int>(this->gc_binary().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gc_binary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_SubGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string box = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->box());
    }

    // optional string command_line = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_line());
    }

    // optional string gc_binary = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gc_binary());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory_SubGC* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetDirectory_SubGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      command_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_line_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      gc_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_binary_);
    }
    if (cached_has_bits & 0x00000010u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_SubGC::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_SubGC::Swap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory_SubGC::InternalSwap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  box_.Swap(&other->box_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_line_.Swap(&other->command_line_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gc_binary_.Swap(&other->gc_binary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory_SubGC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetDirectory::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetDirectory::HasBitSetters {
 public:
  static void set_has_master_dir_index(CMsgGCMsgMasterSetDirectory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory::kMasterDirIndexFieldNumber;
const int CMsgGCMsgMasterSetDirectory::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory)
}
CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(const CMsgGCMsgMasterSetDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dir_(from.dir_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  master_dir_index_ = from.master_dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory)
}

void CMsgGCMsgMasterSetDirectory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetDirectory_steammessages_2eproto.base);
  master_dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory::~CMsgGCMsgMasterSetDirectory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory::SharedDtor() {
}

void CMsgGCMsgMasterSetDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetDirectory& CMsgGCMsgMasterSetDirectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetDirectory_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.Clear();
  master_dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetDirectory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetDirectory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 master_dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_master_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC::_InternalParse;
          object = msg->add_dir();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 master_dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_master_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_dir_index(), output);
  }

  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dir_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dir(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_dir_index(), target);
  }

  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dir_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dir(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dir_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dir(static_cast<int>(i)));
    }
  }

  // optional uint32 master_dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master_dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory::MergeFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dir_.MergeFrom(from.dir_);
  if (from.has_master_dir_index()) {
    set_master_dir_index(from.master_dir_index());
  }
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory::Swap(CMsgGCMsgMasterSetDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory::InternalSwap(CMsgGCMsgMasterSetDirectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&dir_)->InternalSwap(CastToBase(&other->dir_));
  swap(master_dir_index_, other->master_dir_index_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetDirectory_Response::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetDirectory_Response::HasBitSetters {
 public:
  static void set_has_eresult(CMsgGCMsgMasterSetDirectory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgGCMsgMasterSetDirectory_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory_Response::kEresultFieldNumber;
const int CMsgGCMsgMasterSetDirectory_Response::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}
CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(const CMsgGCMsgMasterSetDirectory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}

void CMsgGCMsgMasterSetDirectory_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgGCMsgMasterSetDirectory_Response::~CMsgGCMsgMasterSetDirectory_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory_Response::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetDirectory_Response& CMsgGCMsgMasterSetDirectory_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetDirectory_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetDirectory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetDirectory_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetDirectory_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetDirectory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetDirectory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetDirectory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetDirectory_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory_Response::MergeFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_Response::Swap(CMsgGCMsgMasterSetDirectory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory_Response::InternalSwap(CMsgGCMsgMasterSetDirectory_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgWebAPIJobRequestForwardResponse::InitAsDefaultInstance() {
}
class CMsgGCMsgWebAPIJobRequestForwardResponse::HasBitSetters {
 public:
  static void set_has_dir_index(CMsgGCMsgWebAPIJobRequestForwardResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgWebAPIJobRequestForwardResponse::kDirIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}
CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(const CMsgGCMsgWebAPIJobRequestForwardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedCtor() {
  dir_index_ = 0u;
}

CMsgGCMsgWebAPIJobRequestForwardResponse::~CMsgGCMsgWebAPIJobRequestForwardResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  SharedDtor();
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedDtor() {
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgWebAPIJobRequestForwardResponse& CMsgGCMsgWebAPIJobRequestForwardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgWebAPIJobRequestForwardResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgWebAPIJobRequestForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgWebAPIJobRequestForwardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgWebAPIJobRequestForwardResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgWebAPIJobRequestForwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgWebAPIJobRequestForwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}

::google::protobuf::uint8* CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return target;
}

size_t CMsgGCMsgWebAPIJobRequestForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgWebAPIJobRequestForwardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgWebAPIJobRequestForwardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
    MergeFrom(*source);
  }
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dir_index()) {
    set_dir_index(from.dir_index());
  }
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgWebAPIJobRequestForwardResponse::IsInitialized() const {
  return true;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::Swap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CMsgGCMsgWebAPIJobRequestForwardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCSystemMsg_GetPurchaseTrust_Request::InitAsDefaultInstance() {
}
class CGCSystemMsg_GetPurchaseTrust_Request::HasBitSetters {
 public:
  static void set_has_steamid(CGCSystemMsg_GetPurchaseTrust_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetPurchaseTrust_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}
CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedDtor() {
}

void CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCSystemMsg_GetPurchaseTrust_Request& CGCSystemMsg_GetPurchaseTrust_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCSystemMsg_GetPurchaseTrust_Request_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCSystemMsg_GetPurchaseTrust_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCSystemMsg_GetPurchaseTrust_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCSystemMsg_GetPurchaseTrust_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCSystemMsg_GetPurchaseTrust_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCSystemMsg_GetPurchaseTrust_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CGCSystemMsg_GetPurchaseTrust_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Request::Swap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetPurchaseTrust_Request::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCSystemMsg_GetPurchaseTrust_Response::InitAsDefaultInstance() {
}
class CGCSystemMsg_GetPurchaseTrust_Response::HasBitSetters {
 public:
  static void set_has_has_prior_purchase_history(CGCSystemMsg_GetPurchaseTrust_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_has_no_recent_password_resets(CGCSystemMsg_GetPurchaseTrust_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_wallet_cash_trusted(CGCSystemMsg_GetPurchaseTrust_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_all_trusted(CGCSystemMsg_GetPurchaseTrust_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasPriorPurchaseHistoryFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasNoRecentPasswordResetsFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kIsWalletCashTrustedFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kTimeAllTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}
CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_prior_purchase_history_, &from.has_prior_purchase_history_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_all_trusted_) -
    reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedCtor() {
  ::memset(&has_prior_purchase_history_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_all_trusted_) -
      reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
}

CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedDtor() {
}

void CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCSystemMsg_GetPurchaseTrust_Response& CGCSystemMsg_GetPurchaseTrust_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCSystemMsg_GetPurchaseTrust_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CGCSystemMsg_GetPurchaseTrust_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&has_prior_purchase_history_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_all_trusted_) -
        reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCSystemMsg_GetPurchaseTrust_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCSystemMsg_GetPurchaseTrust_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool has_prior_purchase_history = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_prior_purchase_history(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_no_recent_password_resets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_has_no_recent_password_resets(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_wallet_cash_trusted = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_wallet_cash_trusted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_all_trusted = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_all_trusted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCSystemMsg_GetPurchaseTrust_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_prior_purchase_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_has_prior_purchase_history(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_prior_purchase_history_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_no_recent_password_resets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_has_no_recent_password_resets(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_recent_password_resets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wallet_cash_trusted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_wallet_cash_trusted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wallet_cash_trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_all_trusted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_all_trusted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_all_trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCSystemMsg_GetPurchaseTrust_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_prior_purchase_history(), output);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_no_recent_password_resets(), output);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_wallet_cash_trusted(), output);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_all_trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_prior_purchase_history(), target);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_no_recent_password_resets(), target);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_wallet_cash_trusted(), target);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_all_trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool has_prior_purchase_history = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_no_recent_password_resets = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_wallet_cash_trusted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_all_trusted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_all_trusted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CGCSystemMsg_GetPurchaseTrust_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      has_prior_purchase_history_ = from.has_prior_purchase_history_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_no_recent_password_resets_ = from.has_no_recent_password_resets_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_wallet_cash_trusted_ = from.is_wallet_cash_trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_all_trusted_ = from.time_all_trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Response::Swap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetPurchaseTrust_Response::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_prior_purchase_history_, other->has_prior_purchase_history_);
  swap(has_no_recent_password_resets_, other->has_no_recent_password_resets_);
  swap(is_wallet_cash_trusted_, other->is_wallet_cash_trusted_);
  swap(time_all_trusted_, other->time_all_trusted_);
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCHAccountVacStatusChange::InitAsDefaultInstance() {
}
class CMsgGCHAccountVacStatusChange::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGCHAccountVacStatusChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_id(CMsgGCHAccountVacStatusChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_rtime_vacban_starts(CMsgGCHAccountVacStatusChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_banned_now(CMsgGCHAccountVacStatusChange* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_banned_future(CMsgGCHAccountVacStatusChange* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHAccountVacStatusChange::kSteamIdFieldNumber;
const int CMsgGCHAccountVacStatusChange::kAppIdFieldNumber;
const int CMsgGCHAccountVacStatusChange::kRtimeVacbanStartsFieldNumber;
const int CMsgGCHAccountVacStatusChange::kIsBannedNowFieldNumber;
const int CMsgGCHAccountVacStatusChange::kIsBannedFutureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHAccountVacStatusChange)
}
CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(const CMsgGCHAccountVacStatusChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_banned_future_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHAccountVacStatusChange)
}

void CMsgGCHAccountVacStatusChange::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_banned_future_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
}

CMsgGCHAccountVacStatusChange::~CMsgGCHAccountVacStatusChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHAccountVacStatusChange)
  SharedDtor();
}

void CMsgGCHAccountVacStatusChange::SharedDtor() {
}

void CMsgGCHAccountVacStatusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCHAccountVacStatusChange& CMsgGCHAccountVacStatusChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCHAccountVacStatusChange_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCHAccountVacStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHAccountVacStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_banned_future_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCHAccountVacStatusChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCHAccountVacStatusChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rtime_vacban_starts = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rtime_vacban_starts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_banned_now = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_banned_now(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_banned_future = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_banned_future(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCHAccountVacStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHAccountVacStatusChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_vacban_starts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_rtime_vacban_starts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_vacban_starts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_banned_now = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_banned_now(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banned_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_banned_future = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_banned_future(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banned_future_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHAccountVacStatusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHAccountVacStatusChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCHAccountVacStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHAccountVacStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtime_vacban_starts(), output);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_banned_now(), output);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_banned_future(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHAccountVacStatusChange)
}

::google::protobuf::uint8* CMsgGCHAccountVacStatusChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHAccountVacStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtime_vacban_starts(), target);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_banned_now(), target);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_banned_future(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHAccountVacStatusChange)
  return target;
}

size_t CMsgGCHAccountVacStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHAccountVacStatusChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 rtime_vacban_starts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_vacban_starts());
    }

    // optional bool is_banned_now = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_banned_future = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHAccountVacStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHAccountVacStatusChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCHAccountVacStatusChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHAccountVacStatusChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHAccountVacStatusChange)
    MergeFrom(*source);
  }
}

void CMsgGCHAccountVacStatusChange::MergeFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_vacban_starts_ = from.rtime_vacban_starts_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_banned_now_ = from.is_banned_now_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_banned_future_ = from.is_banned_future_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountVacStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountVacStatusChange::Swap(CMsgGCHAccountVacStatusChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHAccountVacStatusChange::InternalSwap(CMsgGCHAccountVacStatusChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(app_id_, other->app_id_);
  swap(rtime_vacban_starts_, other->rtime_vacban_starts_);
  swap(is_banned_now_, other->is_banned_now_);
  swap(is_banned_future_, other->is_banned_future_);
}

::google::protobuf::Metadata CMsgGCHAccountVacStatusChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPartnerAccountLink::InitAsDefaultInstance() {
}
class CMsgGCGetPartnerAccountLink::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCGetPartnerAccountLink* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPartnerAccountLink::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPartnerAccountLink)
}
CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(const CMsgGCGetPartnerAccountLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPartnerAccountLink)
}

void CMsgGCGetPartnerAccountLink::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCGetPartnerAccountLink::~CMsgGCGetPartnerAccountLink() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPartnerAccountLink)
  SharedDtor();
}

void CMsgGCGetPartnerAccountLink::SharedDtor() {
}

void CMsgGCGetPartnerAccountLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPartnerAccountLink& CMsgGCGetPartnerAccountLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPartnerAccountLink_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPartnerAccountLink::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPartnerAccountLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPartnerAccountLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPartnerAccountLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPartnerAccountLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPartnerAccountLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPartnerAccountLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPartnerAccountLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPartnerAccountLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPartnerAccountLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPartnerAccountLink)
}

::google::protobuf::uint8* CMsgGCGetPartnerAccountLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPartnerAccountLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPartnerAccountLink)
  return target;
}

size_t CMsgGCGetPartnerAccountLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPartnerAccountLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPartnerAccountLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPartnerAccountLink* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPartnerAccountLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPartnerAccountLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPartnerAccountLink)
    MergeFrom(*source);
  }
}

void CMsgGCGetPartnerAccountLink::MergeFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink::Swap(CMsgGCGetPartnerAccountLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPartnerAccountLink::InternalSwap(CMsgGCGetPartnerAccountLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgGCGetPartnerAccountLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGetPartnerAccountLink_Response::InitAsDefaultInstance() {
}
class CMsgGCGetPartnerAccountLink_Response::HasBitSetters {
 public:
  static void set_has_pwid(CMsgGCGetPartnerAccountLink_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_nexonid(CMsgGCGetPartnerAccountLink_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPartnerAccountLink_Response::kPwidFieldNumber;
const int CMsgGCGetPartnerAccountLink_Response::kNexonidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}
CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(const CMsgGCGetPartnerAccountLink_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nexonid_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(nexonid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}

void CMsgGCGetPartnerAccountLink_Response::SharedCtor() {
  ::memset(&pwid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nexonid_) -
      reinterpret_cast<char*>(&pwid_)) + sizeof(nexonid_));
}

CMsgGCGetPartnerAccountLink_Response::~CMsgGCGetPartnerAccountLink_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  SharedDtor();
}

void CMsgGCGetPartnerAccountLink_Response::SharedDtor() {
}

void CMsgGCGetPartnerAccountLink_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGetPartnerAccountLink_Response& CMsgGCGetPartnerAccountLink_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGetPartnerAccountLink_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGetPartnerAccountLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pwid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nexonid_) -
        reinterpret_cast<char*>(&pwid_)) + sizeof(nexonid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGetPartnerAccountLink_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGetPartnerAccountLink_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pwid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 nexonid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nexonid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGetPartnerAccountLink_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pwid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pwid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nexonid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_nexonid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGetPartnerAccountLink_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pwid(), output);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexonid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}

::google::protobuf::uint8* CMsgGCGetPartnerAccountLink_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pwid(), target);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nexonid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return target;
}

size_t CMsgGCGetPartnerAccountLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 pwid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pwid());
    }

    // optional uint32 nexonid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexonid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPartnerAccountLink_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPartnerAccountLink_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGetPartnerAccountLink_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPartnerAccountLink_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPartnerAccountLink_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetPartnerAccountLink_Response::MergeFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nexonid_ = from.nexonid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink_Response::Swap(CMsgGCGetPartnerAccountLink_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPartnerAccountLink_Response::InternalSwap(CMsgGCGetPartnerAccountLink_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pwid_, other->pwid_);
  swap(nexonid_, other->nexonid_);
}

::google::protobuf::Metadata CMsgGCGetPartnerAccountLink_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRoutingInfo::InitAsDefaultInstance() {
}
class CMsgGCRoutingInfo::HasBitSetters {
 public:
  static void set_has_method(CMsgGCRoutingInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fallback(CMsgGCRoutingInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_protobuf_field(CMsgGCRoutingInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_webapi_param(CMsgGCRoutingInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRoutingInfo::kDirIndexFieldNumber;
const int CMsgGCRoutingInfo::kMethodFieldNumber;
const int CMsgGCRoutingInfo::kFallbackFieldNumber;
const int CMsgGCRoutingInfo::kProtobufFieldFieldNumber;
const int CMsgGCRoutingInfo::kWebapiParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRoutingInfo::CMsgGCRoutingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRoutingInfo)
}
CMsgGCRoutingInfo::CMsgGCRoutingInfo(const CMsgGCRoutingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dir_index_(from.dir_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webapi_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_param()) {
    webapi_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_param_);
  }
  ::memcpy(&method_, &from.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&fallback_) -
    reinterpret_cast<char*>(&method_)) + sizeof(fallback_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRoutingInfo)
}

void CMsgGCRoutingInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCRoutingInfo_steammessages_2eproto.base);
  webapi_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protobuf_field_) -
      reinterpret_cast<char*>(&method_)) + sizeof(protobuf_field_));
  fallback_ = 1;
}

CMsgGCRoutingInfo::~CMsgGCRoutingInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRoutingInfo)
  SharedDtor();
}

void CMsgGCRoutingInfo::SharedDtor() {
  webapi_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCRoutingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCRoutingInfo& CMsgGCRoutingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCRoutingInfo_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCRoutingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRoutingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    webapi_param_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protobuf_field_) -
        reinterpret_cast<char*>(&method_)) + sizeof(protobuf_field_));
    fallback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCRoutingInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCRoutingInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_dir_index();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_method(static_cast<::proto::dota::CMsgGCRoutingInfo_RoutingMethod>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_fallback(static_cast<::proto::dota::CMsgGCRoutingInfo_RoutingMethod>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 protobuf_field = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_protobuf_field(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string webapi_param = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCRoutingInfo.webapi_param");
        object = msg->mutable_webapi_param();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCRoutingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRoutingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_dir_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dir_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value)) {
            set_method(static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value)) {
            set_fallback(static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protobuf_field = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_protobuf_field(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protobuf_field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_param().data(), static_cast<int>(this->webapi_param().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCRoutingInfo.webapi_param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRoutingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRoutingInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCRoutingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRoutingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  for (int i = 0, n = this->dir_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->dir_index(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fallback(), output);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protobuf_field(), output);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_param().data(), static_cast<int>(this->webapi_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCRoutingInfo.webapi_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->webapi_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRoutingInfo)
}

::google::protobuf::uint8* CMsgGCRoutingInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRoutingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->dir_index_, target);

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->method(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fallback(), target);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protobuf_field(), target);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_param().data(), static_cast<int>(this->webapi_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCRoutingInfo.webapi_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->webapi_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRoutingInfo)
  return target;
}

size_t CMsgGCRoutingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRoutingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dir_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dir_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string webapi_param = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_param());
    }

    // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional uint32 protobuf_field = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protobuf_field());
    }

    // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fallback());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRoutingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRoutingInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCRoutingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRoutingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRoutingInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRoutingInfo::MergeFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dir_index_.MergeFrom(from.dir_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      webapi_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_param_);
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000004u) {
      protobuf_field_ = from.protobuf_field_;
    }
    if (cached_has_bits & 0x00000008u) {
      fallback_ = from.fallback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRoutingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRoutingInfo::CopyFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRoutingInfo::IsInitialized() const {
  return true;
}

void CMsgGCRoutingInfo::Swap(CMsgGCRoutingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRoutingInfo::InternalSwap(CMsgGCRoutingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dir_index_.InternalSwap(&other->dir_index_);
  webapi_param_.Swap(&other->webapi_param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(method_, other->method_);
  swap(protobuf_field_, other->protobuf_field_);
  swap(fallback_, other->fallback_);
}

::google::protobuf::Metadata CMsgGCRoutingInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetWebAPIRouting_Entry::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_._instance.get_mutable()->routing_ = const_cast< ::proto::dota::CMsgGCRoutingInfo*>(
      ::proto::dota::CMsgGCRoutingInfo::internal_default_instance());
}
class CMsgGCMsgMasterSetWebAPIRouting_Entry::HasBitSetters {
 public:
  static void set_has_interface_name(CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method_name(CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg);
  static void set_has_routing(CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetWebAPIRouting_Entry::HasBitSetters::routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
  return *msg->routing_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kInterfaceNameFieldNumber;
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kMethodNameFieldNumber;
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interface_name()) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_routing()) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto.base);
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_ = nullptr;
}

CMsgGCMsgMasterSetWebAPIRouting_Entry::~CMsgGCMsgMasterSetWebAPIRouting_Entry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedDtor() {
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete routing_;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetWebAPIRouting_Entry& CMsgGCMsgMasterSetWebAPIRouting_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetWebAPIRouting_Entry_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetWebAPIRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      interface_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(routing_ != nullptr);
      routing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetWebAPIRouting_Entry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string interface_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
        object = msg->mutable_interface_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string method_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
        object = msg->mutable_method_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGCRoutingInfo::_InternalParse;
        object = msg->mutable_routing();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetWebAPIRouting_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interface_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface_name().data(), static_cast<int>(this->interface_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface_name(), output);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::routing(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interface_name(), target);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::routing(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string interface_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_name());
    }

    // optional string method_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting_Entry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetWebAPIRouting_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_routing()->::proto::dota::CMsgGCRoutingInfo::MergeFrom(from.routing());
    }
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::Swap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  interface_name_.Swap(&other->interface_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(routing_, other->routing_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting_Entry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetWebAPIRouting::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetWebAPIRouting::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}
CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(const CMsgGCMsgMasterSetWebAPIRouting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}

void CMsgGCMsgMasterSetWebAPIRouting::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto.base);
}

CMsgGCMsgMasterSetWebAPIRouting::~CMsgGCMsgMasterSetWebAPIRouting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting::SharedDtor() {
}

void CMsgGCMsgMasterSetWebAPIRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetWebAPIRouting& CMsgGCMsgMasterSetWebAPIRouting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetWebAPIRouting_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetWebAPIRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetWebAPIRouting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetWebAPIRouting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetWebAPIRouting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetWebAPIRouting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetWebAPIRouting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting::Swap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetClientMsgRouting_Entry::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_._instance.get_mutable()->routing_ = const_cast< ::proto::dota::CMsgGCRoutingInfo*>(
      ::proto::dota::CMsgGCRoutingInfo::internal_default_instance());
}
class CMsgGCMsgMasterSetClientMsgRouting_Entry::HasBitSetters {
 public:
  static void set_has_msg_type(CMsgGCMsgMasterSetClientMsgRouting_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg);
  static void set_has_routing(CMsgGCMsgMasterSetClientMsgRouting_Entry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetClientMsgRouting_Entry::HasBitSetters::routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg) {
  return *msg->routing_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting_Entry::kMsgTypeFieldNumber;
const int CMsgGCMsgMasterSetClientMsgRouting_Entry::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routing()) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto.base);
  ::memset(&routing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&routing_)) + sizeof(msg_type_));
}

CMsgGCMsgMasterSetClientMsgRouting_Entry::~CMsgGCMsgMasterSetClientMsgRouting_Entry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedDtor() {
  if (this != internal_default_instance()) delete routing_;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetClientMsgRouting_Entry& CMsgGCMsgMasterSetClientMsgRouting_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetClientMsgRouting_Entry_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetClientMsgRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(routing_ != nullptr);
    routing_->Clear();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetClientMsgRouting_Entry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msg_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGCRoutingInfo::_InternalParse;
        object = msg->mutable_routing();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetClientMsgRouting_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_msg_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::routing(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::routing(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_);
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting_Entry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetClientMsgRouting_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routing()->::proto::dota::CMsgGCRoutingInfo::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::Swap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(routing_, other->routing_);
  swap(msg_type_, other->msg_type_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting_Entry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetClientMsgRouting::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetClientMsgRouting::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}
CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(const CMsgGCMsgMasterSetClientMsgRouting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}

void CMsgGCMsgMasterSetClientMsgRouting::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto.base);
}

CMsgGCMsgMasterSetClientMsgRouting::~CMsgGCMsgMasterSetClientMsgRouting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting::SharedDtor() {
}

void CMsgGCMsgMasterSetClientMsgRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetClientMsgRouting& CMsgGCMsgMasterSetClientMsgRouting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetClientMsgRouting_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetClientMsgRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetClientMsgRouting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetClientMsgRouting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetClientMsgRouting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetClientMsgRouting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetClientMsgRouting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting::Swap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetWebAPIRouting_Response::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetWebAPIRouting_Response::HasBitSetters {
 public:
  static void set_has_eresult(CMsgGCMsgMasterSetWebAPIRouting_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}
CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(const CMsgGCMsgMasterSetWebAPIRouting_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedCtor() {
  eresult_ = 2;
}

CMsgGCMsgMasterSetWebAPIRouting_Response::~CMsgGCMsgMasterSetWebAPIRouting_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedDtor() {
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetWebAPIRouting_Response& CMsgGCMsgMasterSetWebAPIRouting_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetWebAPIRouting_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetWebAPIRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetWebAPIRouting_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetWebAPIRouting_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetWebAPIRouting_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetWebAPIRouting_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetWebAPIRouting_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::Swap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgMasterSetClientMsgRouting_Response::InitAsDefaultInstance() {
}
class CMsgGCMsgMasterSetClientMsgRouting_Response::HasBitSetters {
 public:
  static void set_has_eresult(CMsgGCMsgMasterSetClientMsgRouting_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}
CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(const CMsgGCMsgMasterSetClientMsgRouting_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedCtor() {
  eresult_ = 2;
}

CMsgGCMsgMasterSetClientMsgRouting_Response::~CMsgGCMsgMasterSetClientMsgRouting_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedDtor() {
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgMasterSetClientMsgRouting_Response& CMsgGCMsgMasterSetClientMsgRouting_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgMasterSetClientMsgRouting_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgMasterSetClientMsgRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgMasterSetClientMsgRouting_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgMasterSetClientMsgRouting_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgMasterSetClientMsgRouting_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgMasterSetClientMsgRouting_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgMasterSetClientMsgRouting_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::Swap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgSetOptions_MessageRange::InitAsDefaultInstance() {
}
class CMsgGCMsgSetOptions_MessageRange::HasBitSetters {
 public:
  static void set_has_low(CMsgGCMsgSetOptions_MessageRange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_high(CMsgGCMsgSetOptions_MessageRange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgSetOptions_MessageRange::kLowFieldNumber;
const int CMsgGCMsgSetOptions_MessageRange::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}
CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(const CMsgGCMsgSetOptions_MessageRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}

void CMsgGCMsgSetOptions_MessageRange::SharedCtor() {
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

CMsgGCMsgSetOptions_MessageRange::~CMsgGCMsgSetOptions_MessageRange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  SharedDtor();
}

void CMsgGCMsgSetOptions_MessageRange::SharedDtor() {
}

void CMsgGCMsgSetOptions_MessageRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgSetOptions_MessageRange& CMsgGCMsgSetOptions_MessageRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgSetOptions_MessageRange_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgSetOptions_MessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_) -
        reinterpret_cast<char*>(&low_)) + sizeof(high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgSetOptions_MessageRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgSetOptions_MessageRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 low = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_low(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 high = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_high(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgSetOptions_MessageRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 low = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_low(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 high = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_high(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgSetOptions_MessageRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->low(), output);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->high(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}

::google::protobuf::uint8* CMsgGCMsgSetOptions_MessageRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->low(), target);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->high(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return target;
}

size_t CMsgGCMsgSetOptions_MessageRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (has_low()) {
    // required uint32 low = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());
  }

  if (has_high()) {
    // required uint32 high = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());
  }

  return total_size;
}
size_t CMsgGCMsgSetOptions_MessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 low = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());

    // required uint32 high = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgSetOptions_MessageRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgSetOptions_MessageRange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgSetOptions_MessageRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgSetOptions.MessageRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgSetOptions.MessageRange)
    MergeFrom(*source);
  }
}

void CMsgGCMsgSetOptions_MessageRange::MergeFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_ = from.high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions_MessageRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CMsgGCMsgSetOptions_MessageRange::Swap(CMsgGCMsgSetOptions_MessageRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgSetOptions_MessageRange::InternalSwap(CMsgGCMsgSetOptions_MessageRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(low_, other->low_);
  swap(high_, other->high_);
}

::google::protobuf::Metadata CMsgGCMsgSetOptions_MessageRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMsgSetOptions::InitAsDefaultInstance() {
}
class CMsgGCMsgSetOptions::HasBitSetters {
 public:
  static void set_has_gcsql_version(CMsgGCMsgSetOptions* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgSetOptions::kOptionsFieldNumber;
const int CMsgGCMsgSetOptions::kClientMsgRangesFieldNumber;
const int CMsgGCMsgSetOptions::kGcsqlVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgSetOptions::CMsgGCMsgSetOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgSetOptions)
}
CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(const CMsgGCMsgSetOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      options_(from.options_),
      client_msg_ranges_(from.client_msg_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gcsql_version_ = from.gcsql_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgSetOptions)
}

void CMsgGCMsgSetOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMsgSetOptions_steammessages_2eproto.base);
  gcsql_version_ = 1;
}

CMsgGCMsgSetOptions::~CMsgGCMsgSetOptions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgSetOptions)
  SharedDtor();
}

void CMsgGCMsgSetOptions::SharedDtor() {
}

void CMsgGCMsgSetOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMsgSetOptions& CMsgGCMsgSetOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMsgSetOptions_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMsgSetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  client_msg_ranges_.Clear();
  gcsql_version_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMsgSetOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMsgSetOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::proto::dota::CMsgGCMsgSetOptions_Option_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_options(static_cast<::proto::dota::CMsgGCMsgSetOptions_Option>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::proto::dota::CMsgGCMsgSetOptions_Option_IsValid, msg->mutable_unknown_fields(), 1);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParser;
        object = msg->mutable_options();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCMsgSetOptions_MessageRange::_InternalParse;
          object = msg->add_client_msg_ranges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gcsql_version(static_cast<::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMsgSetOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgSetOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCMsgSetOptions_Option_IsValid(value)) {
            add_options(static_cast< ::proto::dota::CMsgGCMsgSetOptions_Option >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::proto::dota::CMsgGCMsgSetOptions_Option_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_options())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_client_msg_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(value)) {
            set_gcsql_version(static_cast< ::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgSetOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgSetOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMsgSetOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  for (int i = 0, n = this->options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->options(i), output);
  }

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_msg_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->client_msg_ranges(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gcsql_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgSetOptions)
}

::google::protobuf::uint8* CMsgGCMsgSetOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->options_, target);

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_msg_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->client_msg_ranges(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gcsql_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgSetOptions)
  return target;
}

size_t CMsgGCMsgSetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgSetOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->options_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->options(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->client_msg_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client_msg_ranges(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gcsql_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMsgSetOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgSetOptions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMsgSetOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgSetOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgSetOptions)
    MergeFrom(*source);
  }
}

void CMsgGCMsgSetOptions::MergeFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  client_msg_ranges_.MergeFrom(from.client_msg_ranges_);
  if (from.has_gcsql_version()) {
    set_gcsql_version(from.gcsql_version());
  }
}

void CMsgGCMsgSetOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgSetOptions::CopyFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->client_msg_ranges())) return false;
  return true;
}

void CMsgGCMsgSetOptions::Swap(CMsgGCMsgSetOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgSetOptions::InternalSwap(CMsgGCMsgSetOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  options_.InternalSwap(&other->options_);
  CastToBase(&client_msg_ranges_)->InternalSwap(CastToBase(&other->client_msg_ranges_));
  swap(gcsql_version_, other->gcsql_version_);
}

::google::protobuf::Metadata CMsgGCMsgSetOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCHUpdateSession_ExtraField::InitAsDefaultInstance() {
}
class CMsgGCHUpdateSession_ExtraField::HasBitSetters {
 public:
  static void set_has_name(CMsgGCHUpdateSession_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgGCHUpdateSession_ExtraField* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHUpdateSession_ExtraField::kNameFieldNumber;
const int CMsgGCHUpdateSession_ExtraField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
}
CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(const CMsgGCHUpdateSession_ExtraField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
}

void CMsgGCHUpdateSession_ExtraField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCHUpdateSession_ExtraField::~CMsgGCHUpdateSession_ExtraField() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
  SharedDtor();
}

void CMsgGCHUpdateSession_ExtraField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCHUpdateSession_ExtraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCHUpdateSession_ExtraField& CMsgGCHUpdateSession_ExtraField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCHUpdateSession_ExtraField_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCHUpdateSession_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCHUpdateSession_ExtraField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCHUpdateSession_ExtraField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCHUpdateSession.ExtraField.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCHUpdateSession.ExtraField.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCHUpdateSession_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCHUpdateSession_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHUpdateSession.ExtraField)
}

::google::protobuf::uint8* CMsgGCHUpdateSession_ExtraField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return target;
}

size_t CMsgGCHUpdateSession_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHUpdateSession_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHUpdateSession_ExtraField* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCHUpdateSession_ExtraField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHUpdateSession.ExtraField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHUpdateSession.ExtraField)
    MergeFrom(*source);
  }
}

void CMsgGCHUpdateSession_ExtraField::MergeFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession_ExtraField::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession_ExtraField::Swap(CMsgGCHUpdateSession_ExtraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHUpdateSession_ExtraField::InternalSwap(CMsgGCHUpdateSession_ExtraField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGCHUpdateSession_ExtraField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCHUpdateSession::InitAsDefaultInstance() {
}
class CMsgGCHUpdateSession::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_app_id(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_online(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_server_steam_id(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_server_addr(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_port(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_os_type(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_client_addr(CMsgGCHUpdateSession* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHUpdateSession::kSteamIdFieldNumber;
const int CMsgGCHUpdateSession::kAppIdFieldNumber;
const int CMsgGCHUpdateSession::kOnlineFieldNumber;
const int CMsgGCHUpdateSession::kServerSteamIdFieldNumber;
const int CMsgGCHUpdateSession::kServerAddrFieldNumber;
const int CMsgGCHUpdateSession::kServerPortFieldNumber;
const int CMsgGCHUpdateSession::kOsTypeFieldNumber;
const int CMsgGCHUpdateSession::kClientAddrFieldNumber;
const int CMsgGCHUpdateSession::kExtraFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHUpdateSession::CMsgGCHUpdateSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHUpdateSession)
}
CMsgGCHUpdateSession::CMsgGCHUpdateSession(const CMsgGCHUpdateSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_addr_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(client_addr_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHUpdateSession)
}

void CMsgGCHUpdateSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCHUpdateSession_steammessages_2eproto.base);
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_addr_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(client_addr_));
}

CMsgGCHUpdateSession::~CMsgGCHUpdateSession() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHUpdateSession)
  SharedDtor();
}

void CMsgGCHUpdateSession::SharedDtor() {
}

void CMsgGCHUpdateSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCHUpdateSession& CMsgGCHUpdateSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCHUpdateSession_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCHUpdateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHUpdateSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_addr_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(client_addr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCHUpdateSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCHUpdateSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool online = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_online(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 server_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 server_addr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_server_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_port = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 os_type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_os_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_addr = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_client_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCHUpdateSession_ExtraField::_InternalParse;
          object = msg->add_extra_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCHUpdateSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHUpdateSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_online(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_addr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_server_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 os_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_os_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_addr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_client_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHUpdateSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHUpdateSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCHUpdateSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHUpdateSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_steam_id(), output);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_addr(), output);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_port(), output);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->os_type(), output);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_addr(), output);
  }

  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->extra_fields(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHUpdateSession)
}

::google::protobuf::uint8* CMsgGCHUpdateSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHUpdateSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_steam_id(), target);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_addr(), target);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_port(), target);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->os_type(), target);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_addr(), target);
  }

  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->extra_fields(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHUpdateSession)
  return target;
}

size_t CMsgGCHUpdateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHUpdateSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_fields(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed64 server_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_addr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_addr());
    }

    // optional uint32 server_port = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 os_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os_type());
    }

    // optional uint32 client_addr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_addr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHUpdateSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHUpdateSession* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCHUpdateSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHUpdateSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHUpdateSession)
    MergeFrom(*source);
  }
}

void CMsgGCHUpdateSession::MergeFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_addr_ = from.server_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_addr_ = from.client_addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHUpdateSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHUpdateSession::CopyFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession::Swap(CMsgGCHUpdateSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHUpdateSession::InternalSwap(CMsgGCHUpdateSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&extra_fields_)->InternalSwap(CastToBase(&other->extra_fields_));
  swap(steam_id_, other->steam_id_);
  swap(app_id_, other->app_id_);
  swap(online_, other->online_);
  swap(server_steam_id_, other->server_steam_id_);
  swap(server_addr_, other->server_addr_);
  swap(server_port_, other->server_port_);
  swap(os_type_, other->os_type_);
  swap(client_addr_, other->client_addr_);
}

::google::protobuf::Metadata CMsgGCHUpdateSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InitAsDefaultInstance() {
}
class CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::HasBitSetters {
 public:
  static void set_has_app_instance_count(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::kAppInstanceCountFieldNumber;
const int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::kOtherSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      other_steamids_(from.other_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_instance_count_ = from.app_instance_count_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedCtor() {
  app_instance_count_ = 0u;
}

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  SharedDtor();
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedDtor() {
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_steamids_.Clear();
  app_instance_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_instance_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_instance_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed64 other_steamids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_other_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_other_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_instance_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_instance_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 other_steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_other_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_other_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_instance_count(), output);
  }

  // repeated fixed64 other_steamids = 2;
  for (int i = 0, n = this->other_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->other_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

::google::protobuf::uint8* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_instance_count(), target);
  }

  // repeated fixed64 other_steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->other_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 other_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->other_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->other_steamids_size());
    total_size += data_size;
  }

  // optional uint32 app_instance_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_instance_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    MergeFrom(*source);
  }
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_steamids_.MergeFrom(from.other_steamids_);
  if (from.has_app_instance_count()) {
    set_app_instance_count(from.app_instance_count());
  }
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Swap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  other_steamids_.InternalSwap(&other->other_steamids_);
  swap(app_instance_count_, other->app_instance_count_);
}

::google::protobuf::Metadata CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNotificationOfSuspiciousActivity::InitAsDefaultInstance() {
  ::proto::dota::_CMsgNotificationOfSuspiciousActivity_default_instance_._instance.get_mutable()->multiple_instances_ = const_cast< ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*>(
      ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::internal_default_instance());
}
class CMsgNotificationOfSuspiciousActivity::HasBitSetters {
 public:
  static void set_has_steamid(CMsgNotificationOfSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_appid(CMsgNotificationOfSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg);
  static void set_has_multiple_instances(CMsgNotificationOfSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&
CMsgNotificationOfSuspiciousActivity::HasBitSetters::multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg) {
  return *msg->multiple_instances_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotificationOfSuspiciousActivity::kSteamidFieldNumber;
const int CMsgNotificationOfSuspiciousActivity::kAppidFieldNumber;
const int CMsgNotificationOfSuspiciousActivity::kMultipleInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(const CMsgNotificationOfSuspiciousActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multiple_instances()) {
    multiple_instances_ = new ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(*from.multiple_instances_);
  } else {
    multiple_instances_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
}

void CMsgNotificationOfSuspiciousActivity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgNotificationOfSuspiciousActivity_steammessages_2eproto.base);
  ::memset(&multiple_instances_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&multiple_instances_)) + sizeof(appid_));
}

CMsgNotificationOfSuspiciousActivity::~CMsgNotificationOfSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
  SharedDtor();
}

void CMsgNotificationOfSuspiciousActivity::SharedDtor() {
  if (this != internal_default_instance()) delete multiple_instances_;
}

void CMsgNotificationOfSuspiciousActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNotificationOfSuspiciousActivity& CMsgNotificationOfSuspiciousActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNotificationOfSuspiciousActivity_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNotificationOfSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(multiple_instances_ != nullptr);
    multiple_instances_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNotificationOfSuspiciousActivity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNotificationOfSuspiciousActivity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalParse;
        object = msg->mutable_multiple_instances();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNotificationOfSuspiciousActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multiple_instances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNotificationOfSuspiciousActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::multiple_instances(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotificationOfSuspiciousActivity)
}

::google::protobuf::uint8* CMsgNotificationOfSuspiciousActivity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::multiple_instances(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *multiple_instances_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotificationOfSuspiciousActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationOfSuspiciousActivity* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNotificationOfSuspiciousActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotificationOfSuspiciousActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotificationOfSuspiciousActivity)
    MergeFrom(*source);
  }
}

void CMsgNotificationOfSuspiciousActivity::MergeFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_multiple_instances()->::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(from.multiple_instances());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity::Swap(CMsgNotificationOfSuspiciousActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationOfSuspiciousActivity::InternalSwap(CMsgNotificationOfSuspiciousActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(multiple_instances_, other->multiple_instances_);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgNotificationOfSuspiciousActivity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::InitAsDefaultInstance() {
}
class CMsgDPPartnerMicroTxns_PartnerMicroTxn::HasBitSetters {
 public:
  static void set_has_init_time(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_last_update_time(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_txn_id(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_account_id(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_line_item(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_item_id(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_def_index(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_price(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_tax(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_price_usd(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_tax_usd(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_purchase_type(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_steam_txn_type(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_country_code(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_region_code(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_quantity(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_ref_trans_id(CMsgDPPartnerMicroTxns_PartnerMicroTxn* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kInitTimeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kLastUpdateTimeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTxnIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kAccountIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kLineItemFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kItemIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kDefIndexFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPriceFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTaxFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPriceUsdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTaxUsdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPurchaseTypeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kSteamTxnTypeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kCountryCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kRegionCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kQuantityFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kRefTransIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}
CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_region_code()) {
    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
  ::memcpy(&init_time_, &from.init_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_trans_id_) -
    reinterpret_cast<char*>(&init_time_)) + sizeof(ref_trans_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto.base);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&init_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_trans_id_) -
      reinterpret_cast<char*>(&init_time_)) + sizeof(ref_trans_id_));
}

CMsgDPPartnerMicroTxns_PartnerMicroTxn::~CMsgDPPartnerMicroTxns_PartnerMicroTxn() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDPPartnerMicroTxns_PartnerMicroTxn& CMsgDPPartnerMicroTxns_PartnerMicroTxn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDPPartnerMicroTxns_PartnerMicroTxn_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      region_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&init_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&init_time_)) + sizeof(item_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  }
  ref_trans_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDPPartnerMicroTxns_PartnerMicroTxn*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 init_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_init_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_update_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_last_update_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 txn_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_txn_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 line_item = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_line_item(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 price = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 tax = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_tax(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 price_usd = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_price_usd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 tax_usd = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_tax_usd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 purchase_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_purchase_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steam_txn_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_steam_txn_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string region_code = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
        object = msg->mutable_region_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 quantity = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ref_trans_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_ref_trans_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 init_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_init_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_last_update_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 txn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_txn_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 line_item = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_line_item(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_price(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tax = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_tax(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 price_usd = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_price_usd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_usd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tax_usd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_tax_usd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tax_usd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 purchase_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_purchase_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_txn_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_steam_txn_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_txn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string region_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region_code().data(), static_cast<int>(this->region_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quantity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ref_trans_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_ref_trans_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_trans_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->init_time(), output);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_update_time(), output);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->txn_id(), output);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_item(), output);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->item_id(), output);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def_index(), output);
  }

  // optional uint64 price = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->price(), output);
  }

  // optional uint64 tax = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->tax(), output);
  }

  // optional uint64 price_usd = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->price_usd(), output);
  }

  // optional uint64 tax_usd = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tax_usd(), output);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->purchase_type(), output);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->steam_txn_type(), output);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->country_code(), output);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->region_code(), output);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->quantity(), output);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->ref_trans_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->init_time(), target);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_update_time(), target);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->txn_id(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_item(), target);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->item_id(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def_index(), target);
  }

  // optional uint64 price = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->price(), target);
  }

  // optional uint64 tax = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->tax(), target);
  }

  // optional uint64 price_usd = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->price_usd(), target);
  }

  // optional uint64 tax_usd = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tax_usd(), target);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->purchase_type(), target);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->steam_txn_type(), target);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->country_code(), target);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->region_code(), target);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->quantity(), target);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->ref_trans_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country_code = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string region_code = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region_code());
    }

    // optional uint32 init_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_time());
    }

    // optional uint32 last_update_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_update_time());
    }

    // optional uint64 txn_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }

    // optional uint32 account_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 line_item = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_item());
    }

    // optional uint64 item_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 price = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

    // optional uint64 tax = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tax());
    }

    // optional uint32 def_index = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 purchase_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_type());
    }

    // optional uint64 price_usd = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price_usd());
    }

    // optional uint64 tax_usd = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tax_usd());
    }

    // optional uint32 steam_txn_type = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_txn_type());
    }

    // optional int32 quantity = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ref_trans_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns_PartnerMicroTxn* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDPPartnerMicroTxns_PartnerMicroTxn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      init_time_ = from.init_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      line_item_ = from.line_item_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000200u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      price_usd_ = from.price_usd_;
    }
    if (cached_has_bits & 0x00002000u) {
      tax_usd_ = from.tax_usd_;
    }
    if (cached_has_bits & 0x00004000u) {
      steam_txn_type_ = from.steam_txn_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_ref_trans_id(from.ref_trans_id());
  }
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Swap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_code_.Swap(&other->region_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(init_time_, other->init_time_);
  swap(last_update_time_, other->last_update_time_);
  swap(txn_id_, other->txn_id_);
  swap(account_id_, other->account_id_);
  swap(line_item_, other->line_item_);
  swap(item_id_, other->item_id_);
  swap(price_, other->price_);
  swap(tax_, other->tax_);
  swap(def_index_, other->def_index_);
  swap(purchase_type_, other->purchase_type_);
  swap(price_usd_, other->price_usd_);
  swap(tax_usd_, other->tax_usd_);
  swap(steam_txn_type_, other->steam_txn_type_);
  swap(quantity_, other->quantity_);
  swap(ref_trans_id_, other->ref_trans_id_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDPPartnerMicroTxns_PartnerInfo::InitAsDefaultInstance() {
}
class CMsgDPPartnerMicroTxns_PartnerInfo::HasBitSetters {
 public:
  static void set_has_partner_id(CMsgDPPartnerMicroTxns_PartnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_partner_name(CMsgDPPartnerMicroTxns_PartnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_currency_code(CMsgDPPartnerMicroTxns_PartnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currency_name(CMsgDPPartnerMicroTxns_PartnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns_PartnerInfo::kPartnerIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kPartnerNameFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kCurrencyCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kCurrencyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}
CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(const CMsgDPPartnerMicroTxns_PartnerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partner_name()) {
    partner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_name_);
  }
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_code()) {
    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_name()) {
    currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
  }
  partner_id_ = from.partner_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto.base);
  partner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partner_id_ = 0u;
}

CMsgDPPartnerMicroTxns_PartnerInfo::~CMsgDPPartnerMicroTxns_PartnerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SharedDtor() {
  partner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDPPartnerMicroTxns_PartnerInfo& CMsgDPPartnerMicroTxns_PartnerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDPPartnerMicroTxns_PartnerInfo_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDPPartnerMicroTxns_PartnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      partner_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      currency_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      currency_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  partner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDPPartnerMicroTxns_PartnerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDPPartnerMicroTxns_PartnerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 partner_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_partner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string partner_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
        object = msg->mutable_partner_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string currency_code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
        object = msg->mutable_currency_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string currency_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
        object = msg->mutable_currency_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDPPartnerMicroTxns_PartnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 partner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_partner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string partner_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partner_name().data(), static_cast<int>(this->partner_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_code().data(), static_cast<int>(this->currency_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_name().data(), static_cast<int>(this->currency_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDPPartnerMicroTxns_PartnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partner_id(), output);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner_name().data(), static_cast<int>(this->partner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partner_name(), output);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency_code(), output);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_name().data(), static_cast<int>(this->currency_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currency_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns_PartnerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partner_id(), target);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner_name().data(), static_cast<int>(this->partner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partner_name(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency_code(), target);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_name().data(), static_cast<int>(this->currency_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string partner_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }

    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // optional string currency_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_name());
    }

    // optional uint32 partner_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns_PartnerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDPPartnerMicroTxns_PartnerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      partner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      partner_id_ = from.partner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerInfo::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::Swap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns_PartnerInfo::InternalSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  partner_name_.Swap(&other->partner_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_code_.Swap(&other->currency_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_name_.Swap(&other->currency_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partner_id_, other->partner_id_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns_PartnerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDPPartnerMicroTxns::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDPPartnerMicroTxns_default_instance_._instance.get_mutable()->partner_ = const_cast< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo*>(
      ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::internal_default_instance());
}
class CMsgDPPartnerMicroTxns::HasBitSetters {
 public:
  static void set_has_appid(CMsgDPPartnerMicroTxns* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gc_name(CMsgDPPartnerMicroTxns* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo& partner(const CMsgDPPartnerMicroTxns* msg);
  static void set_has_partner(CMsgDPPartnerMicroTxns* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo&
CMsgDPPartnerMicroTxns::HasBitSetters::partner(const CMsgDPPartnerMicroTxns* msg) {
  return *msg->partner_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns::kAppidFieldNumber;
const int CMsgDPPartnerMicroTxns::kGcNameFieldNumber;
const int CMsgDPPartnerMicroTxns::kPartnerFieldNumber;
const int CMsgDPPartnerMicroTxns::kTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns)
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(const CMsgDPPartnerMicroTxns& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gc_name()) {
    gc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_name_);
  }
  if (from.has_partner()) {
    partner_ = new ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo(*from.partner_);
  } else {
    partner_ = nullptr;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns)
}

void CMsgDPPartnerMicroTxns::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDPPartnerMicroTxns_steammessages_2eproto.base);
  gc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&partner_)) + sizeof(appid_));
}

CMsgDPPartnerMicroTxns::~CMsgDPPartnerMicroTxns() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns::SharedDtor() {
  gc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete partner_;
}

void CMsgDPPartnerMicroTxns::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDPPartnerMicroTxns& CMsgDPPartnerMicroTxns::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDPPartnerMicroTxns_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDPPartnerMicroTxns::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gc_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(partner_ != nullptr);
      partner_->Clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDPPartnerMicroTxns::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDPPartnerMicroTxns*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string gc_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDPPartnerMicroTxns.gc_name");
        object = msg->mutable_gc_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::_InternalParse;
        object = msg->mutable_partner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalParse;
          object = msg->add_transactions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDPPartnerMicroTxns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gc_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gc_name().data(), static_cast<int>(this->gc_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDPPartnerMicroTxns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_name().data(), static_cast<int>(this->gc_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gc_name(), output);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::partner(this), output);
  }

  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->transactions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_name().data(), static_cast<int>(this->gc_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gc_name(), target);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::partner(this), target);
  }

  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->transactions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns)
  return target;
}

size_t CMsgDPPartnerMicroTxns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gc_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gc_name());
    }

    // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *partner_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDPPartnerMicroTxns::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDPPartnerMicroTxns>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns::MergeFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_partner()->::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(from.partner());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxns::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns::CopyFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns::Swap(CMsgDPPartnerMicroTxns* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns::InternalSwap(CMsgDPPartnerMicroTxns* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  gc_name_.Swap(&other->gc_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partner_, other->partner_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDPPartnerMicroTxnsResponse::InitAsDefaultInstance() {
}
class CMsgDPPartnerMicroTxnsResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgDPPartnerMicroTxnsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eerrorcode(CMsgDPPartnerMicroTxnsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxnsResponse::kEresultFieldNumber;
const int CMsgDPPartnerMicroTxnsResponse::kEerrorcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}
CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(const CMsgDPPartnerMicroTxnsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eerrorcode_, &from.eerrorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&eerrorcode_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}

void CMsgDPPartnerMicroTxnsResponse::SharedCtor() {
  eerrorcode_ = 0;
  eresult_ = 2u;
}

CMsgDPPartnerMicroTxnsResponse::~CMsgDPPartnerMicroTxnsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  SharedDtor();
}

void CMsgDPPartnerMicroTxnsResponse::SharedDtor() {
}

void CMsgDPPartnerMicroTxnsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDPPartnerMicroTxnsResponse& CMsgDPPartnerMicroTxnsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDPPartnerMicroTxnsResponse_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDPPartnerMicroTxnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    eerrorcode_ = 0;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDPPartnerMicroTxnsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDPPartnerMicroTxnsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_eerrorcode(static_cast<::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDPPartnerMicroTxnsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(value)) {
            set_eerrorcode(static_cast< ::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDPPartnerMicroTxnsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eerrorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxnsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eerrorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return target;
}

size_t CMsgDPPartnerMicroTxnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eerrorcode());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDPPartnerMicroTxnsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxnsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDPPartnerMicroTxnsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxnsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxnsResponse)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxnsResponse::MergeFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eerrorcode_ = from.eerrorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxnsResponse::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxnsResponse::Swap(CMsgDPPartnerMicroTxnsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxnsResponse::InternalSwap(CMsgDPPartnerMicroTxnsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eerrorcode_, other->eerrorcode_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxnsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCHVacVerificationChange::InitAsDefaultInstance() {
}
class CMsgGCHVacVerificationChange::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCHVacVerificationChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CMsgGCHVacVerificationChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_verified(CMsgGCHVacVerificationChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHVacVerificationChange::kSteamidFieldNumber;
const int CMsgGCHVacVerificationChange::kAppidFieldNumber;
const int CMsgGCHVacVerificationChange::kIsVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_verified_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHVacVerificationChange)
  SharedDtor();
}

void CMsgGCHVacVerificationChange::SharedDtor() {
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCHVacVerificationChange& CMsgGCHVacVerificationChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCHVacVerificationChange_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHVacVerificationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_verified_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCHVacVerificationChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCHVacVerificationChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_verified = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_verified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCHVacVerificationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHVacVerificationChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_verified = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_verified(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHVacVerificationChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHVacVerificationChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCHVacVerificationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHVacVerificationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHVacVerificationChange)
}

::google::protobuf::uint8* CMsgGCHVacVerificationChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHVacVerificationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHVacVerificationChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHVacVerificationChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCHVacVerificationChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHVacVerificationChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHVacVerificationChange)
    MergeFrom(*source);
  }
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_verified_ = from.is_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHVacVerificationChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::Swap(CMsgGCHVacVerificationChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(is_verified_, other->is_verified_);
}

::google::protobuf::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCHAccountTwoFactorChange::InitAsDefaultInstance() {
}
class CMsgGCHAccountTwoFactorChange::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCHAccountTwoFactorChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CMsgGCHAccountTwoFactorChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_twofactor_enabled(CMsgGCHAccountTwoFactorChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHAccountTwoFactorChange::kSteamidFieldNumber;
const int CMsgGCHAccountTwoFactorChange::kAppidFieldNumber;
const int CMsgGCHAccountTwoFactorChange::kTwofactorEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHAccountTwoFactorChange::CMsgGCHAccountTwoFactorChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHAccountTwoFactorChange)
}
CMsgGCHAccountTwoFactorChange::CMsgGCHAccountTwoFactorChange(const CMsgGCHAccountTwoFactorChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&twofactor_enabled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(twofactor_enabled_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHAccountTwoFactorChange)
}

void CMsgGCHAccountTwoFactorChange::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twofactor_enabled_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(twofactor_enabled_));
}

CMsgGCHAccountTwoFactorChange::~CMsgGCHAccountTwoFactorChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHAccountTwoFactorChange)
  SharedDtor();
}

void CMsgGCHAccountTwoFactorChange::SharedDtor() {
}

void CMsgGCHAccountTwoFactorChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCHAccountTwoFactorChange& CMsgGCHAccountTwoFactorChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCHAccountTwoFactorChange_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCHAccountTwoFactorChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twofactor_enabled_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(twofactor_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCHAccountTwoFactorChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCHAccountTwoFactorChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 appid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool twofactor_enabled = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_twofactor_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCHAccountTwoFactorChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool twofactor_enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_twofactor_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &twofactor_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHAccountTwoFactorChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHAccountTwoFactorChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCHAccountTwoFactorChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool twofactor_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->twofactor_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHAccountTwoFactorChange)
}

::google::protobuf::uint8* CMsgGCHAccountTwoFactorChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool twofactor_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->twofactor_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHAccountTwoFactorChange)
  return target;
}

size_t CMsgGCHAccountTwoFactorChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool twofactor_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHAccountTwoFactorChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHAccountTwoFactorChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCHAccountTwoFactorChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHAccountTwoFactorChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHAccountTwoFactorChange)
    MergeFrom(*source);
  }
}

void CMsgGCHAccountTwoFactorChange::MergeFrom(const CMsgGCHAccountTwoFactorChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      twofactor_enabled_ = from.twofactor_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHAccountTwoFactorChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountTwoFactorChange::CopyFrom(const CMsgGCHAccountTwoFactorChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHAccountTwoFactorChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountTwoFactorChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountTwoFactorChange::Swap(CMsgGCHAccountTwoFactorChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHAccountTwoFactorChange::InternalSwap(CMsgGCHAccountTwoFactorChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(twofactor_enabled_, other->twofactor_enabled_);
}

::google::protobuf::Metadata CMsgGCHAccountTwoFactorChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCheckClanMembership::InitAsDefaultInstance() {
}
class CMsgGCCheckClanMembership::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCCheckClanMembership* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_clanid(CMsgGCCheckClanMembership* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckClanMembership::kSteamidFieldNumber;
const int CMsgGCCheckClanMembership::kClanidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckClanMembership::CMsgGCCheckClanMembership()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckClanMembership)
}
CMsgGCCheckClanMembership::CMsgGCCheckClanMembership(const CMsgGCCheckClanMembership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clanid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(clanid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckClanMembership)
}

void CMsgGCCheckClanMembership::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clanid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(clanid_));
}

CMsgGCCheckClanMembership::~CMsgGCCheckClanMembership() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckClanMembership)
  SharedDtor();
}

void CMsgGCCheckClanMembership::SharedDtor() {
}

void CMsgGCCheckClanMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCheckClanMembership& CMsgGCCheckClanMembership::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCCheckClanMembership_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCheckClanMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckClanMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clanid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(clanid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCCheckClanMembership::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCCheckClanMembership*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 clanid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_clanid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCCheckClanMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckClanMembership)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clanid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_clanid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckClanMembership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckClanMembership)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCCheckClanMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckClanMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 clanid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clanid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckClanMembership)
}

::google::protobuf::uint8* CMsgGCCheckClanMembership::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckClanMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 clanid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clanid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckClanMembership)
  return target;
}

size_t CMsgGCCheckClanMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckClanMembership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 clanid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCheckClanMembership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckClanMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckClanMembership* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCCheckClanMembership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckClanMembership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckClanMembership)
    MergeFrom(*source);
  }
}

void CMsgGCCheckClanMembership::MergeFrom(const CMsgGCCheckClanMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckClanMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      clanid_ = from.clanid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCheckClanMembership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckClanMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckClanMembership::CopyFrom(const CMsgGCCheckClanMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckClanMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckClanMembership::IsInitialized() const {
  return true;
}

void CMsgGCCheckClanMembership::Swap(CMsgGCCheckClanMembership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckClanMembership::InternalSwap(CMsgGCCheckClanMembership* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(clanid_, other->clanid_);
}

::google::protobuf::Metadata CMsgGCCheckClanMembership::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCheckClanMembership_Response::InitAsDefaultInstance() {
}
class CMsgGCCheckClanMembership_Response::HasBitSetters {
 public:
  static void set_has_ismember(CMsgGCCheckClanMembership_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckClanMembership_Response::kIsmemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckClanMembership_Response::CMsgGCCheckClanMembership_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckClanMembership_Response)
}
CMsgGCCheckClanMembership_Response::CMsgGCCheckClanMembership_Response(const CMsgGCCheckClanMembership_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ismember_ = from.ismember_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckClanMembership_Response)
}

void CMsgGCCheckClanMembership_Response::SharedCtor() {
  ismember_ = false;
}

CMsgGCCheckClanMembership_Response::~CMsgGCCheckClanMembership_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckClanMembership_Response)
  SharedDtor();
}

void CMsgGCCheckClanMembership_Response::SharedDtor() {
}

void CMsgGCCheckClanMembership_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCheckClanMembership_Response& CMsgGCCheckClanMembership_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCCheckClanMembership_Response_steammessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCheckClanMembership_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckClanMembership_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ismember_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCCheckClanMembership_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCCheckClanMembership_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool ismember = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ismember(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCCheckClanMembership_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckClanMembership_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ismember = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ismember(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismember_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckClanMembership_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckClanMembership_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCCheckClanMembership_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckClanMembership_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ismember = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismember(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckClanMembership_Response)
}

::google::protobuf::uint8* CMsgGCCheckClanMembership_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckClanMembership_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ismember = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismember(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckClanMembership_Response)
  return target;
}

size_t CMsgGCCheckClanMembership_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckClanMembership_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool ismember = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCheckClanMembership_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckClanMembership_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckClanMembership_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCCheckClanMembership_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckClanMembership_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckClanMembership_Response)
    MergeFrom(*source);
  }
}

void CMsgGCCheckClanMembership_Response::MergeFrom(const CMsgGCCheckClanMembership_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckClanMembership_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ismember()) {
    set_ismember(from.ismember());
  }
}

void CMsgGCCheckClanMembership_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckClanMembership_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckClanMembership_Response::CopyFrom(const CMsgGCCheckClanMembership_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckClanMembership_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckClanMembership_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckClanMembership_Response::Swap(CMsgGCCheckClanMembership_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckClanMembership_Response::InternalSwap(CMsgGCCheckClanMembership_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ismember_, other->ismember_);
}

::google::protobuf::Metadata CMsgGCCheckClanMembership_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_2eproto);
  return ::file_level_metadata_steammessages_2eproto[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field(kKeyFieldFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);

// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgProtoBufHeader* Arena::CreateMaybeMessage< ::proto::dota::CMsgProtoBufHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgProtoBufHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWebAPIKey* Arena::CreateMaybeMessage< ::proto::dota::CMsgWebAPIKey >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWebAPIKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgHttpRequest_RequestHeader* Arena::CreateMaybeMessage< ::proto::dota::CMsgHttpRequest_RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgHttpRequest_RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgHttpRequest_QueryParam* Arena::CreateMaybeMessage< ::proto::dota::CMsgHttpRequest_QueryParam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgHttpRequest_QueryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgHttpRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgHttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWebAPIRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgWebAPIRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWebAPIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgHttpResponse_ResponseHeader* Arena::CreateMaybeMessage< ::proto::dota::CMsgHttpResponse_ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgHttpResponse_ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgHttpResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgHttpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMFindAccounts* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMFindAccounts >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMFindAccounts >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMFindAccountsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMFindAccountsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMFindAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgNotifyWatchdog* Arena::CreateMaybeMessage< ::proto::dota::CMsgNotifyWatchdog >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgNotifyWatchdog >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetLicenses* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetLicenses >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetLicenses >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPackageLicense* Arena::CreateMaybeMessage< ::proto::dota::CMsgPackageLicense >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPackageLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetLicensesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetLicensesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetUserGameStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetUserGameStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetUserGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGetUserGameStatsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGetUserGameStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGetUserGameStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetCommandList* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetCommandList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetCommandList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetCommandListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetCommandListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetCommandListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedGet* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedGet >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedGet >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedGetResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedSet_KeyPair* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedSet_KeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedSet_KeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedSet* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedSet >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedSet >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedDelete* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedDelete >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedStats* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgMemCachedStatsResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgMemCachedStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgMemCachedStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgSQLStats* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgSQLStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgSQLStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgSQLStatsResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgSQLStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgSQLStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMAddFreeLicense* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMAddFreeLicense >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMAddFreeLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMAddFreeLicenseResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMAddFreeLicenseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMAddFreeLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetIPLocation* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetIPLocation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetIPLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CIPLocationInfo* Arena::CreateMaybeMessage< ::proto::dota::CIPLocationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CIPLocationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetIPLocationResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetIPLocationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetIPLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetIPASN* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetIPASN >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetIPASN >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CIPASNInfo* Arena::CreateMaybeMessage< ::proto::dota::CIPASNInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CIPASNInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetIPASNResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetIPASNResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetIPASNResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgSystemStatsSchema* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgSystemStatsSchema >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgSystemStatsSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetSystemStats* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetSystemStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetSystemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgGetSystemStatsResponse* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgGetSystemStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgGetSystemStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMSendEmail_ReplacementToken* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMSendEmail_ReplacementToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMSendEmail_ReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMSendEmail* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMSendEmail >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMSendEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMSendEmailResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMSendEmailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMSendEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetEmailTemplate* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetEmailTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetEmailTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetEmailTemplateResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetEmailTemplateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetEmailTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGrantGuestPasses2* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGrantGuestPasses2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGrantGuestPasses2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAMGrantGuestPasses2Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgAMGrantGuestPasses2Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAMGrantGuestPasses2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCSystemMsg_GetAccountDetails* Arena::CreateMaybeMessage< ::proto::dota::CGCSystemMsg_GetAccountDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCSystemMsg_GetAccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCSystemMsg_GetAccountDetails_Response* Arena::CreateMaybeMessage< ::proto::dota::CGCSystemMsg_GetAccountDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCSystemMsg_GetAccountDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPersonaNames* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPersonaNames >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPersonaNames >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPersonaNames_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPersonaNames_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPersonaNames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCCheckFriendship* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCCheckFriendship >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCCheckFriendship >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCCheckFriendship_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCCheckFriendship_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCCheckFriendship_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetAppFriendsList* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetAppFriendsList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetAppFriendsList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetAppFriendsList_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetAppFriendsList_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetAppFriendsList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetDirectory* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetDirectory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetDirectory_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetDirectory_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetDirectory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgWebAPIJobRequestForwardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request* Arena::CreateMaybeMessage< ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response* Arena::CreateMaybeMessage< ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCSystemMsg_GetPurchaseTrust_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCHAccountVacStatusChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCHAccountVacStatusChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCHAccountVacStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPartnerAccountLink* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPartnerAccountLink >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPartnerAccountLink >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGetPartnerAccountLink_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGetPartnerAccountLink_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGetPartnerAccountLink_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCRoutingInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCRoutingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCRoutingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgSetOptions_MessageRange* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgSetOptions_MessageRange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgSetOptions_MessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMsgSetOptions* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMsgSetOptions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMsgSetOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCHUpdateSession_ExtraField* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCHUpdateSession_ExtraField >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCHUpdateSession_ExtraField >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCHUpdateSession* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCHUpdateSession >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCHUpdateSession >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* Arena::CreateMaybeMessage< ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgNotificationOfSuspiciousActivity* Arena::CreateMaybeMessage< ::proto::dota::CMsgNotificationOfSuspiciousActivity >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgNotificationOfSuspiciousActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn* Arena::CreateMaybeMessage< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDPPartnerMicroTxns* Arena::CreateMaybeMessage< ::proto::dota::CMsgDPPartnerMicroTxns >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDPPartnerMicroTxns >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDPPartnerMicroTxnsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDPPartnerMicroTxnsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDPPartnerMicroTxnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCHVacVerificationChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCHVacVerificationChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCHVacVerificationChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCHAccountTwoFactorChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCHAccountTwoFactorChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCHAccountTwoFactorChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCCheckClanMembership* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCCheckClanMembership >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCCheckClanMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCCheckClanMembership_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCCheckClanMembership_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCCheckClanMembership_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
