// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#include "dota_gcmessages_common_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CDOTASaveGame_dota_5fshared_5fenums_2eproto;
namespace proto {
namespace dota {
class CSODOTAPartyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyMember> _instance;
} _CSODOTAPartyMember_default_instance_;
class CSODOTAPartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAParty> _instance;
} _CSODOTAParty_default_instance_;
class CSODOTAPartyInvite_PartyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyInvite_PartyMember> _instance;
} _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyInvite> _instance;
} _CSODOTAPartyInvite_default_instance_;
class CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobbyInvite_LobbyMember> _instance;
} _CSODOTALobbyInvite_LobbyMember_default_instance_;
class CSODOTALobbyInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobbyInvite> _instance;
} _CSODOTALobbyInvite_default_instance_;
class CMsgLeaverStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverState> _instance;
} _CMsgLeaverState_default_instance_;
class CDOTALobbyMember_CDOTALobbyMemberXPBonusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTALobbyMember_CDOTALobbyMemberXPBonus> _instance;
} _CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_;
class CDOTALobbyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTALobbyMember> _instance;
} _CDOTALobbyMember_default_instance_;
class CLobbyTeamDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLobbyTeamDetails> _instance;
} _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLobbyTimedRewardDetails> _instance;
} _CLobbyTimedRewardDetails_default_instance_;
class CLobbyBroadcastChannelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLobbyBroadcastChannelInfo> _instance;
} _CLobbyBroadcastChannelInfo_default_instance_;
class CSODOTALobby_CExtraMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobby_CExtraMsg> _instance;
} _CSODOTALobby_CExtraMsg_default_instance_;
class CSODOTALobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobby> _instance;
} _CSODOTALobby_default_instance_;
class CMsgLobbyPlaytestDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyPlaytestDetails> _instance;
} _CMsgLobbyPlaytestDetails_default_instance_;
class CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyCheckStatus_ReadyMember> _instance;
} _CMsgReadyCheckStatus_ReadyMember_default_instance_;
class CMsgReadyCheckStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyCheckStatus> _instance;
} _CMsgReadyCheckStatus_default_instance_;
class CMsgPartyReadyCheckRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyReadyCheckRequest> _instance;
} _CMsgPartyReadyCheckRequest_default_instance_;
class CMsgPartyReadyCheckResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyReadyCheckResponse> _instance;
} _CMsgPartyReadyCheckResponse_default_instance_;
class CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyReadyCheckAcknowledge> _instance;
} _CMsgPartyReadyCheckAcknowledge_default_instance_;
class CMsgLobbyEventGameDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventGameDetails> _instance;
} _CMsgLobbyEventGameDetails_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAPartyMember_default_instance_;
    new (ptr) ::proto::dota::CSODOTAPartyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAPartyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAParty_default_instance_;
    new (ptr) ::proto::dota::CSODOTAParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAParty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAPartyInvite_PartyMember_default_instance_;
    new (ptr) ::proto::dota::CSODOTAPartyInvite_PartyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAPartyInvite_PartyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTAPartyInvite_default_instance_;
    new (ptr) ::proto::dota::CSODOTAPartyInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTAPartyInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTALobbyInvite_LobbyMember_default_instance_;
    new (ptr) ::proto::dota::CSODOTALobbyInvite_LobbyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTALobbyInvite_LobbyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTALobbyInvite_default_instance_;
    new (ptr) ::proto::dota::CSODOTALobbyInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTALobbyInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLeaverState_default_instance_;
    new (ptr) ::proto::dota::CMsgLeaverState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLeaverState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_;
    new (ptr) ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTALobbyMember_default_instance_;
    new (ptr) ::proto::dota::CDOTALobbyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTALobbyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CLobbyTeamDetails_default_instance_;
    new (ptr) ::proto::dota::CLobbyTeamDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CLobbyTeamDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CLobbyTimedRewardDetails_default_instance_;
    new (ptr) ::proto::dota::CLobbyTimedRewardDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CLobbyTimedRewardDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CLobbyBroadcastChannelInfo_default_instance_;
    new (ptr) ::proto::dota::CLobbyBroadcastChannelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CLobbyBroadcastChannelInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTALobby_CExtraMsg_default_instance_;
    new (ptr) ::proto::dota::CSODOTALobby_CExtraMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTALobby_CExtraMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSODOTALobby_default_instance_;
    new (ptr) ::proto::dota::CSODOTALobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSODOTALobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_CSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsCSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CDOTASaveGame_dota_5fshared_5fenums_2eproto.base,}};

static void InitDefaultsCMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyPlaytestDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyPlaytestDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyPlaytestDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgReadyCheckStatus_ReadyMember_default_instance_;
    new (ptr) ::proto::dota::CMsgReadyCheckStatus_ReadyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgReadyCheckStatus_ReadyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgReadyCheckStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgReadyCheckStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgReadyCheckStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgPartyReadyCheckRequest_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyReadyCheckRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyReadyCheckRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyReadyCheckRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPartyReadyCheckRequest_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPartyReadyCheckRequest_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPartyReadyCheckResponse_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyReadyCheckResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyReadyCheckResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyReadyCheckResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPartyReadyCheckResponse_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPartyReadyCheckResponse_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPartyReadyCheckAcknowledge_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyReadyCheckAcknowledge_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyReadyCheckAcknowledge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyReadyCheckAcknowledge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPartyReadyCheckAcknowledge_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPartyReadyCheckAcknowledge_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyEventGameDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyEventGameDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyEventGameDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto}, {}};

void InitDefaults_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyReadyCheckRequest_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyReadyCheckResponse_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyReadyCheckAcknowledge_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[8];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, partner_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, is_coach_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, region_ping_codes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, region_ping_times_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, region_ping_failed_bitmask_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, tourney_buyin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, tourney_prevent_until_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyMember, lane_selection_flags_),
  0,
  2,
  ~0u,
  ~0u,
  1,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, leader_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, member_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, game_modes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, effective_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, raw_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, attempt_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, attempt_num_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, low_priority_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, match_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, team_ui_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, match_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, match_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, matchmaking_max_range_minutes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, open_guild_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, common_guilds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, low_priority_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, open_for_join_requests_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, sent_invites_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, recv_invites_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, account_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, exclusive_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_schedule_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_queue_deadline_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, tourney_queue_deadline_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, party_builder_slots_to_fill_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, party_builder_match_groups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, party_builder_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, solo_queue_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, bot_script_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, ready_check_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, custom_game_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, custom_game_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAParty, is_challenge_match_),
  2,
  3,
  ~0u,
  4,
  5,
  6,
  17,
  18,
  19,
  7,
  8,
  9,
  10,
  11,
  0,
  28,
  29,
  12,
  13,
  14,
  15,
  ~0u,
  16,
  ~0u,
  20,
  31,
  ~0u,
  ~0u,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  30,
  34,
  35,
  36,
  37,
  32,
  38,
  39,
  1,
  40,
  41,
  33,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite_PartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite_PartyMember, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite_PartyMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite_PartyMember, is_coach_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, sender_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, low_priority_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, as_coach_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTAPartyInvite, invite_gid_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite_LobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite_LobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite_LobbyMember, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite_LobbyMember, steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, sender_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, invite_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobbyInvite, custom_game_timestamp_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, lobby_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, leaver_detected_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, discard_match_results_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverState, mass_disconnect_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus, xp_bonus_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus, source_key_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, meta_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, meta_xp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, meta_xp_awarded_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, leaver_actions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, channel_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, prize_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, disabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, partner_account_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, enabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, coach_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, pwrd_cyber_cafe_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, pwrd_cyber_cafe_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, disabled_random_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, xp_bonuses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, rank_change_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, cameraman_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, custom_game_product_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, lobby_mvp_vote_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, search_match_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, favorite_team_packed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, rank_tier_updated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, can_earn_rewards_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALobbyMember, live_spectator_team_),
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  8,
  9,
  10,
  15,
  11,
  12,
  ~0u,
  13,
  ~0u,
  25,
  14,
  1,
  ~0u,
  ~0u,
  16,
  21,
  ~0u,
  17,
  20,
  19,
  22,
  23,
  18,
  24,
  26,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_complete_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, guild_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, rank_change_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, is_home_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTeamDetails, challenge_match_token_account_),
  0,
  1,
  8,
  5,
  6,
  7,
  13,
  4,
  2,
  3,
  9,
  10,
  11,
  12,
  16,
  18,
  14,
  15,
  17,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, is_supply_crate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, is_timed_drop_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyTimedRewardDetails, origin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CLobbyBroadcastChannelInfo, language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby_CExtraMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby_CExtraMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby_CExtraMsg, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby_CExtraMsg, contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, left_members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, leader_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, server_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, pending_invites_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, connect_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, intro_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, team_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, tutorial_lesson_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, num_spectators_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, matchgroup_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, cm_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, game_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, leagueid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, load_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, loot_generated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, loot_awarded_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, allchat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lan_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, broadcast_channel_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, first_leaver_accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, low_priority_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, extra_messages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, save_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, mass_disconnect_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, partner_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, visibility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_auto_created_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, previous_series_matches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_uses_account_records_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, game_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, pause_setting_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lobby_mvp_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, weekend_tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, weekend_tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, bot_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, event_progression_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_previous_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_current_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_current_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_current_non_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, series_current_selection_priority_used_coin_toss_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, current_primary_event_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lowpri_deprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, emergency_disabled_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_private_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, mutations_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSODOTALobby, match_duration_),
  7,
  ~0u,
  ~0u,
  11,
  10,
  8,
  ~0u,
  9,
  0,
  74,
  18,
  19,
  20,
  1,
  ~0u,
  12,
  13,
  14,
  15,
  16,
  17,
  22,
  24,
  23,
  75,
  76,
  25,
  ~0u,
  2,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  21,
  35,
  3,
  4,
  36,
  39,
  ~0u,
  37,
  38,
  40,
  ~0u,
  6,
  41,
  44,
  42,
  43,
  45,
  46,
  47,
  49,
  48,
  57,
  50,
  ~0u,
  51,
  58,
  52,
  53,
  54,
  55,
  56,
  62,
  77,
  61,
  64,
  ~0u,
  63,
  65,
  66,
  67,
  68,
  59,
  69,
  60,
  ~0u,
  71,
  70,
  ~0u,
  5,
  72,
  73,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlaytestDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlaytestDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyPlaytestDetails, json_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus_ReadyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus_ReadyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus_ReadyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus_ReadyMember, ready_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, finish_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, initiator_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyCheckStatus, ready_members_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckAcknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyReadyCheckAcknowledge, ready_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventGameDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyEventGameDetails, kv_data_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::proto::dota::CSODOTAPartyMember)},
  { 25, 77, sizeof(::proto::dota::CSODOTAParty)},
  { 124, 132, sizeof(::proto::dota::CSODOTAPartyInvite_PartyMember)},
  { 135, 148, sizeof(::proto::dota::CSODOTAPartyInvite)},
  { 156, 163, sizeof(::proto::dota::CSODOTALobbyInvite_LobbyMember)},
  { 165, 178, sizeof(::proto::dota::CSODOTALobbyInvite)},
  { 186, 197, sizeof(::proto::dota::CMsgLeaverState)},
  { 203, 211, sizeof(::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus)},
  { 214, 251, sizeof(::proto::dota::CDOTALobbyMember)},
  { 283, 307, sizeof(::proto::dota::CLobbyTeamDetails)},
  { 326, 336, sizeof(::proto::dota::CLobbyTimedRewardDetails)},
  { 341, 350, sizeof(::proto::dota::CLobbyBroadcastChannelInfo)},
  { 354, 361, sizeof(::proto::dota::CSODOTALobby_CExtraMsg)},
  { 363, 457, sizeof(::proto::dota::CSODOTALobby)},
  { 546, 552, sizeof(::proto::dota::CMsgLobbyPlaytestDetails)},
  { 553, 560, sizeof(::proto::dota::CMsgReadyCheckStatus_ReadyMember)},
  { 562, 571, sizeof(::proto::dota::CMsgReadyCheckStatus)},
  { 575, 580, sizeof(::proto::dota::CMsgPartyReadyCheckRequest)},
  { 580, 586, sizeof(::proto::dota::CMsgPartyReadyCheckResponse)},
  { 587, 593, sizeof(::proto::dota::CMsgPartyReadyCheckAcknowledge)},
  { 594, 600, sizeof(::proto::dota::CMsgLobbyEventGameDetails)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAPartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAPartyInvite_PartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTAPartyInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTALobbyInvite_LobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTALobbyInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLeaverState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTALobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CLobbyTeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CLobbyTimedRewardDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CLobbyBroadcastChannelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTALobby_CExtraMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSODOTALobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyPlaytestDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgReadyCheckStatus_ReadyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgReadyCheckStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyReadyCheckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyReadyCheckResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyReadyCheckAcknowledge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyEventGameDetails_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, "dota_gcmessages_common_match_management.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, 21, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[] =
  "\n-dota_gcmessages_common_match_managemen"
  "t.proto\022\nproto.dota\032\023steammessages.proto"
  "\032\026gcsdk_gcmessages.proto\032\027dota_shared_en"
  "ums.proto\"\331\002\n\022CSODOTAPartyMember\022B\n\014part"
  "ner_type\030\001 \001(\0162\036.proto.dota.PartnerAccou"
  "ntType:\014PARTNER_NONE\022\020\n\010is_coach\030\002 \001(\010\022\035"
  "\n\021region_ping_codes\030\004 \003(\rB\002\020\001\022\035\n\021region_"
  "ping_times\030\005 \003(\rB\002\020\001\022\"\n\032region_ping_fail"
  "ed_bitmask\030\006 \001(\r\022\032\n\022is_plus_subscriber\030\n"
  " \001(\010\022\033\n\023tourney_skill_level\030\007 \001(\r\022\025\n\rtou"
  "rney_buyin\030\010 \001(\r\022\035\n\025tourney_prevent_unti"
  "l\030\t \001(\r\022\034\n\024lane_selection_flags\030\013 \001(\r\"\266\r"
  "\n\014CSODOTAParty\022\026\n\010party_id\030\001 \001(\004B\004\200\246\035\001\022\021"
  "\n\tleader_id\030\002 \001(\006\022\022\n\nmember_ids\030\003 \003(\006\022\022\n"
  "\ngame_modes\030\004 \001(\r\0221\n\005state\030\006 \001(\0162\036.proto"
  ".dota.CSODOTAParty.State:\002UI\022*\n\"effectiv"
  "e_started_matchmaking_time\030\007 \001(\r\022$\n\034raw_"
  "started_matchmaking_time\030  \001(\r\022\032\n\022attemp"
  "t_start_time\030! \001(\r\022\023\n\013attempt_num\030\" \001(\r\022"
  "\023\n\013matchgroups\030\013 \001(\r\022\037\n\027low_priority_acc"
  "ount_id\030\023 \001(\r\022<\n\nmatch_type\030\025 \001(\0162\025.prot"
  "o.dota.MatchType:\021MATCH_TYPE_CASUAL\022M\n\016b"
  "ot_difficulty\030\026 \001(\0162\035.proto.dota.DOTABot"
  "Difficulty:\026BOT_DIFFICULTY_PASSIVE\022\017\n\007te"
  "am_id\030\027 \001(\r\022\021\n\tteam_name\0303 \001(\t\022\024\n\014team_u"
  "i_logo\0304 \001(\004\022\026\n\016team_base_logo\0305 \001(\004\022!\n\031"
  "match_disabled_until_date\030\030 \001(\r\022!\n\031match"
  "_disabled_account_id\030\031 \001(\r\022%\n\035matchmakin"
  "g_max_range_minutes\030\032 \001(\r\022\026\n\016matchlangua"
  "ges\030\033 \001(\r\022/\n\007members\030\035 \003(\0132\036.proto.dota."
  "CSODOTAPartyMember\022\025\n\ropen_guild_id\030\036 \001("
  "\r\022\025\n\rcommon_guilds\030\037 \003(\r\022$\n\034low_priority"
  "_games_remaining\030# \001(\r\022\036\n\026open_for_join_"
  "requests\030( \001(\010\0224\n\014sent_invites\030) \003(\0132\036.p"
  "roto.dota.CSODOTAPartyInvite\0224\n\014recv_inv"
  "ites\030* \003(\0132\036.proto.dota.CSODOTAPartyInvi"
  "te\022\025\n\raccount_flags\030+ \001(\r\022\033\n\023region_sele"
  "ct_flags\030, \001(\r\022\037\n\027exclusive_tournament_i"
  "d\030- \001(\r\022\033\n\023tourney_division_id\030/ \001(\r\022\035\n\025"
  "tourney_schedule_time\0300 \001(\r\022\033\n\023tourney_s"
  "kill_level\0301 \001(\r\022\035\n\025tourney_bracket_roun"
  "d\0302 \001(\r\022#\n\033tourney_queue_deadline_time\0306"
  " \001(\r\022q\n\034tourney_queue_deadline_state\0307 \001"
  "(\0162&.proto.dota.ETourneyQueueDeadlineSta"
  "te:#k_ETourneyQueueDeadlineState_Normal\022"
  "#\n\033party_builder_slots_to_fill\0308 \001(\r\022\"\n\032"
  "party_builder_match_groups\0309 \001(\r\022 \n\030part"
  "y_builder_start_time\030: \001(\r\022\022\n\nsolo_queue"
  "\030; \001(\010\022\030\n\020bot_script_index\030< \001(\r\022\035\n\025stea"
  "m_clan_account_id\030= \001(\r\0225\n\013ready_check\030>"
  " \001(\0132 .proto.dota.CMsgReadyCheckStatus\022\'"
  "\n\037custom_game_disabled_until_date\030\? \001(\r\022"
  "\'\n\037custom_game_disabled_account_id\030@ \001(\r"
  "\022\032\n\022is_challenge_match\030A \001(\010\"0\n\005State\022\006\n"
  "\002UI\020\000\022\021\n\rFINDING_MATCH\020\001\022\014\n\010IN_MATCH\020\002\"\246"
  "\002\n\022CSODOTAPartyInvite\022\026\n\010group_id\030\001 \001(\004B"
  "\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name\030"
  "\003 \001(\t\022;\n\007members\030\004 \003(\0132*.proto.dota.CSOD"
  "OTAPartyInvite.PartyMember\022\017\n\007team_id\030\005 "
  "\001(\r\022\033\n\023low_priority_status\030\006 \001(\010\022\020\n\010as_c"
  "oach\030\007 \001(\010\022\022\n\ninvite_gid\030\010 \001(\006\032\?\n\013PartyM"
  "ember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\022\020\n"
  "\010is_coach\030\004 \001(\010\"\244\002\n\022CSODOTALobbyInvite\022\026"
  "\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001("
  "\006\022\023\n\013sender_name\030\003 \001(\t\022;\n\007members\030\004 \003(\0132"
  "*.proto.dota.CSODOTALobbyInvite.LobbyMem"
  "ber\022\026\n\016custom_game_id\030\005 \001(\004\022\022\n\ninvite_gi"
  "d\030\006 \001(\006\022\027\n\017custom_game_crc\030\007 \001(\006\022\035\n\025cust"
  "om_game_timestamp\030\010 \001(\007\032-\n\013LobbyMember\022\014"
  "\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\"\340\001\n\017CMsgL"
  "eaverState\022\023\n\013lobby_state\030\001 \001(\r\022I\n\ngame_"
  "state\030\002 \001(\0162\032.proto.dota.DOTA_GameState:"
  "\031DOTA_GAMERULES_STATE_INIT\022\027\n\017leaver_det"
  "ected\030\003 \001(\010\022\034\n\024first_blood_happened\030\004 \001("
  "\010\022\035\n\025discard_match_results\030\005 \001(\010\022\027\n\017mass"
  "_disconnect\030\006 \001(\010\"\254\t\n\020CDOTALobbyMember\022\020"
  "\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017\n\007hero_id\030\002 \001(\r\022>\n\004tea"
  "m\030\003 \001(\0162\030.proto.dota.DOTA_GC_TEAM:\026DOTA_"
  "GC_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001(\t\022\014\n\004slot\030"
  "\007 \001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nmeta_level\030\r "
  "\001(\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_xp_awarded\030"
  "\017 \001(\r\022G\n\rleaver_status\030\020 \001(\0162\036.proto.dot"
  "a.DOTALeaverStatus_t:\020DOTA_LEAVER_NONE\022\026"
  "\n\016leaver_actions\030\034 \001(\r\022\017\n\007channel\030\021 \001(\r\022"
  "\027\n\017prize_def_index\030\022 \001(\r\022\030\n\020disabled_her"
  "o_id\030\024 \003(\r\022J\n\024partner_account_type\030\025 \001(\016"
  "2\036.proto.dota.PartnerAccountType:\014PARTNE"
  "R_NONE\022\027\n\017enabled_hero_id\030\026 \003(\r\022A\n\ncoach"
  "_team\030\027 \001(\0162\030.proto.dota.DOTA_GC_TEAM:\023D"
  "OTA_GC_TEAM_NOTEAM\022\032\n\022pwrd_cyber_cafe_id"
  "\030\030 \001(\r\022\034\n\024pwrd_cyber_cafe_name\030\031 \001(\t\022\037\n\027"
  "disabled_random_hero_id\030\032 \003(\r\022H\n\nxp_bonu"
  "ses\030\033 \003(\01324.proto.dota.CDOTALobbyMember."
  "CDOTALobbyMemberXPBonus\022\023\n\013rank_change\030\035"
  " \001(\021\022\021\n\tcameraman\030\036 \001(\010\022\037\n\027custom_game_p"
  "roduct_ids\030\037 \003(\r\022!\n\031lobby_mvp_vote_accou"
  "nt_id\030  \001(\r\022C\n\021search_match_type\030! \001(\0162\025"
  ".proto.dota.MatchType:\021MATCH_TYPE_CASUAL"
  "\022\034\n\024favorite_team_packed\030# \001(\004\022\032\n\022is_plu"
  "s_subscriber\030$ \001(\010\022\031\n\021rank_tier_updated\030"
  "% \001(\010\022\034\n\024lane_selection_flags\030& \001(\r\022\030\n\020c"
  "an_earn_rewards\030\' \001(\010\022J\n\023live_spectator_"
  "team\030( \001(\0162\030.proto.dota.DOTA_GC_TEAM:\023DO"
  "TA_GC_TEAM_NOTEAM\032M\n\027CDOTALobbyMemberXPB"
  "onus\022\014\n\004type\030\001 \001(\r\022\020\n\010xp_bonus\030\002 \001(\002\022\022\n\n"
  "source_key\030\003 \001(\004\"\271\003\n\021CLobbyTeamDetails\022\021"
  "\n\tteam_name\030\001 \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007t"
  "eam_id\030\004 \001(\r\022\021\n\tteam_logo\030\005 \001(\004\022\026\n\016team_"
  "base_logo\030\006 \001(\004\022\030\n\020team_banner_logo\030\007 \001("
  "\004\022\025\n\rteam_complete\030\010 \001(\010\022\025\n\rteam_logo_ur"
  "l\030\024 \001(\t\022\022\n\nguild_name\030\t \001(\t\022\021\n\tguild_tag"
  "\030\n \001(\t\022\020\n\010guild_id\030\013 \001(\r\022\022\n\nguild_logo\030\014"
  " \001(\004\022\027\n\017guild_base_logo\030\r \001(\004\022\031\n\021guild_b"
  "anner_logo\030\016 \001(\004\022\014\n\004rank\030\017 \001(\r\022\023\n\013rank_c"
  "hange\030\020 \001(\021\022\024\n\014is_home_team\030\021 \001(\010\022\032\n\022is_"
  "challenge_match\030\022 \001(\010\022%\n\035challenge_match"
  "_token_account\030\023 \001(\004\"\206\001\n\030CLobbyTimedRewa"
  "rdDetails\022\026\n\016item_def_index\030\002 \001(\r\022\027\n\017is_"
  "supply_crate\030\003 \001(\010\022\025\n\ris_timed_drop\030\004 \001("
  "\010\022\022\n\naccount_id\030\005 \001(\r\022\016\n\006origin\030\006 \001(\r\"r\n"
  "\032CLobbyBroadcastChannelInfo\022\022\n\nchannel_i"
  "d\030\001 \001(\r\022\024\n\014country_code\030\002 \001(\t\022\023\n\013descrip"
  "tion\030\003 \001(\t\022\025\n\rlanguage_code\030\004 \001(\t\"\333\036\n\014CS"
  "ODOTALobby\022\026\n\010lobby_id\030\001 \001(\004B\004\200\246\035\001\022-\n\007me"
  "mbers\030\002 \003(\0132\034.proto.dota.CDOTALobbyMembe"
  "r\0222\n\014left_members\030\007 \003(\0132\034.proto.dota.CDO"
  "TALobbyMember\022\021\n\tleader_id\030\013 \001(\006\022\024\n\tserv"
  "er_id\030\006 \001(\006:\0010\022\021\n\tgame_mode\030\003 \001(\r\022\027\n\017pen"
  "ding_invites\030\n \003(\006\0221\n\005state\030\004 \001(\0162\036.prot"
  "o.dota.CSODOTALobby.State:\002UI\022\017\n\007connect"
  "\030\005 \001(\t\022\?\n\nlobby_type\030\014 \001(\0162\".proto.dota."
  "CSODOTALobby.LobbyType:\007INVALID\022\024\n\014allow"
  "_cheats\030\r \001(\010\022\026\n\016fill_with_bots\030\016 \001(\010\022\022\n"
  "\nintro_mode\030\017 \001(\010\022\021\n\tgame_name\030\020 \001(\t\0223\n\014"
  "team_details\030\021 \003(\0132\035.proto.dota.CLobbyTe"
  "amDetails\022\027\n\017tutorial_lesson\030\022 \001(\r\022\025\n\rto"
  "urnament_id\030\023 \001(\r\022\032\n\022tournament_game_id\030"
  "\024 \001(\r\022\030\n\rserver_region\030\025 \001(\r:\0010\022I\n\ngame_"
  "state\030\026 \001(\0162\032.proto.dota.DOTA_GameState:"
  "\031DOTA_GAMERULES_STATE_INIT\022\026\n\016num_specta"
  "tors\030\027 \001(\r\022\022\n\nmatchgroup\030\031 \001(\r\0229\n\007cm_pic"
  "k\030\034 \001(\0162\030.proto.dota.DOTA_CM_PICK:\016DOTA_"
  "CM_RANDOM\022\020\n\010match_id\030\036 \001(\004\022\036\n\020allow_spe"
  "ctating\030\037 \001(\010:\004true\022R\n\026bot_difficulty_ra"
  "diant\030$ \001(\0162\035.proto.dota.DOTABotDifficul"
  "ty:\023BOT_DIFFICULTY_HARD\022G\n\014game_version\030"
  "% \001(\0162\033.proto.dota.DOTAGameVersion:\024GAME"
  "_VERSION_CURRENT\022B\n\024timed_reward_details"
  "\030& \003(\0132$.proto.dota.CLobbyTimedRewardDet"
  "ails\022\020\n\010pass_key\030\' \001(\t\022\020\n\010leagueid\030* \001(\r"
  "\022 \n\025penalty_level_radiant\030+ \001(\r:\0010\022\035\n\022pe"
  "nalty_level_dire\030, \001(\r:\0010\022\024\n\014load_game_i"
  "d\030- \001(\r\022\023\n\013series_type\030. \001(\r\022\033\n\023radiant_"
  "series_wins\030/ \001(\r\022\030\n\020dire_series_wins\0300 "
  "\001(\r\022\026\n\016loot_generated\0301 \001(\r\022\024\n\014loot_awar"
  "ded\0302 \001(\r\022\026\n\007allchat\0303 \001(\010:\005false\022C\n\rdot"
  "a_tv_delay\0305 \001(\0162\034.proto.dota.LobbyDotaT"
  "VDelay:\016LobbyDotaTV_10\022\030\n\020custom_game_mo"
  "de\0306 \001(\t\022\027\n\017custom_map_name\0307 \001(\t\022\031\n\021cus"
  "tom_difficulty\0308 \001(\r\022\013\n\003lan\0309 \001(\010\022F\n\026bro"
  "adcast_channel_info\030: \003(\0132&.proto.dota.C"
  "LobbyBroadcastChannelInfo\022\036\n\026first_leave"
  "r_accountid\030; \001(\r\022\021\n\tseries_id\030< \001(\r\022\024\n\014"
  "low_priority\030= \001(\010\022:\n\016extra_messages\030> \003"
  "(\0132\".proto.dota.CSODOTALobby.CExtraMsg\022,"
  "\n\tsave_game\030\? \001(\0132\031.proto.dota.CDOTASave"
  "Game\022\034\n\024first_blood_happened\030A \001(\010\022I\n\rma"
  "tch_outcome\030F \001(\0162\031.proto.dota.EMatchOut"
  "come:\027k_EMatchOutcome_Unknown\022\027\n\017mass_di"
  "sconnect\030C \001(\010\022\026\n\016custom_game_id\030D \001(\004\022\032"
  "\n\022custom_min_players\030G \001(\r\022\032\n\022custom_max"
  "_players\030H \001(\r\022B\n\014partner_type\030I \001(\0162\036.p"
  "roto.dota.PartnerAccountType:\014PARTNER_NO"
  "NE\022O\n\nvisibility\030K \001(\0162\037.proto.dota.DOTA"
  "LobbyVisibility:\032DOTALobbyVisibility_Pub"
  "lic\022\027\n\017custom_game_crc\030L \001(\006\022&\n\036custom_g"
  "ame_auto_created_lobby\030M \001(\010\022\035\n\025custom_g"
  "ame_timestamp\030P \001(\007\022\037\n\027previous_series_m"
  "atches\030Q \003(\004\022\037\n\027previous_match_override\030"
  "R \001(\004\022(\n custom_game_uses_account_record"
  "s\030S \001(\010\022\027\n\017game_start_time\030W \001(\r\022Y\n\rpaus"
  "e_setting\030X \001(\0162!.proto.dota.LobbyDotaPa"
  "useSetting:\037LobbyDotaPauseSetting_Unlimi"
  "ted\022\034\n\024lobby_mvp_account_id\030Y \001(\r\022#\n\033wee"
  "kend_tourney_division_id\030Z \001(\r\022#\n\033weeken"
  "d_tourney_skill_level\030[ \001(\r\022%\n\035weekend_t"
  "ourney_bracket_round\030\\ \001(\r\022O\n\023bot_diffic"
  "ulty_dire\030] \001(\0162\035.proto.dota.DOTABotDiff"
  "iculty:\023BOT_DIFFICULTY_HARD\022\023\n\013bot_radia"
  "nt\030^ \001(\004\022\020\n\010bot_dire\030_ \001(\004\0225\n\031event_prog"
  "ression_enabled\030` \003(\0162\022.proto.dota.EEven"
  "t\022m\n\030selection_priority_rules\030a \001(\0162&.pr"
  "oto.dota.DOTASelectionPriorityRules:#k_D"
  "OTASelectionPriorityRules_Manual\0222\n*seri"
  "es_previous_selection_priority_team_id\030b"
  " \001(\r\0221\n)series_current_selection_priorit"
  "y_team_id\030c \001(\r\022{\n#series_current_priori"
  "ty_team_choice\030d \001(\0162\'.proto.dota.DOTASe"
  "lectionPriorityChoice:%k_DOTASelectionPr"
  "iorityChoice_Invalid\022\177\n\'series_current_n"
  "on_priority_team_choice\030e \001(\0162\'.proto.do"
  "ta.DOTASelectionPriorityChoice:%k_DOTASe"
  "lectionPriorityChoice_Invalid\0228\n0series_"
  "current_selection_priority_used_coin_tos"
  "s\030f \001(\010\022@\n\025current_primary_event\030g \001(\0162\022"
  ".proto.dota.EEvent:\rEVENT_ID_NONE\022\031\n\021low"
  "pri_deprecated\030h \001(\010\022#\n\033emergency_disabl"
  "ed_hero_ids\030i \003(\r\022\037\n\027custom_game_private"
  "_key\030j \001(\006\022\035\n\025custom_game_penalties\030k \001("
  "\010\022\021\n\tmutations\030l \003(\r\022\036\n\026lan_host_ping_lo"
  "cation\030m \001(\t\022\026\n\016league_node_id\030n \001(\r\022\026\n\016"
  "match_duration\030o \001(\r\032)\n\tCExtraMsg\022\n\n\002id\030"
  "\001 \001(\r\022\020\n\010contents\030\002 \001(\014\"d\n\005State\022\006\n\002UI\020\000"
  "\022\013\n\007READYUP\020\004\022\017\n\013SERVERSETUP\020\001\022\007\n\003RUN\020\002\022"
  "\014\n\010POSTGAME\020\003\022\014\n\010NOTREADY\020\005\022\020\n\014SERVERASS"
  "IGN\020\006\"\357\001\n\tLobbyType\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377"
  "\001\022\020\n\014CASUAL_MATCH\020\000\022\014\n\010PRACTICE\020\001\022\022\n\016COO"
  "P_BOT_MATCH\020\004\022\025\n\021LEGACY_TEAM_MATCH\020\005\022\033\n\027"
  "LEGACY_SOLO_QUEUE_MATCH\020\006\022\025\n\021COMPETITIVE"
  "_MATCH\020\007\022\024\n\020CASUAL_1V1_MATCH\020\010\022\023\n\017WEEKEN"
  "D_TOURNEY\020\t\022\023\n\017LOCAL_BOT_MATCH\020\n\022\r\n\tSPEC"
  "TATOR\020\013\"(\n\030CMsgLobbyPlaytestDetails\022\014\n\004j"
  "son\030\001 \001(\t\"\241\002\n\024CMsgReadyCheckStatus\022\027\n\017st"
  "art_timestamp\030\001 \001(\r\022\030\n\020finish_timestamp\030"
  "\002 \001(\r\022\034\n\024initiator_account_id\030\003 \001(\r\022C\n\rr"
  "eady_members\030\004 \003(\0132,.proto.dota.CMsgRead"
  "yCheckStatus.ReadyMember\032s\n\013ReadyMember\022"
  "\022\n\naccount_id\030\001 \001(\r\022P\n\014ready_status\030\002 \001("
  "\0162\035.proto.dota.EReadyCheckStatus:\033k_ERea"
  "dyCheckStatus_Unknown\"\034\n\032CMsgPartyReadyC"
  "heckRequest\"w\n\033CMsgPartyReadyCheckRespon"
  "se\022X\n\006result\030\001 \001(\0162$.proto.dota.EReadyCh"
  "eckRequestResult:\"k_EReadyCheckRequestRe"
  "sult_Success\"r\n\036CMsgPartyReadyCheckAckno"
  "wledge\022P\n\014ready_status\030\001 \001(\0162\035.proto.dot"
  "a.EReadyCheckStatus:\033k_EReadyCheckStatus"
  "_Unknown\",\n\031CMsgLobbyEventGameDetails\022\017\n"
  "\007kv_data\030\001 \001(\014*\334\001\n\023ELaneSelectionFlags\0221"
  "\n-k_ELaneSelectionFlags_LANE_SELECTION_S"
  "AFELANE\020\001\0220\n,k_ELaneSelectionFlags_LANE_"
  "SELECTION_OFFLANE\020\002\0220\n,k_ELaneSelectionF"
  "lags_LANE_SELECTION_MIDLANE\020\004\022.\n*k_ELane"
  "SelectionFlags_LANE_SELECTION_OTHER\020\010*P\n"
  "\020LobbyDotaTVDelay\022\022\n\016LobbyDotaTV_10\020\000\022\023\n"
  "\017LobbyDotaTV_120\020\001\022\023\n\017LobbyDotaTV_300\020\002*"
  "\203\001\n\025LobbyDotaPauseSetting\022#\n\037LobbyDotaPa"
  "useSetting_Unlimited\020\000\022!\n\035LobbyDotaPause"
  "Setting_Limited\020\001\022\"\n\036LobbyDotaPauseSetti"
  "ng_Disabled\020\002*u\n\021EReadyCheckStatus\022\037\n\033k_"
  "EReadyCheckStatus_Unknown\020\000\022 \n\034k_EReadyC"
  "heckStatus_NotReady\020\001\022\035\n\031k_EReadyCheckSt"
  "atus_Ready\020\002*\366\001\n\030EReadyCheckRequestResul"
  "t\022&\n\"k_EReadyCheckRequestResult_Success\020"
  "\000\0220\n,k_EReadyCheckRequestResult_AlreadyI"
  "nProgress\020\001\022)\n%k_EReadyCheckRequestResul"
  "t_NotInParty\020\002\022(\n$k_EReadyCheckRequestRe"
  "sult_SendError\020\003\022+\n\'k_EReadyCheckRequest"
  "Result_UnknownError\020\004B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  "dota_gcmessages_common_match_management.proto", &assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, 10308,
};

void AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_steammessages_2eproto,
    ::AddDescriptors_gcsdk_5fgcmessages_2eproto,
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[0];
}
bool CSODOTAParty_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTAParty_State CSODOTAParty::UI;
const CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
const CSODOTAParty_State CSODOTAParty::IN_MATCH;
const CSODOTAParty_State CSODOTAParty::State_MIN;
const CSODOTAParty_State CSODOTAParty::State_MAX;
const int CSODOTAParty::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[1];
}
bool CSODOTALobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTALobby_State CSODOTALobby::UI;
const CSODOTALobby_State CSODOTALobby::READYUP;
const CSODOTALobby_State CSODOTALobby::SERVERSETUP;
const CSODOTALobby_State CSODOTALobby::RUN;
const CSODOTALobby_State CSODOTALobby::POSTGAME;
const CSODOTALobby_State CSODOTALobby::NOTREADY;
const CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
const CSODOTALobby_State CSODOTALobby::State_MIN;
const CSODOTALobby_State CSODOTALobby::State_MAX;
const int CSODOTALobby::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[2];
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTALobby_LobbyType CSODOTALobby::INVALID;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
const CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_TEAM_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_SOLO_QUEUE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_1V1_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
const CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::SPECTATOR;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
const int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ELaneSelectionFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[3];
}
bool ELaneSelectionFlags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[4];
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[5];
}
bool LobbyDotaPauseSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReadyCheckStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[6];
}
bool EReadyCheckStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReadyCheckRequestResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[7];
}
bool EReadyCheckRequestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CSODOTAPartyMember::InitAsDefaultInstance() {
}
class CSODOTAPartyMember::HasBitSetters {
 public:
  static void set_has_partner_type(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_coach(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_region_ping_failed_bitmask(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_plus_subscriber(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tourney_skill_level(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_tourney_buyin(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_tourney_prevent_until(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lane_selection_flags(CSODOTAPartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyMember::kPartnerTypeFieldNumber;
const int CSODOTAPartyMember::kIsCoachFieldNumber;
const int CSODOTAPartyMember::kRegionPingCodesFieldNumber;
const int CSODOTAPartyMember::kRegionPingTimesFieldNumber;
const int CSODOTAPartyMember::kRegionPingFailedBitmaskFieldNumber;
const int CSODOTAPartyMember::kIsPlusSubscriberFieldNumber;
const int CSODOTAPartyMember::kTourneySkillLevelFieldNumber;
const int CSODOTAPartyMember::kTourneyBuyinFieldNumber;
const int CSODOTAPartyMember::kTourneyPreventUntilFieldNumber;
const int CSODOTAPartyMember::kLaneSelectionFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyMember::CSODOTAPartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyMember)
}
CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_ping_codes_(from.region_ping_codes_),
      region_ping_times_(from.region_ping_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&partner_type_, &from.partner_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_selection_flags_) -
    reinterpret_cast<char*>(&partner_type_)) + sizeof(lane_selection_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyMember)
}

void CSODOTAPartyMember::SharedCtor() {
  ::memset(&partner_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_selection_flags_) -
      reinterpret_cast<char*>(&partner_type_)) + sizeof(lane_selection_flags_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyMember)
  SharedDtor();
}

void CSODOTAPartyMember::SharedDtor() {
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAPartyMember& CSODOTAPartyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAPartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_ping_codes_.Clear();
  region_ping_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&partner_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_selection_flags_) -
        reinterpret_cast<char*>(&partner_type_)) + sizeof(lane_selection_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAPartyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAPartyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PartnerAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_partner_type(static_cast<::proto::dota::PartnerAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_coach = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_coach(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_region_ping_codes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_region_ping_codes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_region_ping_times();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_region_ping_times(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // optional uint32 region_ping_failed_bitmask = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_region_ping_failed_bitmask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_skill_level = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_buyin = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_tourney_buyin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_prevent_until = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_tourney_prevent_until(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_plus_subscriber = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_plus_subscriber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lane_selection_flags = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_lane_selection_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coach = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_coach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_region_ping_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_times())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_region_ping_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_ping_failed_bitmask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_region_ping_failed_bitmask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_ping_failed_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_buyin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_tourney_buyin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_buyin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_prevent_until = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_tourney_prevent_until(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_prevent_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plus_subscriber = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_plus_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plus_subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_selection_flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_lane_selection_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_selection_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->partner_type(), output);
  }

  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coach(), output);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_codes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->region_ping_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_codes(i), output);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_times_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->region_ping_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_times(i), output);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->region_ping_failed_bitmask(), output);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tourney_buyin(), output);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tourney_prevent_until(), output);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_plus_subscriber(), output);
  }

  // optional uint32 lane_selection_flags = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lane_selection_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyMember)
}

::google::protobuf::uint8* CSODOTAPartyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->partner_type(), target);
  }

  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coach(), target);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _region_ping_codes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_codes_, target);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _region_ping_times_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_times_, target);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->region_ping_failed_bitmask(), target);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tourney_buyin(), target);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tourney_prevent_until(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_plus_subscriber(), target);
  }

  // optional uint32 lane_selection_flags = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lane_selection_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyMember)
  return target;
}

size_t CSODOTAPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_ping_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _region_ping_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_ping_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _region_ping_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional uint32 region_ping_failed_bitmask = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_ping_failed_bitmask());
    }

    // optional bool is_coach = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 tourney_skill_level = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_buyin = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_buyin());
    }

    // optional uint32 tourney_prevent_until = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_prevent_until());
    }

    // optional uint32 lane_selection_flags = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_selection_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAPartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_ping_codes_.MergeFrom(from.region_ping_codes_);
  region_ping_times_.MergeFrom(from.region_ping_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      partner_type_ = from.partner_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_coach_ = from.is_coach_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000010u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      tourney_buyin_ = from.tourney_buyin_;
    }
    if (cached_has_bits & 0x00000040u) {
      tourney_prevent_until_ = from.tourney_prevent_until_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyMember::Swap(CSODOTAPartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyMember::InternalSwap(CSODOTAPartyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_ping_codes_.InternalSwap(&other->region_ping_codes_);
  region_ping_times_.InternalSwap(&other->region_ping_times_);
  swap(partner_type_, other->partner_type_);
  swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
  swap(is_coach_, other->is_coach_);
  swap(is_plus_subscriber_, other->is_plus_subscriber_);
  swap(tourney_skill_level_, other->tourney_skill_level_);
  swap(tourney_buyin_, other->tourney_buyin_);
  swap(tourney_prevent_until_, other->tourney_prevent_until_);
  swap(lane_selection_flags_, other->lane_selection_flags_);
}

::google::protobuf::Metadata CSODOTAPartyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAParty::InitAsDefaultInstance() {
  ::proto::dota::_CSODOTAParty_default_instance_._instance.get_mutable()->ready_check_ = const_cast< ::proto::dota::CMsgReadyCheckStatus*>(
      ::proto::dota::CMsgReadyCheckStatus::internal_default_instance());
}
class CSODOTAParty::HasBitSetters {
 public:
  static void set_has_party_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leader_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_modes(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_state(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_effective_started_matchmaking_time(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_raw_started_matchmaking_time(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_attempt_start_time(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_attempt_num(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_matchgroups(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_low_priority_account_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_match_type(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_bot_difficulty(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_team_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_team_name(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_ui_logo(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_team_base_logo(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_match_disabled_until_date(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_match_disabled_account_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_matchmaking_max_range_minutes(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_matchlanguages(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_open_guild_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_low_priority_games_remaining(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_open_for_join_requests(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_account_flags(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_region_select_flags(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_exclusive_tournament_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_tourney_division_id(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_tourney_schedule_time(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_tourney_skill_level(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_tourney_bracket_round(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_tourney_queue_deadline_time(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_tourney_queue_deadline_state(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_party_builder_slots_to_fill(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_party_builder_match_groups(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_party_builder_start_time(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_solo_queue(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_bot_script_index(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_steam_clan_account_id(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static const ::proto::dota::CMsgReadyCheckStatus& ready_check(const CSODOTAParty* msg);
  static void set_has_ready_check(CSODOTAParty* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_custom_game_disabled_until_date(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_custom_game_disabled_account_id(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_is_challenge_match(CSODOTAParty* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgReadyCheckStatus&
CSODOTAParty::HasBitSetters::ready_check(const CSODOTAParty* msg) {
  return *msg->ready_check_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAParty::kPartyIdFieldNumber;
const int CSODOTAParty::kLeaderIdFieldNumber;
const int CSODOTAParty::kMemberIdsFieldNumber;
const int CSODOTAParty::kGameModesFieldNumber;
const int CSODOTAParty::kStateFieldNumber;
const int CSODOTAParty::kEffectiveStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kRawStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kAttemptStartTimeFieldNumber;
const int CSODOTAParty::kAttemptNumFieldNumber;
const int CSODOTAParty::kMatchgroupsFieldNumber;
const int CSODOTAParty::kLowPriorityAccountIdFieldNumber;
const int CSODOTAParty::kMatchTypeFieldNumber;
const int CSODOTAParty::kBotDifficultyFieldNumber;
const int CSODOTAParty::kTeamIdFieldNumber;
const int CSODOTAParty::kTeamNameFieldNumber;
const int CSODOTAParty::kTeamUiLogoFieldNumber;
const int CSODOTAParty::kTeamBaseLogoFieldNumber;
const int CSODOTAParty::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAParty::kMatchDisabledAccountIdFieldNumber;
const int CSODOTAParty::kMatchmakingMaxRangeMinutesFieldNumber;
const int CSODOTAParty::kMatchlanguagesFieldNumber;
const int CSODOTAParty::kMembersFieldNumber;
const int CSODOTAParty::kOpenGuildIdFieldNumber;
const int CSODOTAParty::kCommonGuildsFieldNumber;
const int CSODOTAParty::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAParty::kOpenForJoinRequestsFieldNumber;
const int CSODOTAParty::kSentInvitesFieldNumber;
const int CSODOTAParty::kRecvInvitesFieldNumber;
const int CSODOTAParty::kAccountFlagsFieldNumber;
const int CSODOTAParty::kRegionSelectFlagsFieldNumber;
const int CSODOTAParty::kExclusiveTournamentIdFieldNumber;
const int CSODOTAParty::kTourneyDivisionIdFieldNumber;
const int CSODOTAParty::kTourneyScheduleTimeFieldNumber;
const int CSODOTAParty::kTourneySkillLevelFieldNumber;
const int CSODOTAParty::kTourneyBracketRoundFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineTimeFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineStateFieldNumber;
const int CSODOTAParty::kPartyBuilderSlotsToFillFieldNumber;
const int CSODOTAParty::kPartyBuilderMatchGroupsFieldNumber;
const int CSODOTAParty::kPartyBuilderStartTimeFieldNumber;
const int CSODOTAParty::kSoloQueueFieldNumber;
const int CSODOTAParty::kBotScriptIndexFieldNumber;
const int CSODOTAParty::kSteamClanAccountIdFieldNumber;
const int CSODOTAParty::kReadyCheckFieldNumber;
const int CSODOTAParty::kCustomGameDisabledUntilDateFieldNumber;
const int CSODOTAParty::kCustomGameDisabledAccountIdFieldNumber;
const int CSODOTAParty::kIsChallengeMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAParty::CSODOTAParty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAParty)
}
CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_ids_(from.member_ids_),
      members_(from.members_),
      common_guilds_(from.common_guilds_),
      sent_invites_(from.sent_invites_),
      recv_invites_(from.recv_invites_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  if (from.has_ready_check()) {
    ready_check_ = new ::proto::dota::CMsgReadyCheckStatus(*from.ready_check_);
  } else {
    ready_check_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_disabled_account_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(custom_game_disabled_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAParty)
}

void CSODOTAParty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ready_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_disabled_account_id_) -
      reinterpret_cast<char*>(&ready_check_)) + sizeof(custom_game_disabled_account_id_));
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAParty)
  SharedDtor();
}

void CSODOTAParty::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ready_check_;
}

void CSODOTAParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAParty& CSODOTAParty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAParty_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_ids_.Clear();
  members_.Clear();
  common_guilds_.Clear();
  sent_invites_.Clear();
  recv_invites_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ready_check_ != nullptr);
      ready_check_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchgroups_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(matchgroups_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&low_priority_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchlanguages_) -
        reinterpret_cast<char*>(&low_priority_account_id_)) + sizeof(matchlanguages_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&open_guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exclusive_tournament_id_) -
        reinterpret_cast<char*>(&open_guild_id_)) + sizeof(exclusive_tournament_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tourney_division_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_for_join_requests_) -
        reinterpret_cast<char*>(&tourney_division_id_)) + sizeof(open_for_join_requests_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&solo_queue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_clan_account_id_) -
        reinterpret_cast<char*>(&solo_queue_)) + sizeof(steam_clan_account_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&custom_game_disabled_until_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_disabled_account_id_) -
        reinterpret_cast<char*>(&custom_game_disabled_until_date_)) + sizeof(custom_game_disabled_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAParty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAParty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_party_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 leader_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_leader_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed64 member_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 25) {
          do {
            msg->add_member_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_member_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 game_modes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_modes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CSODOTAParty_State_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::dota::CSODOTAParty_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_effective_started_matchmaking_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchgroups = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_matchgroups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_low_priority_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(21, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_type(static_cast<::proto::dota::MatchType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(22, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_match_disabled_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_match_disabled_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_matchmaking_max_range_minutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchlanguages = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_matchlanguages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSODOTAPartyMember members = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTAPartyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 490 && (ptr += 2));
        break;
      }
      // optional uint32 open_guild_id = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_open_guild_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 common_guilds = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) == 248) {
          do {
            msg->add_common_guilds(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 504 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_common_guilds();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_raw_started_matchmaking_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_attempt_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 attempt_num = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attempt_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_low_priority_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool open_for_join_requests = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_open_for_join_requests(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTAPartyInvite::_InternalParse;
          object = msg->add_sent_invites();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 714 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTAPartyInvite::_InternalParse;
          object = msg->add_recv_invites();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 722 && (ptr += 2));
        break;
      }
      // optional uint32 account_flags = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_account_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 region_select_flags = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_region_select_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 exclusive_tournament_id = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_exclusive_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_division_id = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_tourney_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_schedule_time = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_tourney_schedule_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_skill_level = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_bracket_round = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_tourney_bracket_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTAParty.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_ui_logo = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_team_ui_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team_base_logo = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_team_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tourney_queue_deadline_time = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_tourney_queue_deadline_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETourneyQueueDeadlineState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(55, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_tourney_queue_deadline_state(static_cast<::proto::dota::ETourneyQueueDeadlineState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_builder_slots_to_fill = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_party_builder_slots_to_fill(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_builder_match_groups = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_party_builder_match_groups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_builder_start_time = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_party_builder_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solo_queue = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_solo_queue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bot_script_index = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_bot_script_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steam_clan_account_id = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_steam_clan_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgReadyCheckStatus::_InternalParse;
        object = msg->mutable_ready_check();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 custom_game_disabled_until_date = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_custom_game_disabled_until_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_game_disabled_account_id = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_custom_game_disabled_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_challenge_match = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_challenge_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAParty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_leader_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 member_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_member_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_modes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_modes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTAParty_State_IsValid(value)) {
            set_state(static_cast< ::proto::dota::CSODOTAParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_effective_started_matchmaking_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_started_matchmaking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_matchgroups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_low_priority_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_match_disabled_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_match_disabled_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_matchmaking_max_range_minutes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_max_range_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchlanguages = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_matchlanguages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyMember members = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 open_guild_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_open_guild_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 common_guilds = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248u, input, this->mutable_common_guilds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_common_guilds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_raw_started_matchmaking_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_started_matchmaking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_attempt_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_num = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_attempt_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_low_priority_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool open_for_join_requests = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_open_for_join_requests(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_for_join_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sent_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_recv_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_account_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_select_flags = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_region_select_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exclusive_tournament_id = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_exclusive_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exclusive_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_division_id = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_tourney_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_schedule_time = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_tourney_schedule_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_bracket_round = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_tourney_bracket_round(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAParty.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_ui_logo = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_team_ui_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          HasBitSetters::set_has_team_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_queue_deadline_time = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          HasBitSetters::set_has_tourney_queue_deadline_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_queue_deadline_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETourneyQueueDeadlineState_IsValid(value)) {
            set_tourney_queue_deadline_state(static_cast< ::proto::dota::ETourneyQueueDeadlineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                55, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_slots_to_fill = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_party_builder_slots_to_fill(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_slots_to_fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_match_groups = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {
          HasBitSetters::set_has_party_builder_match_groups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_match_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_start_time = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {
          HasBitSetters::set_has_party_builder_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_queue = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_solo_queue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_script_index = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_bot_script_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_script_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_clan_account_id = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_steam_clan_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_clan_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (498 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ready_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_game_disabled_until_date = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {
          HasBitSetters::set_has_custom_game_disabled_until_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_game_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_game_disabled_account_id = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {
          HasBitSetters::set_has_custom_game_disabled_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_game_disabled_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_challenge_match = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_is_challenge_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_challenge_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAParty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->member_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective_started_matchmaking_time(), output);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->matchgroups(), output);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->low_priority_account_id(), output);
  }

  // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->match_type(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bot_difficulty(), output);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->team_id(), output);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->match_disabled_account_id(), output);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_max_range_minutes(), output);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchlanguages(), output);
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint32 open_guild_id = 30;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_guild_id(), output);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0, n = this->common_guilds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->common_guilds(i), output);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->raw_started_matchmaking_time(), output);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->attempt_start_time(), output);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attempt_num(), output);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->low_priority_games_remaining(), output);
  }

  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->open_for_join_requests(), output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sent_invites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41,
      this->sent_invites(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_invites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42,
      this->recv_invites(static_cast<int>(i)),
      output);
  }

  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->account_flags(), output);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->region_select_flags(), output);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->exclusive_tournament_id(), output);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->tourney_division_id(), output);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->tourney_schedule_time(), output);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->tourney_bracket_round(), output);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAParty.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->team_name(), output);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->team_ui_logo(), output);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->team_base_logo(), output);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->tourney_queue_deadline_time(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      55, this->tourney_queue_deadline_state(), output);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->party_builder_slots_to_fill(), output);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->party_builder_match_groups(), output);
  }

  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->party_builder_start_time(), output);
  }

  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->solo_queue(), output);
  }

  // optional uint32 bot_script_index = 60;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->bot_script_index(), output);
  }

  // optional uint32 steam_clan_account_id = 61;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->steam_clan_account_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, HasBitSetters::ready_check(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_game_disabled_until_date = 63;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->custom_game_disabled_until_date(), output);
  }

  // optional uint32 custom_game_disabled_account_id = 64;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->custom_game_disabled_account_id(), output);
  }

  // optional bool is_challenge_match = 65;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->is_challenge_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAParty)
}

::google::protobuf::uint8* CSODOTAParty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->member_ids_, target);

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->low_priority_account_id(), target);
  }

  // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->match_type(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bot_difficulty(), target);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchlanguages(), target);
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->members(static_cast<int>(i)), target);
  }

  // optional uint32 open_guild_id = 30;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_guild_id(), target);
  }

  // repeated uint32 common_guilds = 31;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(31, this->common_guilds_, target);

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->low_priority_games_remaining(), target);
  }

  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->open_for_join_requests(), target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sent_invites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->sent_invites(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_invites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->recv_invites(static_cast<int>(i)), target);
  }

  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->account_flags(), target);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->region_select_flags(), target);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->exclusive_tournament_id(), target);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->tourney_division_id(), target);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->tourney_schedule_time(), target);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->tourney_bracket_round(), target);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAParty.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->team_name(), target);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->team_ui_logo(), target);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->team_base_logo(), target);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->tourney_queue_deadline_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      55, this->tourney_queue_deadline_state(), target);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->party_builder_slots_to_fill(), target);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->party_builder_match_groups(), target);
  }

  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->party_builder_start_time(), target);
  }

  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->solo_queue(), target);
  }

  // optional uint32 bot_script_index = 60;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->bot_script_index(), target);
  }

  // optional uint32 steam_clan_account_id = 61;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->steam_clan_account_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62, HasBitSetters::ready_check(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_game_disabled_until_date = 63;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->custom_game_disabled_until_date(), target);
  }

  // optional uint32 custom_game_disabled_account_id = 64;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->custom_game_disabled_account_id(), target);
  }

  // optional bool is_challenge_match = 65;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->is_challenge_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAParty)
  return target;
}

size_t CSODOTAParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->member_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->member_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated uint32 common_guilds = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->common_guilds_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->common_guilds_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->sent_invites_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sent_invites(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->recv_invites_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->recv_invites(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 51;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ready_check_);
    }

    // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 leader_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_started_matchmaking_time());
    }

    // optional uint32 matchgroups = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 low_priority_account_id = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_account_id());
    }

    // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional uint32 team_id = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_account_id());
    }

    // optional uint32 matchmaking_max_range_minutes = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 open_guild_id = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_guild_id());
    }

    // optional uint32 raw_started_matchmaking_time = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_started_matchmaking_time());
    }

    // optional uint32 attempt_start_time = 33;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_start_time());
    }

    // optional uint32 attempt_num = 34;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_num());
    }

    // optional uint32 low_priority_games_remaining = 35;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 account_flags = 43;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 region_select_flags = 44;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

    // optional uint32 exclusive_tournament_id = 45;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exclusive_tournament_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tourney_division_id = 47;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_division_id());
    }

    // optional uint32 tourney_schedule_time = 48;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_schedule_time());
    }

    // optional uint32 tourney_skill_level = 49;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_bracket_round = 50;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_bracket_round());
    }

    // optional uint64 team_ui_logo = 52;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

    // optional uint64 team_base_logo = 53;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint32 tourney_queue_deadline_time = 54;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_queue_deadline_time());
    }

    // optional bool open_for_join_requests = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool solo_queue = 59;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 65;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tourney_queue_deadline_state());
    }

    // optional uint32 party_builder_slots_to_fill = 56;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_slots_to_fill());
    }

    // optional uint32 party_builder_match_groups = 57;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_match_groups());
    }

    // optional uint32 party_builder_start_time = 58;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_start_time());
    }

    // optional uint32 bot_script_index = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_script_index());
    }

    // optional uint32 steam_clan_account_id = 61;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_clan_account_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 custom_game_disabled_until_date = 63;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_game_disabled_until_date());
    }

    // optional uint32 custom_game_disabled_account_id = 64;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_game_disabled_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAParty* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAParty)
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  common_guilds_.MergeFrom(from.common_guilds_);
  sent_invites_.MergeFrom(from.sent_invites_);
  recv_invites_.MergeFrom(from.recv_invites_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ready_check()->::proto::dota::CMsgReadyCheckStatus::MergeFrom(from.ready_check());
    }
    if (cached_has_bits & 0x00000004u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      effective_started_matchmaking_time_ = from.effective_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      matchgroups_ = from.matchgroups_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      low_priority_account_id_ = from.low_priority_account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000800u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_disabled_account_id_ = from.match_disabled_account_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      matchmaking_max_range_minutes_ = from.matchmaking_max_range_minutes_;
    }
    if (cached_has_bits & 0x00008000u) {
      matchlanguages_ = from.matchlanguages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      open_guild_id_ = from.open_guild_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      raw_started_matchmaking_time_ = from.raw_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      attempt_start_time_ = from.attempt_start_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      attempt_num_ = from.attempt_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x00200000u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      region_select_flags_ = from.region_select_flags_;
    }
    if (cached_has_bits & 0x00800000u) {
      exclusive_tournament_id_ = from.exclusive_tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tourney_division_id_ = from.tourney_division_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      tourney_schedule_time_ = from.tourney_schedule_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      tourney_bracket_round_ = from.tourney_bracket_round_;
    }
    if (cached_has_bits & 0x10000000u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x20000000u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x40000000u) {
      tourney_queue_deadline_time_ = from.tourney_queue_deadline_time_;
    }
    if (cached_has_bits & 0x80000000u) {
      open_for_join_requests_ = from.open_for_join_requests_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000004u) {
      tourney_queue_deadline_state_ = from.tourney_queue_deadline_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_builder_slots_to_fill_ = from.party_builder_slots_to_fill_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_builder_match_groups_ = from.party_builder_match_groups_;
    }
    if (cached_has_bits & 0x00000020u) {
      party_builder_start_time_ = from.party_builder_start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      bot_script_index_ = from.bot_script_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      steam_clan_account_id_ = from.steam_clan_account_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      custom_game_disabled_until_date_ = from.custom_game_disabled_until_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      custom_game_disabled_account_id_ = from.custom_game_disabled_account_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSODOTAParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {
  return true;
}

void CSODOTAParty::Swap(CSODOTAParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAParty::InternalSwap(CSODOTAParty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  member_ids_.InternalSwap(&other->member_ids_);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  common_guilds_.InternalSwap(&other->common_guilds_);
  CastToBase(&sent_invites_)->InternalSwap(CastToBase(&other->sent_invites_));
  CastToBase(&recv_invites_)->InternalSwap(CastToBase(&other->recv_invites_));
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ready_check_, other->ready_check_);
  swap(party_id_, other->party_id_);
  swap(leader_id_, other->leader_id_);
  swap(game_modes_, other->game_modes_);
  swap(state_, other->state_);
  swap(effective_started_matchmaking_time_, other->effective_started_matchmaking_time_);
  swap(matchgroups_, other->matchgroups_);
  swap(low_priority_account_id_, other->low_priority_account_id_);
  swap(match_type_, other->match_type_);
  swap(bot_difficulty_, other->bot_difficulty_);
  swap(team_id_, other->team_id_);
  swap(match_disabled_until_date_, other->match_disabled_until_date_);
  swap(match_disabled_account_id_, other->match_disabled_account_id_);
  swap(matchmaking_max_range_minutes_, other->matchmaking_max_range_minutes_);
  swap(matchlanguages_, other->matchlanguages_);
  swap(open_guild_id_, other->open_guild_id_);
  swap(raw_started_matchmaking_time_, other->raw_started_matchmaking_time_);
  swap(attempt_start_time_, other->attempt_start_time_);
  swap(attempt_num_, other->attempt_num_);
  swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  swap(account_flags_, other->account_flags_);
  swap(region_select_flags_, other->region_select_flags_);
  swap(exclusive_tournament_id_, other->exclusive_tournament_id_);
  swap(tourney_division_id_, other->tourney_division_id_);
  swap(tourney_schedule_time_, other->tourney_schedule_time_);
  swap(tourney_skill_level_, other->tourney_skill_level_);
  swap(tourney_bracket_round_, other->tourney_bracket_round_);
  swap(team_ui_logo_, other->team_ui_logo_);
  swap(team_base_logo_, other->team_base_logo_);
  swap(tourney_queue_deadline_time_, other->tourney_queue_deadline_time_);
  swap(open_for_join_requests_, other->open_for_join_requests_);
  swap(solo_queue_, other->solo_queue_);
  swap(is_challenge_match_, other->is_challenge_match_);
  swap(tourney_queue_deadline_state_, other->tourney_queue_deadline_state_);
  swap(party_builder_slots_to_fill_, other->party_builder_slots_to_fill_);
  swap(party_builder_match_groups_, other->party_builder_match_groups_);
  swap(party_builder_start_time_, other->party_builder_start_time_);
  swap(bot_script_index_, other->bot_script_index_);
  swap(steam_clan_account_id_, other->steam_clan_account_id_);
  swap(custom_game_disabled_until_date_, other->custom_game_disabled_until_date_);
  swap(custom_game_disabled_account_id_, other->custom_game_disabled_account_id_);
}

::google::protobuf::Metadata CSODOTAParty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAPartyInvite_PartyMember::InitAsDefaultInstance() {
}
class CSODOTAPartyInvite_PartyMember::HasBitSetters {
 public:
  static void set_has_name(CSODOTAPartyInvite_PartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CSODOTAPartyInvite_PartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_coach(CSODOTAPartyInvite_PartyMember* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyInvite_PartyMember::kNameFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kSteamIdFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kIsCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyInvite.PartyMember)
}
CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_coach_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_coach_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyInvite.PartyMember)
  SharedDtor();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite_PartyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAPartyInvite_PartyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_coach_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAPartyInvite_PartyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAPartyInvite_PartyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTAPartyInvite.PartyMember.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool is_coach = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_coach(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAPartyInvite.PartyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coach = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_coach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyInvite.PartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyInvite.PartyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.PartyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyInvite.PartyMember)
}

::google::protobuf::uint8* CSODOTAPartyInvite_PartyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.PartyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyInvite.PartyMember)
  return target;
}

size_t CSODOTAPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite_PartyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAPartyInvite_PartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyInvite.PartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyInvite.PartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_coach_ = from.is_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite_PartyMember::Swap(CSODOTAPartyInvite_PartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite_PartyMember::InternalSwap(CSODOTAPartyInvite_PartyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(is_coach_, other->is_coach_);
}

::google::protobuf::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTAPartyInvite::InitAsDefaultInstance() {
}
class CSODOTAPartyInvite::HasBitSetters {
 public:
  static void set_has_group_id(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sender_id(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sender_name(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_low_priority_status(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_as_coach(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_invite_gid(CSODOTAPartyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyInvite::kGroupIdFieldNumber;
const int CSODOTAPartyInvite::kSenderIdFieldNumber;
const int CSODOTAPartyInvite::kSenderNameFieldNumber;
const int CSODOTAPartyInvite::kMembersFieldNumber;
const int CSODOTAPartyInvite::kTeamIdFieldNumber;
const int CSODOTAPartyInvite::kLowPriorityStatusFieldNumber;
const int CSODOTAPartyInvite::kAsCoachFieldNumber;
const int CSODOTAPartyInvite::kInviteGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyInvite::CSODOTAPartyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyInvite)
}
CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_name()) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_gid_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_gid_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyInvite)
  SharedDtor();
}

void CSODOTAPartyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTAPartyInvite& CSODOTAPartyInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTAPartyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTAPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invite_gid_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTAPartyInvite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTAPartyInvite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_sender_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string sender_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTAPartyInvite.sender_name");
        object = msg->mutable_sender_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTAPartyInvite_PartyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_priority_status = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_low_priority_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool as_coach = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_as_coach(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 invite_gid = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_invite_gid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTAPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_sender_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), static_cast<int>(this->sender_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAPartyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_low_priority_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_coach = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_as_coach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 invite_gid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_invite_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyInvite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTAPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority_status(), output);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->as_coach(), output);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->invite_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyInvite)
}

::google::protobuf::uint8* CSODOTAPartyInvite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->members(static_cast<int>(i)), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->invite_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyInvite)
  return target;
}

size_t CSODOTAPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool low_priority_status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTAPartyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyInvite)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_priority_status_ = from.low_priority_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      as_coach_ = from.as_coach_;
    }
    if (cached_has_bits & 0x00000040u) {
      invite_gid_ = from.invite_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite::Swap(CSODOTAPartyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite::InternalSwap(CSODOTAPartyInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  sender_name_.Swap(&other->sender_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
  swap(sender_id_, other->sender_id_);
  swap(team_id_, other->team_id_);
  swap(low_priority_status_, other->low_priority_status_);
  swap(as_coach_, other->as_coach_);
  swap(invite_gid_, other->invite_gid_);
}

::google::protobuf::Metadata CSODOTAPartyInvite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTALobbyInvite_LobbyMember::InitAsDefaultInstance() {
}
class CSODOTALobbyInvite_LobbyMember::HasBitSetters {
 public:
  static void set_has_name(CSODOTALobbyInvite_LobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CSODOTALobbyInvite_LobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobbyInvite_LobbyMember::kNameFieldNumber;
const int CSODOTALobbyInvite_LobbyMember::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
}
CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
  SharedDtor();
}

void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite_LobbyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTALobbyInvite_LobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTALobbyInvite_LobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTALobbyInvite_LobbyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTALobbyInvite_LobbyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobbyInvite.LobbyMember.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTALobbyInvite_LobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobbyInvite.LobbyMember)
}

::google::protobuf::uint8* CSODOTALobbyInvite_LobbyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return target;
}

size_t CSODOTALobbyInvite_LobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite_LobbyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTALobbyInvite_LobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobbyInvite.LobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobbyInvite.LobbyMember)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite_LobbyMember::Swap(CSODOTALobbyInvite_LobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite_LobbyMember::InternalSwap(CSODOTALobbyInvite_LobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTALobbyInvite::InitAsDefaultInstance() {
}
class CSODOTALobbyInvite::HasBitSetters {
 public:
  static void set_has_group_id(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sender_id(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sender_name(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_custom_game_id(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_invite_gid(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_custom_game_crc(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_custom_game_timestamp(CSODOTALobbyInvite* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobbyInvite::kGroupIdFieldNumber;
const int CSODOTALobbyInvite::kSenderIdFieldNumber;
const int CSODOTALobbyInvite::kSenderNameFieldNumber;
const int CSODOTALobbyInvite::kMembersFieldNumber;
const int CSODOTALobbyInvite::kCustomGameIdFieldNumber;
const int CSODOTALobbyInvite::kInviteGidFieldNumber;
const int CSODOTALobbyInvite::kCustomGameCrcFieldNumber;
const int CSODOTALobbyInvite::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobbyInvite::CSODOTALobbyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobbyInvite)
}
CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_name()) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_timestamp_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobbyInvite)
  SharedDtor();
}

void CSODOTALobbyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTALobbyInvite& CSODOTALobbyInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTALobbyInvite_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTALobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobbyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_timestamp_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTALobbyInvite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTALobbyInvite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_sender_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string sender_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobbyInvite.sender_name");
        object = msg->mutable_sender_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTALobbyInvite_LobbyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint64 custom_game_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 invite_gid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_invite_gid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 custom_game_crc = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_custom_game_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 custom_game_timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_custom_game_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTALobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobbyInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_sender_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), static_cast<int>(this->sender_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobbyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 invite_gid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_invite_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_custom_game_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_custom_game_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobbyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobbyInvite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTALobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobbyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->custom_game_id(), output);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->invite_gid(), output);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobbyInvite)
}

::google::protobuf::uint8* CSODOTALobbyInvite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobbyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->members(static_cast<int>(i)), target);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobbyInvite)
  return target;
}

size_t CSODOTALobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobbyInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTALobbyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobbyInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobbyInvite)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite::MergeFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      invite_gid_ = from.invite_gid_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite::Swap(CSODOTALobbyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite::InternalSwap(CSODOTALobbyInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  sender_name_.Swap(&other->sender_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
  swap(sender_id_, other->sender_id_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(invite_gid_, other->invite_gid_);
  swap(custom_game_crc_, other->custom_game_crc_);
  swap(custom_game_timestamp_, other->custom_game_timestamp_);
}

::google::protobuf::Metadata CSODOTALobbyInvite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeaverState::InitAsDefaultInstance() {
}
class CMsgLeaverState::HasBitSetters {
 public:
  static void set_has_lobby_state(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_state(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leaver_detected(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_first_blood_happened(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_discard_match_results(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_mass_disconnect(CMsgLeaverState* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverState::kLobbyStateFieldNumber;
const int CMsgLeaverState::kGameStateFieldNumber;
const int CMsgLeaverState::kLeaverDetectedFieldNumber;
const int CMsgLeaverState::kFirstBloodHappenedFieldNumber;
const int CMsgLeaverState::kDiscardMatchResultsFieldNumber;
const int CMsgLeaverState::kMassDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverState::CMsgLeaverState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverState)
}
CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_state_, &from.lobby_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&mass_disconnect_) -
    reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverState)
}

void CMsgLeaverState::SharedCtor() {
  ::memset(&lobby_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mass_disconnect_) -
      reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverState)
  SharedDtor();
}

void CMsgLeaverState::SharedDtor() {
}

void CMsgLeaverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLeaverState& CMsgLeaverState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgLeaverState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lobby_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mass_disconnect_) -
        reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLeaverState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLeaverState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_state(static_cast<::proto::dota::DOTA_GameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool leaver_detected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_leaver_detected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool first_blood_happened = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_first_blood_happened(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool discard_match_results = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_discard_match_results(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool mass_disconnect = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_mass_disconnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLeaverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leaver_detected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_leaver_detected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaver_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_first_blood_happened(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool discard_match_results = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_discard_match_results(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mass_disconnect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mass_disconnect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLeaverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_state(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leaver_detected(), output);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_blood_happened(), output);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->discard_match_results(), output);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mass_disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverState)
}

::google::protobuf::uint8* CMsgLeaverState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_state(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mass_disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverState)
  return target;
}

size_t CMsgLeaverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 lobby_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_state());
    }

    // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool leaver_detected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLeaverState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverState)
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_state_ = from.lobby_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaver_detected_ = from.leaver_detected_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000010u) {
      discard_match_results_ = from.discard_match_results_;
    }
    if (cached_has_bits & 0x00000020u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {
  return true;
}

void CMsgLeaverState::Swap(CMsgLeaverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverState::InternalSwap(CMsgLeaverState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_state_, other->lobby_state_);
  swap(game_state_, other->game_state_);
  swap(leaver_detected_, other->leaver_detected_);
  swap(first_blood_happened_, other->first_blood_happened_);
  swap(discard_match_results_, other->discard_match_results_);
  swap(mass_disconnect_, other->mass_disconnect_);
}

::google::protobuf::Metadata CMsgLeaverState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InitAsDefaultInstance() {
}
class CDOTALobbyMember_CDOTALobbyMemberXPBonus::HasBitSetters {
 public:
  static void set_has_type(CDOTALobbyMember_CDOTALobbyMemberXPBonus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_xp_bonus(CDOTALobbyMember_CDOTALobbyMemberXPBonus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_source_key(CDOTALobbyMember_CDOTALobbyMemberXPBonus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kTypeFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kXpBonusFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kSourceKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}
CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_key_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_key_) -
      reinterpret_cast<char*>(&type_)) + sizeof(source_key_));
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::~CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  SharedDtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedDtor() {
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTALobbyMember_CDOTALobbyMemberXPBonus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_key_) -
        reinterpret_cast<char*>(&type_)) + sizeof(source_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTALobbyMember_CDOTALobbyMemberXPBonus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float xp_bonus = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_xp_bonus(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint64 source_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xp_bonus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_xp_bonus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_source_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional float xp_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xp_bonus(), output);
  }

  // optional uint64 source_key = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->source_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

::google::protobuf::uint8* CDOTALobbyMember_CDOTALobbyMemberXPBonus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional float xp_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xp_bonus(), target);
  }

  // optional uint64 source_key = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->source_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return target;
}

size_t CDOTALobbyMember_CDOTALobbyMemberXPBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float xp_bonus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint64 source_key = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALobbyMember_CDOTALobbyMemberXPBonus* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTALobbyMember_CDOTALobbyMemberXPBonus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
    MergeFrom(*source);
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_bonus_ = from.xp_bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_key_ = from.source_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::IsInitialized() const {
  return true;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InternalSwap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(xp_bonus_, other->xp_bonus_);
  swap(source_key_, other->source_key_);
}

::google::protobuf::Metadata CDOTALobbyMember_CDOTALobbyMemberXPBonus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTALobbyMember::InitAsDefaultInstance() {
}
class CDOTALobbyMember::HasBitSetters {
 public:
  static void set_has_id(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_id(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_party_id(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_meta_level(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_meta_xp(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_meta_xp_awarded(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_leaver_status(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_leaver_actions(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_channel(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_prize_def_index(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_partner_account_type(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_coach_team(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_pwrd_cyber_cafe_id(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_pwrd_cyber_cafe_name(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_rank_change(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_cameraman(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_lobby_mvp_vote_account_id(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_search_match_type(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_favorite_team_packed(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_is_plus_subscriber(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_rank_tier_updated(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_lane_selection_flags(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_can_earn_rewards(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_live_spectator_team(CDOTALobbyMember* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTALobbyMember::kIdFieldNumber;
const int CDOTALobbyMember::kHeroIdFieldNumber;
const int CDOTALobbyMember::kTeamFieldNumber;
const int CDOTALobbyMember::kNameFieldNumber;
const int CDOTALobbyMember::kSlotFieldNumber;
const int CDOTALobbyMember::kPartyIdFieldNumber;
const int CDOTALobbyMember::kMetaLevelFieldNumber;
const int CDOTALobbyMember::kMetaXpFieldNumber;
const int CDOTALobbyMember::kMetaXpAwardedFieldNumber;
const int CDOTALobbyMember::kLeaverStatusFieldNumber;
const int CDOTALobbyMember::kLeaverActionsFieldNumber;
const int CDOTALobbyMember::kChannelFieldNumber;
const int CDOTALobbyMember::kPrizeDefIndexFieldNumber;
const int CDOTALobbyMember::kDisabledHeroIdFieldNumber;
const int CDOTALobbyMember::kPartnerAccountTypeFieldNumber;
const int CDOTALobbyMember::kEnabledHeroIdFieldNumber;
const int CDOTALobbyMember::kCoachTeamFieldNumber;
const int CDOTALobbyMember::kPwrdCyberCafeIdFieldNumber;
const int CDOTALobbyMember::kPwrdCyberCafeNameFieldNumber;
const int CDOTALobbyMember::kDisabledRandomHeroIdFieldNumber;
const int CDOTALobbyMember::kXpBonusesFieldNumber;
const int CDOTALobbyMember::kRankChangeFieldNumber;
const int CDOTALobbyMember::kCameramanFieldNumber;
const int CDOTALobbyMember::kCustomGameProductIdsFieldNumber;
const int CDOTALobbyMember::kLobbyMvpVoteAccountIdFieldNumber;
const int CDOTALobbyMember::kSearchMatchTypeFieldNumber;
const int CDOTALobbyMember::kFavoriteTeamPackedFieldNumber;
const int CDOTALobbyMember::kIsPlusSubscriberFieldNumber;
const int CDOTALobbyMember::kRankTierUpdatedFieldNumber;
const int CDOTALobbyMember::kLaneSelectionFlagsFieldNumber;
const int CDOTALobbyMember::kCanEarnRewardsFieldNumber;
const int CDOTALobbyMember::kLiveSpectatorTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTALobbyMember::CDOTALobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTALobbyMember)
}
CDOTALobbyMember::CDOTALobbyMember(const CDOTALobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disabled_hero_id_(from.disabled_hero_id_),
      enabled_hero_id_(from.enabled_hero_id_),
      disabled_random_hero_id_(from.disabled_random_hero_id_),
      xp_bonuses_(from.xp_bonuses_),
      custom_game_product_ids_(from.custom_game_product_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwrd_cyber_cafe_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwrd_cyber_cafe_name()) {
    pwrd_cyber_cafe_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwrd_cyber_cafe_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&live_spectator_team_) -
    reinterpret_cast<char*>(&id_)) + sizeof(live_spectator_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTALobbyMember)
}

void CDOTALobbyMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwrd_cyber_cafe_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_earn_rewards_) -
      reinterpret_cast<char*>(&id_)) + sizeof(can_earn_rewards_));
  coach_team_ = 5;
  live_spectator_team_ = 5;
}

CDOTALobbyMember::~CDOTALobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTALobbyMember)
  SharedDtor();
}

void CDOTALobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwrd_cyber_cafe_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTALobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTALobbyMember& CDOTALobbyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CDOTALobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTALobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  disabled_random_hero_id_.Clear();
  xp_bonuses_.Clear();
  custom_game_product_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pwrd_cyber_cafe_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(party_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&meta_xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaver_actions_) -
        reinterpret_cast<char*>(&meta_xp_)) + sizeof(leaver_actions_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rank_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_tier_updated_) -
        reinterpret_cast<char*>(&rank_change_)) + sizeof(rank_tier_updated_));
  }
  if (cached_has_bits & 0x07000000u) {
    can_earn_rewards_ = false;
    coach_team_ = 5;
    live_spectator_team_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTALobbyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTALobbyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTALobbyMember.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 slot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 party_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_party_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 meta_level = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_meta_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 meta_xp = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_meta_xp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_meta_xp_awarded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTALeaverStatus_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(16, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_leaver_status(static_cast<::proto::dota::DOTALeaverStatus_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 channel = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prize_def_index = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_prize_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) == 160) {
          do {
            msg->add_disabled_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 416 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_disabled_hero_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PartnerAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(21, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_partner_account_type(static_cast<::proto::dota::PartnerAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) == 176) {
          do {
            msg->add_enabled_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 432 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_enabled_hero_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(23, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_coach_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pwrd_cyber_cafe_id = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_pwrd_cyber_cafe_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pwrd_cyber_cafe_name = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name");
        object = msg->mutable_pwrd_cyber_cafe_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 disabled_random_hero_id = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) == 208) {
          do {
            msg->add_disabled_random_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 464 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_disabled_random_hero_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus::_InternalParse;
          object = msg->add_xp_bonuses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 474 && (ptr += 2));
        break;
      }
      // optional uint32 leaver_actions = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_leaver_actions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 rank_change = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_rank_change(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool cameraman = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_cameraman(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 custom_game_product_ids = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) == 248) {
          do {
            msg->add_custom_game_product_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 504 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_custom_game_product_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 lobby_mvp_vote_account_id = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_lobby_mvp_vote_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(33, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_search_match_type(static_cast<::proto::dota::MatchType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 favorite_team_packed = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_favorite_team_packed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_plus_subscriber = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_plus_subscriber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool rank_tier_updated = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rank_tier_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lane_selection_flags = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lane_selection_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool can_earn_rewards = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_can_earn_rewards(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(40, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_live_spectator_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTALobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTALobbyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTALobbyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_meta_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_xp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_meta_xp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_meta_xp_awarded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_awarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::proto::dota::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_channel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_def_index = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_prize_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160u, input, this->mutable_disabled_hero_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_enabled_hero_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_coach_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pwrd_cyber_cafe_id = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_pwrd_cyber_cafe_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pwrd_cyber_cafe_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pwrd_cyber_cafe_name = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwrd_cyber_cafe_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwrd_cyber_cafe_name().data(), static_cast<int>(this->pwrd_cyber_cafe_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 disabled_random_hero_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_disabled_random_hero_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_random_hero_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xp_bonuses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_actions = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_leaver_actions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_actions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_rank_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cameraman = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_cameraman(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 custom_game_product_ids = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248u, input, this->mutable_custom_game_product_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_custom_game_product_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mvp_vote_account_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_lobby_mvp_vote_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_vote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_search_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                33, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 favorite_team_packed = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_favorite_team_packed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &favorite_team_packed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plus_subscriber = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_is_plus_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plus_subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rank_tier_updated = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_rank_tier_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_tier_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_selection_flags = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_lane_selection_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_selection_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_earn_rewards = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_can_earn_rewards(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_earn_rewards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_live_spectator_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTALobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTALobbyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTALobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTALobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot(), output);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meta_level(), output);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meta_xp(), output);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->meta_xp_awarded(), output);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->leaver_status(), output);
  }

  // optional uint32 channel = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->channel(), output);
  }

  // optional uint32 prize_def_index = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prize_def_index(), output);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0, n = this->disabled_hero_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->disabled_hero_id(i), output);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->partner_account_type(), output);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0, n = this->enabled_hero_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->enabled_hero_id(i), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->coach_team(), output);
  }

  // optional uint32 pwrd_cyber_cafe_id = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->pwrd_cyber_cafe_id(), output);
  }

  // optional string pwrd_cyber_cafe_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwrd_cyber_cafe_name().data(), static_cast<int>(this->pwrd_cyber_cafe_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->pwrd_cyber_cafe_name(), output);
  }

  // repeated uint32 disabled_random_hero_id = 26;
  for (int i = 0, n = this->disabled_random_hero_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->disabled_random_hero_id(i), output);
  }

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_bonuses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27,
      this->xp_bonuses(static_cast<int>(i)),
      output);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->leaver_actions(), output);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->rank_change(), output);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->cameraman(), output);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0, n = this->custom_game_product_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->custom_game_product_ids(i), output);
  }

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lobby_mvp_vote_account_id(), output);
  }

  // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->search_match_type(), output);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->favorite_team_packed(), output);
  }

  // optional bool is_plus_subscriber = 36;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->is_plus_subscriber(), output);
  }

  // optional bool rank_tier_updated = 37;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->rank_tier_updated(), output);
  }

  // optional uint32 lane_selection_flags = 38;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->lane_selection_flags(), output);
  }

  // optional bool can_earn_rewards = 39;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->can_earn_rewards(), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->live_spectator_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTALobbyMember)
}

::google::protobuf::uint8* CDOTALobbyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTALobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot(), target);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->meta_xp_awarded(), target);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->leaver_status(), target);
  }

  // optional uint32 channel = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->channel(), target);
  }

  // optional uint32 prize_def_index = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prize_def_index(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(20, this->disabled_hero_id_, target);

  // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->partner_account_type(), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->enabled_hero_id_, target);

  // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->coach_team(), target);
  }

  // optional uint32 pwrd_cyber_cafe_id = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->pwrd_cyber_cafe_id(), target);
  }

  // optional string pwrd_cyber_cafe_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwrd_cyber_cafe_name().data(), static_cast<int>(this->pwrd_cyber_cafe_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->pwrd_cyber_cafe_name(), target);
  }

  // repeated uint32 disabled_random_hero_id = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->disabled_random_hero_id_, target);

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_bonuses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->xp_bonuses(static_cast<int>(i)), target);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(31, this->custom_game_product_ids_, target);

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lobby_mvp_vote_account_id(), target);
  }

  // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->search_match_type(), target);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->favorite_team_packed(), target);
  }

  // optional bool is_plus_subscriber = 36;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->is_plus_subscriber(), target);
  }

  // optional bool rank_tier_updated = 37;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->rank_tier_updated(), target);
  }

  // optional uint32 lane_selection_flags = 38;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->lane_selection_flags(), target);
  }

  // optional bool can_earn_rewards = 39;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->can_earn_rewards(), target);
  }

  // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->live_spectator_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTALobbyMember)
  return target;
}

size_t CDOTALobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTALobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_hero_id = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->disabled_hero_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->disabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->enabled_hero_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 disabled_random_hero_id = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->disabled_random_hero_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->disabled_random_hero_id_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_bonuses_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_bonuses(static_cast<int>(i)));
    }
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->custom_game_product_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->custom_game_product_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string pwrd_cyber_cafe_name = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwrd_cyber_cafe_name());
    }

    // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 slot = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 meta_level = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_level());
    }

    // optional uint64 party_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 meta_xp = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp());
    }

    // optional uint32 meta_xp_awarded = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp_awarded());
    }

    // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 channel = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 prize_def_index = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_def_index());
    }

    // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 pwrd_cyber_cafe_id = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pwrd_cyber_cafe_id());
    }

    // optional uint32 leaver_actions = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_actions());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint32 rank_change = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional uint32 lobby_mvp_vote_account_id = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_vote_account_id());
    }

    // optional uint32 lane_selection_flags = 38;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_selection_flags());
    }

    // optional uint64 favorite_team_packed = 35;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->favorite_team_packed());
    }

    // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_match_type());
    }

    // optional bool cameraman = 30;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_plus_subscriber = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool rank_tier_updated = 37;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool can_earn_rewards = 39;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coach_team());
    }

    // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->live_spectator_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTALobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALobbyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTALobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTALobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTALobbyMember)
    MergeFrom(*source);
  }
}

void CDOTALobbyMember::MergeFrom(const CDOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  disabled_random_hero_id_.MergeFrom(from.disabled_random_hero_id_);
  xp_bonuses_.MergeFrom(from.xp_bonuses_);
  custom_game_product_ids_.MergeFrom(from.custom_game_product_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pwrd_cyber_cafe_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwrd_cyber_cafe_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000020u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      meta_level_ = from.meta_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      party_id_ = from.party_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      meta_xp_ = from.meta_xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      meta_xp_awarded_ = from.meta_xp_awarded_;
    }
    if (cached_has_bits & 0x00000400u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00001000u) {
      prize_def_index_ = from.prize_def_index_;
    }
    if (cached_has_bits & 0x00002000u) {
      partner_account_type_ = from.partner_account_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      pwrd_cyber_cafe_id_ = from.pwrd_cyber_cafe_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      leaver_actions_ = from.leaver_actions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00020000u) {
      lobby_mvp_vote_account_id_ = from.lobby_mvp_vote_account_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00080000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    if (cached_has_bits & 0x00100000u) {
      search_match_type_ = from.search_match_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      cameraman_ = from.cameraman_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00800000u) {
      rank_tier_updated_ = from.rank_tier_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      can_earn_rewards_ = from.can_earn_rewards_;
    }
    if (cached_has_bits & 0x02000000u) {
      coach_team_ = from.coach_team_;
    }
    if (cached_has_bits & 0x04000000u) {
      live_spectator_team_ = from.live_spectator_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember::CopyFrom(const CDOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember::IsInitialized() const {
  return true;
}

void CDOTALobbyMember::Swap(CDOTALobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember::InternalSwap(CDOTALobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disabled_hero_id_.InternalSwap(&other->disabled_hero_id_);
  enabled_hero_id_.InternalSwap(&other->enabled_hero_id_);
  disabled_random_hero_id_.InternalSwap(&other->disabled_random_hero_id_);
  CastToBase(&xp_bonuses_)->InternalSwap(CastToBase(&other->xp_bonuses_));
  custom_game_product_ids_.InternalSwap(&other->custom_game_product_ids_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwrd_cyber_cafe_name_.Swap(&other->pwrd_cyber_cafe_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(hero_id_, other->hero_id_);
  swap(team_, other->team_);
  swap(slot_, other->slot_);
  swap(meta_level_, other->meta_level_);
  swap(party_id_, other->party_id_);
  swap(meta_xp_, other->meta_xp_);
  swap(meta_xp_awarded_, other->meta_xp_awarded_);
  swap(leaver_status_, other->leaver_status_);
  swap(channel_, other->channel_);
  swap(prize_def_index_, other->prize_def_index_);
  swap(partner_account_type_, other->partner_account_type_);
  swap(pwrd_cyber_cafe_id_, other->pwrd_cyber_cafe_id_);
  swap(leaver_actions_, other->leaver_actions_);
  swap(rank_change_, other->rank_change_);
  swap(lobby_mvp_vote_account_id_, other->lobby_mvp_vote_account_id_);
  swap(lane_selection_flags_, other->lane_selection_flags_);
  swap(favorite_team_packed_, other->favorite_team_packed_);
  swap(search_match_type_, other->search_match_type_);
  swap(cameraman_, other->cameraman_);
  swap(is_plus_subscriber_, other->is_plus_subscriber_);
  swap(rank_tier_updated_, other->rank_tier_updated_);
  swap(can_earn_rewards_, other->can_earn_rewards_);
  swap(coach_team_, other->coach_team_);
  swap(live_spectator_team_, other->live_spectator_team_);
}

::google::protobuf::Metadata CDOTALobbyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CLobbyTeamDetails::InitAsDefaultInstance() {
}
class CLobbyTeamDetails::HasBitSetters {
 public:
  static void set_has_team_name(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_tag(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_id(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_team_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_base_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_team_banner_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_team_complete(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_team_logo_url(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_guild_name(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_guild_tag(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_guild_id(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_guild_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_guild_base_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_guild_banner_logo(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_rank(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_rank_change(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_is_home_team(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_is_challenge_match(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_challenge_match_token_account(CLobbyTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyTeamDetails::kTeamNameFieldNumber;
const int CLobbyTeamDetails::kTeamTagFieldNumber;
const int CLobbyTeamDetails::kTeamIdFieldNumber;
const int CLobbyTeamDetails::kTeamLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBaseLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBannerLogoFieldNumber;
const int CLobbyTeamDetails::kTeamCompleteFieldNumber;
const int CLobbyTeamDetails::kTeamLogoUrlFieldNumber;
const int CLobbyTeamDetails::kGuildNameFieldNumber;
const int CLobbyTeamDetails::kGuildTagFieldNumber;
const int CLobbyTeamDetails::kGuildIdFieldNumber;
const int CLobbyTeamDetails::kGuildLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBaseLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBannerLogoFieldNumber;
const int CLobbyTeamDetails::kRankFieldNumber;
const int CLobbyTeamDetails::kRankChangeFieldNumber;
const int CLobbyTeamDetails::kIsHomeTeamFieldNumber;
const int CLobbyTeamDetails::kIsChallengeMatchFieldNumber;
const int CLobbyTeamDetails::kChallengeMatchTokenAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyTeamDetails::CLobbyTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyTeamDetails)
}
CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_tag()) {
    guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
  }
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_logo_url()) {
    team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(rank_change_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyTeamDetails)
}

void CLobbyTeamDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_change_) -
      reinterpret_cast<char*>(&team_logo_)) + sizeof(rank_change_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyTeamDetails)
  SharedDtor();
}

void CLobbyTeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLobbyTeamDetails& CLobbyTeamDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CLobbyTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      guild_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_banner_logo_) -
        reinterpret_cast<char*>(&team_logo_)) + sizeof(team_banner_logo_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_challenge_match_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(is_challenge_match_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_change_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(rank_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CLobbyTeamDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CLobbyTeamDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string team_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyTeamDetails.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyTeamDetails.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team_base_logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool team_complete = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_team_complete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string guild_name = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyTeamDetails.guild_name");
        object = msg->mutable_guild_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string guild_tag = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyTeamDetails.guild_tag");
        object = msg->mutable_guild_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 guild_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_guild_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 guild_logo = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_guild_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_guild_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_guild_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 rank_change = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_rank_change(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_home_team = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_is_home_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_challenge_match = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_is_challenge_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 challenge_match_token_account = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_challenge_match_token_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_logo_url = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyTeamDetails.team_logo_url");
        object = msg->mutable_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CLobbyTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyTeamDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string team_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool team_complete = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_team_complete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), static_cast<int>(this->guild_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.guild_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_guild_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_guild_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_guild_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_guild_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_rank_change(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_home_team = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_is_home_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_home_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_challenge_match = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_is_challenge_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_challenge_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 challenge_match_token_account = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_challenge_match_token_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &challenge_match_token_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_logo_url = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyTeamDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CLobbyTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_base_logo(), output);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_banner_logo(), output);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team_complete(), output);
  }

  // optional string guild_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guild_name(), output);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), static_cast<int>(this->guild_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guild_tag(), output);
  }

  // optional uint32 guild_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guild_logo(), output);
  }

  // optional uint64 guild_base_logo = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_base_logo(), output);
  }

  // optional uint64 guild_banner_logo = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->guild_banner_logo(), output);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank(), output);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->rank_change(), output);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_home_team(), output);
  }

  // optional bool is_challenge_match = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_challenge_match(), output);
  }

  // optional uint64 challenge_match_token_account = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->challenge_match_token_account(), output);
  }

  // optional string team_logo_url = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->team_logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyTeamDetails)
}

::google::protobuf::uint8* CLobbyTeamDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team_complete(), target);
  }

  // optional string guild_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), static_cast<int>(this->guild_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild_tag(), target);
  }

  // optional uint32 guild_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guild_logo(), target);
  }

  // optional uint64 guild_base_logo = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_base_logo(), target);
  }

  // optional uint64 guild_banner_logo = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->guild_banner_logo(), target);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_home_team(), target);
  }

  // optional bool is_challenge_match = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_challenge_match(), target);
  }

  // optional uint64 challenge_match_token_account = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->challenge_match_token_account(), target);
  }

  // optional string team_logo_url = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->team_logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyTeamDetails)
  return target;
}

size_t CLobbyTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyTeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string guild_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string guild_tag = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional string team_logo_url = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_logo_url());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_banner_logo());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 guild_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

    // optional uint64 guild_base_logo = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_base_logo());
    }

    // optional uint64 guild_banner_logo = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_banner_logo());
    }

    // optional bool team_complete = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_home_team = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 rank = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 challenge_match_token_account = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->challenge_match_token_account());
    }

    // optional sint32 rank_change = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTeamDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CLobbyTeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyTeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyTeamDetails)
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_banner_logo_ = from.team_banner_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      guild_logo_ = from.guild_logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      guild_base_logo_ = from.guild_base_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      guild_banner_logo_ = from.guild_banner_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_complete_ = from.team_complete_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_home_team_ = from.is_home_team_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00020000u) {
      challenge_match_token_account_ = from.challenge_match_token_account_;
    }
    if (cached_has_bits & 0x00040000u) {
      rank_change_ = from.rank_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {
  return true;
}

void CLobbyTeamDetails::Swap(CLobbyTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTeamDetails::InternalSwap(CLobbyTeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_tag_.Swap(&other->guild_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_logo_url_.Swap(&other->team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_logo_, other->team_logo_);
  swap(team_base_logo_, other->team_base_logo_);
  swap(team_banner_logo_, other->team_banner_logo_);
  swap(team_id_, other->team_id_);
  swap(guild_id_, other->guild_id_);
  swap(guild_logo_, other->guild_logo_);
  swap(guild_base_logo_, other->guild_base_logo_);
  swap(guild_banner_logo_, other->guild_banner_logo_);
  swap(team_complete_, other->team_complete_);
  swap(is_home_team_, other->is_home_team_);
  swap(is_challenge_match_, other->is_challenge_match_);
  swap(rank_, other->rank_);
  swap(challenge_match_token_account_, other->challenge_match_token_account_);
  swap(rank_change_, other->rank_change_);
}

::google::protobuf::Metadata CLobbyTeamDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CLobbyTimedRewardDetails::InitAsDefaultInstance() {
}
class CLobbyTimedRewardDetails::HasBitSetters {
 public:
  static void set_has_item_def_index(CLobbyTimedRewardDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_supply_crate(CLobbyTimedRewardDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_timed_drop(CLobbyTimedRewardDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_account_id(CLobbyTimedRewardDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_origin(CLobbyTimedRewardDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyTimedRewardDetails::kItemDefIndexFieldNumber;
const int CLobbyTimedRewardDetails::kIsSupplyCrateFieldNumber;
const int CLobbyTimedRewardDetails::kIsTimedDropFieldNumber;
const int CLobbyTimedRewardDetails::kAccountIdFieldNumber;
const int CLobbyTimedRewardDetails::kOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
  ::memset(&item_def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_) -
      reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyTimedRewardDetails)
  SharedDtor();
}

void CLobbyTimedRewardDetails::SharedDtor() {
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLobbyTimedRewardDetails& CLobbyTimedRewardDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyTimedRewardDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CLobbyTimedRewardDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CLobbyTimedRewardDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_supply_crate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_supply_crate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_timed_drop = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_timed_drop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 origin = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_origin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CLobbyTimedRewardDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyTimedRewardDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_supply_crate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_supply_crate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supply_crate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_timed_drop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_timed_drop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timed_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_origin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyTimedRewardDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyTimedRewardDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CLobbyTimedRewardDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyTimedRewardDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_supply_crate(), output);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_timed_drop(), output);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id(), output);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyTimedRewardDetails)
}

::google::protobuf::uint8* CLobbyTimedRewardDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyTimedRewardDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyTimedRewardDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CLobbyTimedRewardDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyTimedRewardDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyTimedRewardDetails)
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_supply_crate_ = from.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_timed_drop_ = from.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTimedRewardDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::Swap(CLobbyTimedRewardDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_index_, other->item_def_index_);
  swap(is_supply_crate_, other->is_supply_crate_);
  swap(is_timed_drop_, other->is_timed_drop_);
  swap(account_id_, other->account_id_);
  swap(origin_, other->origin_);
}

::google::protobuf::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CLobbyBroadcastChannelInfo::InitAsDefaultInstance() {
}
class CLobbyBroadcastChannelInfo::HasBitSetters {
 public:
  static void set_has_channel_id(CLobbyBroadcastChannelInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_country_code(CLobbyBroadcastChannelInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_description(CLobbyBroadcastChannelInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_language_code(CLobbyBroadcastChannelInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyBroadcastChannelInfo::kChannelIdFieldNumber;
const int CLobbyBroadcastChannelInfo::kCountryCodeFieldNumber;
const int CLobbyBroadcastChannelInfo::kDescriptionFieldNumber;
const int CLobbyBroadcastChannelInfo::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyBroadcastChannelInfo)
}
CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyBroadcastChannelInfo)
  SharedDtor();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLobbyBroadcastChannelInfo& CLobbyBroadcastChannelInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CLobbyBroadcastChannelInfo_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CLobbyBroadcastChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyBroadcastChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CLobbyBroadcastChannelInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CLobbyBroadcastChannelInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyBroadcastChannelInfo.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyBroadcastChannelInfo.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string language_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CLobbyBroadcastChannelInfo.language_code");
        object = msg->mutable_language_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CLobbyBroadcastChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyBroadcastChannelInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyBroadcastChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyBroadcastChannelInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CLobbyBroadcastChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyBroadcastChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyBroadcastChannelInfo)
}

::google::protobuf::uint8* CLobbyBroadcastChannelInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyBroadcastChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyBroadcastChannelInfo)
  return target;
}

size_t CLobbyBroadcastChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyBroadcastChannelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional uint32 channel_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyBroadcastChannelInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CLobbyBroadcastChannelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyBroadcastChannelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyBroadcastChannelInfo)
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {
  return true;
}

void CLobbyBroadcastChannelInfo::Swap(CLobbyBroadcastChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyBroadcastChannelInfo::InternalSwap(CLobbyBroadcastChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTALobby_CExtraMsg::InitAsDefaultInstance() {
}
class CSODOTALobby_CExtraMsg::HasBitSetters {
 public:
  static void set_has_id(CSODOTALobby_CExtraMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_contents(CSODOTALobby_CExtraMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobby_CExtraMsg::kIdFieldNumber;
const int CSODOTALobby_CExtraMsg::kContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobby.CExtraMsg)
}
CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contents()) {
    contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobby.CExtraMsg)
  SharedDtor();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTALobby_CExtraMsg& CSODOTALobby_CExtraMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTALobby_CExtraMsg_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTALobby_CExtraMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobby.CExtraMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contents_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTALobby_CExtraMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTALobby_CExtraMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes contents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_contents();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTALobby_CExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobby.CExtraMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobby.CExtraMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobby.CExtraMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTALobby_CExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobby.CExtraMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobby.CExtraMsg)
}

::google::protobuf::uint8* CSODOTALobby_CExtraMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobby.CExtraMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobby.CExtraMsg)
  return target;
}

size_t CSODOTALobby_CExtraMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobby.CExtraMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby_CExtraMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTALobby_CExtraMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobby.CExtraMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobby.CExtraMsg)
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {
  return true;
}

void CSODOTALobby_CExtraMsg::Swap(CSODOTALobby_CExtraMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby_CExtraMsg::InternalSwap(CSODOTALobby_CExtraMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.Swap(&other->contents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSODOTALobby::InitAsDefaultInstance() {
  ::proto::dota::_CSODOTALobby_default_instance_._instance.get_mutable()->save_game_ = const_cast< ::proto::dota::CDOTASaveGame*>(
      ::proto::dota::CDOTASaveGame::internal_default_instance());
}
class CSODOTALobby::HasBitSetters {
 public:
  static void set_has_lobby_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_leader_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_server_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_game_mode(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_state(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_connect(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lobby_type(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000400u;
  }
  static void set_has_allow_cheats(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_fill_with_bots(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_intro_mode(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_game_name(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tutorial_lesson(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_tournament_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_tournament_game_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_server_region(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_game_state(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_num_spectators(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_matchgroup(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_cm_pick(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_match_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_allow_spectating(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000800u;
  }
  static void set_has_bot_difficulty_radiant(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00001000u;
  }
  static void set_has_game_version(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_pass_key(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leagueid(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_penalty_level_radiant(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_penalty_level_dire(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_load_game_id(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_series_type(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_radiant_series_wins(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_dire_series_wins(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_loot_generated(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_loot_awarded(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_allchat(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_dota_tv_delay(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_custom_game_mode(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_custom_map_name(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_custom_difficulty(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_lan(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_first_leaver_accountid(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_series_id(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_low_priority(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static const ::proto::dota::CDOTASaveGame& save_game(const CSODOTALobby* msg);
  static void set_has_save_game(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_first_blood_happened(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_match_outcome(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_mass_disconnect(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_custom_game_id(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_custom_min_players(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_custom_max_players(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_partner_type(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_visibility(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_custom_game_crc(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_custom_game_auto_created_lobby(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_custom_game_timestamp(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_previous_match_override(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_custom_game_uses_account_records(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_game_start_time(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_pause_setting(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_lobby_mvp_account_id(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_weekend_tourney_division_id(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_weekend_tourney_skill_level(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_weekend_tourney_bracket_round(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_bot_difficulty_dire(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00002000u;
  }
  static void set_has_bot_radiant(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_bot_dire(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_selection_priority_rules(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_series_previous_selection_priority_team_id(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_series_current_selection_priority_team_id(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
  static void set_has_series_current_priority_team_choice(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000008u;
  }
  static void set_has_series_current_non_priority_team_choice(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000010u;
  }
  static void set_has_series_current_selection_priority_used_coin_toss(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_current_primary_event(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000020u;
  }
  static void set_has_lowpri_deprecated(CSODOTALobby* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_custom_game_private_key(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000080u;
  }
  static void set_has_custom_game_penalties(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000040u;
  }
  static void set_has_lan_host_ping_location(CSODOTALobby* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_league_node_id(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000100u;
  }
  static void set_has_match_duration(CSODOTALobby* msg) {
    msg->_has_bits_[2] |= 0x00000200u;
  }
};

const ::proto::dota::CDOTASaveGame&
CSODOTALobby::HasBitSetters::save_game(const CSODOTALobby* msg) {
  return *msg->save_game_;
}
void CSODOTALobby::clear_save_game() {
  if (save_game_ != nullptr) save_game_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobby::kLobbyIdFieldNumber;
const int CSODOTALobby::kMembersFieldNumber;
const int CSODOTALobby::kLeftMembersFieldNumber;
const int CSODOTALobby::kLeaderIdFieldNumber;
const int CSODOTALobby::kServerIdFieldNumber;
const int CSODOTALobby::kGameModeFieldNumber;
const int CSODOTALobby::kPendingInvitesFieldNumber;
const int CSODOTALobby::kStateFieldNumber;
const int CSODOTALobby::kConnectFieldNumber;
const int CSODOTALobby::kLobbyTypeFieldNumber;
const int CSODOTALobby::kAllowCheatsFieldNumber;
const int CSODOTALobby::kFillWithBotsFieldNumber;
const int CSODOTALobby::kIntroModeFieldNumber;
const int CSODOTALobby::kGameNameFieldNumber;
const int CSODOTALobby::kTeamDetailsFieldNumber;
const int CSODOTALobby::kTutorialLessonFieldNumber;
const int CSODOTALobby::kTournamentIdFieldNumber;
const int CSODOTALobby::kTournamentGameIdFieldNumber;
const int CSODOTALobby::kServerRegionFieldNumber;
const int CSODOTALobby::kGameStateFieldNumber;
const int CSODOTALobby::kNumSpectatorsFieldNumber;
const int CSODOTALobby::kMatchgroupFieldNumber;
const int CSODOTALobby::kCmPickFieldNumber;
const int CSODOTALobby::kMatchIdFieldNumber;
const int CSODOTALobby::kAllowSpectatingFieldNumber;
const int CSODOTALobby::kBotDifficultyRadiantFieldNumber;
const int CSODOTALobby::kGameVersionFieldNumber;
const int CSODOTALobby::kTimedRewardDetailsFieldNumber;
const int CSODOTALobby::kPassKeyFieldNumber;
const int CSODOTALobby::kLeagueidFieldNumber;
const int CSODOTALobby::kPenaltyLevelRadiantFieldNumber;
const int CSODOTALobby::kPenaltyLevelDireFieldNumber;
const int CSODOTALobby::kLoadGameIdFieldNumber;
const int CSODOTALobby::kSeriesTypeFieldNumber;
const int CSODOTALobby::kRadiantSeriesWinsFieldNumber;
const int CSODOTALobby::kDireSeriesWinsFieldNumber;
const int CSODOTALobby::kLootGeneratedFieldNumber;
const int CSODOTALobby::kLootAwardedFieldNumber;
const int CSODOTALobby::kAllchatFieldNumber;
const int CSODOTALobby::kDotaTvDelayFieldNumber;
const int CSODOTALobby::kCustomGameModeFieldNumber;
const int CSODOTALobby::kCustomMapNameFieldNumber;
const int CSODOTALobby::kCustomDifficultyFieldNumber;
const int CSODOTALobby::kLanFieldNumber;
const int CSODOTALobby::kBroadcastChannelInfoFieldNumber;
const int CSODOTALobby::kFirstLeaverAccountidFieldNumber;
const int CSODOTALobby::kSeriesIdFieldNumber;
const int CSODOTALobby::kLowPriorityFieldNumber;
const int CSODOTALobby::kExtraMessagesFieldNumber;
const int CSODOTALobby::kSaveGameFieldNumber;
const int CSODOTALobby::kFirstBloodHappenedFieldNumber;
const int CSODOTALobby::kMatchOutcomeFieldNumber;
const int CSODOTALobby::kMassDisconnectFieldNumber;
const int CSODOTALobby::kCustomGameIdFieldNumber;
const int CSODOTALobby::kCustomMinPlayersFieldNumber;
const int CSODOTALobby::kCustomMaxPlayersFieldNumber;
const int CSODOTALobby::kPartnerTypeFieldNumber;
const int CSODOTALobby::kVisibilityFieldNumber;
const int CSODOTALobby::kCustomGameCrcFieldNumber;
const int CSODOTALobby::kCustomGameAutoCreatedLobbyFieldNumber;
const int CSODOTALobby::kCustomGameTimestampFieldNumber;
const int CSODOTALobby::kPreviousSeriesMatchesFieldNumber;
const int CSODOTALobby::kPreviousMatchOverrideFieldNumber;
const int CSODOTALobby::kCustomGameUsesAccountRecordsFieldNumber;
const int CSODOTALobby::kGameStartTimeFieldNumber;
const int CSODOTALobby::kPauseSettingFieldNumber;
const int CSODOTALobby::kLobbyMvpAccountIdFieldNumber;
const int CSODOTALobby::kWeekendTourneyDivisionIdFieldNumber;
const int CSODOTALobby::kWeekendTourneySkillLevelFieldNumber;
const int CSODOTALobby::kWeekendTourneyBracketRoundFieldNumber;
const int CSODOTALobby::kBotDifficultyDireFieldNumber;
const int CSODOTALobby::kBotRadiantFieldNumber;
const int CSODOTALobby::kBotDireFieldNumber;
const int CSODOTALobby::kEventProgressionEnabledFieldNumber;
const int CSODOTALobby::kSelectionPriorityRulesFieldNumber;
const int CSODOTALobby::kSeriesPreviousSelectionPriorityTeamIdFieldNumber;
const int CSODOTALobby::kSeriesCurrentSelectionPriorityTeamIdFieldNumber;
const int CSODOTALobby::kSeriesCurrentPriorityTeamChoiceFieldNumber;
const int CSODOTALobby::kSeriesCurrentNonPriorityTeamChoiceFieldNumber;
const int CSODOTALobby::kSeriesCurrentSelectionPriorityUsedCoinTossFieldNumber;
const int CSODOTALobby::kCurrentPrimaryEventFieldNumber;
const int CSODOTALobby::kLowpriDeprecatedFieldNumber;
const int CSODOTALobby::kEmergencyDisabledHeroIdsFieldNumber;
const int CSODOTALobby::kCustomGamePrivateKeyFieldNumber;
const int CSODOTALobby::kCustomGamePenaltiesFieldNumber;
const int CSODOTALobby::kMutationsFieldNumber;
const int CSODOTALobby::kLanHostPingLocationFieldNumber;
const int CSODOTALobby::kLeagueNodeIdFieldNumber;
const int CSODOTALobby::kMatchDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobby::CSODOTALobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobby)
}
CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      left_members_(from.left_members_),
      pending_invites_(from.pending_invites_),
      team_details_(from.team_details_),
      timed_reward_details_(from.timed_reward_details_),
      broadcast_channel_info_(from.broadcast_channel_info_),
      extra_messages_(from.extra_messages_),
      previous_series_matches_(from.previous_series_matches_),
      event_progression_enabled_(from.event_progression_enabled_),
      emergency_disabled_hero_ids_(from.emergency_disabled_hero_ids_),
      mutations_(from.mutations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect()) {
    connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lan_host_ping_location()) {
    lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
  }
  if (from.has_save_game()) {
    save_game_ = new ::proto::dota::CDOTASaveGame(*from.save_game_);
  } else {
    save_game_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobby)
}

void CSODOTALobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&save_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_duration_) -
      reinterpret_cast<char*>(&save_game_)) + sizeof(match_duration_));
  lobby_type_ = -1;
  allow_spectating_ = true;
  bot_difficulty_radiant_ = 3;
  bot_difficulty_dire_ = 3;
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobby)
  SharedDtor();
}

void CSODOTALobby::SharedDtor() {
  connect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete save_game_;
}

void CSODOTALobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSODOTALobby& CSODOTALobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSODOTALobby_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CSODOTALobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  previous_series_matches_.Clear();
  event_progression_enabled_.Clear();
  emergency_disabled_hero_ids_.Clear();
  mutations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      connect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pass_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      custom_map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      lan_host_ping_location_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(save_game_ != nullptr);
      save_game_->Clear();
    }
  }
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&game_mode_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&game_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&game_state_)) + sizeof(match_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&cm_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_series_wins_) -
        reinterpret_cast<char*>(&cm_pick_)) + sizeof(radiant_series_wins_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dire_series_wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lan_) -
        reinterpret_cast<char*>(&dire_series_wins_)) + sizeof(lan_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&low_priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partner_type_) -
        reinterpret_cast<char*>(&low_priority_)) + sizeof(partner_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&custom_game_crc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_division_id_) -
        reinterpret_cast<char*>(&custom_game_crc_)) + sizeof(weekend_tourney_division_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&weekend_tourney_skill_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_priority_rules_) -
        reinterpret_cast<char*>(&weekend_tourney_skill_level_)) + sizeof(selection_priority_rules_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bot_dire_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_private_key_) -
        reinterpret_cast<char*>(&bot_dire_)) + sizeof(custom_game_private_key_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&league_node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_duration_) -
        reinterpret_cast<char*>(&league_node_id_)) + sizeof(match_duration_));
    lobby_type_ = -1;
    allow_spectating_ = true;
    bot_difficulty_radiant_ = 3;
    bot_difficulty_dire_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSODOTALobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSODOTALobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTALobbyMember members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTALobbyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 game_mode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CSODOTALobby_State_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::dota::CSODOTALobby_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string connect = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.connect");
        object = msg->mutable_connect();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_server_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.dota.CDOTALobbyMember left_members = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTALobbyMember::_InternalParse;
          object = msg->add_left_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 81) {
          do {
            msg->add_pending_invites(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 81 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_pending_invites();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed64 leader_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_leader_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CSODOTALobby_LobbyType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(12, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_lobby_type(static_cast<::proto::dota::CSODOTALobby_LobbyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_cheats = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_allow_cheats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool fill_with_bots = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_fill_with_bots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool intro_mode = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_intro_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTeamDetails::_InternalParse;
          object = msg->add_team_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 394 && (ptr += 2));
        break;
      }
      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_tutorial_lesson(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_tournament_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(22, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_state(static_cast<::proto::dota::DOTA_GameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_spectators = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_num_spectators(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchgroup = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_matchgroup(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_CM_PICK_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(28, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cm_pick(static_cast<::proto::dota::DOTA_CM_PICK>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_allow_spectating(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(36, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_radiant(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAGameVersion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(37, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_version(static_cast<::proto::dota::DOTAGameVersion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTimedRewardDetails::_InternalParse;
          object = msg->add_timed_reward_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 690 && (ptr += 2));
        break;
      }
      // optional string pass_key = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 leagueid = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_leagueid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_penalty_level_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_penalty_level_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 load_game_id = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_load_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_radiant_series_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_dire_series_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 loot_generated = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_loot_generated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 loot_awarded = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_loot_awarded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allchat = 51 [default = false];
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_allchat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::LobbyDotaTVDelay_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(53, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_dota_tv_delay(static_cast<::proto::dota::LobbyDotaTVDelay>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string custom_game_mode = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.custom_game_mode");
        object = msg->mutable_custom_game_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string custom_map_name = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.custom_map_name");
        object = msg->mutable_custom_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_custom_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool lan = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_lan(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyBroadcastChannelInfo::_InternalParse;
          object = msg->add_broadcast_channel_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 978 && (ptr += 2));
        break;
      }
      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_first_leaver_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_priority = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_low_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSODOTALobby_CExtraMsg::_InternalParse;
          object = msg->add_extra_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1010 && (ptr += 2));
        break;
      }
      // optional .proto.dota.CDOTASaveGame save_game = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTASaveGame::_InternalParse;
        object = msg->mutable_save_game();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool first_blood_happened = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_first_blood_happened(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool mass_disconnect = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_mass_disconnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 custom_game_id = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EMatchOutcome_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(70, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_outcome(static_cast<::proto::dota::EMatchOutcome>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_min_players = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_custom_min_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_max_players = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_custom_max_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PartnerAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(73, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_partner_type(static_cast<::proto::dota::PartnerAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTALobbyVisibility_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(75, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_visibility(static_cast<::proto::dota::DOTALobbyVisibility>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 custom_game_crc = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_custom_game_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool custom_game_auto_created_lobby = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_custom_game_auto_created_lobby(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 custom_game_timestamp = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_custom_game_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated uint64 previous_series_matches = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) == 136) {
          do {
            msg->add_previous_series_matches(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1416 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_previous_series_matches();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 previous_match_override = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_previous_match_override(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool custom_game_uses_account_records = 83;
      case 83: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_custom_game_uses_account_records(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_start_time = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_game_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::LobbyDotaPauseSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(88, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_pause_setting(static_cast<::proto::dota::LobbyDotaPauseSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lobby_mvp_account_id = 89;
      case 89: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_lobby_mvp_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_division_id = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_weekend_tourney_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_skill_level = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_weekend_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_weekend_tourney_bracket_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(93, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_dire(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bot_radiant = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_bot_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bot_dire = 95;
      case 95: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_bot_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.EEvent event_progression_enabled = 96;
      case 96: {
        if (static_cast<::google::protobuf::uint8>(tag) == 0) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::proto::dota::EEvent_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(96, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_event_progression_enabled(static_cast<::proto::dota::EEvent>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1664 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::proto::dota::EEvent_IsValid, msg->mutable_unknown_fields(), 96);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParser;
        object = msg->mutable_event_progression_enabled();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
      case 97: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTASelectionPriorityRules_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(97, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_selection_priority_rules(static_cast<::proto::dota::DOTASelectionPriorityRules>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_previous_selection_priority_team_id = 98;
      case 98: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_series_previous_selection_priority_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_current_selection_priority_team_id = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_series_current_selection_priority_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTASelectionPriorityChoice_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(100, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_series_current_priority_team_choice(static_cast<::proto::dota::DOTASelectionPriorityChoice>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTASelectionPriorityChoice_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(101, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_series_current_non_priority_team_choice(static_cast<::proto::dota::DOTASelectionPriorityChoice>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool series_current_selection_priority_used_coin_toss = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_series_current_selection_priority_used_coin_toss(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(103, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_current_primary_event(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool lowpri_deprecated = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_lowpri_deprecated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 emergency_disabled_hero_ids = 105;
      case 105: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_emergency_disabled_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1736 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_emergency_disabled_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed64 custom_game_private_key = 106;
      case 106: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_custom_game_private_key(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool custom_game_penalties = 107;
      case 107: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_custom_game_penalties(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 mutations = 108;
      case 108: {
        if (static_cast<::google::protobuf::uint8>(tag) == 96) {
          do {
            msg->add_mutations(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1760 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_mutations();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string lan_host_ping_location = 109;
      case 109: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSODOTALobby.lan_host_ping_location");
        object = msg->mutable_lan_host_ping_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 league_node_id = 110;
      case 110: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_league_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_duration = 111;
      case 111: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_match_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSODOTALobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTALobby_State_IsValid(value)) {
            set_state(static_cast< ::proto::dota::CSODOTALobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), static_cast<int>(this->connect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.connect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_server_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember left_members = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81u, input, this->mutable_pending_invites())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_leader_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTALobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::proto::dota::CSODOTALobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cheats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_allow_cheats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fill_with_bots = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_fill_with_bots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intro_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_intro_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_tutorial_lesson(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_lesson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_tournament_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_spectators = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_num_spectators(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroup = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_matchgroup(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::proto::dota::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                28, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_allow_spectating(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::proto::dota::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (314 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_leagueid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_penalty_level_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_penalty_level_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 load_game_id = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_load_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_radiant_series_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_dire_series_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loot_generated = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_loot_generated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_generated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loot_awarded = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_loot_awarded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_awarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allchat = 51 [default = false];
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_allchat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::proto::dota::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                53, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (434 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_custom_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lan = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {
          HasBitSetters::set_has_lan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (466 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_broadcast_channel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_first_leaver_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_leaver_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_low_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (498 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extra_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTASaveGame save_game = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (506 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_first_blood_happened(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mass_disconnect = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_mass_disconnect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                70, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_min_players = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          HasBitSetters::set_has_custom_min_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_max_players = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {
          HasBitSetters::set_has_custom_max_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                73, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (600 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::proto::dota::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                75, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (609 & 0xFF)) {
          HasBitSetters::set_has_custom_game_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_auto_created_lobby = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (616 & 0xFF)) {
          HasBitSetters::set_has_custom_game_auto_created_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_auto_created_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (645 & 0xFF)) {
          HasBitSetters::set_has_custom_game_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 previous_series_matches = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (648 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 648u, input, this->mutable_previous_series_matches())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (650 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_previous_series_matches())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 previous_match_override = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (656 & 0xFF)) {
          HasBitSetters::set_has_previous_match_override(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_uses_account_records = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (664 & 0xFF)) {
          HasBitSetters::set_has_custom_game_uses_account_records(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_uses_account_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_start_time = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (696 & 0xFF)) {
          HasBitSetters::set_has_game_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::proto::dota::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                88, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mvp_account_id = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (712 & 0xFF)) {
          HasBitSetters::set_has_lobby_mvp_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (720 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (728 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_bracket_round(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (744 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                93, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_radiant = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {
          HasBitSetters::set_has_bot_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_dire = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (760 & 0xFF)) {
          HasBitSetters::set_has_bot_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.EEvent event_progression_enabled = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (768 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            add_event_progression_enabled(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                96, static_cast<::google::protobuf::uint64>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (770 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 96,
                 ::proto::dota::EEvent_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_event_progression_enabled())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (776 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityRules_IsValid(value)) {
            set_selection_priority_rules(static_cast< ::proto::dota::DOTASelectionPriorityRules >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                97, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_previous_selection_priority_team_id = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (784 & 0xFF)) {
          HasBitSetters::set_has_series_previous_selection_priority_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_previous_selection_priority_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_current_selection_priority_team_id = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (792 & 0xFF)) {
          HasBitSetters::set_has_series_current_selection_priority_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_current_selection_priority_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (800 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityChoice_IsValid(value)) {
            set_series_current_priority_team_choice(static_cast< ::proto::dota::DOTASelectionPriorityChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                100, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (808 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityChoice_IsValid(value)) {
            set_series_current_non_priority_team_choice(static_cast< ::proto::dota::DOTASelectionPriorityChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                101, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool series_current_selection_priority_used_coin_toss = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (816 & 0xFF)) {
          HasBitSetters::set_has_series_current_selection_priority_used_coin_toss(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &series_current_selection_priority_used_coin_toss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (824 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_current_primary_event(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                103, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lowpri_deprecated = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (832 & 0xFF)) {
          HasBitSetters::set_has_lowpri_deprecated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowpri_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 emergency_disabled_hero_ids = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (840 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 840u, input, this->mutable_emergency_disabled_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (842 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_emergency_disabled_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_private_key = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (849 & 0xFF)) {
          HasBitSetters::set_has_custom_game_private_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_private_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_penalties = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (856 & 0xFF)) {
          HasBitSetters::set_has_custom_game_penalties(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_penalties_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mutations = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (864 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 864u, input, this->mutable_mutations())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (866 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mutations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lan_host_ping_location = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (874 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lan_host_ping_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.lan_host_ping_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_node_id = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (880 & 0xFF)) {
          HasBitSetters::set_has_league_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_duration = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (888 & 0xFF)) {
          HasBitSetters::set_has_match_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSODOTALobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_mode(), output);
  }

  // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->connect(), output);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->left_members(static_cast<int>(i)),
      output);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0, n = this->pending_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->intro_mode(), output);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->game_name(), output);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->team_details(static_cast<int>(i)),
      output);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tutorial_lesson(), output);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tournament_game_id(), output);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchgroup(), output);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->cm_pick(), output);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bot_difficulty_radiant(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->game_version(), output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38,
      this->timed_reward_details(static_cast<int>(i)),
      output);
  }

  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->pass_key(), output);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->load_game_id(), output);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->radiant_series_wins(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dire_series_wins(), output);
  }

  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->loot_generated(), output);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->loot_awarded(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->allchat(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->dota_tv_delay(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->custom_map_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->custom_difficulty(), output);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->lan(), output);
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcast_channel_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58,
      this->broadcast_channel_info(static_cast<int>(i)),
      output);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->first_leaver_accountid(), output);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->series_id(), output);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->low_priority(), output);
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62,
      this->extra_messages(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, HasBitSetters::save_game(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_blood_happened(), output);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->mass_disconnect(), output);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->custom_game_id(), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      70, this->match_outcome(), output);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->custom_max_players(), output);
  }

  // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->partner_type(), output);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(76, this->custom_game_crc(), output);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->custom_game_auto_created_lobby(), output);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(80, this->custom_game_timestamp(), output);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0, n = this->previous_series_matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      81, this->previous_series_matches(i), output);
  }

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(82, this->previous_match_override(), output);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->custom_game_uses_account_records(), output);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->game_start_time(), output);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      88, this->pause_setting(), output);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->lobby_mvp_account_id(), output);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->weekend_tourney_division_id(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->weekend_tourney_skill_level(), output);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->weekend_tourney_bracket_round(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      93, this->bot_difficulty_dire(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(94, this->bot_radiant(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(95, this->bot_dire(), output);
  }

  // repeated .proto.dota.EEvent event_progression_enabled = 96;
  for (int i = 0, n = this->event_progression_enabled_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      96, this->event_progression_enabled(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      97, this->selection_priority_rules(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->series_previous_selection_priority_team_id(), output);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->series_current_selection_priority_team_id(), output);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->series_current_priority_team_choice(), output);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->series_current_non_priority_team_choice(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->series_current_selection_priority_used_coin_toss(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103, this->current_primary_event(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool lowpri_deprecated = 104;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->lowpri_deprecated(), output);
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  for (int i = 0, n = this->emergency_disabled_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      105, this->emergency_disabled_hero_ids(i), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional fixed64 custom_game_private_key = 106;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(106, this->custom_game_private_key(), output);
  }

  // optional bool custom_game_penalties = 107;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->custom_game_penalties(), output);
  }

  // repeated uint32 mutations = 108;
  for (int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      108, this->mutations(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string lan_host_ping_location = 109;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.lan_host_ping_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      109, this->lan_host_ping_location(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 league_node_id = 110;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->league_node_id(), output);
  }

  // optional uint32 match_duration = 111;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(111, this->match_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobby)
}

::google::protobuf::uint8* CSODOTALobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), target);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_mode(), target);
  }

  // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->left_members(static_cast<int>(i)), target);
  }

  // repeated fixed64 pending_invites = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(10, this->pending_invites_, target);

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->intro_mode(), target);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->team_details(static_cast<int>(i)), target);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchgroup(), target);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bot_difficulty_radiant(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->game_version(), target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, this->timed_reward_details(static_cast<int>(i)), target);
  }

  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->pass_key(), target);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->radiant_series_wins(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dire_series_wins(), target);
  }

  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->loot_awarded(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->custom_map_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->lan(), target);
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcast_channel_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        58, this->broadcast_channel_info(static_cast<int>(i)), target);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->series_id(), target);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->low_priority(), target);
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62, this->extra_messages(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        63, HasBitSetters::save_game(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->custom_game_id(), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      70, this->match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->custom_max_players(), target);
  }

  // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->partner_type(), target);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(76, this->custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->custom_game_auto_created_lobby(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(80, this->custom_game_timestamp(), target);
  }

  // repeated uint64 previous_series_matches = 81;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(81, this->previous_series_matches_, target);

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(82, this->previous_match_override(), target);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->custom_game_uses_account_records(), target);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->game_start_time(), target);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      88, this->pause_setting(), target);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->lobby_mvp_account_id(), target);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->weekend_tourney_division_id(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->weekend_tourney_bracket_round(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      93, this->bot_difficulty_dire(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(94, this->bot_radiant(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(95, this->bot_dire(), target);
  }

  // repeated .proto.dota.EEvent event_progression_enabled = 96;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    96, this->event_progression_enabled_, target);

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      97, this->selection_priority_rules(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->series_previous_selection_priority_team_id(), target);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(99, this->series_current_selection_priority_team_id(), target);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->series_current_priority_team_choice(), target);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->series_current_non_priority_team_choice(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->series_current_selection_priority_used_coin_toss(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103, this->current_primary_event(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool lowpri_deprecated = 104;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->lowpri_deprecated(), target);
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(105, this->emergency_disabled_hero_ids_, target);

  cached_has_bits = _has_bits_[2];
  // optional fixed64 custom_game_private_key = 106;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(106, this->custom_game_private_key(), target);
  }

  // optional bool custom_game_penalties = 107;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->custom_game_penalties(), target);
  }

  // repeated uint32 mutations = 108;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(108, this->mutations_, target);

  cached_has_bits = _has_bits_[0];
  // optional string lan_host_ping_location = 109;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.lan_host_ping_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        109, this->lan_host_ping_location(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 league_node_id = 110;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->league_node_id(), target);
  }

  // optional uint32 match_duration = 111;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(111, this->match_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobby)
  return target;
}

size_t CSODOTALobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->left_members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_members(static_cast<int>(i)));
    }
  }

  // repeated fixed64 pending_invites = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_invites_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pending_invites_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->team_details_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_details(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->timed_reward_details_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timed_reward_details(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  {
    unsigned int count = static_cast<unsigned int>(this->broadcast_channel_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->broadcast_channel_info(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_messages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_messages(static_cast<int>(i)));
    }
  }

  // repeated uint64 previous_series_matches = 81;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->previous_series_matches_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->previous_series_matches_size());
    total_size += data_size;
  }

  // repeated .proto.dota.EEvent event_progression_enabled = 96;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->event_progression_enabled_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->event_progression_enabled(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->emergency_disabled_hero_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->emergency_disabled_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 mutations = 108;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mutations_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mutations_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional string game_name = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string pass_key = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional string custom_game_mode = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional string lan_host_ping_location = 109;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lan_host_ping_location());
    }

    // optional .proto.dota.CDOTASaveGame save_game = 63;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *save_game_);
    }

    // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_mode = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional fixed64 leader_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 tutorial_lesson = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_lesson());
    }

    // optional uint32 tournament_id = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional uint32 num_spectators = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional bool allow_cheats = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool allchat = 51 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 matchgroup = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroup());
    }

    // optional uint64 match_id = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

    // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional uint32 leagueid = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

    // optional uint32 load_game_id = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 dire_series_wins = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional uint32 loot_generated = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_awarded());
    }

    // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

    // optional uint32 custom_difficulty = 56;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional uint32 first_leaver_accountid = 59;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional bool lan = 57;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool low_priority = 61;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool first_blood_happened = 65;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool mass_disconnect = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 68;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional uint32 custom_min_players = 71;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 72;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 custom_game_crc = 76;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed32 custom_game_timestamp = 80;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint64 previous_match_override = 82;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

    // optional uint32 game_start_time = 87;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_start_time());
    }

    // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

    // optional uint32 lobby_mvp_account_id = 89;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_account_id());
    }

    // optional uint32 weekend_tourney_division_id = 90;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 weekend_tourney_skill_level = 91;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_uses_account_records = 83;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool series_current_selection_priority_used_coin_toss = 102;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool lowpri_deprecated = 104;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 bot_radiant = 94;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional uint32 weekend_tourney_bracket_round = 92;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

    // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_priority_rules());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bot_dire = 95;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

    // optional uint32 series_previous_selection_priority_team_id = 98;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_previous_selection_priority_team_id());
    }

    // optional uint32 series_current_selection_priority_team_id = 99;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_current_selection_priority_team_id());
    }

    // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->series_current_priority_team_choice());
    }

    // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->series_current_non_priority_team_choice());
    }

    // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_primary_event());
    }

    // optional bool custom_game_penalties = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional fixed64 custom_game_private_key = 106;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 league_node_id = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_node_id());
    }

    // optional uint32 match_duration = 111;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_duration());
    }

    // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }

    // optional bool allow_spectating = 31 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby* source =
      ::google::protobuf::DynamicCastToGenerated<CSODOTALobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobby)
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  previous_series_matches_.MergeFrom(from.previous_series_matches_);
  event_progression_enabled_.MergeFrom(from.event_progression_enabled_);
  emergency_disabled_hero_ids_.MergeFrom(from.emergency_disabled_hero_ids_);
  mutations_.MergeFrom(from.mutations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_save_game()->::proto::dota::CDOTASaveGame::MergeFrom(from.save_game());
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      tutorial_lesson_ = from.tutorial_lesson_;
    }
    if (cached_has_bits & 0x00002000u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00040000u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00080000u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00100000u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x00400000u) {
      matchgroup_ = from.matchgroup_;
    }
    if (cached_has_bits & 0x00800000u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      cm_pick_ = from.cm_pick_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_version_ = from.game_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x08000000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x20000000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x80000000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      loot_generated_ = from.loot_generated_;
    }
    if (cached_has_bits & 0x00000004u) {
      loot_awarded_ = from.loot_awarded_;
    }
    if (cached_has_bits & 0x00000008u) {
      dota_tv_delay_ = from.dota_tv_delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      first_leaver_accountid_ = from.first_leaver_accountid_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      lan_ = from.lan_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    if (cached_has_bits & 0x00000800u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00002000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x00004000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      partner_type_ = from.partner_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00020000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00040000u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      previous_match_override_ = from.previous_match_override_;
    }
    if (cached_has_bits & 0x00100000u) {
      game_start_time_ = from.game_start_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x00400000u) {
      lobby_mvp_account_id_ = from.lobby_mvp_account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      weekend_tourney_division_id_ = from.weekend_tourney_division_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_game_auto_created_lobby_ = from.custom_game_auto_created_lobby_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_game_uses_account_records_ = from.custom_game_uses_account_records_;
    }
    if (cached_has_bits & 0x08000000u) {
      series_current_selection_priority_used_coin_toss_ = from.series_current_selection_priority_used_coin_toss_;
    }
    if (cached_has_bits & 0x10000000u) {
      lowpri_deprecated_ = from.lowpri_deprecated_;
    }
    if (cached_has_bits & 0x20000000u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x40000000u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x80000000u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bot_dire_ = from.bot_dire_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_previous_selection_priority_team_id_ = from.series_previous_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_current_selection_priority_team_id_ = from.series_current_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      series_current_priority_team_choice_ = from.series_current_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_current_non_priority_team_choice_ = from.series_current_non_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000020u) {
      current_primary_event_ = from.current_primary_event_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_game_penalties_ = from.custom_game_penalties_;
    }
    if (cached_has_bits & 0x00000080u) {
      custom_game_private_key_ = from.custom_game_private_key_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_duration_ = from.match_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      allow_spectating_ = from.allow_spectating_;
    }
    if (cached_has_bits & 0x00001000u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00002000u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CSODOTALobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {
  return true;
}

void CSODOTALobby::Swap(CSODOTALobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby::InternalSwap(CSODOTALobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  CastToBase(&left_members_)->InternalSwap(CastToBase(&other->left_members_));
  pending_invites_.InternalSwap(&other->pending_invites_);
  CastToBase(&team_details_)->InternalSwap(CastToBase(&other->team_details_));
  CastToBase(&timed_reward_details_)->InternalSwap(CastToBase(&other->timed_reward_details_));
  CastToBase(&broadcast_channel_info_)->InternalSwap(CastToBase(&other->broadcast_channel_info_));
  CastToBase(&extra_messages_)->InternalSwap(CastToBase(&other->extra_messages_));
  previous_series_matches_.InternalSwap(&other->previous_series_matches_);
  event_progression_enabled_.InternalSwap(&other->event_progression_enabled_);
  emergency_disabled_hero_ids_.InternalSwap(&other->emergency_disabled_hero_ids_);
  mutations_.InternalSwap(&other->mutations_);
  connect_.Swap(&other->connect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_map_name_.Swap(&other->custom_map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(save_game_, other->save_game_);
  swap(lobby_id_, other->lobby_id_);
  swap(game_mode_, other->game_mode_);
  swap(state_, other->state_);
  swap(server_id_, other->server_id_);
  swap(leader_id_, other->leader_id_);
  swap(tutorial_lesson_, other->tutorial_lesson_);
  swap(tournament_id_, other->tournament_id_);
  swap(tournament_game_id_, other->tournament_game_id_);
  swap(server_region_, other->server_region_);
  swap(game_state_, other->game_state_);
  swap(num_spectators_, other->num_spectators_);
  swap(allow_cheats_, other->allow_cheats_);
  swap(fill_with_bots_, other->fill_with_bots_);
  swap(intro_mode_, other->intro_mode_);
  swap(allchat_, other->allchat_);
  swap(matchgroup_, other->matchgroup_);
  swap(match_id_, other->match_id_);
  swap(cm_pick_, other->cm_pick_);
  swap(game_version_, other->game_version_);
  swap(leagueid_, other->leagueid_);
  swap(penalty_level_radiant_, other->penalty_level_radiant_);
  swap(penalty_level_dire_, other->penalty_level_dire_);
  swap(load_game_id_, other->load_game_id_);
  swap(series_type_, other->series_type_);
  swap(radiant_series_wins_, other->radiant_series_wins_);
  swap(dire_series_wins_, other->dire_series_wins_);
  swap(loot_generated_, other->loot_generated_);
  swap(loot_awarded_, other->loot_awarded_);
  swap(dota_tv_delay_, other->dota_tv_delay_);
  swap(custom_difficulty_, other->custom_difficulty_);
  swap(first_leaver_accountid_, other->first_leaver_accountid_);
  swap(series_id_, other->series_id_);
  swap(lan_, other->lan_);
  swap(low_priority_, other->low_priority_);
  swap(first_blood_happened_, other->first_blood_happened_);
  swap(mass_disconnect_, other->mass_disconnect_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(match_outcome_, other->match_outcome_);
  swap(custom_min_players_, other->custom_min_players_);
  swap(custom_max_players_, other->custom_max_players_);
  swap(partner_type_, other->partner_type_);
  swap(custom_game_crc_, other->custom_game_crc_);
  swap(visibility_, other->visibility_);
  swap(custom_game_timestamp_, other->custom_game_timestamp_);
  swap(previous_match_override_, other->previous_match_override_);
  swap(game_start_time_, other->game_start_time_);
  swap(pause_setting_, other->pause_setting_);
  swap(lobby_mvp_account_id_, other->lobby_mvp_account_id_);
  swap(weekend_tourney_division_id_, other->weekend_tourney_division_id_);
  swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
  swap(custom_game_auto_created_lobby_, other->custom_game_auto_created_lobby_);
  swap(custom_game_uses_account_records_, other->custom_game_uses_account_records_);
  swap(series_current_selection_priority_used_coin_toss_, other->series_current_selection_priority_used_coin_toss_);
  swap(lowpri_deprecated_, other->lowpri_deprecated_);
  swap(bot_radiant_, other->bot_radiant_);
  swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
  swap(selection_priority_rules_, other->selection_priority_rules_);
  swap(bot_dire_, other->bot_dire_);
  swap(series_previous_selection_priority_team_id_, other->series_previous_selection_priority_team_id_);
  swap(series_current_selection_priority_team_id_, other->series_current_selection_priority_team_id_);
  swap(series_current_priority_team_choice_, other->series_current_priority_team_choice_);
  swap(series_current_non_priority_team_choice_, other->series_current_non_priority_team_choice_);
  swap(current_primary_event_, other->current_primary_event_);
  swap(custom_game_penalties_, other->custom_game_penalties_);
  swap(custom_game_private_key_, other->custom_game_private_key_);
  swap(league_node_id_, other->league_node_id_);
  swap(match_duration_, other->match_duration_);
  swap(lobby_type_, other->lobby_type_);
  swap(allow_spectating_, other->allow_spectating_);
  swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
}

::google::protobuf::Metadata CSODOTALobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyPlaytestDetails::InitAsDefaultInstance() {
}
class CMsgLobbyPlaytestDetails::HasBitSetters {
 public:
  static void set_has_json(CMsgLobbyPlaytestDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyPlaytestDetails::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyPlaytestDetails)
}
CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json()) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyPlaytestDetails)
}

void CMsgLobbyPlaytestDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgLobbyPlaytestDetails::~CMsgLobbyPlaytestDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyPlaytestDetails)
  SharedDtor();
}

void CMsgLobbyPlaytestDetails::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyPlaytestDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyPlaytestDetails& CMsgLobbyPlaytestDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyPlaytestDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyPlaytestDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyPlaytestDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyPlaytestDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyPlaytestDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgLobbyPlaytestDetails.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyPlaytestDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyPlaytestDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgLobbyPlaytestDetails.json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyPlaytestDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyPlaytestDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyPlaytestDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyPlaytestDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgLobbyPlaytestDetails.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyPlaytestDetails)
}

::google::protobuf::uint8* CMsgLobbyPlaytestDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyPlaytestDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgLobbyPlaytestDetails.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyPlaytestDetails)
  return target;
}

size_t CMsgLobbyPlaytestDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyPlaytestDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlaytestDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlaytestDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyPlaytestDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyPlaytestDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyPlaytestDetails)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlaytestDetails::MergeFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_json()) {
    _has_bits_[0] |= 0x00000001u;
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void CMsgLobbyPlaytestDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlaytestDetails::CopyFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlaytestDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyPlaytestDetails::Swap(CMsgLobbyPlaytestDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyPlaytestDetails::InternalSwap(CMsgLobbyPlaytestDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgLobbyPlaytestDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReadyCheckStatus_ReadyMember::InitAsDefaultInstance() {
}
class CMsgReadyCheckStatus_ReadyMember::HasBitSetters {
 public:
  static void set_has_account_id(CMsgReadyCheckStatus_ReadyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ready_status(CMsgReadyCheckStatus_ReadyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyCheckStatus_ReadyMember::kAccountIdFieldNumber;
const int CMsgReadyCheckStatus_ReadyMember::kReadyStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyCheckStatus.ReadyMember)
}
CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyCheckStatus.ReadyMember)
}

void CMsgReadyCheckStatus_ReadyMember::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_status_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
}

CMsgReadyCheckStatus_ReadyMember::~CMsgReadyCheckStatus_ReadyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  SharedDtor();
}

void CMsgReadyCheckStatus_ReadyMember::SharedDtor() {
}

void CMsgReadyCheckStatus_ReadyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus_ReadyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReadyCheckStatus_ReadyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgReadyCheckStatus_ReadyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ready_status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReadyCheckStatus_ReadyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReadyCheckStatus_ReadyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EReadyCheckStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_ready_status(static_cast<::proto::dota::EReadyCheckStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReadyCheckStatus_ReadyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EReadyCheckStatus_IsValid(value)) {
            set_ready_status(static_cast< ::proto::dota::EReadyCheckStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReadyCheckStatus_ReadyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ready_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyCheckStatus.ReadyMember)
}

::google::protobuf::uint8* CMsgReadyCheckStatus_ReadyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ready_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  return target;
}

size_t CMsgReadyCheckStatus_ReadyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ready_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyCheckStatus_ReadyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyCheckStatus_ReadyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReadyCheckStatus_ReadyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyCheckStatus.ReadyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyCheckStatus.ReadyMember)
    MergeFrom(*source);
  }
}

void CMsgReadyCheckStatus_ReadyMember::MergeFrom(const CMsgReadyCheckStatus_ReadyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ready_status_ = from.ready_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyCheckStatus_ReadyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyCheckStatus_ReadyMember::CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyCheckStatus.ReadyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus_ReadyMember::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus_ReadyMember::Swap(CMsgReadyCheckStatus_ReadyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyCheckStatus_ReadyMember::InternalSwap(CMsgReadyCheckStatus_ReadyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(ready_status_, other->ready_status_);
}

::google::protobuf::Metadata CMsgReadyCheckStatus_ReadyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReadyCheckStatus::InitAsDefaultInstance() {
}
class CMsgReadyCheckStatus::HasBitSetters {
 public:
  static void set_has_start_timestamp(CMsgReadyCheckStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_finish_timestamp(CMsgReadyCheckStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_initiator_account_id(CMsgReadyCheckStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyCheckStatus::kStartTimestampFieldNumber;
const int CMsgReadyCheckStatus::kFinishTimestampFieldNumber;
const int CMsgReadyCheckStatus::kInitiatorAccountIdFieldNumber;
const int CMsgReadyCheckStatus::kReadyMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyCheckStatus::CMsgReadyCheckStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyCheckStatus)
}
CMsgReadyCheckStatus::CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ready_members_(from.ready_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&initiator_account_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyCheckStatus)
}

void CMsgReadyCheckStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initiator_account_id_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
}

CMsgReadyCheckStatus::~CMsgReadyCheckStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyCheckStatus)
  SharedDtor();
}

void CMsgReadyCheckStatus::SharedDtor() {
}

void CMsgReadyCheckStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReadyCheckStatus& CMsgReadyCheckStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReadyCheckStatus_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgReadyCheckStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyCheckStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initiator_account_id_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReadyCheckStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReadyCheckStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 finish_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_finish_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initiator_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_initiator_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgReadyCheckStatus_ReadyMember::_InternalParse;
          object = msg->add_ready_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReadyCheckStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyCheckStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 finish_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_finish_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initiator_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_initiator_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initiator_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ready_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyCheckStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyCheckStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReadyCheckStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyCheckStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_timestamp(), output);
  }

  // optional uint32 finish_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish_timestamp(), output);
  }

  // optional uint32 initiator_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->initiator_account_id(), output);
  }

  // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ready_members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ready_members(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyCheckStatus)
}

::google::protobuf::uint8* CMsgReadyCheckStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyCheckStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_timestamp(), target);
  }

  // optional uint32 finish_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish_timestamp(), target);
  }

  // optional uint32 initiator_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->initiator_account_id(), target);
  }

  // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ready_members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ready_members(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyCheckStatus)
  return target;
}

size_t CMsgReadyCheckStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyCheckStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ready_members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ready_members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_timestamp());
    }

    // optional uint32 finish_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_timestamp());
    }

    // optional uint32 initiator_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initiator_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyCheckStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyCheckStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyCheckStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReadyCheckStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyCheckStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyCheckStatus)
    MergeFrom(*source);
  }
}

void CMsgReadyCheckStatus::MergeFrom(const CMsgReadyCheckStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyCheckStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ready_members_.MergeFrom(from.ready_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      initiator_account_id_ = from.initiator_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyCheckStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyCheckStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyCheckStatus::CopyFrom(const CMsgReadyCheckStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyCheckStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus::Swap(CMsgReadyCheckStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyCheckStatus::InternalSwap(CMsgReadyCheckStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&ready_members_)->InternalSwap(CastToBase(&other->ready_members_));
  swap(start_timestamp_, other->start_timestamp_);
  swap(finish_timestamp_, other->finish_timestamp_);
  swap(initiator_account_id_, other->initiator_account_id_);
}

::google::protobuf::Metadata CMsgReadyCheckStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyReadyCheckRequest::InitAsDefaultInstance() {
}
class CMsgPartyReadyCheckRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyReadyCheckRequest)
}
CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyReadyCheckRequest)
}

void CMsgPartyReadyCheckRequest::SharedCtor() {
}

CMsgPartyReadyCheckRequest::~CMsgPartyReadyCheckRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyReadyCheckRequest)
  SharedDtor();
}

void CMsgPartyReadyCheckRequest::SharedDtor() {
}

void CMsgPartyReadyCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyReadyCheckRequest& CMsgPartyReadyCheckRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyReadyCheckRequest_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyReadyCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyReadyCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyReadyCheckRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyReadyCheckRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyReadyCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyReadyCheckRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyReadyCheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyReadyCheckRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyReadyCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyReadyCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyReadyCheckRequest)
}

::google::protobuf::uint8* CMsgPartyReadyCheckRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyReadyCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyReadyCheckRequest)
  return target;
}

size_t CMsgPartyReadyCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyReadyCheckRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyReadyCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyReadyCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyReadyCheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyReadyCheckRequest)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckRequest::MergeFrom(const CMsgPartyReadyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyReadyCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyReadyCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyReadyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckRequest::CopyFrom(const CMsgPartyReadyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyReadyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckRequest::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckRequest::Swap(CMsgPartyReadyCheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyReadyCheckRequest::InternalSwap(CMsgPartyReadyCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgPartyReadyCheckRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyReadyCheckResponse::InitAsDefaultInstance() {
}
class CMsgPartyReadyCheckResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgPartyReadyCheckResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyReadyCheckResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyReadyCheckResponse)
}
CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyReadyCheckResponse)
}

void CMsgPartyReadyCheckResponse::SharedCtor() {
  result_ = 0;
}

CMsgPartyReadyCheckResponse::~CMsgPartyReadyCheckResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyReadyCheckResponse)
  SharedDtor();
}

void CMsgPartyReadyCheckResponse::SharedDtor() {
}

void CMsgPartyReadyCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyReadyCheckResponse& CMsgPartyReadyCheckResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyReadyCheckResponse_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyReadyCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyReadyCheckResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyReadyCheckResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyReadyCheckResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EReadyCheckRequestResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::EReadyCheckRequestResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyReadyCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyReadyCheckResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EReadyCheckRequestResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::EReadyCheckRequestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyReadyCheckResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyReadyCheckResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyReadyCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyReadyCheckResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyReadyCheckResponse)
}

::google::protobuf::uint8* CMsgPartyReadyCheckResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyReadyCheckResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyReadyCheckResponse)
  return target;
}

size_t CMsgPartyReadyCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyReadyCheckResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyReadyCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyReadyCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyReadyCheckResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyReadyCheckResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckResponse::MergeFrom(const CMsgPartyReadyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyReadyCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgPartyReadyCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyReadyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckResponse::CopyFrom(const CMsgPartyReadyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyReadyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckResponse::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckResponse::Swap(CMsgPartyReadyCheckResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyReadyCheckResponse::InternalSwap(CMsgPartyReadyCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgPartyReadyCheckResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyReadyCheckAcknowledge::InitAsDefaultInstance() {
}
class CMsgPartyReadyCheckAcknowledge::HasBitSetters {
 public:
  static void set_has_ready_status(CMsgPartyReadyCheckAcknowledge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyReadyCheckAcknowledge::kReadyStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyReadyCheckAcknowledge)
}
CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ready_status_ = from.ready_status_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyReadyCheckAcknowledge)
}

void CMsgPartyReadyCheckAcknowledge::SharedCtor() {
  ready_status_ = 0;
}

CMsgPartyReadyCheckAcknowledge::~CMsgPartyReadyCheckAcknowledge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyReadyCheckAcknowledge)
  SharedDtor();
}

void CMsgPartyReadyCheckAcknowledge::SharedDtor() {
}

void CMsgPartyReadyCheckAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyReadyCheckAcknowledge& CMsgPartyReadyCheckAcknowledge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyReadyCheckAcknowledge_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyReadyCheckAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyReadyCheckAcknowledge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyReadyCheckAcknowledge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EReadyCheckStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_ready_status(static_cast<::proto::dota::EReadyCheckStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyReadyCheckAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EReadyCheckStatus_IsValid(value)) {
            set_ready_status(static_cast< ::proto::dota::EReadyCheckStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyReadyCheckAcknowledge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyReadyCheckAcknowledge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyReadyCheckAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ready_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyReadyCheckAcknowledge)
}

::google::protobuf::uint8* CMsgPartyReadyCheckAcknowledge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ready_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyReadyCheckAcknowledge)
  return target;
}

size_t CMsgPartyReadyCheckAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ready_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckAcknowledge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyReadyCheckAcknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyReadyCheckAcknowledge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyReadyCheckAcknowledge)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckAcknowledge::MergeFrom(const CMsgPartyReadyCheckAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ready_status()) {
    set_ready_status(from.ready_status());
  }
}

void CMsgPartyReadyCheckAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckAcknowledge::CopyFrom(const CMsgPartyReadyCheckAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyReadyCheckAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckAcknowledge::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckAcknowledge::Swap(CMsgPartyReadyCheckAcknowledge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyReadyCheckAcknowledge::InternalSwap(CMsgPartyReadyCheckAcknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ready_status_, other->ready_status_);
}

::google::protobuf::Metadata CMsgPartyReadyCheckAcknowledge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyEventGameDetails::InitAsDefaultInstance() {
}
class CMsgLobbyEventGameDetails::HasBitSetters {
 public:
  static void set_has_kv_data(CMsgLobbyEventGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventGameDetails::kKvDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventGameDetails)
}
CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kv_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kv_data()) {
    kv_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventGameDetails)
}

void CMsgLobbyEventGameDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  kv_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgLobbyEventGameDetails::~CMsgLobbyEventGameDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventGameDetails)
  SharedDtor();
}

void CMsgLobbyEventGameDetails::SharedDtor() {
  kv_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyEventGameDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyEventGameDetails& CMsgLobbyEventGameDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyEventGameDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyEventGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    kv_data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyEventGameDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyEventGameDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes kv_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_kv_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyEventGameDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventGameDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes kv_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kv_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventGameDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventGameDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyEventGameDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes kv_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->kv_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventGameDetails)
}

::google::protobuf::uint8* CMsgLobbyEventGameDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes kv_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->kv_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventGameDetails)
  return target;
}

size_t CMsgLobbyEventGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventGameDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes kv_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->kv_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventGameDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventGameDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyEventGameDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventGameDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventGameDetails)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventGameDetails::MergeFrom(const CMsgLobbyEventGameDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv_data()) {
    _has_bits_[0] |= 0x00000001u;
    kv_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_data_);
  }
}

void CMsgLobbyEventGameDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventGameDetails::CopyFrom(const CMsgLobbyEventGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventGameDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyEventGameDetails::Swap(CMsgLobbyEventGameDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventGameDetails::InternalSwap(CMsgLobbyEventGameDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kv_data_.Swap(&other->kv_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgLobbyEventGameDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAPartyMember* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAPartyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAPartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAParty* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAParty >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAParty >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAPartyInvite_PartyMember* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAPartyInvite_PartyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAPartyInvite_PartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTAPartyInvite* Arena::CreateMaybeMessage< ::proto::dota::CSODOTAPartyInvite >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTAPartyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTALobbyInvite_LobbyMember* Arena::CreateMaybeMessage< ::proto::dota::CSODOTALobbyInvite_LobbyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTALobbyInvite_LobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTALobbyInvite* Arena::CreateMaybeMessage< ::proto::dota::CSODOTALobbyInvite >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTALobbyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLeaverState* Arena::CreateMaybeMessage< ::proto::dota::CMsgLeaverState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLeaverState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* Arena::CreateMaybeMessage< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTALobbyMember* Arena::CreateMaybeMessage< ::proto::dota::CDOTALobbyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTALobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CLobbyTeamDetails* Arena::CreateMaybeMessage< ::proto::dota::CLobbyTeamDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CLobbyTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage< ::proto::dota::CLobbyTimedRewardDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CLobbyTimedRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CLobbyBroadcastChannelInfo* Arena::CreateMaybeMessage< ::proto::dota::CLobbyBroadcastChannelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CLobbyBroadcastChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTALobby_CExtraMsg* Arena::CreateMaybeMessage< ::proto::dota::CSODOTALobby_CExtraMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTALobby_CExtraMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSODOTALobby* Arena::CreateMaybeMessage< ::proto::dota::CSODOTALobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSODOTALobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyPlaytestDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyPlaytestDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyPlaytestDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgReadyCheckStatus_ReadyMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgReadyCheckStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgReadyCheckStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgReadyCheckStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyReadyCheckRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyReadyCheckRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyReadyCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyReadyCheckResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyReadyCheckResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyReadyCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyReadyCheckAcknowledge* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyReadyCheckAcknowledge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyReadyCheckAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyEventGameDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyEventGameDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyEventGameDetails >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
