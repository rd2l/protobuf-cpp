// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#ifndef PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto
#define PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[107]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fgcmessages_5fcommon_2eproto();
namespace proto {
namespace dota {
class CAdditionalEquipSlot;
class CAdditionalEquipSlotDefaultTypeInternal;
extern CAdditionalEquipSlotDefaultTypeInternal _CAdditionalEquipSlot_default_instance_;
class CCompendiumGameList;
class CCompendiumGameListDefaultTypeInternal;
extern CCompendiumGameListDefaultTypeInternal _CCompendiumGameList_default_instance_;
class CCompendiumGameTimeline;
class CCompendiumGameTimelineDefaultTypeInternal;
extern CCompendiumGameTimelineDefaultTypeInternal _CCompendiumGameTimeline_default_instance_;
class CCompendiumTimestampedData;
class CCompendiumTimestampedDataDefaultTypeInternal;
extern CCompendiumTimestampedDataDefaultTypeInternal _CCompendiumTimestampedData_default_instance_;
class CMatchAdditionalUnitInventory;
class CMatchAdditionalUnitInventoryDefaultTypeInternal;
extern CMatchAdditionalUnitInventoryDefaultTypeInternal _CMatchAdditionalUnitInventory_default_instance_;
class CMatchHeroSelectEvent;
class CMatchHeroSelectEventDefaultTypeInternal;
extern CMatchHeroSelectEventDefaultTypeInternal _CMatchHeroSelectEvent_default_instance_;
class CMatchPlayerAbilityUpgrade;
class CMatchPlayerAbilityUpgradeDefaultTypeInternal;
extern CMatchPlayerAbilityUpgradeDefaultTypeInternal _CMatchPlayerAbilityUpgrade_default_instance_;
class CMatchPlayerPermanentBuff;
class CMatchPlayerPermanentBuffDefaultTypeInternal;
extern CMatchPlayerPermanentBuffDefaultTypeInternal _CMatchPlayerPermanentBuff_default_instance_;
class CMatchPlayerTimedStats;
class CMatchPlayerTimedStatsDefaultTypeInternal;
extern CMatchPlayerTimedStatsDefaultTypeInternal _CMatchPlayerTimedStats_default_instance_;
class CMsgBattleCupVictory;
class CMsgBattleCupVictoryDefaultTypeInternal;
extern CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
class CMsgClientToGCRerollPlayerChallenge;
class CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal;
extern CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal _CMsgClientToGCRerollPlayerChallenge_default_instance_;
class CMsgConsumableUsage;
class CMsgConsumableUsageDefaultTypeInternal;
extern CMsgConsumableUsageDefaultTypeInternal _CMsgConsumableUsage_default_instance_;
class CMsgDOTABotDebugInfo;
class CMsgDOTABotDebugInfoDefaultTypeInternal;
extern CMsgDOTABotDebugInfoDefaultTypeInternal _CMsgDOTABotDebugInfo_default_instance_;
class CMsgDOTABotDebugInfo_Bot;
class CMsgDOTABotDebugInfo_BotDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_BotDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Action;
class CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Mode;
class CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
class CMsgDOTABroadcastNotification;
class CMsgDOTABroadcastNotificationDefaultTypeInternal;
extern CMsgDOTABroadcastNotificationDefaultTypeInternal _CMsgDOTABroadcastNotification_default_instance_;
class CMsgDOTABroadcastTimelineEvent;
class CMsgDOTABroadcastTimelineEventDefaultTypeInternal;
extern CMsgDOTABroadcastTimelineEventDefaultTypeInternal _CMsgDOTABroadcastTimelineEvent_default_instance_;
class CMsgDOTAFantasyPlayerMatchStats;
class CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
class CMsgDOTAFantasyPlayerStats;
class CMsgDOTAFantasyPlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerStats_default_instance_;
class CMsgDOTAHasItemDefsQuery;
class CMsgDOTAHasItemDefsQueryDefaultTypeInternal;
extern CMsgDOTAHasItemDefsQueryDefaultTypeInternal _CMsgDOTAHasItemDefsQuery_default_instance_;
class CMsgDOTAHasItemDefsResponse;
class CMsgDOTAHasItemDefsResponseDefaultTypeInternal;
extern CMsgDOTAHasItemDefsResponseDefaultTypeInternal _CMsgDOTAHasItemDefsResponse_default_instance_;
class CMsgDOTAHasItemQuery;
class CMsgDOTAHasItemQueryDefaultTypeInternal;
extern CMsgDOTAHasItemQueryDefaultTypeInternal _CMsgDOTAHasItemQuery_default_instance_;
class CMsgDOTAHasItemResponse;
class CMsgDOTAHasItemResponseDefaultTypeInternal;
extern CMsgDOTAHasItemResponseDefaultTypeInternal _CMsgDOTAHasItemResponse_default_instance_;
class CMsgDOTAMatch;
class CMsgDOTAMatchDefaultTypeInternal;
extern CMsgDOTAMatchDefaultTypeInternal _CMsgDOTAMatch_default_instance_;
class CMsgDOTAMatchMinimal;
class CMsgDOTAMatchMinimalDefaultTypeInternal;
extern CMsgDOTAMatchMinimalDefaultTypeInternal _CMsgDOTAMatchMinimal_default_instance_;
class CMsgDOTAMatchMinimal_Player;
class CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal _CMsgDOTAMatchMinimal_Player_default_instance_;
class CMsgDOTAMatchMinimal_Tourney;
class CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal _CMsgDOTAMatchMinimal_Tourney_default_instance_;
class CMsgDOTAMatch_BroadcasterChannel;
class CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
class CMsgDOTAMatch_BroadcasterInfo;
class CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
class CMsgDOTAMatch_CustomGameData;
class CMsgDOTAMatch_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_CustomGameData_default_instance_;
class CMsgDOTAMatch_Player;
class CMsgDOTAMatch_PlayerDefaultTypeInternal;
extern CMsgDOTAMatch_PlayerDefaultTypeInternal _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatch_Player_CustomGameData;
class CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
class CMsgDOTAProcessFantasyScheduledEvent;
class CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal;
extern CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal _CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
class CMsgDOTAProfileCard;
class CMsgDOTAProfileCardDefaultTypeInternal;
extern CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
class CMsgDOTAProfileCard_Slot;
class CMsgDOTAProfileCard_SlotDefaultTypeInternal;
extern CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCard_Slot_Emoticon;
class CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_Hero;
class CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_Item;
class CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_Stat;
class CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_Team;
class CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_Slot_Trophy;
class CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgDOTARealtimeGameStats;
class CMsgDOTARealtimeGameStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_default_instance_;
class CMsgDOTARealtimeGameStatsTerse;
class CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_GraphData;
class CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_MatchDetails;
class CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PickBanDetails;
class CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_TeamDetails;
class CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityDetails;
class CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityList;
class CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
class CMsgDOTARealtimeGameStats_BroadcasterDetails;
class CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BuildingDetails;
class CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData;
class CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_LocationStats;
class CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_HeroToHeroStats;
class CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
class CMsgDOTARealtimeGameStats_ItemDetails;
class CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
class CMsgDOTARealtimeGameStats_KillDetails;
class CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
class CMsgDOTARealtimeGameStats_MatchDetails;
class CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PickBanDetails;
class CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PlayerDetails;
class CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStats_TeamDetails;
class CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
class CMsgDOTASDOHeroStatsHistory;
class CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal;
extern CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal _CMsgDOTASDOHeroStatsHistory_default_instance_;
class CMsgDOTASeasonAchievements;
class CMsgDOTASeasonAchievementsDefaultTypeInternal;
extern CMsgDOTASeasonAchievementsDefaultTypeInternal _CMsgDOTASeasonAchievements_default_instance_;
class CMsgDOTASeasonAchievements_Achievement;
class CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal;
extern CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal _CMsgDOTASeasonAchievements_Achievement_default_instance_;
class CMsgDOTASeasonPredictions;
class CMsgDOTASeasonPredictionsDefaultTypeInternal;
extern CMsgDOTASeasonPredictionsDefaultTypeInternal _CMsgDOTASeasonPredictions_default_instance_;
class CMsgDOTASeasonPredictions_Answers;
class CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal _CMsgDOTASeasonPredictions_Answers_default_instance_;
class CMsgDOTASeasonPredictions_Choice;
class CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal _CMsgDOTASeasonPredictions_Choice_default_instance_;
class CMsgDOTASeasonPredictions_InGamePrediction;
class CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_;
class CMsgDOTASeasonPredictions_Prediction;
class CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_default_instance_;
class CMsgDOTASeasonPredictions_QueryKeyValues;
class CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_;
class CMsgDOTASeasonRewards;
class CMsgDOTASeasonRewardsDefaultTypeInternal;
extern CMsgDOTASeasonRewardsDefaultTypeInternal _CMsgDOTASeasonRewards_default_instance_;
class CMsgDOTASeasonRewards_Reward;
class CMsgDOTASeasonRewards_RewardDefaultTypeInternal;
extern CMsgDOTASeasonRewards_RewardDefaultTypeInternal _CMsgDOTASeasonRewards_Reward_default_instance_;
class CMsgGCGetPlayerCardItemInfo;
class CMsgGCGetPlayerCardItemInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse;
class CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
class CMsgGCIsProQuery;
class CMsgGCIsProQueryDefaultTypeInternal;
extern CMsgGCIsProQueryDefaultTypeInternal _CMsgGCIsProQuery_default_instance_;
class CMsgGCIsProResponse;
class CMsgGCIsProResponseDefaultTypeInternal;
extern CMsgGCIsProResponseDefaultTypeInternal _CMsgGCIsProResponse_default_instance_;
class CMsgGCRerollPlayerChallengeResponse;
class CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal;
extern CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal _CMsgGCRerollPlayerChallengeResponse_default_instance_;
class CMsgGCToClientMatchGroupsVersion;
class CMsgGCToClientMatchGroupsVersionDefaultTypeInternal;
extern CMsgGCToClientMatchGroupsVersionDefaultTypeInternal _CMsgGCToClientMatchGroupsVersion_default_instance_;
class CMsgGCToGCFantasySetMatchLeague;
class CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal;
extern CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal _CMsgGCToGCFantasySetMatchLeague_default_instance_;
class CMsgGCTopCustomGamesList;
class CMsgGCTopCustomGamesListDefaultTypeInternal;
extern CMsgGCTopCustomGamesListDefaultTypeInternal _CMsgGCTopCustomGamesList_default_instance_;
class CMsgLeagueAdminList;
class CMsgLeagueAdminListDefaultTypeInternal;
extern CMsgLeagueAdminListDefaultTypeInternal _CMsgLeagueAdminList_default_instance_;
class CMsgLobbyBattleCupVictoryList;
class CMsgLobbyBattleCupVictoryListDefaultTypeInternal;
extern CMsgLobbyBattleCupVictoryListDefaultTypeInternal _CMsgLobbyBattleCupVictoryList_default_instance_;
class CMsgLobbyEventPoints;
class CMsgLobbyEventPointsDefaultTypeInternal;
extern CMsgLobbyEventPointsDefaultTypeInternal _CMsgLobbyEventPoints_default_instance_;
class CMsgLobbyEventPoints_AccountPoints;
class CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal;
extern CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal _CMsgLobbyEventPoints_AccountPoints_default_instance_;
class CMsgLobbyEventPoints_ChatWheelMessageRange;
class CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal;
extern CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
class CMsgLobbyEventPoints_PeriodicResourceValues;
class CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal;
extern CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal _CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionData;
class CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal;
extern CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge;
class CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal;
extern CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
class CMsgLocalServerFakeLobbyData;
class CMsgLocalServerFakeLobbyDataDefaultTypeInternal;
extern CMsgLocalServerFakeLobbyDataDefaultTypeInternal _CMsgLocalServerFakeLobbyData_default_instance_;
class CMsgMatchConsumableUsage;
class CMsgMatchConsumableUsageDefaultTypeInternal;
extern CMsgMatchConsumableUsageDefaultTypeInternal _CMsgMatchConsumableUsage_default_instance_;
class CMsgMatchConsumableUsage_PlayerUsage;
class CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal;
extern CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal _CMsgMatchConsumableUsage_PlayerUsage_default_instance_;
class CMsgMatchTips;
class CMsgMatchTipsDefaultTypeInternal;
extern CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
class CMsgMatchTips_SingleTip;
class CMsgMatchTips_SingleTipDefaultTypeInternal;
extern CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
class CMsgPlayerCard;
class CMsgPlayerCardDefaultTypeInternal;
extern CMsgPlayerCardDefaultTypeInternal _CMsgPlayerCard_default_instance_;
class CMsgPlayerCard_StatModifier;
class CMsgPlayerCard_StatModifierDefaultTypeInternal;
extern CMsgPlayerCard_StatModifierDefaultTypeInternal _CMsgPlayerCard_StatModifier_default_instance_;
class CMsgRecentMatchInfo;
class CMsgRecentMatchInfoDefaultTypeInternal;
extern CMsgRecentMatchInfoDefaultTypeInternal _CMsgRecentMatchInfo_default_instance_;
class CMsgSuccessfulHero;
class CMsgSuccessfulHeroDefaultTypeInternal;
extern CMsgSuccessfulHeroDefaultTypeInternal _CMsgSuccessfulHero_default_instance_;
class CProtoItemHeroStatue;
class CProtoItemHeroStatueDefaultTypeInternal;
extern CProtoItemHeroStatueDefaultTypeInternal _CProtoItemHeroStatue_default_instance_;
class CProtoItemTeamShowcase;
class CProtoItemTeamShowcaseDefaultTypeInternal;
extern CProtoItemTeamShowcaseDefaultTypeInternal _CProtoItemTeamShowcase_default_instance_;
class CSODOTAGameAccountClient;
class CSODOTAGameAccountClientDefaultTypeInternal;
extern CSODOTAGameAccountClientDefaultTypeInternal _CSODOTAGameAccountClient_default_instance_;
class CSODOTAGameAccountPlus;
class CSODOTAGameAccountPlusDefaultTypeInternal;
extern CSODOTAGameAccountPlusDefaultTypeInternal _CSODOTAGameAccountPlus_default_instance_;
class CSODOTAMapLocationState;
class CSODOTAMapLocationStateDefaultTypeInternal;
extern CSODOTAMapLocationStateDefaultTypeInternal _CSODOTAMapLocationState_default_instance_;
class CSODOTAPlayerChallenge;
class CSODOTAPlayerChallengeDefaultTypeInternal;
extern CSODOTAPlayerChallengeDefaultTypeInternal _CSODOTAPlayerChallenge_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CAdditionalEquipSlot* Arena::CreateMaybeMessage<::proto::dota::CAdditionalEquipSlot>(Arena*);
template<> ::proto::dota::CCompendiumGameList* Arena::CreateMaybeMessage<::proto::dota::CCompendiumGameList>(Arena*);
template<> ::proto::dota::CCompendiumGameTimeline* Arena::CreateMaybeMessage<::proto::dota::CCompendiumGameTimeline>(Arena*);
template<> ::proto::dota::CCompendiumTimestampedData* Arena::CreateMaybeMessage<::proto::dota::CCompendiumTimestampedData>(Arena*);
template<> ::proto::dota::CMatchAdditionalUnitInventory* Arena::CreateMaybeMessage<::proto::dota::CMatchAdditionalUnitInventory>(Arena*);
template<> ::proto::dota::CMatchHeroSelectEvent* Arena::CreateMaybeMessage<::proto::dota::CMatchHeroSelectEvent>(Arena*);
template<> ::proto::dota::CMatchPlayerAbilityUpgrade* Arena::CreateMaybeMessage<::proto::dota::CMatchPlayerAbilityUpgrade>(Arena*);
template<> ::proto::dota::CMatchPlayerPermanentBuff* Arena::CreateMaybeMessage<::proto::dota::CMatchPlayerPermanentBuff>(Arena*);
template<> ::proto::dota::CMatchPlayerTimedStats* Arena::CreateMaybeMessage<::proto::dota::CMatchPlayerTimedStats>(Arena*);
template<> ::proto::dota::CMsgBattleCupVictory* Arena::CreateMaybeMessage<::proto::dota::CMsgBattleCupVictory>(Arena*);
template<> ::proto::dota::CMsgClientToGCRerollPlayerChallenge* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCRerollPlayerChallenge>(Arena*);
template<> ::proto::dota::CMsgConsumableUsage* Arena::CreateMaybeMessage<::proto::dota::CMsgConsumableUsage>(Arena*);
template<> ::proto::dota::CMsgDOTABotDebugInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABotDebugInfo>(Arena*);
template<> ::proto::dota::CMsgDOTABotDebugInfo_Bot* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABotDebugInfo_Bot>(Arena*);
template<> ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABotDebugInfo_Bot_Action>(Arena*);
template<> ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode>(Arena*);
template<> ::proto::dota::CMsgDOTABroadcastNotification* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABroadcastNotification>(Arena*);
template<> ::proto::dota::CMsgDOTABroadcastTimelineEvent* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTABroadcastTimelineEvent>(Arena*);
template<> ::proto::dota::CMsgDOTAFantasyPlayerMatchStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAFantasyPlayerMatchStats>(Arena*);
template<> ::proto::dota::CMsgDOTAFantasyPlayerStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAFantasyPlayerStats>(Arena*);
template<> ::proto::dota::CMsgDOTAHasItemDefsQuery* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAHasItemDefsQuery>(Arena*);
template<> ::proto::dota::CMsgDOTAHasItemDefsResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAHasItemDefsResponse>(Arena*);
template<> ::proto::dota::CMsgDOTAHasItemQuery* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAHasItemQuery>(Arena*);
template<> ::proto::dota::CMsgDOTAHasItemResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAHasItemResponse>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch>(Arena*);
template<> ::proto::dota::CMsgDOTAMatchMinimal* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatchMinimal>(Arena*);
template<> ::proto::dota::CMsgDOTAMatchMinimal_Player* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatchMinimal_Player>(Arena*);
template<> ::proto::dota::CMsgDOTAMatchMinimal_Tourney* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatchMinimal_Tourney>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_BroadcasterChannel>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_BroadcasterInfo>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch_CustomGameData* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_CustomGameData>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch_Player* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_Player>(Arena*);
template<> ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_Player_CustomGameData>(Arena*);
template<> ::proto::dota::CMsgDOTAProcessFantasyScheduledEvent* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProcessFantasyScheduledEvent>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Hero>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Item>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Stat>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Team>(Arena*);
template<> ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Trophy>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_AbilityList>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_GraphData>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_KillDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails>(Arena*);
template<> ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails>(Arena*);
template<> ::proto::dota::CMsgDOTASDOHeroStatsHistory* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASDOHeroStatsHistory>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonAchievements* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonAchievements>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonAchievements_Achievement* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonAchievements_Achievement>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions_Answers* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions_Answers>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions_Choice* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions_Choice>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions_Prediction* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions_Prediction>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonRewards* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonRewards>(Arena*);
template<> ::proto::dota::CMsgDOTASeasonRewards_Reward* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeasonRewards_Reward>(Arena*);
template<> ::proto::dota::CMsgGCGetPlayerCardItemInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgGCGetPlayerCardItemInfo>(Arena*);
template<> ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCGetPlayerCardItemInfoResponse>(Arena*);
template<> ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(Arena*);
template<> ::proto::dota::CMsgGCIsProQuery* Arena::CreateMaybeMessage<::proto::dota::CMsgGCIsProQuery>(Arena*);
template<> ::proto::dota::CMsgGCIsProResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCIsProResponse>(Arena*);
template<> ::proto::dota::CMsgGCRerollPlayerChallengeResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCRerollPlayerChallengeResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientMatchGroupsVersion* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientMatchGroupsVersion>(Arena*);
template<> ::proto::dota::CMsgGCToGCFantasySetMatchLeague* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToGCFantasySetMatchLeague>(Arena*);
template<> ::proto::dota::CMsgGCTopCustomGamesList* Arena::CreateMaybeMessage<::proto::dota::CMsgGCTopCustomGamesList>(Arena*);
template<> ::proto::dota::CMsgLeagueAdminList* Arena::CreateMaybeMessage<::proto::dota::CMsgLeagueAdminList>(Arena*);
template<> ::proto::dota::CMsgLobbyBattleCupVictoryList* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyBattleCupVictoryList>(Arena*);
template<> ::proto::dota::CMsgLobbyEventPoints* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints>(Arena*);
template<> ::proto::dota::CMsgLobbyEventPoints_AccountPoints* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_AccountPoints>(Arena*);
template<> ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange>(Arena*);
template<> ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues>(Arena*);
template<> ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyPlayerPlusSubscriptionData>(Arena*);
template<> ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(Arena*);
template<> ::proto::dota::CMsgLocalServerFakeLobbyData* Arena::CreateMaybeMessage<::proto::dota::CMsgLocalServerFakeLobbyData>(Arena*);
template<> ::proto::dota::CMsgMatchConsumableUsage* Arena::CreateMaybeMessage<::proto::dota::CMsgMatchConsumableUsage>(Arena*);
template<> ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* Arena::CreateMaybeMessage<::proto::dota::CMsgMatchConsumableUsage_PlayerUsage>(Arena*);
template<> ::proto::dota::CMsgMatchTips* Arena::CreateMaybeMessage<::proto::dota::CMsgMatchTips>(Arena*);
template<> ::proto::dota::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage<::proto::dota::CMsgMatchTips_SingleTip>(Arena*);
template<> ::proto::dota::CMsgPlayerCard* Arena::CreateMaybeMessage<::proto::dota::CMsgPlayerCard>(Arena*);
template<> ::proto::dota::CMsgPlayerCard_StatModifier* Arena::CreateMaybeMessage<::proto::dota::CMsgPlayerCard_StatModifier>(Arena*);
template<> ::proto::dota::CMsgRecentMatchInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgRecentMatchInfo>(Arena*);
template<> ::proto::dota::CMsgSuccessfulHero* Arena::CreateMaybeMessage<::proto::dota::CMsgSuccessfulHero>(Arena*);
template<> ::proto::dota::CProtoItemHeroStatue* Arena::CreateMaybeMessage<::proto::dota::CProtoItemHeroStatue>(Arena*);
template<> ::proto::dota::CProtoItemTeamShowcase* Arena::CreateMaybeMessage<::proto::dota::CProtoItemTeamShowcase>(Arena*);
template<> ::proto::dota::CSODOTAGameAccountClient* Arena::CreateMaybeMessage<::proto::dota::CSODOTAGameAccountClient>(Arena*);
template<> ::proto::dota::CSODOTAGameAccountPlus* Arena::CreateMaybeMessage<::proto::dota::CSODOTAGameAccountPlus>(Arena*);
template<> ::proto::dota::CSODOTAMapLocationState* Arena::CreateMaybeMessage<::proto::dota::CSODOTAMapLocationState>(Arena*);
template<> ::proto::dota::CSODOTAPlayerChallenge* Arena::CreateMaybeMessage<::proto::dota::CSODOTAPlayerChallenge>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum CMsgDOTAProfileCard_EStatID {
  CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank = 1,
  CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank = 2,
  CMsgDOTAProfileCard_EStatID_k_eStat_Wins = 3,
  CMsgDOTAProfileCard_EStatID_k_eStat_Commends = 4,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed = 5,
  CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate = 6,
  CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank = 7
};
bool CMsgDOTAProfileCard_EStatID_IsValid(int value);
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MIN = CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MAX = CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank;
const int CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE = CMsgDOTAProfileCard_EStatID_EStatID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor();
inline const ::std::string& CMsgDOTAProfileCard_EStatID_Name(CMsgDOTAProfileCard_EStatID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAProfileCard_EStatID_descriptor(), value);
}
inline bool CMsgDOTAProfileCard_EStatID_Parse(
    const ::std::string& name, CMsgDOTAProfileCard_EStatID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAProfileCard_EStatID>(
    CMsgDOTAProfileCard_EStatID_descriptor(), name, value);
}
enum CMsgGCRerollPlayerChallengeResponse_EResult {
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success = 0,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped = 1,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound = 2,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll = 3,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError = 4
};
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value);
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
const int CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE = CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
inline const ::std::string& CMsgGCRerollPlayerChallengeResponse_EResult_Name(CMsgGCRerollPlayerChallengeResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), value);
}
inline bool CMsgGCRerollPlayerChallengeResponse_EResult_Parse(
    const ::std::string& name, CMsgGCRerollPlayerChallengeResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGCRerollPlayerChallengeResponse_EResult>(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eStat {
  CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned = 0,
  CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned = 1,
  CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost = 2,
  CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned = 3
};
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
const int CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eStat_Name(CMsgDOTARealtimeGameStats_GraphData_eStat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eStat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eStat>(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eLocation {
  CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane = 0,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane = 1,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane = 2,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle = 3,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients = 4,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Other = 5
};
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
const int CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(CMsgDOTARealtimeGameStats_GraphData_eLocation value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eLocation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eLocation>(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), name, value);
}
enum CMsgDOTASeasonRewards_ERewardType {
  CMsgDOTASeasonRewards_ERewardType_EconItem = 0,
  CMsgDOTASeasonRewards_ERewardType_MysteryWheel = 1,
  CMsgDOTASeasonRewards_ERewardType_AbilityEffect = 2,
  CMsgDOTASeasonRewards_ERewardType_Other = 3,
  CMsgDOTASeasonRewards_ERewardType_MysteryWheelPointsBased = 4
};
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value);
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_ERewardType_ERewardType_MIN = CMsgDOTASeasonRewards_ERewardType_EconItem;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX = CMsgDOTASeasonRewards_ERewardType_MysteryWheelPointsBased;
const int CMsgDOTASeasonRewards_ERewardType_ERewardType_ARRAYSIZE = CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor();
inline const ::std::string& CMsgDOTASeasonRewards_ERewardType_Name(CMsgDOTASeasonRewards_ERewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonRewards_ERewardType_descriptor(), value);
}
inline bool CMsgDOTASeasonRewards_ERewardType_Parse(
    const ::std::string& name, CMsgDOTASeasonRewards_ERewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonRewards_ERewardType>(
    CMsgDOTASeasonRewards_ERewardType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_ePredictionType {
  CMsgDOTASeasonPredictions_ePredictionType_Generic = 0,
  CMsgDOTASeasonPredictions_ePredictionType_Hero = 1,
  CMsgDOTASeasonPredictions_ePredictionType_Team = 2,
  CMsgDOTASeasonPredictions_ePredictionType_Player = 3,
  CMsgDOTASeasonPredictions_ePredictionType_Special = 4,
  CMsgDOTASeasonPredictions_ePredictionType_YesNo = 5
};
bool CMsgDOTASeasonPredictions_ePredictionType_IsValid(int value);
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MIN = CMsgDOTASeasonPredictions_ePredictionType_Generic;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX = CMsgDOTASeasonPredictions_ePredictionType_YesNo;
const int CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_ARRAYSIZE = CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_ePredictionType_Name(CMsgDOTASeasonPredictions_ePredictionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_ePredictionType_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_ePredictionType_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_ePredictionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_ePredictionType>(
    CMsgDOTASeasonPredictions_ePredictionType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eAnswerType {
  CMsgDOTASeasonPredictions_eAnswerType_SingleInt = 0,
  CMsgDOTASeasonPredictions_eAnswerType_SingleFloat = 1,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleInt = 2,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleFloat = 3,
  CMsgDOTASeasonPredictions_eAnswerType_AnswerTeam = 4,
  CMsgDOTASeasonPredictions_eAnswerType_SingleTime = 5,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleTime = 6,
  CMsgDOTASeasonPredictions_eAnswerType_NoAnswer = 7
};
bool CMsgDOTASeasonPredictions_eAnswerType_IsValid(int value);
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MIN = CMsgDOTASeasonPredictions_eAnswerType_SingleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX = CMsgDOTASeasonPredictions_eAnswerType_NoAnswer;
const int CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_ARRAYSIZE = CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eAnswerType_Name(CMsgDOTASeasonPredictions_eAnswerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eAnswerType_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eAnswerType_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eAnswerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eAnswerType>(
    CMsgDOTASeasonPredictions_eAnswerType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eResolutionType_t {
  CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery = 0,
  CMsgDOTASeasonPredictions_eResolutionType_t_FirstToPassQuery = 1,
  CMsgDOTASeasonPredictions_eResolutionType_t_LastToPassQuery = 2,
  CMsgDOTASeasonPredictions_eResolutionType_t_LastRemainingQuery = 3,
  CMsgDOTASeasonPredictions_eResolutionType_t_MaxToPassQuery = 4,
  CMsgDOTASeasonPredictions_eResolutionType_t_MinToPassQuery = 5,
  CMsgDOTASeasonPredictions_eResolutionType_t_SumQuery = 6,
  CMsgDOTASeasonPredictions_eResolutionType_t_MaxTeamSumToPassQuery = 7,
  CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery = 8
};
bool CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MIN = CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX = CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery;
const int CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eResolutionType_t_Name(CMsgDOTASeasonPredictions_eResolutionType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eResolutionType_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eResolutionType_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eResolutionType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eResolutionType_t>(
    CMsgDOTASeasonPredictions_eResolutionType_t_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eRandomSelectionGroup_t {
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame = 0,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_MidGame = 1,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_LateGame = 2,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count = 3
};
bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MIN = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count;
const int CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Name(CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eRandomSelectionGroup_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eRandomSelectionGroup_t>(
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eRawValueType_t {
  CMsgDOTASeasonPredictions_eRawValueType_t_Number = 0,
  CMsgDOTASeasonPredictions_eRawValueType_t_Time = 1
};
bool CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MIN = CMsgDOTASeasonPredictions_eRawValueType_t_Number;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX = CMsgDOTASeasonPredictions_eRawValueType_t_Time;
const int CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eRawValueType_t_Name(CMsgDOTASeasonPredictions_eRawValueType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eRawValueType_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eRawValueType_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eRawValueType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eRawValueType_t>(
    CMsgDOTASeasonPredictions_eRawValueType_t_descriptor(), name, value);
}
enum CMsgDOTAMatch_ReplayState {
  CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE = 0,
  CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED = 1,
  CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED = 2
};
bool CMsgDOTAMatch_ReplayState_IsValid(int value);
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MIN = CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MAX = CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
const int CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE = CMsgDOTAMatch_ReplayState_ReplayState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor();
inline const ::std::string& CMsgDOTAMatch_ReplayState_Name(CMsgDOTAMatch_ReplayState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAMatch_ReplayState_descriptor(), value);
}
inline bool CMsgDOTAMatch_ReplayState_Parse(
    const ::std::string& name, CMsgDOTAMatch_ReplayState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAMatch_ReplayState>(
    CMsgDOTAMatch_ReplayState_descriptor(), name, value);
}
enum ESpecialPingValue {
  k_ESpecialPingValue_NoData = 16382,
  k_ESpecialPingValue_Failed = 16383
};
bool ESpecialPingValue_IsValid(int value);
const ESpecialPingValue ESpecialPingValue_MIN = k_ESpecialPingValue_NoData;
const ESpecialPingValue ESpecialPingValue_MAX = k_ESpecialPingValue_Failed;
const int ESpecialPingValue_ARRAYSIZE = ESpecialPingValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor();
inline const ::std::string& ESpecialPingValue_Name(ESpecialPingValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESpecialPingValue_descriptor(), value);
}
inline bool ESpecialPingValue_Parse(
    const ::std::string& name, ESpecialPingValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESpecialPingValue>(
    ESpecialPingValue_descriptor(), name, value);
}
enum EDOTAGCSessionNeed {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle = 106,
  k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle = 107,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203,
  k_EDOTAGCSessionNeed_GameServerLocalUpload = 204
};
bool EDOTAGCSessionNeed_IsValid(int value);
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerLocalUpload;
const int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
inline const ::std::string& EDOTAGCSessionNeed_Name(EDOTAGCSessionNeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), value);
}
inline bool EDOTAGCSessionNeed_Parse(
    const ::std::string& name, EDOTAGCSessionNeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum DOTA_TournamentEvents {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5,
  TE_GODLIKE = 6,
  TE_COURIER_KILL = 7,
  TE_ECHOSLAM = 8,
  TE_RAPIER = 9,
  TE_EARLY_ROSHAN = 10,
  TE_BLACK_HOLE = 11
};
bool DOTA_TournamentEvents_IsValid(int value);
const DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
const DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_BLACK_HOLE;
const int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor();
inline const ::std::string& DOTA_TournamentEvents_Name(DOTA_TournamentEvents value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), value);
}
inline bool DOTA_TournamentEvents_Parse(
    const ::std::string& name, DOTA_TournamentEvents* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
enum EBroadcastTimelineEvent {
  EBroadcastTimelineEvent_MatchStarted = 1,
  EBroadcastTimelineEvent_GameStateChanged = 2,
  EBroadcastTimelineEvent_TowerDeath = 3,
  EBroadcastTimelineEvent_BarracksDeath = 4,
  EBroadcastTimelineEvent_AncientDeath = 5,
  EBroadcastTimelineEvent_RoshanDeath = 6,
  EBroadcastTimelineEvent_HeroDeath = 7,
  EBroadcastTimelineEvent_TeamFight = 8,
  EBroadcastTimelineEvent_FirstBlood = 9
};
bool EBroadcastTimelineEvent_IsValid(int value);
const EBroadcastTimelineEvent EBroadcastTimelineEvent_MIN = EBroadcastTimelineEvent_MatchStarted;
const EBroadcastTimelineEvent EBroadcastTimelineEvent_MAX = EBroadcastTimelineEvent_FirstBlood;
const int EBroadcastTimelineEvent_ARRAYSIZE = EBroadcastTimelineEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBroadcastTimelineEvent_descriptor();
inline const ::std::string& EBroadcastTimelineEvent_Name(EBroadcastTimelineEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBroadcastTimelineEvent_descriptor(), value);
}
inline bool EBroadcastTimelineEvent_Parse(
    const ::std::string& name, EBroadcastTimelineEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBroadcastTimelineEvent>(
    EBroadcastTimelineEvent_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAGameAccountClient) */ {
 public:
  CSODOTAGameAccountClient();
  virtual ~CSODOTAGameAccountClient();

  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);

  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAGameAccountClient(CSODOTAGameAccountClient&& from) noexcept
    : CSODOTAGameAccountClient() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountClient& operator=(CSODOTAGameAccountClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAGameAccountClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAGameAccountClient* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountClient*>(
               &_CSODOTAGameAccountClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSODOTAGameAccountClient* other);
  friend void swap(CSODOTAGameAccountClient& a, CSODOTAGameAccountClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAGameAccountClient* New() const final {
    return CreateMaybeMessage<CSODOTAGameAccountClient>(nullptr);
  }

  CSODOTAGameAccountClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAGameAccountClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAGameAccountClient& from);
  void MergeFrom(const CSODOTAGameAccountClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAGameAccountClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 3;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 3;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 4;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 4;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // optional uint32 xp = 12;
  bool has_xp() const;
  void clear_xp();
  static const int kXpFieldNumber = 12;
  ::google::protobuf::uint32 xp() const;
  void set_xp(::google::protobuf::uint32 value);

  // optional uint32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 initial_skill = 14;
  bool has_initial_skill() const;
  void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 14;
  ::google::protobuf::uint32 initial_skill() const;
  void set_initial_skill(::google::protobuf::uint32 value);

  // optional uint32 leaver_count = 15;
  bool has_leaver_count() const;
  void clear_leaver_count();
  static const int kLeaverCountFieldNumber = 15;
  ::google::protobuf::uint32 leaver_count() const;
  void set_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 low_priority_until_date = 18;
  bool has_low_priority_until_date() const;
  void clear_low_priority_until_date();
  static const int kLowPriorityUntilDateFieldNumber = 18;
  ::google::protobuf::uint32 low_priority_until_date() const;
  void set_low_priority_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_text_chat_until_date = 20;
  bool has_prevent_text_chat_until_date() const;
  void clear_prevent_text_chat_until_date();
  static const int kPreventTextChatUntilDateFieldNumber = 20;
  ::google::protobuf::uint32 prevent_text_chat_until_date() const;
  void set_prevent_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_voice_until_date = 21;
  bool has_prevent_voice_until_date() const;
  void clear_prevent_voice_until_date();
  static const int kPreventVoiceUntilDateFieldNumber = 21;
  ::google::protobuf::uint32 prevent_voice_until_date() const;
  void set_prevent_voice_until_date(::google::protobuf::uint32 value);

  // optional uint32 last_abandoned_game_date = 22;
  bool has_last_abandoned_game_date() const;
  void clear_last_abandoned_game_date();
  static const int kLastAbandonedGameDateFieldNumber = 22;
  ::google::protobuf::uint32 last_abandoned_game_date() const;
  void set_last_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 leaver_penalty_count = 23;
  bool has_leaver_penalty_count() const;
  void clear_leaver_penalty_count();
  static const int kLeaverPenaltyCountFieldNumber = 23;
  ::google::protobuf::uint32 leaver_penalty_count() const;
  void set_leaver_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 completed_game_streak = 24;
  bool has_completed_game_streak() const;
  void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 24;
  ::google::protobuf::uint32 completed_game_streak() const;
  void set_completed_game_streak(::google::protobuf::uint32 value);

  // optional uint32 teaching = 28;
  bool has_teaching() const;
  void clear_teaching();
  static const int kTeachingFieldNumber = 28;
  ::google::protobuf::uint32 teaching() const;
  void set_teaching(::google::protobuf::uint32 value);

  // optional uint32 leadership = 29;
  bool has_leadership() const;
  void clear_leadership();
  static const int kLeadershipFieldNumber = 29;
  ::google::protobuf::uint32 leadership() const;
  void set_leadership(::google::protobuf::uint32 value);

  // optional uint32 friendly = 30;
  bool has_friendly() const;
  void clear_friendly();
  static const int kFriendlyFieldNumber = 30;
  ::google::protobuf::uint32 friendly() const;
  void set_friendly(::google::protobuf::uint32 value);

  // optional uint32 forgiving = 31;
  bool has_forgiving() const;
  void clear_forgiving();
  static const int kForgivingFieldNumber = 31;
  ::google::protobuf::uint32 forgiving() const;
  void set_forgiving(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_until_date = 38;
  bool has_account_disabled_until_date() const;
  void clear_account_disabled_until_date();
  static const int kAccountDisabledUntilDateFieldNumber = 38;
  ::google::protobuf::uint32 account_disabled_until_date() const;
  void set_account_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_count = 39;
  bool has_account_disabled_count() const;
  void clear_account_disabled_count();
  static const int kAccountDisabledCountFieldNumber = 39;
  ::google::protobuf::uint32 account_disabled_count() const;
  void set_account_disabled_count(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 41;
  bool has_match_disabled_until_date() const;
  void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 41;
  ::google::protobuf::uint32 match_disabled_until_date() const;
  void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_count = 42;
  bool has_match_disabled_count() const;
  void clear_match_disabled_count();
  static const int kMatchDisabledCountFieldNumber = 42;
  ::google::protobuf::uint32 match_disabled_count() const;
  void set_match_disabled_count(::google::protobuf::uint32 value);

  // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  bool has_partner_account_type() const;
  void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 44;
  ::proto::dota::PartnerAccountType partner_account_type() const;
  void set_partner_account_type(::proto::dota::PartnerAccountType value);

  // optional uint32 partner_account_state = 45;
  bool has_partner_account_state() const;
  void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 45;
  ::google::protobuf::uint32 partner_account_state() const;
  void set_partner_account_state(::google::protobuf::uint32 value);

  // optional uint32 shutdownlawterminatetimestamp = 47;
  bool has_shutdownlawterminatetimestamp() const;
  void clear_shutdownlawterminatetimestamp();
  static const int kShutdownlawterminatetimestampFieldNumber = 47;
  ::google::protobuf::uint32 shutdownlawterminatetimestamp() const;
  void set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value);

  // optional uint32 low_priority_games_remaining = 48;
  bool has_low_priority_games_remaining() const;
  void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 48;
  ::google::protobuf::uint32 low_priority_games_remaining() const;
  void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 competitive_rank = 49;
  bool has_competitive_rank() const;
  void clear_competitive_rank();
  static const int kCompetitiveRankFieldNumber = 49;
  ::google::protobuf::uint32 competitive_rank() const;
  void set_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 calibration_games_remaining = 51;
  bool has_calibration_games_remaining() const;
  void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 51;
  ::google::protobuf::uint32 calibration_games_remaining() const;
  void set_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_rank = 52;
  bool has_solo_competitive_rank() const;
  void clear_solo_competitive_rank();
  static const int kSoloCompetitiveRankFieldNumber = 52;
  ::google::protobuf::uint32 solo_competitive_rank() const;
  void set_solo_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_calibration_games_remaining = 54;
  bool has_solo_calibration_games_remaining() const;
  void clear_solo_calibration_games_remaining();
  static const int kSoloCalibrationGamesRemainingFieldNumber = 54;
  ::google::protobuf::uint32 solo_calibration_games_remaining() const;
  void set_solo_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 recruitment_level = 55;
  bool has_recruitment_level() const;
  void clear_recruitment_level();
  static const int kRecruitmentLevelFieldNumber = 55;
  ::google::protobuf::uint32 recruitment_level() const;
  void set_recruitment_level(::google::protobuf::uint32 value);

  // optional uint32 secondary_leaver_count = 58;
  bool has_secondary_leaver_count() const;
  void clear_secondary_leaver_count();
  static const int kSecondaryLeaverCountFieldNumber = 58;
  ::google::protobuf::uint32 secondary_leaver_count() const;
  void set_secondary_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 last_secondary_abandoned_game_date = 59;
  bool has_last_secondary_abandoned_game_date() const;
  void clear_last_secondary_abandoned_game_date();
  static const int kLastSecondaryAbandonedGameDateFieldNumber = 59;
  ::google::protobuf::uint32 last_secondary_abandoned_game_date() const;
  void set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 casual_games_played = 60;
  bool has_casual_games_played() const;
  void clear_casual_games_played();
  static const int kCasualGamesPlayedFieldNumber = 60;
  ::google::protobuf::uint32 casual_games_played() const;
  void set_casual_games_played(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_games_played = 61;
  bool has_solo_competitive_games_played() const;
  void clear_solo_competitive_games_played();
  static const int kSoloCompetitiveGamesPlayedFieldNumber = 61;
  ::google::protobuf::uint32 solo_competitive_games_played() const;
  void set_solo_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 party_competitive_games_played = 62;
  bool has_party_competitive_games_played() const;
  void clear_party_competitive_games_played();
  static const int kPartyCompetitiveGamesPlayedFieldNumber = 62;
  ::google::protobuf::uint32 party_competitive_games_played() const;
  void set_party_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 casual_1v1_games_played = 65;
  bool has_casual_1v1_games_played() const;
  void clear_casual_1v1_games_played();
  static const int kCasual1V1GamesPlayedFieldNumber = 65;
  ::google::protobuf::uint32 casual_1v1_games_played() const;
  void set_casual_1v1_games_played(::google::protobuf::uint32 value);

  // optional uint32 competitive_team_games_played = 66;
  bool has_competitive_team_games_played() const;
  void clear_competitive_team_games_played();
  static const int kCompetitiveTeamGamesPlayedFieldNumber = 66;
  ::google::protobuf::uint32 competitive_team_games_played() const;
  void set_competitive_team_games_played(::google::protobuf::uint32 value);

  // optional uint32 curr_all_hero_challenge_id = 67;
  bool has_curr_all_hero_challenge_id() const;
  void clear_curr_all_hero_challenge_id();
  static const int kCurrAllHeroChallengeIdFieldNumber = 67;
  ::google::protobuf::uint32 curr_all_hero_challenge_id() const;
  void set_curr_all_hero_challenge_id(::google::protobuf::uint32 value);

  // optional uint32 play_time_points = 68;
  bool has_play_time_points() const;
  void clear_play_time_points();
  static const int kPlayTimePointsFieldNumber = 68;
  ::google::protobuf::uint32 play_time_points() const;
  void set_play_time_points(::google::protobuf::uint32 value);

  // optional uint32 account_flags = 69;
  bool has_account_flags() const;
  void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 69;
  ::google::protobuf::uint32 account_flags() const;
  void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 play_time_level = 70;
  bool has_play_time_level() const;
  void clear_play_time_level();
  static const int kPlayTimeLevelFieldNumber = 70;
  ::google::protobuf::uint32 play_time_level() const;
  void set_play_time_level(::google::protobuf::uint32 value);

  // optional bool has_new_notifications = 56;
  bool has_has_new_notifications() const;
  void clear_has_new_notifications();
  static const int kHasNewNotificationsFieldNumber = 56;
  bool has_new_notifications() const;
  void set_has_new_notifications(bool value);

  // optional bool is_league_admin = 57;
  bool has_is_league_admin() const;
  void clear_is_league_admin();
  static const int kIsLeagueAdminFieldNumber = 57;
  bool is_league_admin() const;
  void set_is_league_admin(bool value);

  // optional bool player_behavior_report_old_data = 73;
  bool has_player_behavior_report_old_data() const;
  void clear_player_behavior_report_old_data();
  static const int kPlayerBehaviorReportOldDataFieldNumber = 73;
  bool player_behavior_report_old_data() const;
  void set_player_behavior_report_old_data(bool value);

  // optional bool general_seasonal_rank_transferred = 97;
  bool has_general_seasonal_rank_transferred() const;
  void clear_general_seasonal_rank_transferred();
  static const int kGeneralSeasonalRankTransferredFieldNumber = 97;
  bool general_seasonal_rank_transferred() const;
  void set_general_seasonal_rank_transferred(bool value);

  // optional uint32 player_behavior_seq_num_last_report = 71;
  bool has_player_behavior_seq_num_last_report() const;
  void clear_player_behavior_seq_num_last_report();
  static const int kPlayerBehaviorSeqNumLastReportFieldNumber = 71;
  ::google::protobuf::uint32 player_behavior_seq_num_last_report() const;
  void set_player_behavior_seq_num_last_report(::google::protobuf::uint32 value);

  // optional uint32 player_behavior_score_last_report = 72;
  bool has_player_behavior_score_last_report() const;
  void clear_player_behavior_score_last_report();
  static const int kPlayerBehaviorScoreLastReportFieldNumber = 72;
  ::google::protobuf::uint32 player_behavior_score_last_report() const;
  void set_player_behavior_score_last_report(::google::protobuf::uint32 value);

  // optional uint32 tourney_skill_level = 74;
  bool has_tourney_skill_level() const;
  void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 74;
  ::google::protobuf::uint32 tourney_skill_level() const;
  void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_recent_participation_date = 85;
  bool has_tourney_recent_participation_date() const;
  void clear_tourney_recent_participation_date();
  static const int kTourneyRecentParticipationDateFieldNumber = 85;
  ::google::protobuf::uint32 tourney_recent_participation_date() const;
  void set_tourney_recent_participation_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_public_text_chat_until_date = 86;
  bool has_prevent_public_text_chat_until_date() const;
  void clear_prevent_public_text_chat_until_date();
  static const int kPreventPublicTextChatUntilDateFieldNumber = 86;
  ::google::protobuf::uint32 prevent_public_text_chat_until_date() const;
  void set_prevent_public_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 favorite_team = 87;
  bool has_favorite_team() const;
  void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 87;
  ::google::protobuf::uint32 favorite_team() const;
  void set_favorite_team(::google::protobuf::uint32 value);

  // optional uint64 anchored_phone_number_id = 88;
  bool has_anchored_phone_number_id() const;
  void clear_anchored_phone_number_id();
  static const int kAnchoredPhoneNumberIdFieldNumber = 88;
  ::google::protobuf::uint64 anchored_phone_number_id() const;
  void set_anchored_phone_number_id(::google::protobuf::uint64 value);

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  bool has_ranked_matchmaking_ban_until_date() const;
  void clear_ranked_matchmaking_ban_until_date();
  static const int kRankedMatchmakingBanUntilDateFieldNumber = 89;
  ::google::protobuf::uint32 ranked_matchmaking_ban_until_date() const;
  void set_ranked_matchmaking_ban_until_date(::google::protobuf::uint32 value);

  // optional uint32 recent_game_time_1 = 90;
  bool has_recent_game_time_1() const;
  void clear_recent_game_time_1();
  static const int kRecentGameTime1FieldNumber = 90;
  ::google::protobuf::uint32 recent_game_time_1() const;
  void set_recent_game_time_1(::google::protobuf::uint32 value);

  // optional uint32 recent_game_time_2 = 91;
  bool has_recent_game_time_2() const;
  void clear_recent_game_time_2();
  static const int kRecentGameTime2FieldNumber = 91;
  ::google::protobuf::uint32 recent_game_time_2() const;
  void set_recent_game_time_2(::google::protobuf::uint32 value);

  // optional uint32 recent_game_time_3 = 92;
  bool has_recent_game_time_3() const;
  void clear_recent_game_time_3();
  static const int kRecentGameTime3FieldNumber = 92;
  ::google::protobuf::uint32 recent_game_time_3() const;
  void set_recent_game_time_3(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_rank = 93;
  bool has_general_seasonal_ranked_rank() const;
  void clear_general_seasonal_ranked_rank();
  static const int kGeneralSeasonalRankedRankFieldNumber = 93;
  ::google::protobuf::uint32 general_seasonal_ranked_rank() const;
  void set_general_seasonal_ranked_rank(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
  bool has_general_seasonal_ranked_calibration_games_remaining() const;
  void clear_general_seasonal_ranked_calibration_games_remaining();
  static const int kGeneralSeasonalRankedCalibrationGamesRemainingFieldNumber = 94;
  ::google::protobuf::uint32 general_seasonal_ranked_calibration_games_remaining() const;
  void set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_games_played = 95;
  bool has_general_seasonal_ranked_games_played() const;
  void clear_general_seasonal_ranked_games_played();
  static const int kGeneralSeasonalRankedGamesPlayedFieldNumber = 95;
  ::google::protobuf::uint32 general_seasonal_ranked_games_played() const;
  void set_general_seasonal_ranked_games_played(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_rank_peak = 96;
  bool has_general_seasonal_ranked_rank_peak() const;
  void clear_general_seasonal_ranked_rank_peak();
  static const int kGeneralSeasonalRankedRankPeakFieldNumber = 96;
  ::google::protobuf::uint32 general_seasonal_ranked_rank_peak() const;
  void set_general_seasonal_ranked_rank_peak(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_rank = 98;
  bool has_solo_seasonal_ranked_rank() const;
  void clear_solo_seasonal_ranked_rank();
  static const int kSoloSeasonalRankedRankFieldNumber = 98;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank() const;
  void set_solo_seasonal_ranked_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
  bool has_solo_seasonal_ranked_calibration_games_remaining() const;
  void clear_solo_seasonal_ranked_calibration_games_remaining();
  static const int kSoloSeasonalRankedCalibrationGamesRemainingFieldNumber = 99;
  ::google::protobuf::uint32 solo_seasonal_ranked_calibration_games_remaining() const;
  void set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_games_played = 100;
  bool has_solo_seasonal_ranked_games_played() const;
  void clear_solo_seasonal_ranked_games_played();
  static const int kSoloSeasonalRankedGamesPlayedFieldNumber = 100;
  ::google::protobuf::uint32 solo_seasonal_ranked_games_played() const;
  void set_solo_seasonal_ranked_games_played(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_rank_peak = 101;
  bool has_solo_seasonal_ranked_rank_peak() const;
  void clear_solo_seasonal_ranked_rank_peak();
  static const int kSoloSeasonalRankedRankPeakFieldNumber = 101;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank_peak() const;
  void set_solo_seasonal_ranked_rank_peak(::google::protobuf::uint32 value);

  // optional uint64 favorite_team_packed = 103;
  bool has_favorite_team_packed() const;
  void clear_favorite_team_packed();
  static const int kFavoriteTeamPackedFieldNumber = 103;
  ::google::protobuf::uint64 favorite_team_packed() const;
  void set_favorite_team_packed(::google::protobuf::uint64 value);

  // optional bool solo_seasonal_rank_transferred = 102;
  bool has_solo_seasonal_rank_transferred() const;
  void clear_solo_seasonal_rank_transferred();
  static const int kSoloSeasonalRankTransferredFieldNumber = 102;
  bool solo_seasonal_rank_transferred() const;
  void set_solo_seasonal_rank_transferred(bool value);

  // optional uint32 recent_report_time = 104;
  bool has_recent_report_time() const;
  void clear_recent_report_time();
  static const int kRecentReportTimeFieldNumber = 104;
  ::google::protobuf::uint32 recent_report_time() const;
  void set_recent_report_time(::google::protobuf::uint32 value);

  // optional uint32 custom_game_disabled_until_date = 105;
  bool has_custom_game_disabled_until_date() const;
  void clear_custom_game_disabled_until_date();
  static const int kCustomGameDisabledUntilDateFieldNumber = 105;
  ::google::protobuf::uint32 custom_game_disabled_until_date() const;
  void set_custom_game_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 recent_win_time_1 = 106;
  bool has_recent_win_time_1() const;
  void clear_recent_win_time_1();
  static const int kRecentWinTime1FieldNumber = 106;
  ::google::protobuf::uint32 recent_win_time_1() const;
  void set_recent_win_time_1(::google::protobuf::uint32 value);

  // optional uint32 recent_win_time_2 = 107;
  bool has_recent_win_time_2() const;
  void clear_recent_win_time_2();
  static const int kRecentWinTime2FieldNumber = 107;
  ::google::protobuf::uint32 recent_win_time_2() const;
  void set_recent_win_time_2(::google::protobuf::uint32 value);

  // optional uint32 recent_win_time_3 = 108;
  bool has_recent_win_time_3() const;
  void clear_recent_win_time_3();
  static const int kRecentWinTime3FieldNumber = 108;
  ::google::protobuf::uint32 recent_win_time_3() const;
  void set_recent_win_time_3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAGameAccountClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 initial_skill_;
  ::google::protobuf::uint32 leaver_count_;
  ::google::protobuf::uint32 low_priority_until_date_;
  ::google::protobuf::uint32 prevent_text_chat_until_date_;
  ::google::protobuf::uint32 prevent_voice_until_date_;
  ::google::protobuf::uint32 last_abandoned_game_date_;
  ::google::protobuf::uint32 leaver_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 teaching_;
  ::google::protobuf::uint32 leadership_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 forgiving_;
  ::google::protobuf::uint32 account_disabled_until_date_;
  ::google::protobuf::uint32 account_disabled_count_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_count_;
  int partner_account_type_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 shutdownlawterminatetimestamp_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 competitive_rank_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  ::google::protobuf::uint32 solo_competitive_rank_;
  ::google::protobuf::uint32 solo_calibration_games_remaining_;
  ::google::protobuf::uint32 recruitment_level_;
  ::google::protobuf::uint32 secondary_leaver_count_;
  ::google::protobuf::uint32 last_secondary_abandoned_game_date_;
  ::google::protobuf::uint32 casual_games_played_;
  ::google::protobuf::uint32 solo_competitive_games_played_;
  ::google::protobuf::uint32 party_competitive_games_played_;
  ::google::protobuf::uint32 casual_1v1_games_played_;
  ::google::protobuf::uint32 competitive_team_games_played_;
  ::google::protobuf::uint32 curr_all_hero_challenge_id_;
  ::google::protobuf::uint32 play_time_points_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint32 play_time_level_;
  bool has_new_notifications_;
  bool is_league_admin_;
  bool player_behavior_report_old_data_;
  bool general_seasonal_rank_transferred_;
  ::google::protobuf::uint32 player_behavior_seq_num_last_report_;
  ::google::protobuf::uint32 player_behavior_score_last_report_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_recent_participation_date_;
  ::google::protobuf::uint32 prevent_public_text_chat_until_date_;
  ::google::protobuf::uint32 favorite_team_;
  ::google::protobuf::uint64 anchored_phone_number_id_;
  ::google::protobuf::uint32 ranked_matchmaking_ban_until_date_;
  ::google::protobuf::uint32 recent_game_time_1_;
  ::google::protobuf::uint32 recent_game_time_2_;
  ::google::protobuf::uint32 recent_game_time_3_;
  ::google::protobuf::uint32 general_seasonal_ranked_rank_;
  ::google::protobuf::uint32 general_seasonal_ranked_calibration_games_remaining_;
  ::google::protobuf::uint32 general_seasonal_ranked_games_played_;
  ::google::protobuf::uint32 general_seasonal_ranked_rank_peak_;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank_;
  ::google::protobuf::uint32 solo_seasonal_ranked_calibration_games_remaining_;
  ::google::protobuf::uint32 solo_seasonal_ranked_games_played_;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank_peak_;
  ::google::protobuf::uint64 favorite_team_packed_;
  bool solo_seasonal_rank_transferred_;
  ::google::protobuf::uint32 recent_report_time_;
  ::google::protobuf::uint32 custom_game_disabled_until_date_;
  ::google::protobuf::uint32 recent_win_time_1_;
  ::google::protobuf::uint32 recent_win_time_2_;
  ::google::protobuf::uint32 recent_win_time_3_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAGameAccountPlus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAGameAccountPlus) */ {
 public:
  CSODOTAGameAccountPlus();
  virtual ~CSODOTAGameAccountPlus();

  CSODOTAGameAccountPlus(const CSODOTAGameAccountPlus& from);

  inline CSODOTAGameAccountPlus& operator=(const CSODOTAGameAccountPlus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAGameAccountPlus(CSODOTAGameAccountPlus&& from) noexcept
    : CSODOTAGameAccountPlus() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountPlus& operator=(CSODOTAGameAccountPlus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAGameAccountPlus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAGameAccountPlus* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountPlus*>(
               &_CSODOTAGameAccountPlus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CSODOTAGameAccountPlus* other);
  friend void swap(CSODOTAGameAccountPlus& a, CSODOTAGameAccountPlus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAGameAccountPlus* New() const final {
    return CreateMaybeMessage<CSODOTAGameAccountPlus>(nullptr);
  }

  CSODOTAGameAccountPlus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAGameAccountPlus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAGameAccountPlus& from);
  void MergeFrom(const CSODOTAGameAccountPlus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAGameAccountPlus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 original_start_date = 2;
  bool has_original_start_date() const;
  void clear_original_start_date();
  static const int kOriginalStartDateFieldNumber = 2;
  ::google::protobuf::uint32 original_start_date() const;
  void set_original_start_date(::google::protobuf::uint32 value);

  // optional uint32 plus_flags = 3;
  bool has_plus_flags() const;
  void clear_plus_flags();
  static const int kPlusFlagsFieldNumber = 3;
  ::google::protobuf::uint32 plus_flags() const;
  void set_plus_flags(::google::protobuf::uint32 value);

  // optional uint32 plus_status = 4;
  bool has_plus_status() const;
  void clear_plus_status();
  static const int kPlusStatusFieldNumber = 4;
  ::google::protobuf::uint32 plus_status() const;
  void set_plus_status(::google::protobuf::uint32 value);

  // optional uint32 prepaid_time_start = 5;
  bool has_prepaid_time_start() const;
  void clear_prepaid_time_start();
  static const int kPrepaidTimeStartFieldNumber = 5;
  ::google::protobuf::uint32 prepaid_time_start() const;
  void set_prepaid_time_start(::google::protobuf::uint32 value);

  // optional uint32 prepaid_time_balance = 6;
  bool has_prepaid_time_balance() const;
  void clear_prepaid_time_balance();
  static const int kPrepaidTimeBalanceFieldNumber = 6;
  ::google::protobuf::uint32 prepaid_time_balance() const;
  void set_prepaid_time_balance(::google::protobuf::uint32 value);

  // optional fixed64 steam_agreement_id = 8;
  bool has_steam_agreement_id() const;
  void clear_steam_agreement_id();
  static const int kSteamAgreementIdFieldNumber = 8;
  ::google::protobuf::uint64 steam_agreement_id() const;
  void set_steam_agreement_id(::google::protobuf::uint64 value);

  // optional fixed32 next_payment_date = 7;
  bool has_next_payment_date() const;
  void clear_next_payment_date();
  static const int kNextPaymentDateFieldNumber = 7;
  ::google::protobuf::uint32 next_payment_date() const;
  void set_next_payment_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAGameAccountPlus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 original_start_date_;
  ::google::protobuf::uint32 plus_flags_;
  ::google::protobuf::uint32 plus_status_;
  ::google::protobuf::uint32 prepaid_time_start_;
  ::google::protobuf::uint32 prepaid_time_balance_;
  ::google::protobuf::uint64 steam_agreement_id_;
  ::google::protobuf::uint32 next_payment_date_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge) */ {
 public:
  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge();
  virtual ~CMsgLobbyPlayerPlusSubscriptionData_HeroBadge();

  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from);

  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& operator=(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge&& from) noexcept
    : CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& operator=(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge*>(
               &_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other);
  friend void swap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& a, CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* New() const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(nullptr);
  }

  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from);
  void MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 hero_badge_xp = 2;
  bool has_hero_badge_xp() const;
  void clear_hero_badge_xp();
  static const int kHeroBadgeXpFieldNumber = 2;
  ::google::protobuf::uint32 hero_badge_xp() const;
  void set_hero_badge_xp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 hero_badge_xp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlayerPlusSubscriptionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyPlayerPlusSubscriptionData) */ {
 public:
  CMsgLobbyPlayerPlusSubscriptionData();
  virtual ~CMsgLobbyPlayerPlusSubscriptionData();

  CMsgLobbyPlayerPlusSubscriptionData(const CMsgLobbyPlayerPlusSubscriptionData& from);

  inline CMsgLobbyPlayerPlusSubscriptionData& operator=(const CMsgLobbyPlayerPlusSubscriptionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyPlayerPlusSubscriptionData(CMsgLobbyPlayerPlusSubscriptionData&& from) noexcept
    : CMsgLobbyPlayerPlusSubscriptionData() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlayerPlusSubscriptionData& operator=(CMsgLobbyPlayerPlusSubscriptionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyPlayerPlusSubscriptionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyPlayerPlusSubscriptionData* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlayerPlusSubscriptionData*>(
               &_CMsgLobbyPlayerPlusSubscriptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgLobbyPlayerPlusSubscriptionData* other);
  friend void swap(CMsgLobbyPlayerPlusSubscriptionData& a, CMsgLobbyPlayerPlusSubscriptionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyPlayerPlusSubscriptionData* New() const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData>(nullptr);
  }

  CMsgLobbyPlayerPlusSubscriptionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData& from);
  void MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlayerPlusSubscriptionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyPlayerPlusSubscriptionData_HeroBadge HeroBadge;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  int hero_badges_size() const;
  void clear_hero_badges();
  static const int kHeroBadgesFieldNumber = 1;
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* mutable_hero_badges(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >*
      mutable_hero_badges();
  const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& hero_badges(int index) const;
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* add_hero_badges();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >&
      hero_badges() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyPlayerPlusSubscriptionData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge > hero_badges_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_ChatWheelMessageRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange) */ {
 public:
  CMsgLobbyEventPoints_ChatWheelMessageRange();
  virtual ~CMsgLobbyEventPoints_ChatWheelMessageRange();

  CMsgLobbyEventPoints_ChatWheelMessageRange(const CMsgLobbyEventPoints_ChatWheelMessageRange& from);

  inline CMsgLobbyEventPoints_ChatWheelMessageRange& operator=(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyEventPoints_ChatWheelMessageRange(CMsgLobbyEventPoints_ChatWheelMessageRange&& from) noexcept
    : CMsgLobbyEventPoints_ChatWheelMessageRange() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_ChatWheelMessageRange& operator=(CMsgLobbyEventPoints_ChatWheelMessageRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyEventPoints_ChatWheelMessageRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyEventPoints_ChatWheelMessageRange* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_ChatWheelMessageRange*>(
               &_CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgLobbyEventPoints_ChatWheelMessageRange* other);
  friend void swap(CMsgLobbyEventPoints_ChatWheelMessageRange& a, CMsgLobbyEventPoints_ChatWheelMessageRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventPoints_ChatWheelMessageRange* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_ChatWheelMessageRange>(nullptr);
  }

  CMsgLobbyEventPoints_ChatWheelMessageRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_ChatWheelMessageRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from);
  void MergeFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_ChatWheelMessageRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 message_id_start = 1;
  bool has_message_id_start() const;
  void clear_message_id_start();
  static const int kMessageIdStartFieldNumber = 1;
  ::google::protobuf::uint32 message_id_start() const;
  void set_message_id_start(::google::protobuf::uint32 value);

  // optional uint32 message_id_end = 2;
  bool has_message_id_end() const;
  void clear_message_id_end();
  static const int kMessageIdEndFieldNumber = 2;
  ::google::protobuf::uint32 message_id_end() const;
  void set_message_id_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 message_id_start_;
  ::google::protobuf::uint32 message_id_end_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_PeriodicResourceValues final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues) */ {
 public:
  CMsgLobbyEventPoints_PeriodicResourceValues();
  virtual ~CMsgLobbyEventPoints_PeriodicResourceValues();

  CMsgLobbyEventPoints_PeriodicResourceValues(const CMsgLobbyEventPoints_PeriodicResourceValues& from);

  inline CMsgLobbyEventPoints_PeriodicResourceValues& operator=(const CMsgLobbyEventPoints_PeriodicResourceValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyEventPoints_PeriodicResourceValues(CMsgLobbyEventPoints_PeriodicResourceValues&& from) noexcept
    : CMsgLobbyEventPoints_PeriodicResourceValues() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_PeriodicResourceValues& operator=(CMsgLobbyEventPoints_PeriodicResourceValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyEventPoints_PeriodicResourceValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyEventPoints_PeriodicResourceValues* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_PeriodicResourceValues*>(
               &_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgLobbyEventPoints_PeriodicResourceValues* other);
  friend void swap(CMsgLobbyEventPoints_PeriodicResourceValues& a, CMsgLobbyEventPoints_PeriodicResourceValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventPoints_PeriodicResourceValues* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_PeriodicResourceValues>(nullptr);
  }

  CMsgLobbyEventPoints_PeriodicResourceValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_PeriodicResourceValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from);
  void MergeFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_PeriodicResourceValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 remaining = 1;
  bool has_remaining() const;
  void clear_remaining();
  static const int kRemainingFieldNumber = 1;
  ::google::protobuf::uint32 remaining() const;
  void set_remaining(::google::protobuf::uint32 value);

  // optional uint32 max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 remaining_;
  ::google::protobuf::uint32 max_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_AccountPoints final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyEventPoints.AccountPoints) */ {
 public:
  CMsgLobbyEventPoints_AccountPoints();
  virtual ~CMsgLobbyEventPoints_AccountPoints();

  CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from);

  inline CMsgLobbyEventPoints_AccountPoints& operator=(const CMsgLobbyEventPoints_AccountPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyEventPoints_AccountPoints(CMsgLobbyEventPoints_AccountPoints&& from) noexcept
    : CMsgLobbyEventPoints_AccountPoints() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_AccountPoints& operator=(CMsgLobbyEventPoints_AccountPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyEventPoints_AccountPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyEventPoints_AccountPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_AccountPoints*>(
               &_CMsgLobbyEventPoints_AccountPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgLobbyEventPoints_AccountPoints* other);
  friend void swap(CMsgLobbyEventPoints_AccountPoints& a, CMsgLobbyEventPoints_AccountPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventPoints_AccountPoints* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_AccountPoints>(nullptr);
  }

  CMsgLobbyEventPoints_AccountPoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_AccountPoints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_AccountPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  int unlocked_chat_wheel_message_ranges_size() const;
  void clear_unlocked_chat_wheel_message_ranges();
  static const int kUnlockedChatWheelMessageRangesFieldNumber = 13;
  ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* mutable_unlocked_chat_wheel_message_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >*
      mutable_unlocked_chat_wheel_message_ranges();
  const ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange& unlocked_chat_wheel_message_ranges(int index) const;
  ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* add_unlocked_chat_wheel_message_ranges();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >&
      unlocked_chat_wheel_message_ranges() const;

  // optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
  bool has_plus_subscription_data() const;
  void clear_plus_subscription_data();
  static const int kPlusSubscriptionDataFieldNumber = 16;
  const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData& plus_subscription_data() const;
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* release_plus_subscription_data();
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* mutable_plus_subscription_data();
  void set_allocated_plus_subscription_data(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* plus_subscription_data);

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
  bool has_wager_tokens() const;
  void clear_wager_tokens();
  static const int kWagerTokensFieldNumber = 17;
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& wager_tokens() const;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* release_wager_tokens();
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* mutable_wager_tokens();
  void set_allocated_wager_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* wager_tokens);

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
  bool has_rank_wager_tokens() const;
  void clear_rank_wager_tokens();
  static const int kRankWagerTokensFieldNumber = 18;
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& rank_wager_tokens() const;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* release_rank_wager_tokens();
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* mutable_rank_wager_tokens();
  void set_allocated_rank_wager_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* rank_wager_tokens);

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
  bool has_tip_tokens() const;
  void clear_tip_tokens();
  static const int kTipTokensFieldNumber = 19;
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& tip_tokens() const;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* release_tip_tokens();
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* mutable_tip_tokens();
  void set_allocated_tip_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* tip_tokens);

  // optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
  bool has_periodic_point_adjustments() const;
  void clear_periodic_point_adjustments();
  static const int kPeriodicPointAdjustmentsFieldNumber = 21;
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& periodic_point_adjustments() const;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* release_periodic_point_adjustments();
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* mutable_periodic_point_adjustments();
  void set_allocated_periodic_point_adjustments(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* periodic_point_adjustments);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 normal_points = 2;
  bool has_normal_points() const;
  void clear_normal_points();
  static const int kNormalPointsFieldNumber = 2;
  ::google::protobuf::uint32 normal_points() const;
  void set_normal_points(::google::protobuf::uint32 value);

  // optional uint32 premium_points = 3;
  bool has_premium_points() const;
  void clear_premium_points();
  static const int kPremiumPointsFieldNumber = 3;
  ::google::protobuf::uint32 premium_points() const;
  void set_premium_points(::google::protobuf::uint32 value);

  // optional bool owned = 4;
  bool has_owned() const;
  void clear_owned();
  static const int kOwnedFieldNumber = 4;
  bool owned() const;
  void set_owned(bool value);

  // optional uint32 favorite_team = 5;
  bool has_favorite_team() const;
  void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 5;
  ::google::protobuf::uint32 favorite_team() const;
  void set_favorite_team(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_level = 6;
  bool has_favorite_team_level() const;
  void clear_favorite_team_level();
  static const int kFavoriteTeamLevelFieldNumber = 6;
  ::google::protobuf::uint32 favorite_team_level() const;
  void set_favorite_team_level(::google::protobuf::uint32 value);

  // optional uint32 points_held = 7;
  bool has_points_held() const;
  void clear_points_held();
  static const int kPointsHeldFieldNumber = 7;
  ::google::protobuf::uint32 points_held() const;
  void set_points_held(::google::protobuf::uint32 value);

  // optional uint32 premium_points_held = 8;
  bool has_premium_points_held() const;
  void clear_premium_points_held();
  static const int kPremiumPointsHeldFieldNumber = 8;
  ::google::protobuf::uint32 premium_points_held() const;
  void set_premium_points_held(::google::protobuf::uint32 value);

  // optional uint64 active_effects_mask = 12;
  bool has_active_effects_mask() const;
  void clear_active_effects_mask();
  static const int kActiveEffectsMaskFieldNumber = 12;
  ::google::protobuf::uint64 active_effects_mask() const;
  void set_active_effects_mask(::google::protobuf::uint64 value);

  // optional uint32 favorite_team_foil_level = 9;
  bool has_favorite_team_foil_level() const;
  void clear_favorite_team_foil_level();
  static const int kFavoriteTeamFoilLevelFieldNumber = 9;
  ::google::protobuf::uint32 favorite_team_foil_level() const;
  void set_favorite_team_foil_level(::google::protobuf::uint32 value);

  // optional uint32 tip_amount = 20;
  bool has_tip_amount() const;
  void clear_tip_amount();
  static const int kTipAmountFieldNumber = 20;
  ::google::protobuf::uint32 tip_amount() const;
  void set_tip_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyEventPoints.AccountPoints)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange > unlocked_chat_wheel_message_ranges_;
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* plus_subscription_data_;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* wager_tokens_;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* rank_wager_tokens_;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* tip_tokens_;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* periodic_point_adjustments_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 normal_points_;
  ::google::protobuf::uint32 premium_points_;
  bool owned_;
  ::google::protobuf::uint32 favorite_team_;
  ::google::protobuf::uint32 favorite_team_level_;
  ::google::protobuf::uint32 points_held_;
  ::google::protobuf::uint32 premium_points_held_;
  ::google::protobuf::uint64 active_effects_mask_;
  ::google::protobuf::uint32 favorite_team_foil_level_;
  ::google::protobuf::uint32 tip_amount_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyEventPoints) */ {
 public:
  CMsgLobbyEventPoints();
  virtual ~CMsgLobbyEventPoints();

  CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from);

  inline CMsgLobbyEventPoints& operator=(const CMsgLobbyEventPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyEventPoints(CMsgLobbyEventPoints&& from) noexcept
    : CMsgLobbyEventPoints() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints& operator=(CMsgLobbyEventPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyEventPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyEventPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints*>(
               &_CMsgLobbyEventPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgLobbyEventPoints* other);
  friend void swap(CMsgLobbyEventPoints& a, CMsgLobbyEventPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventPoints* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints>(nullptr);
  }

  CMsgLobbyEventPoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyEventPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyEventPoints_ChatWheelMessageRange ChatWheelMessageRange;
  typedef CMsgLobbyEventPoints_PeriodicResourceValues PeriodicResourceValues;
  typedef CMsgLobbyEventPoints_AccountPoints AccountPoints;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  int account_points_size() const;
  void clear_account_points();
  static const int kAccountPointsFieldNumber = 2;
  ::proto::dota::CMsgLobbyEventPoints_AccountPoints* mutable_account_points(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >*
      mutable_account_points();
  const ::proto::dota::CMsgLobbyEventPoints_AccountPoints& account_points(int index) const;
  ::proto::dota::CMsgLobbyEventPoints_AccountPoints* add_account_points();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >&
      account_points() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyEventPoints)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints > account_points_;
  ::google::protobuf::uint32 event_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLocalServerFakeLobbyData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLocalServerFakeLobbyData) */ {
 public:
  CMsgLocalServerFakeLobbyData();
  virtual ~CMsgLocalServerFakeLobbyData();

  CMsgLocalServerFakeLobbyData(const CMsgLocalServerFakeLobbyData& from);

  inline CMsgLocalServerFakeLobbyData& operator=(const CMsgLocalServerFakeLobbyData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLocalServerFakeLobbyData(CMsgLocalServerFakeLobbyData&& from) noexcept
    : CMsgLocalServerFakeLobbyData() {
    *this = ::std::move(from);
  }

  inline CMsgLocalServerFakeLobbyData& operator=(CMsgLocalServerFakeLobbyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLocalServerFakeLobbyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLocalServerFakeLobbyData* internal_default_instance() {
    return reinterpret_cast<const CMsgLocalServerFakeLobbyData*>(
               &_CMsgLocalServerFakeLobbyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgLocalServerFakeLobbyData* other);
  friend void swap(CMsgLocalServerFakeLobbyData& a, CMsgLocalServerFakeLobbyData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLocalServerFakeLobbyData* New() const final {
    return CreateMaybeMessage<CMsgLocalServerFakeLobbyData>(nullptr);
  }

  CMsgLocalServerFakeLobbyData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLocalServerFakeLobbyData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLocalServerFakeLobbyData& from);
  void MergeFrom(const CMsgLocalServerFakeLobbyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLocalServerFakeLobbyData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
  int event_points_size() const;
  void clear_event_points();
  static const int kEventPointsFieldNumber = 2;
  ::proto::dota::CMsgLobbyEventPoints* mutable_event_points(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints >*
      mutable_event_points();
  const ::proto::dota::CMsgLobbyEventPoints& event_points(int index) const;
  ::proto::dota::CMsgLobbyEventPoints* add_event_points();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints >&
      event_points() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional bool is_plus_subscriber = 3;
  bool has_is_plus_subscriber() const;
  void clear_is_plus_subscriber();
  static const int kIsPlusSubscriberFieldNumber = 3;
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);

  // optional uint32 primary_event_id = 4;
  bool has_primary_event_id() const;
  void clear_primary_event_id();
  static const int kPrimaryEventIdFieldNumber = 4;
  ::google::protobuf::uint32 primary_event_id() const;
  void set_primary_event_id(::google::protobuf::uint32 value);

  // optional uint32 favorite_team = 5;
  bool has_favorite_team() const;
  void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 5;
  ::google::protobuf::uint32 favorite_team() const;
  void set_favorite_team(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_quality = 6;
  bool has_favorite_team_quality() const;
  void clear_favorite_team_quality();
  static const int kFavoriteTeamQualityFieldNumber = 6;
  ::google::protobuf::uint32 favorite_team_quality() const;
  void set_favorite_team_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLocalServerFakeLobbyData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints > event_points_;
  ::google::protobuf::uint32 account_id_;
  bool is_plus_subscriber_;
  ::google::protobuf::uint32 primary_event_id_;
  ::google::protobuf::uint32 favorite_team_;
  ::google::protobuf::uint32 favorite_team_quality_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleCupVictory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBattleCupVictory) */ {
 public:
  CMsgBattleCupVictory();
  virtual ~CMsgBattleCupVictory();

  CMsgBattleCupVictory(const CMsgBattleCupVictory& from);

  inline CMsgBattleCupVictory& operator=(const CMsgBattleCupVictory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgBattleCupVictory(CMsgBattleCupVictory&& from) noexcept
    : CMsgBattleCupVictory() {
    *this = ::std::move(from);
  }

  inline CMsgBattleCupVictory& operator=(CMsgBattleCupVictory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgBattleCupVictory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgBattleCupVictory* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleCupVictory*>(
               &_CMsgBattleCupVictory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgBattleCupVictory* other);
  friend void swap(CMsgBattleCupVictory& a, CMsgBattleCupVictory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgBattleCupVictory* New() const final {
    return CreateMaybeMessage<CMsgBattleCupVictory>(nullptr);
  }

  CMsgBattleCupVictory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBattleCupVictory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgBattleCupVictory& from);
  void MergeFrom(const CMsgBattleCupVictory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleCupVictory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 win_date = 2;
  bool has_win_date() const;
  void clear_win_date();
  static const int kWinDateFieldNumber = 2;
  ::google::protobuf::uint32 win_date() const;
  void set_win_date(::google::protobuf::uint32 value);

  // optional uint32 valid_until = 3;
  bool has_valid_until() const;
  void clear_valid_until();
  static const int kValidUntilFieldNumber = 3;
  ::google::protobuf::uint32 valid_until() const;
  void set_valid_until(::google::protobuf::uint32 value);

  // optional uint32 skill_level = 4;
  bool has_skill_level() const;
  void clear_skill_level();
  static const int kSkillLevelFieldNumber = 4;
  ::google::protobuf::uint32 skill_level() const;
  void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 5;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 5;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 division_id = 6;
  bool has_division_id() const;
  void clear_division_id();
  static const int kDivisionIdFieldNumber = 6;
  ::google::protobuf::uint32 division_id() const;
  void set_division_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 7;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 7;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 streak = 8;
  bool has_streak() const;
  void clear_streak();
  static const int kStreakFieldNumber = 8;
  ::google::protobuf::uint32 streak() const;
  void set_streak(::google::protobuf::uint32 value);

  // optional uint32 trophy_id = 9;
  bool has_trophy_id() const;
  void clear_trophy_id();
  static const int kTrophyIdFieldNumber = 9;
  ::google::protobuf::uint32 trophy_id() const;
  void set_trophy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBattleCupVictory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 win_date_;
  ::google::protobuf::uint32 valid_until_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 division_id_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 streak_;
  ::google::protobuf::uint32 trophy_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyBattleCupVictoryList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyBattleCupVictoryList) */ {
 public:
  CMsgLobbyBattleCupVictoryList();
  virtual ~CMsgLobbyBattleCupVictoryList();

  CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from);

  inline CMsgLobbyBattleCupVictoryList& operator=(const CMsgLobbyBattleCupVictoryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyBattleCupVictoryList(CMsgLobbyBattleCupVictoryList&& from) noexcept
    : CMsgLobbyBattleCupVictoryList() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyBattleCupVictoryList& operator=(CMsgLobbyBattleCupVictoryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyBattleCupVictoryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyBattleCupVictoryList* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyBattleCupVictoryList*>(
               &_CMsgLobbyBattleCupVictoryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgLobbyBattleCupVictoryList* other);
  friend void swap(CMsgLobbyBattleCupVictoryList& a, CMsgLobbyBattleCupVictoryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyBattleCupVictoryList* New() const final {
    return CreateMaybeMessage<CMsgLobbyBattleCupVictoryList>(nullptr);
  }

  CMsgLobbyBattleCupVictoryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyBattleCupVictoryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyBattleCupVictoryList& from);
  void MergeFrom(const CMsgLobbyBattleCupVictoryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyBattleCupVictoryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  int winners_size() const;
  void clear_winners();
  static const int kWinnersFieldNumber = 1;
  ::proto::dota::CMsgBattleCupVictory* mutable_winners(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >*
      mutable_winners();
  const ::proto::dota::CMsgBattleCupVictory& winners(int index) const;
  ::proto::dota::CMsgBattleCupVictory* add_winners();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >&
      winners() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyBattleCupVictoryList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory > winners_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABroadcastNotification) */ {
 public:
  CMsgDOTABroadcastNotification();
  virtual ~CMsgDOTABroadcastNotification();

  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);

  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABroadcastNotification(CMsgDOTABroadcastNotification&& from) noexcept
    : CMsgDOTABroadcastNotification() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABroadcastNotification& operator=(CMsgDOTABroadcastNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABroadcastNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABroadcastNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABroadcastNotification*>(
               &_CMsgDOTABroadcastNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgDOTABroadcastNotification* other);
  friend void swap(CMsgDOTABroadcastNotification& a, CMsgDOTABroadcastNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABroadcastNotification* New() const final {
    return CreateMaybeMessage<CMsgDOTABroadcastNotification>(nullptr);
  }

  CMsgDOTABroadcastNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABroadcastNotification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  void MergeFrom(const CMsgDOTABroadcastNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABroadcastNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABroadcastNotification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CProtoItemHeroStatue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CProtoItemHeroStatue) */ {
 public:
  CProtoItemHeroStatue();
  virtual ~CProtoItemHeroStatue();

  CProtoItemHeroStatue(const CProtoItemHeroStatue& from);

  inline CProtoItemHeroStatue& operator=(const CProtoItemHeroStatue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CProtoItemHeroStatue(CProtoItemHeroStatue&& from) noexcept
    : CProtoItemHeroStatue() {
    *this = ::std::move(from);
  }

  inline CProtoItemHeroStatue& operator=(CProtoItemHeroStatue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CProtoItemHeroStatue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CProtoItemHeroStatue* internal_default_instance() {
    return reinterpret_cast<const CProtoItemHeroStatue*>(
               &_CProtoItemHeroStatue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CProtoItemHeroStatue* other);
  friend void swap(CProtoItemHeroStatue& a, CProtoItemHeroStatue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CProtoItemHeroStatue* New() const final {
    return CreateMaybeMessage<CProtoItemHeroStatue>(nullptr);
  }

  CProtoItemHeroStatue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CProtoItemHeroStatue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CProtoItemHeroStatue& from);
  void MergeFrom(const CProtoItemHeroStatue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProtoItemHeroStatue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 wearable = 5;
  int wearable_size() const;
  void clear_wearable();
  static const int kWearableFieldNumber = 5;
  ::google::protobuf::uint32 wearable(int index) const;
  void set_wearable(int index, ::google::protobuf::uint32 value);
  void add_wearable(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // repeated uint32 style = 7;
  int style_size() const;
  void clear_style();
  static const int kStyleFieldNumber = 7;
  ::google::protobuf::uint32 style(int index) const;
  void set_style(int index, ::google::protobuf::uint32 value);
  void add_style(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // optional string sequence_name = 3;
  bool has_sequence_name() const;
  void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  const ::std::string& sequence_name() const;
  void set_sequence_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_name(::std::string&& value);
  #endif
  void set_sequence_name(const char* value);
  void set_sequence_name(const char* value, size_t size);
  ::std::string* mutable_sequence_name();
  ::std::string* release_sequence_name();
  void set_allocated_sequence_name(::std::string* sequence_name);

  // optional string inscription = 6;
  bool has_inscription() const;
  void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  const ::std::string& inscription() const;
  void set_inscription(const ::std::string& value);
  #if LANG_CXX11
  void set_inscription(::std::string&& value);
  #endif
  void set_inscription(const char* value);
  void set_inscription(const char* value, size_t size);
  ::std::string* mutable_inscription();
  ::std::string* release_inscription();
  void set_allocated_inscription(::std::string* inscription);

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  bool has_status_effect_index() const;
  void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  ::google::protobuf::uint32 status_effect_index() const;
  void set_status_effect_index(::google::protobuf::uint32 value);

  // optional float cycle = 4;
  bool has_cycle() const;
  void clear_cycle();
  static const int kCycleFieldNumber = 4;
  float cycle() const;
  void set_cycle(float value);

  // optional bool tournament_drop = 8;
  bool has_tournament_drop() const;
  void clear_tournament_drop();
  static const int kTournamentDropFieldNumber = 8;
  bool tournament_drop() const;
  void set_tournament_drop(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CProtoItemHeroStatue)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  ::google::protobuf::internal::ArenaStringPtr sequence_name_;
  ::google::protobuf::internal::ArenaStringPtr inscription_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  float cycle_;
  bool tournament_drop_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CProtoItemTeamShowcase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CProtoItemTeamShowcase) */ {
 public:
  CProtoItemTeamShowcase();
  virtual ~CProtoItemTeamShowcase();

  CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from);

  inline CProtoItemTeamShowcase& operator=(const CProtoItemTeamShowcase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CProtoItemTeamShowcase(CProtoItemTeamShowcase&& from) noexcept
    : CProtoItemTeamShowcase() {
    *this = ::std::move(from);
  }

  inline CProtoItemTeamShowcase& operator=(CProtoItemTeamShowcase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CProtoItemTeamShowcase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CProtoItemTeamShowcase* internal_default_instance() {
    return reinterpret_cast<const CProtoItemTeamShowcase*>(
               &_CProtoItemTeamShowcase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CProtoItemTeamShowcase* other);
  friend void swap(CProtoItemTeamShowcase& a, CProtoItemTeamShowcase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CProtoItemTeamShowcase* New() const final {
    return CreateMaybeMessage<CProtoItemTeamShowcase>(nullptr);
  }

  CProtoItemTeamShowcase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CProtoItemTeamShowcase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CProtoItemTeamShowcase& from);
  void MergeFrom(const CProtoItemTeamShowcase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProtoItemTeamShowcase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 wearable = 5;
  int wearable_size() const;
  void clear_wearable();
  static const int kWearableFieldNumber = 5;
  ::google::protobuf::uint32 wearable(int index) const;
  void set_wearable(int index, ::google::protobuf::uint32 value);
  void add_wearable(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // repeated uint32 style = 7;
  int style_size() const;
  void clear_style();
  static const int kStyleFieldNumber = 7;
  ::google::protobuf::uint32 style(int index) const;
  void set_style(int index, ::google::protobuf::uint32 value);
  void add_style(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // optional string sequence_name = 3;
  bool has_sequence_name() const;
  void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  const ::std::string& sequence_name() const;
  void set_sequence_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_name(::std::string&& value);
  #endif
  void set_sequence_name(const char* value);
  void set_sequence_name(const char* value, size_t size);
  ::std::string* mutable_sequence_name();
  ::std::string* release_sequence_name();
  void set_allocated_sequence_name(::std::string* sequence_name);

  // optional string inscription = 6;
  bool has_inscription() const;
  void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  const ::std::string& inscription() const;
  void set_inscription(const ::std::string& value);
  #if LANG_CXX11
  void set_inscription(::std::string&& value);
  #endif
  void set_inscription(const char* value);
  void set_inscription(const char* value, size_t size);
  ::std::string* mutable_inscription();
  ::std::string* release_inscription();
  void set_allocated_inscription(::std::string* inscription);

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  bool has_status_effect_index() const;
  void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  ::google::protobuf::uint32 status_effect_index() const;
  void set_status_effect_index(::google::protobuf::uint32 value);

  // optional float cycle = 4;
  bool has_cycle() const;
  void clear_cycle();
  static const int kCycleFieldNumber = 4;
  float cycle() const;
  void set_cycle(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CProtoItemTeamShowcase)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  ::google::protobuf::internal::ArenaStringPtr sequence_name_;
  ::google::protobuf::internal::ArenaStringPtr inscription_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  float cycle_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMatchPlayerAbilityUpgrade) */ {
 public:
  CMatchPlayerAbilityUpgrade();
  virtual ~CMatchPlayerAbilityUpgrade();

  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);

  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchPlayerAbilityUpgrade(CMatchPlayerAbilityUpgrade&& from) noexcept
    : CMatchPlayerAbilityUpgrade() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerAbilityUpgrade& operator=(CMatchPlayerAbilityUpgrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMatchPlayerAbilityUpgrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchPlayerAbilityUpgrade* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerAbilityUpgrade*>(
               &_CMatchPlayerAbilityUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CMatchPlayerAbilityUpgrade* other);
  friend void swap(CMatchPlayerAbilityUpgrade& a, CMatchPlayerAbilityUpgrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchPlayerAbilityUpgrade* New() const final {
    return CreateMaybeMessage<CMatchPlayerAbilityUpgrade>(nullptr);
  }

  CMatchPlayerAbilityUpgrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMatchPlayerAbilityUpgrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  void MergeFrom(const CMatchPlayerAbilityUpgrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerAbilityUpgrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ability = 1;
  bool has_ability() const;
  void clear_ability();
  static const int kAbilityFieldNumber = 1;
  ::google::protobuf::uint32 ability() const;
  void set_ability(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMatchPlayerAbilityUpgrade)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::uint32 time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerTimedStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMatchPlayerTimedStats) */ {
 public:
  CMatchPlayerTimedStats();
  virtual ~CMatchPlayerTimedStats();

  CMatchPlayerTimedStats(const CMatchPlayerTimedStats& from);

  inline CMatchPlayerTimedStats& operator=(const CMatchPlayerTimedStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchPlayerTimedStats(CMatchPlayerTimedStats&& from) noexcept
    : CMatchPlayerTimedStats() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerTimedStats& operator=(CMatchPlayerTimedStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMatchPlayerTimedStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchPlayerTimedStats* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerTimedStats*>(
               &_CMatchPlayerTimedStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CMatchPlayerTimedStats* other);
  friend void swap(CMatchPlayerTimedStats& a, CMatchPlayerTimedStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchPlayerTimedStats* New() const final {
    return CreateMaybeMessage<CMatchPlayerTimedStats>(nullptr);
  }

  CMatchPlayerTimedStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMatchPlayerTimedStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMatchPlayerTimedStats& from);
  void MergeFrom(const CMatchPlayerTimedStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerTimedStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // optional uint32 kills = 2;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 2;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 3;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 3;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 4;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 4;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 net_worth = 5;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 5;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 6;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 6;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 7;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 7;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMatchPlayerTimedStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 net_worth_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMatchAdditionalUnitInventory) */ {
 public:
  CMatchAdditionalUnitInventory();
  virtual ~CMatchAdditionalUnitInventory();

  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);

  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchAdditionalUnitInventory(CMatchAdditionalUnitInventory&& from) noexcept
    : CMatchAdditionalUnitInventory() {
    *this = ::std::move(from);
  }

  inline CMatchAdditionalUnitInventory& operator=(CMatchAdditionalUnitInventory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMatchAdditionalUnitInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchAdditionalUnitInventory* internal_default_instance() {
    return reinterpret_cast<const CMatchAdditionalUnitInventory*>(
               &_CMatchAdditionalUnitInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CMatchAdditionalUnitInventory* other);
  friend void swap(CMatchAdditionalUnitInventory& a, CMatchAdditionalUnitInventory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchAdditionalUnitInventory* New() const final {
    return CreateMaybeMessage<CMatchAdditionalUnitInventory>(nullptr);
  }

  CMatchAdditionalUnitInventory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMatchAdditionalUnitInventory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  void MergeFrom(const CMatchAdditionalUnitInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchAdditionalUnitInventory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::google::protobuf::uint32 items(int index) const;
  void set_items(int index, ::google::protobuf::uint32 value);
  void add_items(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // optional string unit_name = 1;
  bool has_unit_name() const;
  void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  const ::std::string& unit_name() const;
  void set_unit_name(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_name(::std::string&& value);
  #endif
  void set_unit_name(const char* value);
  void set_unit_name(const char* value, size_t size);
  ::std::string* mutable_unit_name();
  ::std::string* release_unit_name();
  void set_allocated_unit_name(::std::string* unit_name);

  // @@protoc_insertion_point(class_scope:proto.dota.CMatchAdditionalUnitInventory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::internal::ArenaStringPtr unit_name_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerPermanentBuff final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMatchPlayerPermanentBuff) */ {
 public:
  CMatchPlayerPermanentBuff();
  virtual ~CMatchPlayerPermanentBuff();

  CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from);

  inline CMatchPlayerPermanentBuff& operator=(const CMatchPlayerPermanentBuff& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchPlayerPermanentBuff(CMatchPlayerPermanentBuff&& from) noexcept
    : CMatchPlayerPermanentBuff() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerPermanentBuff& operator=(CMatchPlayerPermanentBuff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMatchPlayerPermanentBuff& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchPlayerPermanentBuff* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerPermanentBuff*>(
               &_CMatchPlayerPermanentBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CMatchPlayerPermanentBuff* other);
  friend void swap(CMatchPlayerPermanentBuff& a, CMatchPlayerPermanentBuff& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchPlayerPermanentBuff* New() const final {
    return CreateMaybeMessage<CMatchPlayerPermanentBuff>(nullptr);
  }

  CMatchPlayerPermanentBuff* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMatchPlayerPermanentBuff>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMatchPlayerPermanentBuff& from);
  void MergeFrom(const CMatchPlayerPermanentBuff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerPermanentBuff* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 permanent_buff = 1;
  bool has_permanent_buff() const;
  void clear_permanent_buff();
  static const int kPermanentBuffFieldNumber = 1;
  ::google::protobuf::uint32 permanent_buff() const;
  void set_permanent_buff(::google::protobuf::uint32 value);

  // optional uint32 stack_count = 2;
  bool has_stack_count() const;
  void clear_stack_count();
  static const int kStackCountFieldNumber = 2;
  ::google::protobuf::uint32 stack_count() const;
  void set_stack_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMatchPlayerPermanentBuff)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 permanent_buff_;
  ::google::protobuf::uint32 stack_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMatchHeroSelectEvent) */ {
 public:
  CMatchHeroSelectEvent();
  virtual ~CMatchHeroSelectEvent();

  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);

  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchHeroSelectEvent(CMatchHeroSelectEvent&& from) noexcept
    : CMatchHeroSelectEvent() {
    *this = ::std::move(from);
  }

  inline CMatchHeroSelectEvent& operator=(CMatchHeroSelectEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMatchHeroSelectEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchHeroSelectEvent* internal_default_instance() {
    return reinterpret_cast<const CMatchHeroSelectEvent*>(
               &_CMatchHeroSelectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CMatchHeroSelectEvent* other);
  friend void swap(CMatchHeroSelectEvent& a, CMatchHeroSelectEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchHeroSelectEvent* New() const final {
    return CreateMaybeMessage<CMatchHeroSelectEvent>(nullptr);
  }

  CMatchHeroSelectEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMatchHeroSelectEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMatchHeroSelectEvent& from);
  void MergeFrom(const CMatchHeroSelectEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchHeroSelectEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pick = 1;
  bool has_is_pick() const;
  void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  bool is_pick() const;
  void set_is_pick(bool value);

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMatchHeroSelectEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProcessFantasyScheduledEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProcessFantasyScheduledEvent) */ {
 public:
  CMsgDOTAProcessFantasyScheduledEvent();
  virtual ~CMsgDOTAProcessFantasyScheduledEvent();

  CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from);

  inline CMsgDOTAProcessFantasyScheduledEvent& operator=(const CMsgDOTAProcessFantasyScheduledEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProcessFantasyScheduledEvent(CMsgDOTAProcessFantasyScheduledEvent&& from) noexcept
    : CMsgDOTAProcessFantasyScheduledEvent() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProcessFantasyScheduledEvent& operator=(CMsgDOTAProcessFantasyScheduledEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProcessFantasyScheduledEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProcessFantasyScheduledEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProcessFantasyScheduledEvent*>(
               &_CMsgDOTAProcessFantasyScheduledEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CMsgDOTAProcessFantasyScheduledEvent* other);
  friend void swap(CMsgDOTAProcessFantasyScheduledEvent& a, CMsgDOTAProcessFantasyScheduledEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProcessFantasyScheduledEvent* New() const final {
    return CreateMaybeMessage<CMsgDOTAProcessFantasyScheduledEvent>(nullptr);
  }

  CMsgDOTAProcessFantasyScheduledEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProcessFantasyScheduledEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProcessFantasyScheduledEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  ::google::protobuf::uint32 event() const;
  void set_event(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 fantasy_league_id = 3;
  bool has_fantasy_league_id() const;
  void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  ::google::protobuf::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::google::protobuf::uint32 value);

  // optional uint32 season = 4;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 4;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 reference_data = 5;
  bool has_reference_data() const;
  void clear_reference_data();
  static const int kReferenceDataFieldNumber = 5;
  ::google::protobuf::uint32 reference_data() const;
  void set_reference_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 event_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 fantasy_league_id_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 reference_data_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAHasItemQuery) */ {
 public:
  CMsgDOTAHasItemQuery();
  virtual ~CMsgDOTAHasItemQuery();

  CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from);

  inline CMsgDOTAHasItemQuery& operator=(const CMsgDOTAHasItemQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHasItemQuery(CMsgDOTAHasItemQuery&& from) noexcept
    : CMsgDOTAHasItemQuery() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemQuery& operator=(CMsgDOTAHasItemQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAHasItemQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHasItemQuery* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemQuery*>(
               &_CMsgDOTAHasItemQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CMsgDOTAHasItemQuery* other);
  friend void swap(CMsgDOTAHasItemQuery& a, CMsgDOTAHasItemQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHasItemQuery* New() const final {
    return CreateMaybeMessage<CMsgDOTAHasItemQuery>(nullptr);
  }

  CMsgDOTAHasItemQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAHasItemQuery& from);
  void MergeFrom(const CMsgDOTAHasItemQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 2;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAHasItemQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAHasItemResponse) */ {
 public:
  CMsgDOTAHasItemResponse();
  virtual ~CMsgDOTAHasItemResponse();

  CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from);

  inline CMsgDOTAHasItemResponse& operator=(const CMsgDOTAHasItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHasItemResponse(CMsgDOTAHasItemResponse&& from) noexcept
    : CMsgDOTAHasItemResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemResponse& operator=(CMsgDOTAHasItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAHasItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHasItemResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemResponse*>(
               &_CMsgDOTAHasItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CMsgDOTAHasItemResponse* other);
  friend void swap(CMsgDOTAHasItemResponse& a, CMsgDOTAHasItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHasItemResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAHasItemResponse>(nullptr);
  }

  CMsgDOTAHasItemResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAHasItemResponse& from);
  void MergeFrom(const CMsgDOTAHasItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_item = 1;
  bool has_has_item() const;
  void clear_has_item();
  static const int kHasItemFieldNumber = 1;
  bool has_item() const;
  void set_has_item(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAHasItemResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool has_item_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCIsProQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCIsProQuery) */ {
 public:
  CMsgGCIsProQuery();
  virtual ~CMsgGCIsProQuery();

  CMsgGCIsProQuery(const CMsgGCIsProQuery& from);

  inline CMsgGCIsProQuery& operator=(const CMsgGCIsProQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCIsProQuery(CMsgGCIsProQuery&& from) noexcept
    : CMsgGCIsProQuery() {
    *this = ::std::move(from);
  }

  inline CMsgGCIsProQuery& operator=(CMsgGCIsProQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCIsProQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCIsProQuery* internal_default_instance() {
    return reinterpret_cast<const CMsgGCIsProQuery*>(
               &_CMsgGCIsProQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CMsgGCIsProQuery* other);
  friend void swap(CMsgGCIsProQuery& a, CMsgGCIsProQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCIsProQuery* New() const final {
    return CreateMaybeMessage<CMsgGCIsProQuery>(nullptr);
  }

  CMsgGCIsProQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCIsProQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCIsProQuery& from);
  void MergeFrom(const CMsgGCIsProQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCIsProQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCIsProQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCIsProResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCIsProResponse) */ {
 public:
  CMsgGCIsProResponse();
  virtual ~CMsgGCIsProResponse();

  CMsgGCIsProResponse(const CMsgGCIsProResponse& from);

  inline CMsgGCIsProResponse& operator=(const CMsgGCIsProResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCIsProResponse(CMsgGCIsProResponse&& from) noexcept
    : CMsgGCIsProResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCIsProResponse& operator=(CMsgGCIsProResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCIsProResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCIsProResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCIsProResponse*>(
               &_CMsgGCIsProResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CMsgGCIsProResponse* other);
  friend void swap(CMsgGCIsProResponse& a, CMsgGCIsProResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCIsProResponse* New() const final {
    return CreateMaybeMessage<CMsgGCIsProResponse>(nullptr);
  }

  CMsgGCIsProResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCIsProResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCIsProResponse& from);
  void MergeFrom(const CMsgGCIsProResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCIsProResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pro = 1;
  bool has_is_pro() const;
  void clear_is_pro();
  static const int kIsProFieldNumber = 1;
  bool is_pro() const;
  void set_is_pro(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCIsProResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool is_pro_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAHasItemDefsQuery) */ {
 public:
  CMsgDOTAHasItemDefsQuery();
  virtual ~CMsgDOTAHasItemDefsQuery();

  CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from);

  inline CMsgDOTAHasItemDefsQuery& operator=(const CMsgDOTAHasItemDefsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHasItemDefsQuery(CMsgDOTAHasItemDefsQuery&& from) noexcept
    : CMsgDOTAHasItemDefsQuery() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemDefsQuery& operator=(CMsgDOTAHasItemDefsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAHasItemDefsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHasItemDefsQuery* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemDefsQuery*>(
               &_CMsgDOTAHasItemDefsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CMsgDOTAHasItemDefsQuery* other);
  friend void swap(CMsgDOTAHasItemDefsQuery& a, CMsgDOTAHasItemDefsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHasItemDefsQuery* New() const final {
    return CreateMaybeMessage<CMsgDOTAHasItemDefsQuery>(nullptr);
  }

  CMsgDOTAHasItemDefsQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemDefsQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAHasItemDefsQuery& from);
  void MergeFrom(const CMsgDOTAHasItemDefsQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemDefsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 itemdef_ids = 2;
  int itemdef_ids_size() const;
  void clear_itemdef_ids();
  static const int kItemdefIdsFieldNumber = 2;
  ::google::protobuf::uint32 itemdef_ids(int index) const;
  void set_itemdef_ids(int index, ::google::protobuf::uint32 value);
  void add_itemdef_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemdef_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemdef_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAHasItemDefsQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemdef_ids_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAHasItemDefsResponse) */ {
 public:
  CMsgDOTAHasItemDefsResponse();
  virtual ~CMsgDOTAHasItemDefsResponse();

  CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from);

  inline CMsgDOTAHasItemDefsResponse& operator=(const CMsgDOTAHasItemDefsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHasItemDefsResponse(CMsgDOTAHasItemDefsResponse&& from) noexcept
    : CMsgDOTAHasItemDefsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemDefsResponse& operator=(CMsgDOTAHasItemDefsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAHasItemDefsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHasItemDefsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemDefsResponse*>(
               &_CMsgDOTAHasItemDefsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CMsgDOTAHasItemDefsResponse* other);
  friend void swap(CMsgDOTAHasItemDefsResponse& a, CMsgDOTAHasItemDefsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHasItemDefsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAHasItemDefsResponse>(nullptr);
  }

  CMsgDOTAHasItemDefsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemDefsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAHasItemDefsResponse& from);
  void MergeFrom(const CMsgDOTAHasItemDefsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemDefsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_items = 1;
  bool has_has_items() const;
  void clear_has_items();
  static const int kHasItemsFieldNumber = 1;
  bool has_items() const;
  void set_has_items(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAHasItemDefsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool has_items_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCGetPlayerCardItemInfo) */ {
 public:
  CMsgGCGetPlayerCardItemInfo();
  virtual ~CMsgGCGetPlayerCardItemInfo();

  CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from);

  inline CMsgGCGetPlayerCardItemInfo& operator=(const CMsgGCGetPlayerCardItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetPlayerCardItemInfo(CMsgGCGetPlayerCardItemInfo&& from) noexcept
    : CMsgGCGetPlayerCardItemInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfo& operator=(CMsgGCGetPlayerCardItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCGetPlayerCardItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetPlayerCardItemInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfo*>(
               &_CMsgGCGetPlayerCardItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CMsgGCGetPlayerCardItemInfo* other);
  friend void swap(CMsgGCGetPlayerCardItemInfo& a, CMsgGCGetPlayerCardItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetPlayerCardItemInfo* New() const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfo>(nullptr);
  }

  CMsgGCGetPlayerCardItemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfo& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 player_card_item_ids = 2;
  int player_card_item_ids_size() const;
  void clear_player_card_item_ids();
  static const int kPlayerCardItemIdsFieldNumber = 2;
  ::google::protobuf::uint64 player_card_item_ids(int index) const;
  void set_player_card_item_ids(int index, ::google::protobuf::uint64 value);
  void add_player_card_item_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_card_item_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_card_item_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 all_for_event = 3;
  bool has_all_for_event() const;
  void clear_all_for_event();
  static const int kAllForEventFieldNumber = 3;
  ::google::protobuf::uint32 all_for_event() const;
  void set_all_for_event(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCGetPlayerCardItemInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_card_item_ids_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 all_for_event_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo) */ {
 public:
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();
  virtual ~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);

  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& operator=(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo&& from) noexcept
    : CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& operator=(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo*>(
               &_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other);
  friend void swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& a, CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* New() const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(nullptr);
  }

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_card_item_id = 1;
  bool has_player_card_item_id() const;
  void clear_player_card_item_id();
  static const int kPlayerCardItemIdFieldNumber = 1;
  ::google::protobuf::uint64 player_card_item_id() const;
  void set_player_card_item_id(::google::protobuf::uint64 value);

  // optional uint64 packed_bonuses = 3;
  bool has_packed_bonuses() const;
  void clear_packed_bonuses();
  static const int kPackedBonusesFieldNumber = 3;
  ::google::protobuf::uint64 packed_bonuses() const;
  void set_packed_bonuses(::google::protobuf::uint64 value);

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_card_item_id_;
  ::google::protobuf::uint64 packed_bonuses_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCGetPlayerCardItemInfoResponse) */ {
 public:
  CMsgGCGetPlayerCardItemInfoResponse();
  virtual ~CMsgGCGetPlayerCardItemInfoResponse();

  CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from);

  inline CMsgGCGetPlayerCardItemInfoResponse& operator=(const CMsgGCGetPlayerCardItemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetPlayerCardItemInfoResponse(CMsgGCGetPlayerCardItemInfoResponse&& from) noexcept
    : CMsgGCGetPlayerCardItemInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfoResponse& operator=(CMsgGCGetPlayerCardItemInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCGetPlayerCardItemInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetPlayerCardItemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfoResponse*>(
               &_CMsgGCGetPlayerCardItemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CMsgGCGetPlayerCardItemInfoResponse* other);
  friend void swap(CMsgGCGetPlayerCardItemInfoResponse& a, CMsgGCGetPlayerCardItemInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetPlayerCardItemInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse>(nullptr);
  }

  CMsgGCGetPlayerCardItemInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo PlayerCardInfo;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  int player_card_infos_size() const;
  void clear_player_card_infos();
  static const int kPlayerCardInfosFieldNumber = 1;
  ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* mutable_player_card_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
      mutable_player_card_infos();
  const ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& player_card_infos(int index) const;
  ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* add_player_card_infos();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
      player_card_infos() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo > player_card_infos_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToGCFantasySetMatchLeague final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToGCFantasySetMatchLeague) */ {
 public:
  CMsgGCToGCFantasySetMatchLeague();
  virtual ~CMsgGCToGCFantasySetMatchLeague();

  CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from);

  inline CMsgGCToGCFantasySetMatchLeague& operator=(const CMsgGCToGCFantasySetMatchLeague& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCFantasySetMatchLeague(CMsgGCToGCFantasySetMatchLeague&& from) noexcept
    : CMsgGCToGCFantasySetMatchLeague() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCFantasySetMatchLeague& operator=(CMsgGCToGCFantasySetMatchLeague&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToGCFantasySetMatchLeague& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCFantasySetMatchLeague* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCFantasySetMatchLeague*>(
               &_CMsgGCToGCFantasySetMatchLeague_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CMsgGCToGCFantasySetMatchLeague* other);
  friend void swap(CMsgGCToGCFantasySetMatchLeague& a, CMsgGCToGCFantasySetMatchLeague& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCFantasySetMatchLeague* New() const final {
    return CreateMaybeMessage<CMsgGCToGCFantasySetMatchLeague>(nullptr);
  }

  CMsgGCToGCFantasySetMatchLeague* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCFantasySetMatchLeague>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  void MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCFantasySetMatchLeague* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToGCFantasySetMatchLeague)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAMapLocationState) */ {
 public:
  CSODOTAMapLocationState();
  virtual ~CSODOTAMapLocationState();

  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);

  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAMapLocationState(CSODOTAMapLocationState&& from) noexcept
    : CSODOTAMapLocationState() {
    *this = ::std::move(from);
  }

  inline CSODOTAMapLocationState& operator=(CSODOTAMapLocationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAMapLocationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAMapLocationState* internal_default_instance() {
    return reinterpret_cast<const CSODOTAMapLocationState*>(
               &_CSODOTAMapLocationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CSODOTAMapLocationState* other);
  friend void swap(CSODOTAMapLocationState& a, CSODOTAMapLocationState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAMapLocationState* New() const final {
    return CreateMaybeMessage<CSODOTAMapLocationState>(nullptr);
  }

  CSODOTAMapLocationState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAMapLocationState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAMapLocationState& from);
  void MergeFrom(const CSODOTAMapLocationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAMapLocationState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
  bool has_location_id() const;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  ::google::protobuf::int32 location_id() const;
  void set_location_id(::google::protobuf::int32 value);

  // optional bool completed = 3;
  bool has_completed() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 3;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAMapLocationState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeagueAdminList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLeagueAdminList) */ {
 public:
  CMsgLeagueAdminList();
  virtual ~CMsgLeagueAdminList();

  CMsgLeagueAdminList(const CMsgLeagueAdminList& from);

  inline CMsgLeagueAdminList& operator=(const CMsgLeagueAdminList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeagueAdminList(CMsgLeagueAdminList&& from) noexcept
    : CMsgLeagueAdminList() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueAdminList& operator=(CMsgLeagueAdminList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLeagueAdminList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeagueAdminList* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueAdminList*>(
               &_CMsgLeagueAdminList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CMsgLeagueAdminList* other);
  friend void swap(CMsgLeagueAdminList& a, CMsgLeagueAdminList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeagueAdminList* New() const final {
    return CreateMaybeMessage<CMsgLeagueAdminList>(nullptr);
  }

  CMsgLeagueAdminList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLeagueAdminList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLeagueAdminList& from);
  void MergeFrom(const CMsgLeagueAdminList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeagueAdminList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  ::google::protobuf::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::google::protobuf::uint32 value);
  void add_account_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLeagueAdminList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CCompendiumTimestampedData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CCompendiumTimestampedData) */ {
 public:
  CCompendiumTimestampedData();
  virtual ~CCompendiumTimestampedData();

  CCompendiumTimestampedData(const CCompendiumTimestampedData& from);

  inline CCompendiumTimestampedData& operator=(const CCompendiumTimestampedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCompendiumTimestampedData(CCompendiumTimestampedData&& from) noexcept
    : CCompendiumTimestampedData() {
    *this = ::std::move(from);
  }

  inline CCompendiumTimestampedData& operator=(CCompendiumTimestampedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCompendiumTimestampedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCompendiumTimestampedData* internal_default_instance() {
    return reinterpret_cast<const CCompendiumTimestampedData*>(
               &_CCompendiumTimestampedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CCompendiumTimestampedData* other);
  friend void swap(CCompendiumTimestampedData& a, CCompendiumTimestampedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCompendiumTimestampedData* New() const final {
    return CreateMaybeMessage<CCompendiumTimestampedData>(nullptr);
  }

  CCompendiumTimestampedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCompendiumTimestampedData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCompendiumTimestampedData& from);
  void MergeFrom(const CCompendiumTimestampedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCompendiumTimestampedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 item_purchases = 6;
  int item_purchases_size() const;
  void clear_item_purchases();
  static const int kItemPurchasesFieldNumber = 6;
  ::google::protobuf::uint32 item_purchases(int index) const;
  void set_item_purchases(int index, ::google::protobuf::uint32 value);
  void add_item_purchases(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_purchases() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_purchases();

  // optional uint32 game_time = 1;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 gpm = 2;
  bool has_gpm() const;
  void clear_gpm();
  static const int kGpmFieldNumber = 2;
  ::google::protobuf::uint32 gpm() const;
  void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 xpm = 3;
  bool has_xpm() const;
  void clear_xpm();
  static const int kXpmFieldNumber = 3;
  ::google::protobuf::uint32 xpm() const;
  void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 kills = 4;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 4;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 5;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 5;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CCompendiumTimestampedData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_purchases_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CCompendiumGameTimeline final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CCompendiumGameTimeline) */ {
 public:
  CCompendiumGameTimeline();
  virtual ~CCompendiumGameTimeline();

  CCompendiumGameTimeline(const CCompendiumGameTimeline& from);

  inline CCompendiumGameTimeline& operator=(const CCompendiumGameTimeline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCompendiumGameTimeline(CCompendiumGameTimeline&& from) noexcept
    : CCompendiumGameTimeline() {
    *this = ::std::move(from);
  }

  inline CCompendiumGameTimeline& operator=(CCompendiumGameTimeline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCompendiumGameTimeline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCompendiumGameTimeline* internal_default_instance() {
    return reinterpret_cast<const CCompendiumGameTimeline*>(
               &_CCompendiumGameTimeline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CCompendiumGameTimeline* other);
  friend void swap(CCompendiumGameTimeline& a, CCompendiumGameTimeline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCompendiumGameTimeline* New() const final {
    return CreateMaybeMessage<CCompendiumGameTimeline>(nullptr);
  }

  CCompendiumGameTimeline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCompendiumGameTimeline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCompendiumGameTimeline& from);
  void MergeFrom(const CCompendiumGameTimeline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCompendiumGameTimeline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::proto::dota::CCompendiumTimestampedData* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >*
      mutable_data();
  const ::proto::dota::CCompendiumTimestampedData& data(int index) const;
  ::proto::dota::CCompendiumTimestampedData* add_data();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >&
      data() const;

  // repeated string tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:proto.dota.CCompendiumGameTimeline)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData > data_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CCompendiumGameList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CCompendiumGameList) */ {
 public:
  CCompendiumGameList();
  virtual ~CCompendiumGameList();

  CCompendiumGameList(const CCompendiumGameList& from);

  inline CCompendiumGameList& operator=(const CCompendiumGameList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCompendiumGameList(CCompendiumGameList&& from) noexcept
    : CCompendiumGameList() {
    *this = ::std::move(from);
  }

  inline CCompendiumGameList& operator=(CCompendiumGameList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CCompendiumGameList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCompendiumGameList* internal_default_instance() {
    return reinterpret_cast<const CCompendiumGameList*>(
               &_CCompendiumGameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CCompendiumGameList* other);
  friend void swap(CCompendiumGameList& a, CCompendiumGameList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCompendiumGameList* New() const final {
    return CreateMaybeMessage<CCompendiumGameList>(nullptr);
  }

  CCompendiumGameList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCompendiumGameList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CCompendiumGameList& from);
  void MergeFrom(const CCompendiumGameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCompendiumGameList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  ::proto::dota::CCompendiumGameTimeline* mutable_games(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >*
      mutable_games();
  const ::proto::dota::CCompendiumGameTimeline& games(int index) const;
  ::proto::dota::CCompendiumGameTimeline* add_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >&
      games() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CCompendiumGameList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline > games_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CAdditionalEquipSlot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CAdditionalEquipSlot) */ {
 public:
  CAdditionalEquipSlot();
  virtual ~CAdditionalEquipSlot();

  CAdditionalEquipSlot(const CAdditionalEquipSlot& from);

  inline CAdditionalEquipSlot& operator=(const CAdditionalEquipSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAdditionalEquipSlot(CAdditionalEquipSlot&& from) noexcept
    : CAdditionalEquipSlot() {
    *this = ::std::move(from);
  }

  inline CAdditionalEquipSlot& operator=(CAdditionalEquipSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CAdditionalEquipSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAdditionalEquipSlot* internal_default_instance() {
    return reinterpret_cast<const CAdditionalEquipSlot*>(
               &_CAdditionalEquipSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CAdditionalEquipSlot* other);
  friend void swap(CAdditionalEquipSlot& a, CAdditionalEquipSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAdditionalEquipSlot* New() const final {
    return CreateMaybeMessage<CAdditionalEquipSlot>(nullptr);
  }

  CAdditionalEquipSlot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CAdditionalEquipSlot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CAdditionalEquipSlot& from);
  void MergeFrom(const CAdditionalEquipSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAdditionalEquipSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 class_id = 1;
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  ::google::protobuf::uint32 class_id() const;
  void set_class_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 2;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 2;
  ::google::protobuf::uint32 slot_id() const;
  void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 def_index = 3;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 3;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CAdditionalEquipSlot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 class_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 def_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Trophy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Trophy) */ {
 public:
  CMsgDOTAProfileCard_Slot_Trophy();
  virtual ~CMsgDOTAProfileCard_Slot_Trophy();

  CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from);

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Trophy(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Trophy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Trophy*>(
               &_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CMsgDOTAProfileCard_Slot_Trophy* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Trophy& a, CMsgDOTAProfileCard_Slot_Trophy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Trophy* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Trophy>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Trophy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Trophy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 trophy_id = 1;
  bool has_trophy_id() const;
  void clear_trophy_id();
  static const int kTrophyIdFieldNumber = 1;
  ::google::protobuf::uint32 trophy_id() const;
  void set_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 trophy_score = 2;
  bool has_trophy_score() const;
  void clear_trophy_score();
  static const int kTrophyScoreFieldNumber = 2;
  ::google::protobuf::uint32 trophy_score() const;
  void set_trophy_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 trophy_id_;
  ::google::protobuf::uint32 trophy_score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Stat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Stat) */ {
 public:
  CMsgDOTAProfileCard_Slot_Stat();
  virtual ~CMsgDOTAProfileCard_Slot_Stat();

  CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from);

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(const CMsgDOTAProfileCard_Slot_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Stat(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Stat() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Stat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Stat* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Stat*>(
               &_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CMsgDOTAProfileCard_Slot_Stat* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Stat& a, CMsgDOTAProfileCard_Slot_Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Stat* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Stat>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Stat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Stat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stat_score = 2;
  bool has_stat_score() const;
  void clear_stat_score();
  static const int kStatScoreFieldNumber = 2;
  ::google::protobuf::uint32 stat_score() const;
  void set_stat_score(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  bool has_stat_id() const;
  void clear_stat_id();
  static const int kStatIdFieldNumber = 1;
  ::proto::dota::CMsgDOTAProfileCard_EStatID stat_id() const;
  void set_stat_id(::proto::dota::CMsgDOTAProfileCard_EStatID value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 stat_score_;
  int stat_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Item) */ {
 public:
  CMsgDOTAProfileCard_Slot_Item();
  virtual ~CMsgDOTAProfileCard_Slot_Item();

  CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from);

  inline CMsgDOTAProfileCard_Slot_Item& operator=(const CMsgDOTAProfileCard_Slot_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Item(CMsgDOTAProfileCard_Slot_Item&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Item() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Item& operator=(CMsgDOTAProfileCard_Slot_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Item*>(
               &_CMsgDOTAProfileCard_Slot_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CMsgDOTAProfileCard_Slot_Item* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Item& a, CMsgDOTAProfileCard_Slot_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Item* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Item>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialized_item = 1;
  bool has_serialized_item() const;
  void clear_serialized_item();
  static const int kSerializedItemFieldNumber = 1;
  const ::std::string& serialized_item() const;
  void set_serialized_item(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_item(::std::string&& value);
  #endif
  void set_serialized_item(const char* value);
  void set_serialized_item(const void* value, size_t size);
  ::std::string* mutable_serialized_item();
  ::std::string* release_serialized_item();
  void set_allocated_serialized_item(::std::string* serialized_item);

  // optional uint64 item_id = 2;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Item)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serialized_item_;
  ::google::protobuf::uint64 item_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Hero final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Hero) */ {
 public:
  CMsgDOTAProfileCard_Slot_Hero();
  virtual ~CMsgDOTAProfileCard_Slot_Hero();

  CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from);

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(const CMsgDOTAProfileCard_Slot_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Hero(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Hero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Hero*>(
               &_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(CMsgDOTAProfileCard_Slot_Hero* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Hero& a, CMsgDOTAProfileCard_Slot_Hero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Hero* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Hero>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Hero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Hero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 hero_wins = 2;
  bool has_hero_wins() const;
  void clear_hero_wins();
  static const int kHeroWinsFieldNumber = 2;
  ::google::protobuf::uint32 hero_wins() const;
  void set_hero_wins(::google::protobuf::uint32 value);

  // optional uint32 hero_losses = 3;
  bool has_hero_losses() const;
  void clear_hero_losses();
  static const int kHeroLossesFieldNumber = 3;
  ::google::protobuf::uint32 hero_losses() const;
  void set_hero_losses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 hero_wins_;
  ::google::protobuf::uint32 hero_losses_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Emoticon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon) */ {
 public:
  CMsgDOTAProfileCard_Slot_Emoticon();
  virtual ~CMsgDOTAProfileCard_Slot_Emoticon();

  CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from);

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Emoticon(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Emoticon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Emoticon*>(
               &_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CMsgDOTAProfileCard_Slot_Emoticon* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Emoticon& a, CMsgDOTAProfileCard_Slot_Emoticon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Emoticon* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Emoticon>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Emoticon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Emoticon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 emoticon_id = 1;
  bool has_emoticon_id() const;
  void clear_emoticon_id();
  static const int kEmoticonIdFieldNumber = 1;
  ::google::protobuf::uint32 emoticon_id() const;
  void set_emoticon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 emoticon_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Team final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot.Team) */ {
 public:
  CMsgDOTAProfileCard_Slot_Team();
  virtual ~CMsgDOTAProfileCard_Slot_Team();

  CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from);

  inline CMsgDOTAProfileCard_Slot_Team& operator=(const CMsgDOTAProfileCard_Slot_Team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot_Team(CMsgDOTAProfileCard_Slot_Team&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Team& operator=(CMsgDOTAProfileCard_Slot_Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot_Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Team*>(
               &_CMsgDOTAProfileCard_Slot_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CMsgDOTAProfileCard_Slot_Team* other);
  friend void swap(CMsgDOTAProfileCard_Slot_Team& a, CMsgDOTAProfileCard_Slot_Team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot_Team* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Team>(nullptr);
  }

  CMsgDOTAProfileCard_Slot_Team* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Team>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot.Team)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard.Slot) */ {
 public:
  CMsgDOTAProfileCard_Slot();
  virtual ~CMsgDOTAProfileCard_Slot();

  CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from);

  inline CMsgDOTAProfileCard_Slot& operator=(const CMsgDOTAProfileCard_Slot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard_Slot(CMsgDOTAProfileCard_Slot&& from) noexcept
    : CMsgDOTAProfileCard_Slot() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot& operator=(CMsgDOTAProfileCard_Slot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard_Slot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard_Slot* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot*>(
               &_CMsgDOTAProfileCard_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(CMsgDOTAProfileCard_Slot* other);
  friend void swap(CMsgDOTAProfileCard_Slot& a, CMsgDOTAProfileCard_Slot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard_Slot* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot>(nullptr);
  }

  CMsgDOTAProfileCard_Slot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard_Slot& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot_Trophy Trophy;
  typedef CMsgDOTAProfileCard_Slot_Stat Stat;
  typedef CMsgDOTAProfileCard_Slot_Item Item;
  typedef CMsgDOTAProfileCard_Slot_Hero Hero;
  typedef CMsgDOTAProfileCard_Slot_Emoticon Emoticon;
  typedef CMsgDOTAProfileCard_Slot_Team Team;

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  bool has_trophy() const;
  void clear_trophy();
  static const int kTrophyFieldNumber = 2;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy& trophy() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* release_trophy();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* mutable_trophy();
  void set_allocated_trophy(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* trophy);

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 3;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat& stat() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* release_stat();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* mutable_stat();
  void set_allocated_stat(::proto::dota::CMsgDOTAProfileCard_Slot_Stat* stat);

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Item& item() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item* release_item();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item* mutable_item();
  void set_allocated_item(::proto::dota::CMsgDOTAProfileCard_Slot_Item* item);

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 5;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero& hero() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* release_hero();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* mutable_hero();
  void set_allocated_hero(::proto::dota::CMsgDOTAProfileCard_Slot_Hero* hero);

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  bool has_emoticon() const;
  void clear_emoticon();
  static const int kEmoticonFieldNumber = 6;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon& emoticon() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* release_emoticon();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 7;
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Team& team() const;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team* release_team();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team* mutable_team();
  void set_allocated_team(::proto::dota::CMsgDOTAProfileCard_Slot_Team* team);

  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  ::google::protobuf::uint32 slot_id() const;
  void set_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard.Slot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* trophy_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* stat_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item* item_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* hero_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* emoticon_;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team* team_;
  ::google::protobuf::uint32 slot_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProfileCard) */ {
 public:
  CMsgDOTAProfileCard();
  virtual ~CMsgDOTAProfileCard();

  CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from);

  inline CMsgDOTAProfileCard& operator=(const CMsgDOTAProfileCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileCard(CMsgDOTAProfileCard&& from) noexcept
    : CMsgDOTAProfileCard() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard& operator=(CMsgDOTAProfileCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAProfileCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileCard* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard*>(
               &_CMsgDOTAProfileCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CMsgDOTAProfileCard* other);
  friend void swap(CMsgDOTAProfileCard& a, CMsgDOTAProfileCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileCard* New() const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard>(nullptr);
  }

  CMsgDOTAProfileCard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAProfileCard& from);
  void MergeFrom(const CMsgDOTAProfileCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot Slot;

  typedef CMsgDOTAProfileCard_EStatID EStatID;
  static const EStatID k_eStat_SoloRank =
    CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
  static const EStatID k_eStat_PartyRank =
    CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank;
  static const EStatID k_eStat_Wins =
    CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
  static const EStatID k_eStat_Commends =
    CMsgDOTAProfileCard_EStatID_k_eStat_Commends;
  static const EStatID k_eStat_GamesPlayed =
    CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed;
  static const EStatID k_eStat_FirstMatchDate =
    CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
  static const EStatID k_eStat_PreviousSeasonRank =
    CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank;
  static inline bool EStatID_IsValid(int value) {
    return CMsgDOTAProfileCard_EStatID_IsValid(value);
  }
  static const EStatID EStatID_MIN =
    CMsgDOTAProfileCard_EStatID_EStatID_MIN;
  static const EStatID EStatID_MAX =
    CMsgDOTAProfileCard_EStatID_EStatID_MAX;
  static const int EStatID_ARRAYSIZE =
    CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EStatID_descriptor() {
    return CMsgDOTAProfileCard_EStatID_descriptor();
  }
  static inline const ::std::string& EStatID_Name(EStatID value) {
    return CMsgDOTAProfileCard_EStatID_Name(value);
  }
  static inline bool EStatID_Parse(const ::std::string& name,
      EStatID* value) {
    return CMsgDOTAProfileCard_EStatID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  int slots_size() const;
  void clear_slots();
  static const int kSlotsFieldNumber = 3;
  ::proto::dota::CMsgDOTAProfileCard_Slot* mutable_slots(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >*
      mutable_slots();
  const ::proto::dota::CMsgDOTAProfileCard_Slot& slots(int index) const;
  ::proto::dota::CMsgDOTAProfileCard_Slot* add_slots();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >&
      slots() const;

  // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
  bool has_recent_battle_cup_victory() const;
  void clear_recent_battle_cup_victory();
  static const int kRecentBattleCupVictoryFieldNumber = 7;
  const ::proto::dota::CMsgBattleCupVictory& recent_battle_cup_victory() const;
  ::proto::dota::CMsgBattleCupVictory* release_recent_battle_cup_victory();
  ::proto::dota::CMsgBattleCupVictory* mutable_recent_battle_cup_victory();
  void set_allocated_recent_battle_cup_victory(::proto::dota::CMsgBattleCupVictory* recent_battle_cup_victory);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 background_def_index = 2;
  bool has_background_def_index() const;
  void clear_background_def_index();
  static const int kBackgroundDefIndexFieldNumber = 2;
  ::google::protobuf::uint32 background_def_index() const;
  void set_background_def_index(::google::protobuf::uint32 value);

  // optional uint32 badge_points = 4;
  bool has_badge_points() const;
  void clear_badge_points();
  static const int kBadgePointsFieldNumber = 4;
  ::google::protobuf::uint32 badge_points() const;
  void set_badge_points(::google::protobuf::uint32 value);

  // optional uint32 event_points = 5;
  bool has_event_points() const;
  void clear_event_points();
  static const int kEventPointsFieldNumber = 5;
  ::google::protobuf::uint32 event_points() const;
  void set_event_points(::google::protobuf::uint32 value);

  // optional uint32 event_id = 6;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 6;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 rank_tier = 8;
  bool has_rank_tier() const;
  void clear_rank_tier();
  static const int kRankTierFieldNumber = 8;
  ::google::protobuf::uint32 rank_tier() const;
  void set_rank_tier(::google::protobuf::uint32 value);

  // optional uint32 leaderboard_rank = 9;
  bool has_leaderboard_rank() const;
  void clear_leaderboard_rank();
  static const int kLeaderboardRankFieldNumber = 9;
  ::google::protobuf::uint32 leaderboard_rank() const;
  void set_leaderboard_rank(::google::protobuf::uint32 value);

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  void clear_is_plus_subscriber();
  static const int kIsPlusSubscriberFieldNumber = 10;
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);

  // optional uint32 plus_original_start_date = 11;
  bool has_plus_original_start_date() const;
  void clear_plus_original_start_date();
  static const int kPlusOriginalStartDateFieldNumber = 11;
  ::google::protobuf::uint32 plus_original_start_date() const;
  void set_plus_original_start_date(::google::protobuf::uint32 value);

  // optional uint32 rank_tier_score = 12;
  bool has_rank_tier_score() const;
  void clear_rank_tier_score();
  static const int kRankTierScoreFieldNumber = 12;
  ::google::protobuf::uint32 rank_tier_score() const;
  void set_rank_tier_score(::google::protobuf::uint32 value);

  // optional uint32 previous_rank_tier = 13;
  bool has_previous_rank_tier() const;
  void clear_previous_rank_tier();
  static const int kPreviousRankTierFieldNumber = 13;
  ::google::protobuf::uint32 previous_rank_tier() const;
  void set_previous_rank_tier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProfileCard)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot > slots_;
  ::proto::dota::CMsgBattleCupVictory* recent_battle_cup_victory_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 background_def_index_;
  ::google::protobuf::uint32 badge_points_;
  ::google::protobuf::uint32 event_points_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 rank_tier_;
  ::google::protobuf::uint32 leaderboard_rank_;
  bool is_plus_subscriber_;
  ::google::protobuf::uint32 plus_original_start_date_;
  ::google::protobuf::uint32 rank_tier_score_;
  ::google::protobuf::uint32 previous_rank_tier_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPlayerChallenge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAPlayerChallenge) */ {
 public:
  CSODOTAPlayerChallenge();
  virtual ~CSODOTAPlayerChallenge();

  CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from);

  inline CSODOTAPlayerChallenge& operator=(const CSODOTAPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPlayerChallenge(CSODOTAPlayerChallenge&& from) noexcept
    : CSODOTAPlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CSODOTAPlayerChallenge& operator=(CSODOTAPlayerChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAPlayerChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPlayerChallenge*>(
               &_CSODOTAPlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CSODOTAPlayerChallenge* other);
  friend void swap(CSODOTAPlayerChallenge& a, CSODOTAPlayerChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPlayerChallenge* New() const final {
    return CreateMaybeMessage<CSODOTAPlayerChallenge>(nullptr);
  }

  CSODOTAPlayerChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPlayerChallenge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAPlayerChallenge& from);
  void MergeFrom(const CSODOTAPlayerChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPlayerChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  ::google::protobuf::uint32 slot_id() const;
  void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 int_param_0 = 5;
  bool has_int_param_0() const;
  void clear_int_param_0();
  static const int kIntParam0FieldNumber = 5;
  ::google::protobuf::uint32 int_param_0() const;
  void set_int_param_0(::google::protobuf::uint32 value);

  // optional uint32 int_param_1 = 6;
  bool has_int_param_1() const;
  void clear_int_param_1();
  static const int kIntParam1FieldNumber = 6;
  ::google::protobuf::uint32 int_param_1() const;
  void set_int_param_1(::google::protobuf::uint32 value);

  // optional uint32 created_time = 7;
  bool has_created_time() const;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  ::google::protobuf::uint32 created_time() const;
  void set_created_time(::google::protobuf::uint32 value);

  // optional uint32 completed = 8;
  bool has_completed() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 8;
  ::google::protobuf::uint32 completed() const;
  void set_completed(::google::protobuf::uint32 value);

  // optional uint32 sequence_id = 9;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 9;
  ::google::protobuf::uint32 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_tier = 10;
  bool has_challenge_tier() const;
  void clear_challenge_tier();
  static const int kChallengeTierFieldNumber = 10;
  ::google::protobuf::uint32 challenge_tier() const;
  void set_challenge_tier(::google::protobuf::uint32 value);

  // optional uint32 flags = 11;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 11;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 attempts = 12;
  bool has_attempts() const;
  void clear_attempts();
  static const int kAttemptsFieldNumber = 12;
  ::google::protobuf::uint32 attempts() const;
  void set_attempts(::google::protobuf::uint32 value);

  // optional uint32 complete_limit = 13;
  bool has_complete_limit() const;
  void clear_complete_limit();
  static const int kCompleteLimitFieldNumber = 13;
  ::google::protobuf::uint32 complete_limit() const;
  void set_complete_limit(::google::protobuf::uint32 value);

  // optional uint32 quest_rank = 14;
  bool has_quest_rank() const;
  void clear_quest_rank();
  static const int kQuestRankFieldNumber = 14;
  ::google::protobuf::uint32 quest_rank() const;
  void set_quest_rank(::google::protobuf::uint32 value);

  // optional uint32 max_quest_rank = 15;
  bool has_max_quest_rank() const;
  void clear_max_quest_rank();
  static const int kMaxQuestRankFieldNumber = 15;
  ::google::protobuf::uint32 max_quest_rank() const;
  void set_max_quest_rank(::google::protobuf::uint32 value);

  // optional uint32 instance_id = 16;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 16;
  ::google::protobuf::uint32 instance_id() const;
  void set_instance_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 17;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 17;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 template_id = 18;
  bool has_template_id() const;
  void clear_template_id();
  static const int kTemplateIdFieldNumber = 18;
  ::google::protobuf::uint32 template_id() const;
  void set_template_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAPlayerChallenge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 int_param_0_;
  ::google::protobuf::uint32 int_param_1_;
  ::google::protobuf::uint32 created_time_;
  ::google::protobuf::uint32 completed_;
  ::google::protobuf::uint32 sequence_id_;
  ::google::protobuf::uint32 challenge_tier_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 attempts_;
  ::google::protobuf::uint32 complete_limit_;
  ::google::protobuf::uint32 quest_rank_;
  ::google::protobuf::uint32 max_quest_rank_;
  ::google::protobuf::uint32 instance_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 template_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCRerollPlayerChallenge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCRerollPlayerChallenge) */ {
 public:
  CMsgClientToGCRerollPlayerChallenge();
  virtual ~CMsgClientToGCRerollPlayerChallenge();

  CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from);

  inline CMsgClientToGCRerollPlayerChallenge& operator=(const CMsgClientToGCRerollPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCRerollPlayerChallenge(CMsgClientToGCRerollPlayerChallenge&& from) noexcept
    : CMsgClientToGCRerollPlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCRerollPlayerChallenge& operator=(CMsgClientToGCRerollPlayerChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCRerollPlayerChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCRerollPlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCRerollPlayerChallenge*>(
               &_CMsgClientToGCRerollPlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CMsgClientToGCRerollPlayerChallenge* other);
  friend void swap(CMsgClientToGCRerollPlayerChallenge& a, CMsgClientToGCRerollPlayerChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCRerollPlayerChallenge* New() const final {
    return CreateMaybeMessage<CMsgClientToGCRerollPlayerChallenge>(nullptr);
  }

  CMsgClientToGCRerollPlayerChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCRerollPlayerChallenge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  void MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCRerollPlayerChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::proto::dota::EEvent event_id() const;
  void set_event_id(::proto::dota::EEvent value);

  // optional uint32 sequence_id = 3;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 3;
  ::google::protobuf::uint32 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCRerollPlayerChallenge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int event_id_;
  ::google::protobuf::uint32 sequence_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCRerollPlayerChallengeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCRerollPlayerChallengeResponse) */ {
 public:
  CMsgGCRerollPlayerChallengeResponse();
  virtual ~CMsgGCRerollPlayerChallengeResponse();

  CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from);

  inline CMsgGCRerollPlayerChallengeResponse& operator=(const CMsgGCRerollPlayerChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCRerollPlayerChallengeResponse(CMsgGCRerollPlayerChallengeResponse&& from) noexcept
    : CMsgGCRerollPlayerChallengeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCRerollPlayerChallengeResponse& operator=(CMsgGCRerollPlayerChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCRerollPlayerChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCRerollPlayerChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRerollPlayerChallengeResponse*>(
               &_CMsgGCRerollPlayerChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CMsgGCRerollPlayerChallengeResponse* other);
  friend void swap(CMsgGCRerollPlayerChallengeResponse& a, CMsgGCRerollPlayerChallengeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCRerollPlayerChallengeResponse* New() const final {
    return CreateMaybeMessage<CMsgGCRerollPlayerChallengeResponse>(nullptr);
  }

  CMsgGCRerollPlayerChallengeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCRerollPlayerChallengeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  void MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRerollPlayerChallengeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCRerollPlayerChallengeResponse_EResult EResult;
  static const EResult eResult_Success =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
  static const EResult eResult_Dropped =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped;
  static const EResult eResult_NotFound =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound;
  static const EResult eResult_CantReroll =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll;
  static const EResult eResult_ServerError =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
  static inline bool EResult_IsValid(int value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult result() const;
  void set_result(::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCRerollPlayerChallengeResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCTopCustomGamesList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCTopCustomGamesList) */ {
 public:
  CMsgGCTopCustomGamesList();
  virtual ~CMsgGCTopCustomGamesList();

  CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from);

  inline CMsgGCTopCustomGamesList& operator=(const CMsgGCTopCustomGamesList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCTopCustomGamesList(CMsgGCTopCustomGamesList&& from) noexcept
    : CMsgGCTopCustomGamesList() {
    *this = ::std::move(from);
  }

  inline CMsgGCTopCustomGamesList& operator=(CMsgGCTopCustomGamesList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCTopCustomGamesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCTopCustomGamesList* internal_default_instance() {
    return reinterpret_cast<const CMsgGCTopCustomGamesList*>(
               &_CMsgGCTopCustomGamesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CMsgGCTopCustomGamesList* other);
  friend void swap(CMsgGCTopCustomGamesList& a, CMsgGCTopCustomGamesList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCTopCustomGamesList* New() const final {
    return CreateMaybeMessage<CMsgGCTopCustomGamesList>(nullptr);
  }

  CMsgGCTopCustomGamesList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCTopCustomGamesList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCTopCustomGamesList& from);
  void MergeFrom(const CMsgGCTopCustomGamesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCTopCustomGamesList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 top_custom_games = 1;
  int top_custom_games_size() const;
  void clear_top_custom_games();
  static const int kTopCustomGamesFieldNumber = 1;
  ::google::protobuf::uint64 top_custom_games(int index) const;
  void set_top_custom_games(int index, ::google::protobuf::uint64 value);
  void add_top_custom_games(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_custom_games() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_custom_games();

  // optional uint64 game_of_the_day = 2;
  bool has_game_of_the_day() const;
  void clear_game_of_the_day();
  static const int kGameOfTheDayFieldNumber = 2;
  ::google::protobuf::uint64 game_of_the_day() const;
  void set_game_of_the_day(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCTopCustomGamesList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_custom_games_;
  ::google::protobuf::uint64 game_of_the_day_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_TeamDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStats_TeamDetails();

  CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from);

  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_TeamDetails(CMsgDOTARealtimeGameStats_TeamDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_TeamDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(CMsgDOTARealtimeGameStats_TeamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_TeamDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_TeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_TeamDetails*>(
               &_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CMsgDOTARealtimeGameStats_TeamDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_TeamDetails& a, CMsgDOTARealtimeGameStats_TeamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_TeamDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_TeamDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_TeamDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_TeamDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 6;
  ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >*
      mutable_players();
  const ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails& players(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >&
      players() const;

  // optional string team_name = 3;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 10;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 10;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional string team_logo_url = 11;
  bool has_team_logo_url() const;
  void clear_team_logo_url();
  static const int kTeamLogoUrlFieldNumber = 11;
  const ::std::string& team_logo_url() const;
  void set_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_team_logo_url(::std::string&& value);
  #endif
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_team_logo_url();
  ::std::string* release_team_logo_url();
  void set_allocated_team_logo_url(::std::string* team_logo_url);

  // optional uint32 team_number = 1;
  bool has_team_number() const;
  void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  ::google::protobuf::uint32 team_number() const;
  void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional fixed64 team_logo = 4;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // optional bool only_team = 7;
  bool has_only_team() const;
  void clear_only_team();
  static const int kOnlyTeamFieldNumber = 7;
  bool only_team() const;
  void set_only_team(bool value);

  // optional uint32 cheers = 8;
  bool has_cheers() const;
  void clear_cheers();
  static const int kCheersFieldNumber = 8;
  ::google::protobuf::uint32 cheers() const;
  void set_cheers(::google::protobuf::uint32 value);

  // optional uint32 net_worth = 9;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 9;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails > players_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::internal::ArenaStringPtr team_logo_url_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint32 score_;
  bool only_team_;
  ::google::protobuf::uint32 cheers_;
  ::google::protobuf::uint32 net_worth_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_ItemDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_ItemDetails();
  virtual ~CMsgDOTARealtimeGameStats_ItemDetails();

  CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from);

  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_ItemDetails(CMsgDOTARealtimeGameStats_ItemDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_ItemDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(CMsgDOTARealtimeGameStats_ItemDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_ItemDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_ItemDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_ItemDetails*>(
               &_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(CMsgDOTARealtimeGameStats_ItemDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_ItemDetails& a, CMsgDOTARealtimeGameStats_ItemDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_ItemDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_ItemDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_ItemDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_ItemDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 item_ability_id = 1;
  bool has_item_ability_id() const;
  void clear_item_ability_id();
  static const int kItemAbilityIdFieldNumber = 1;
  ::google::protobuf::uint32 item_ability_id() const;
  void set_item_ability_id(::google::protobuf::uint32 value);

  // optional int32 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional bool sold = 4;
  bool has_sold() const;
  void clear_sold();
  static const int kSoldFieldNumber = 4;
  bool sold() const;
  void set_sold(bool value);

  // optional uint32 stackcount = 5;
  bool has_stackcount() const;
  void clear_stackcount();
  static const int kStackcountFieldNumber = 5;
  ::google::protobuf::uint32 stackcount() const;
  void set_stackcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 item_ability_id_;
  ::google::protobuf::int32 time_;
  bool sold_;
  ::google::protobuf::uint32 stackcount_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_AbilityDetails();
  virtual ~CMsgDOTARealtimeGameStats_AbilityDetails();

  CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from);

  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_AbilityDetails(CMsgDOTARealtimeGameStats_AbilityDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_AbilityDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(CMsgDOTARealtimeGameStats_AbilityDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_AbilityDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_AbilityDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_AbilityDetails*>(
               &_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_AbilityDetails& a, CMsgDOTARealtimeGameStats_AbilityDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_AbilityDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_AbilityDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional float cooldown = 4;
  bool has_cooldown() const;
  void clear_cooldown();
  static const int kCooldownFieldNumber = 4;
  float cooldown() const;
  void set_cooldown(float value);

  // optional float cooldown_max = 5;
  bool has_cooldown_max() const;
  void clear_cooldown_max();
  static const int kCooldownMaxFieldNumber = 5;
  float cooldown_max() const;
  void set_cooldown_max(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  float cooldown_;
  float cooldown_max_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_HeroToHeroStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats) */ {
 public:
  CMsgDOTARealtimeGameStats_HeroToHeroStats();
  virtual ~CMsgDOTARealtimeGameStats_HeroToHeroStats();

  CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_HeroToHeroStats(CMsgDOTARealtimeGameStats_HeroToHeroStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_HeroToHeroStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(CMsgDOTARealtimeGameStats_HeroToHeroStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_HeroToHeroStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_HeroToHeroStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_HeroToHeroStats*>(
               &_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other);
  friend void swap(CMsgDOTARealtimeGameStats_HeroToHeroStats& a, CMsgDOTARealtimeGameStats_HeroToHeroStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_HeroToHeroStats>(nullptr);
  }

  CMsgDOTARealtimeGameStats_HeroToHeroStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_HeroToHeroStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victimid = 1;
  bool has_victimid() const;
  void clear_victimid();
  static const int kVictimidFieldNumber = 1;
  ::google::protobuf::uint32 victimid() const;
  void set_victimid(::google::protobuf::uint32 value);

  // optional uint32 kills = 2;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 2;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 assists = 3;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 3;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 victimid_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 assists_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.AbilityList) */ {
 public:
  CMsgDOTARealtimeGameStats_AbilityList();
  virtual ~CMsgDOTARealtimeGameStats_AbilityList();

  CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from);

  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(const CMsgDOTARealtimeGameStats_AbilityList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_AbilityList(CMsgDOTARealtimeGameStats_AbilityList&& from) noexcept
    : CMsgDOTARealtimeGameStats_AbilityList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(CMsgDOTARealtimeGameStats_AbilityList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_AbilityList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_AbilityList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_AbilityList*>(
               &_CMsgDOTARealtimeGameStats_AbilityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(CMsgDOTARealtimeGameStats_AbilityList* other);
  friend void swap(CMsgDOTARealtimeGameStats_AbilityList& a, CMsgDOTARealtimeGameStats_AbilityList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_AbilityList* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityList>(nullptr);
  }

  CMsgDOTARealtimeGameStats_AbilityList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id(int index) const;
  void set_id(int index, ::google::protobuf::uint32 value);
  void add_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PlayerDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStats_PlayerDetails();

  CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_PlayerDetails(CMsgDOTARealtimeGameStats_PlayerDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_PlayerDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(CMsgDOTARealtimeGameStats_PlayerDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_PlayerDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_PlayerDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_PlayerDetails*>(
               &_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_PlayerDetails& a, CMsgDOTARealtimeGameStats_PlayerDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_PlayerDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PlayerDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_PlayerDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PlayerDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  int abilities_size() const;
  void clear_abilities();
  static const int kAbilitiesFieldNumber = 26;
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* mutable_abilities(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >*
      mutable_abilities();
  const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails& abilities(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* add_abilities();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >&
      abilities() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 43;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_items();
  const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& items(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* add_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
      items() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  int stashitems_size() const;
  void clear_stashitems();
  static const int kStashitemsFieldNumber = 44;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* mutable_stashitems(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_stashitems();
  const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& stashitems(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* add_stashitems();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
      stashitems() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  int itemshoppinglist_size() const;
  void clear_itemshoppinglist();
  static const int kItemshoppinglistFieldNumber = 45;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* mutable_itemshoppinglist(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_itemshoppinglist();
  const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& itemshoppinglist(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* add_itemshoppinglist();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
      itemshoppinglist() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  int levelpoints_size() const;
  void clear_levelpoints();
  static const int kLevelpointsFieldNumber = 46;
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* mutable_levelpoints(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >*
      mutable_levelpoints();
  const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList& levelpoints(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* add_levelpoints();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >&
      levelpoints() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  int hero_to_hero_stats_size() const;
  void clear_hero_to_hero_stats();
  static const int kHeroToHeroStatsFieldNumber = 47;
  ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* mutable_hero_to_hero_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
      mutable_hero_to_hero_stats();
  const ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats& hero_to_hero_stats(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* add_hero_to_hero_stats();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
      hero_to_hero_stats() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint32 playerid() const;
  void set_playerid(::google::protobuf::uint32 value);

  // optional uint32 team = 4;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 4;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  ::google::protobuf::uint32 heroid() const;
  void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 healthpoints = 6;
  bool has_healthpoints() const;
  void clear_healthpoints();
  static const int kHealthpointsFieldNumber = 6;
  ::google::protobuf::uint32 healthpoints() const;
  void set_healthpoints(::google::protobuf::uint32 value);

  // optional uint32 maxhealthpoints = 7;
  bool has_maxhealthpoints() const;
  void clear_maxhealthpoints();
  static const int kMaxhealthpointsFieldNumber = 7;
  ::google::protobuf::uint32 maxhealthpoints() const;
  void set_maxhealthpoints(::google::protobuf::uint32 value);

  // optional float healthregenrate = 8;
  bool has_healthregenrate() const;
  void clear_healthregenrate();
  static const int kHealthregenrateFieldNumber = 8;
  float healthregenrate() const;
  void set_healthregenrate(float value);

  // optional uint32 manapoints = 9;
  bool has_manapoints() const;
  void clear_manapoints();
  static const int kManapointsFieldNumber = 9;
  ::google::protobuf::uint32 manapoints() const;
  void set_manapoints(::google::protobuf::uint32 value);

  // optional uint32 maxmanapoints = 10;
  bool has_maxmanapoints() const;
  void clear_maxmanapoints();
  static const int kMaxmanapointsFieldNumber = 10;
  ::google::protobuf::uint32 maxmanapoints() const;
  void set_maxmanapoints(::google::protobuf::uint32 value);

  // optional float manaregenrate = 11;
  bool has_manaregenrate() const;
  void clear_manaregenrate();
  static const int kManaregenrateFieldNumber = 11;
  float manaregenrate() const;
  void set_manaregenrate(float value);

  // optional uint32 base_strength = 12;
  bool has_base_strength() const;
  void clear_base_strength();
  static const int kBaseStrengthFieldNumber = 12;
  ::google::protobuf::uint32 base_strength() const;
  void set_base_strength(::google::protobuf::uint32 value);

  // optional uint32 base_agility = 13;
  bool has_base_agility() const;
  void clear_base_agility();
  static const int kBaseAgilityFieldNumber = 13;
  ::google::protobuf::uint32 base_agility() const;
  void set_base_agility(::google::protobuf::uint32 value);

  // optional uint32 base_intelligence = 14;
  bool has_base_intelligence() const;
  void clear_base_intelligence();
  static const int kBaseIntelligenceFieldNumber = 14;
  ::google::protobuf::uint32 base_intelligence() const;
  void set_base_intelligence(::google::protobuf::uint32 value);

  // optional int32 base_armor = 15;
  bool has_base_armor() const;
  void clear_base_armor();
  static const int kBaseArmorFieldNumber = 15;
  ::google::protobuf::int32 base_armor() const;
  void set_base_armor(::google::protobuf::int32 value);

  // optional uint32 base_movespeed = 16;
  bool has_base_movespeed() const;
  void clear_base_movespeed();
  static const int kBaseMovespeedFieldNumber = 16;
  ::google::protobuf::uint32 base_movespeed() const;
  void set_base_movespeed(::google::protobuf::uint32 value);

  // optional uint32 base_damage = 17;
  bool has_base_damage() const;
  void clear_base_damage();
  static const int kBaseDamageFieldNumber = 17;
  ::google::protobuf::uint32 base_damage() const;
  void set_base_damage(::google::protobuf::uint32 value);

  // optional uint32 strength = 18;
  bool has_strength() const;
  void clear_strength();
  static const int kStrengthFieldNumber = 18;
  ::google::protobuf::uint32 strength() const;
  void set_strength(::google::protobuf::uint32 value);

  // optional uint32 agility = 19;
  bool has_agility() const;
  void clear_agility();
  static const int kAgilityFieldNumber = 19;
  ::google::protobuf::uint32 agility() const;
  void set_agility(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 20;
  bool has_intelligence() const;
  void clear_intelligence();
  static const int kIntelligenceFieldNumber = 20;
  ::google::protobuf::uint32 intelligence() const;
  void set_intelligence(::google::protobuf::uint32 value);

  // optional int32 armor = 21;
  bool has_armor() const;
  void clear_armor();
  static const int kArmorFieldNumber = 21;
  ::google::protobuf::int32 armor() const;
  void set_armor(::google::protobuf::int32 value);

  // optional uint32 movespeed = 22;
  bool has_movespeed() const;
  void clear_movespeed();
  static const int kMovespeedFieldNumber = 22;
  ::google::protobuf::uint32 movespeed() const;
  void set_movespeed(::google::protobuf::uint32 value);

  // optional uint32 damage = 23;
  bool has_damage() const;
  void clear_damage();
  static const int kDamageFieldNumber = 23;
  ::google::protobuf::uint32 damage() const;
  void set_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  bool has_hero_damage() const;
  void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  ::google::protobuf::uint32 hero_damage() const;
  void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  bool has_tower_damage() const;
  void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  ::google::protobuf::uint32 tower_damage() const;
  void set_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 level = 27;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 27;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 28;
  bool has_kill_count() const;
  void clear_kill_count();
  static const int kKillCountFieldNumber = 28;
  ::google::protobuf::uint32 kill_count() const;
  void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 29;
  bool has_death_count() const;
  void clear_death_count();
  static const int kDeathCountFieldNumber = 29;
  ::google::protobuf::uint32 death_count() const;
  void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 30;
  bool has_assists_count() const;
  void clear_assists_count();
  static const int kAssistsCountFieldNumber = 30;
  ::google::protobuf::uint32 assists_count() const;
  void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 31;
  bool has_denies_count() const;
  void clear_denies_count();
  static const int kDeniesCountFieldNumber = 31;
  ::google::protobuf::uint32 denies_count() const;
  void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 32;
  bool has_lh_count() const;
  void clear_lh_count();
  static const int kLhCountFieldNumber = 32;
  ::google::protobuf::uint32 lh_count() const;
  void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 33;
  bool has_hero_healing() const;
  void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 33;
  ::google::protobuf::uint32 hero_healing() const;
  void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 34;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 34;
  ::google::protobuf::uint32 gold_per_min() const;
  void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 xp_per_min = 35;
  bool has_xp_per_min() const;
  void clear_xp_per_min();
  static const int kXpPerMinFieldNumber = 35;
  ::google::protobuf::uint32 xp_per_min() const;
  void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 net_gold = 36;
  bool has_net_gold() const;
  void clear_net_gold();
  static const int kNetGoldFieldNumber = 36;
  ::google::protobuf::uint32 net_gold() const;
  void set_net_gold(::google::protobuf::uint32 value);

  // optional uint32 gold = 37;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 37;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional float x = 38;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 38;
  float x() const;
  void set_x(float value);

  // optional float y = 39;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 39;
  float y() const;
  void set_y(float value);

  // optional int32 respawn_time = 40;
  bool has_respawn_time() const;
  void clear_respawn_time();
  static const int kRespawnTimeFieldNumber = 40;
  ::google::protobuf::int32 respawn_time() const;
  void set_respawn_time(::google::protobuf::int32 value);

  // optional uint32 ultimate_cooldown = 41;
  bool has_ultimate_cooldown() const;
  void clear_ultimate_cooldown();
  static const int kUltimateCooldownFieldNumber = 41;
  ::google::protobuf::uint32 ultimate_cooldown() const;
  void set_ultimate_cooldown(::google::protobuf::uint32 value);

  // optional bool has_buyback = 42;
  bool has_has_buyback() const;
  void clear_has_buyback();
  static const int kHasBuybackFieldNumber = 42;
  bool has_buyback() const;
  void set_has_buyback(bool value);

  // optional bool has_ultimate = 48;
  bool has_has_ultimate() const;
  void clear_has_ultimate();
  static const int kHasUltimateFieldNumber = 48;
  bool has_ultimate() const;
  void set_has_ultimate(bool value);

  // optional bool has_ultimate_mana = 49;
  bool has_has_ultimate_mana() const;
  void clear_has_ultimate_mana();
  static const int kHasUltimateManaFieldNumber = 49;
  bool has_ultimate_mana() const;
  void set_has_ultimate_mana(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails > abilities_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails > items_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails > stashitems_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails > itemshoppinglist_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList > levelpoints_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats > hero_to_hero_stats_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 healthpoints_;
  ::google::protobuf::uint32 maxhealthpoints_;
  float healthregenrate_;
  ::google::protobuf::uint32 manapoints_;
  ::google::protobuf::uint32 maxmanapoints_;
  float manaregenrate_;
  ::google::protobuf::uint32 base_strength_;
  ::google::protobuf::uint32 base_agility_;
  ::google::protobuf::uint32 base_intelligence_;
  ::google::protobuf::int32 base_armor_;
  ::google::protobuf::uint32 base_movespeed_;
  ::google::protobuf::uint32 base_damage_;
  ::google::protobuf::uint32 strength_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::int32 armor_;
  ::google::protobuf::uint32 movespeed_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 net_gold_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  ::google::protobuf::int32 respawn_time_;
  ::google::protobuf::uint32 ultimate_cooldown_;
  bool has_buyback_;
  bool has_ultimate_;
  bool has_ultimate_mana_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BuildingDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStats_BuildingDetails();

  CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_BuildingDetails(CMsgDOTARealtimeGameStats_BuildingDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_BuildingDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(CMsgDOTARealtimeGameStats_BuildingDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_BuildingDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_BuildingDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_BuildingDetails*>(
               &_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_BuildingDetails& a, CMsgDOTARealtimeGameStats_BuildingDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_BuildingDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BuildingDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_BuildingDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BuildingDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional float heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  float heading() const;
  void set_heading(float value);

  // optional uint32 lane = 4;
  bool has_lane() const;
  void clear_lane();
  static const int kLaneFieldNumber = 4;
  ::google::protobuf::uint32 lane() const;
  void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  bool has_tier() const;
  void clear_tier();
  static const int kTierFieldNumber = 5;
  ::google::protobuf::uint32 tier() const;
  void set_tier(::google::protobuf::uint32 value);

  // optional uint32 type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional float x = 7;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 7;
  float x() const;
  void set_x(float value);

  // optional float y = 8;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 8;
  float y() const;
  void set_y(float value);

  // optional bool destroyed = 9;
  bool has_destroyed() const;
  void clear_destroyed();
  static const int kDestroyedFieldNumber = 9;
  bool destroyed() const;
  void set_destroyed(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  ::google::protobuf::uint32 type_;
  float x_;
  float y_;
  bool destroyed_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_KillDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.KillDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_KillDetails();
  virtual ~CMsgDOTARealtimeGameStats_KillDetails();

  CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from);

  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(const CMsgDOTARealtimeGameStats_KillDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_KillDetails(CMsgDOTARealtimeGameStats_KillDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_KillDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(CMsgDOTARealtimeGameStats_KillDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_KillDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_KillDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_KillDetails*>(
               &_CMsgDOTARealtimeGameStats_KillDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(CMsgDOTARealtimeGameStats_KillDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_KillDetails& a, CMsgDOTARealtimeGameStats_KillDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_KillDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_KillDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_KillDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_KillDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::uint32 player_id() const;
  void set_player_id(::google::protobuf::uint32 value);

  // optional int32 death_time = 2;
  bool has_death_time() const;
  void clear_death_time();
  static const int kDeathTimeFieldNumber = 2;
  ::google::protobuf::int32 death_time() const;
  void set_death_time(::google::protobuf::int32 value);

  // optional uint32 killer_player_id = 3;
  bool has_killer_player_id() const;
  void clear_killer_player_id();
  static const int kKillerPlayerIdFieldNumber = 3;
  ::google::protobuf::uint32 killer_player_id() const;
  void set_killer_player_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::int32 death_time_;
  ::google::protobuf::uint32 killer_player_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BroadcasterDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_BroadcasterDetails();
  virtual ~CMsgDOTARealtimeGameStats_BroadcasterDetails();

  CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_BroadcasterDetails(CMsgDOTARealtimeGameStats_BroadcasterDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_BroadcasterDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(CMsgDOTARealtimeGameStats_BroadcasterDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_BroadcasterDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_BroadcasterDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_BroadcasterDetails*>(
               &_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_BroadcasterDetails& a, CMsgDOTARealtimeGameStats_BroadcasterDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BroadcasterDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_BroadcasterDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BroadcasterDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::uint32 player_id() const;
  void set_player_id(::google::protobuf::uint32 value);

  // optional uint32 selected_hero = 2;
  bool has_selected_hero() const;
  void clear_selected_hero();
  static const int kSelectedHeroFieldNumber = 2;
  ::google::protobuf::uint32 selected_hero() const;
  void set_selected_hero(::google::protobuf::uint32 value);

  // optional uint32 selected_graph = 3;
  bool has_selected_graph() const;
  void clear_selected_graph();
  static const int kSelectedGraphFieldNumber = 3;
  ::google::protobuf::uint32 selected_graph() const;
  void set_selected_graph(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 selected_hero_;
  ::google::protobuf::uint32 selected_graph_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PickBanDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_PickBanDetails();
  virtual ~CMsgDOTARealtimeGameStats_PickBanDetails();

  CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from);

  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_PickBanDetails(CMsgDOTARealtimeGameStats_PickBanDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_PickBanDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(CMsgDOTARealtimeGameStats_PickBanDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_PickBanDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_PickBanDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_PickBanDetails*>(
               &_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_PickBanDetails& a, CMsgDOTARealtimeGameStats_PickBanDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_PickBanDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PickBanDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_PickBanDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PickBanDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero = 1;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 1;
  ::google::protobuf::uint32 hero() const;
  void set_hero(::google::protobuf::uint32 value);

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_;
  ::google::protobuf::uint32 team_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_MatchDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails) */ {
 public:
  CMsgDOTARealtimeGameStats_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStats_MatchDetails();

  CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from);

  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_MatchDetails(CMsgDOTARealtimeGameStats_MatchDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_MatchDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(CMsgDOTARealtimeGameStats_MatchDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_MatchDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_MatchDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_MatchDetails*>(
               &_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(CMsgDOTARealtimeGameStats_MatchDetails* other);
  friend void swap(CMsgDOTARealtimeGameStats_MatchDetails& a, CMsgDOTARealtimeGameStats_MatchDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_MatchDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_MatchDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStats_MatchDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_MatchDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  int picks_size() const;
  void clear_picks();
  static const int kPicksFieldNumber = 10;
  ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_picks(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_picks();
  const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& picks(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* add_picks();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
      picks() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  int bans_size() const;
  void clear_bans();
  static const int kBansFieldNumber = 11;
  ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_bans(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_bans();
  const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& bans(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* add_bans();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
      bans() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  int kills_size() const;
  void clear_kills();
  static const int kKillsFieldNumber = 12;
  ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* mutable_kills(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >*
      mutable_kills();
  const ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails& kills(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* add_kills();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >&
      kills() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  int broadcasters_size() const;
  void clear_broadcasters();
  static const int kBroadcastersFieldNumber = 13;
  ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* mutable_broadcasters(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
      mutable_broadcasters();
  const ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails& broadcasters(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* add_broadcasters();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
      broadcasters() const;

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  bool has_matchid() const;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint64 matchid() const;
  void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional float time_of_day = 4;
  bool has_time_of_day() const;
  void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 4;
  float time_of_day() const;
  void set_time_of_day(float value);

  // optional int32 game_time = 6;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 6;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // optional uint32 teamid_radiant = 8;
  bool has_teamid_radiant() const;
  void clear_teamid_radiant();
  static const int kTeamidRadiantFieldNumber = 8;
  ::google::protobuf::uint32 teamid_radiant() const;
  void set_teamid_radiant(::google::protobuf::uint32 value);

  // optional uint32 teamid_dire = 9;
  bool has_teamid_dire() const;
  void clear_teamid_dire();
  static const int kTeamidDireFieldNumber = 9;
  ::google::protobuf::uint32 teamid_dire() const;
  void set_teamid_dire(::google::protobuf::uint32 value);

  // optional bool is_nightstalker_night = 5;
  bool has_is_nightstalker_night() const;
  void clear_is_nightstalker_night();
  static const int kIsNightstalkerNightFieldNumber = 5;
  bool is_nightstalker_night() const;
  void set_is_nightstalker_night(bool value);

  // optional bool single_team = 16;
  bool has_single_team() const;
  void clear_single_team();
  static const int kSingleTeamFieldNumber = 16;
  bool single_team() const;
  void set_single_team(bool value);

  // optional uint32 game_mode = 14;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 14;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 15;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 15;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 cheers_peak = 17;
  bool has_cheers_peak() const;
  void clear_cheers_peak();
  static const int kCheersPeakFieldNumber = 17;
  ::google::protobuf::uint32 cheers_peak() const;
  void set_cheers_peak(::google::protobuf::uint32 value);

  // optional uint32 league_node_id = 18;
  bool has_league_node_id() const;
  void clear_league_node_id();
  static const int kLeagueNodeIdFieldNumber = 18;
  ::google::protobuf::uint32 league_node_id() const;
  void set_league_node_id(::google::protobuf::uint32 value);

  // optional uint32 game_state = 19;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 19;
  ::google::protobuf::uint32 game_state() const;
  void set_game_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails > picks_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails > bans_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails > kills_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails > broadcasters_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  float time_of_day_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 teamid_radiant_;
  ::google::protobuf::uint32 teamid_dire_;
  bool is_nightstalker_night_;
  bool single_team_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 cheers_peak_;
  ::google::protobuf::uint32 league_node_id_;
  ::google::protobuf::uint32 game_state_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_LocationStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats) */ {
 public:
  CMsgDOTARealtimeGameStats_GraphData_LocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_LocationStats();

  CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_GraphData_LocationStats(CMsgDOTARealtimeGameStats_GraphData_LocationStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(CMsgDOTARealtimeGameStats_GraphData_LocationStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_GraphData_LocationStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_GraphData_LocationStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData_LocationStats*>(
               &_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other);
  friend void swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats& a, CMsgDOTARealtimeGameStats_GraphData_LocationStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_LocationStats>(nullptr);
  }

  CMsgDOTARealtimeGameStats_GraphData_LocationStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_LocationStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 stats = 1;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 1;
  ::google::protobuf::int32 stats(int index) const;
  void set_stats(int index, ::google::protobuf::int32 value);
  void add_stats(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stats() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stats();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stats_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats) */ {
 public:
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats*>(
               &_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other);
  friend void swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& a, CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(nullptr);
  }

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  int loc_stats_size() const;
  void clear_loc_stats();
  static const int kLocStatsFieldNumber = 1;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* mutable_loc_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
      mutable_loc_stats();
  const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats& loc_stats(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* add_loc_stats();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
      loc_stats() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats > loc_stats_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats.GraphData) */ {
 public:
  CMsgDOTARealtimeGameStats_GraphData();
  virtual ~CMsgDOTARealtimeGameStats_GraphData();

  CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from);

  inline CMsgDOTARealtimeGameStats_GraphData& operator=(const CMsgDOTARealtimeGameStats_GraphData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats_GraphData(CMsgDOTARealtimeGameStats_GraphData&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData& operator=(CMsgDOTARealtimeGameStats_GraphData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats_GraphData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats_GraphData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData*>(
               &_CMsgDOTARealtimeGameStats_GraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(CMsgDOTARealtimeGameStats_GraphData* other);
  friend void swap(CMsgDOTARealtimeGameStats_GraphData& a, CMsgDOTARealtimeGameStats_GraphData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats_GraphData* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData>(nullptr);
  }

  CMsgDOTARealtimeGameStats_GraphData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_GraphData_LocationStats LocationStats;
  typedef CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats TeamLocationStats;

  typedef CMsgDOTARealtimeGameStats_GraphData_eStat eStat;
  static const eStat CreepGoldEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
  static const eStat KillGoldEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned;
  static const eStat DeathAndBuybackGoldLost =
    CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost;
  static const eStat XPEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
  static inline bool eStat_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(value);
  }
  static const eStat eStat_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN;
  static const eStat eStat_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX;
  static const int eStat_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eStat_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
  }
  static inline const ::std::string& eStat_Name(eStat value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Name(value);
  }
  static inline bool eStat_Parse(const ::std::string& name,
      eStat* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(name, value);
  }

  typedef CMsgDOTARealtimeGameStats_GraphData_eLocation eLocation;
  static const eLocation BotLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
  static const eLocation MidLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane;
  static const eLocation TopLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane;
  static const eLocation Jungle =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle;
  static const eLocation Ancients =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients;
  static const eLocation Other =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
  static inline bool eLocation_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(value);
  }
  static const eLocation eLocation_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN;
  static const eLocation eLocation_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX;
  static const int eLocation_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eLocation_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
  }
  static inline const ::std::string& eLocation_Name(eLocation value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(value);
  }
  static inline bool eLocation_Parse(const ::std::string& name,
      eLocation* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  int graph_gold_size() const;
  void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  ::google::protobuf::int32 graph_gold(int index) const;
  void set_graph_gold(int index, ::google::protobuf::int32 value);
  void add_graph_gold(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // repeated int32 graph_xp = 2;
  int graph_xp_size() const;
  void clear_graph_xp();
  static const int kGraphXpFieldNumber = 2;
  ::google::protobuf::int32 graph_xp(int index) const;
  void set_graph_xp(int index, ::google::protobuf::int32 value);
  void add_graph_xp(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_xp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_xp();

  // repeated int32 graph_kill = 3;
  int graph_kill_size() const;
  void clear_graph_kill();
  static const int kGraphKillFieldNumber = 3;
  ::google::protobuf::int32 graph_kill(int index) const;
  void set_graph_kill(int index, ::google::protobuf::int32 value);
  void add_graph_kill(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_kill() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_kill();

  // repeated int32 graph_tower = 4;
  int graph_tower_size() const;
  void clear_graph_tower();
  static const int kGraphTowerFieldNumber = 4;
  ::google::protobuf::int32 graph_tower(int index) const;
  void set_graph_tower(int index, ::google::protobuf::int32 value);
  void add_graph_tower(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_tower() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_tower();

  // repeated int32 graph_rax = 5;
  int graph_rax_size() const;
  void clear_graph_rax();
  static const int kGraphRaxFieldNumber = 5;
  ::google::protobuf::int32 graph_rax(int index) const;
  void set_graph_rax(int index, ::google::protobuf::int32 value);
  void add_graph_rax(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_rax() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_rax();

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  int team_loc_stats_size() const;
  void clear_team_loc_stats();
  static const int kTeamLocStatsFieldNumber = 6;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* mutable_team_loc_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
      mutable_team_loc_stats();
  const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& team_loc_stats(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* add_team_loc_stats();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
      team_loc_stats() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_xp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_kill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_tower_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_rax_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats > team_loc_stats_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStats) */ {
 public:
  CMsgDOTARealtimeGameStats();
  virtual ~CMsgDOTARealtimeGameStats();

  CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from);

  inline CMsgDOTARealtimeGameStats& operator=(const CMsgDOTARealtimeGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStats(CMsgDOTARealtimeGameStats&& from) noexcept
    : CMsgDOTARealtimeGameStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats& operator=(CMsgDOTARealtimeGameStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats*>(
               &_CMsgDOTARealtimeGameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(CMsgDOTARealtimeGameStats* other);
  friend void swap(CMsgDOTARealtimeGameStats& a, CMsgDOTARealtimeGameStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStats* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats>(nullptr);
  }

  CMsgDOTARealtimeGameStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStats_ItemDetails ItemDetails;
  typedef CMsgDOTARealtimeGameStats_AbilityDetails AbilityDetails;
  typedef CMsgDOTARealtimeGameStats_HeroToHeroStats HeroToHeroStats;
  typedef CMsgDOTARealtimeGameStats_AbilityList AbilityList;
  typedef CMsgDOTARealtimeGameStats_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStats_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStats_KillDetails KillDetails;
  typedef CMsgDOTARealtimeGameStats_BroadcasterDetails BroadcasterDetails;
  typedef CMsgDOTARealtimeGameStats_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStats_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStats_GraphData GraphData;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 2;
  ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* mutable_teams(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >*
      mutable_teams();
  const ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails& teams(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* add_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >&
      teams() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >*
      mutable_buildings();
  const ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails& buildings(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >&
      buildings() const;

  // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails& match() const;
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* release_match();
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* mutable_match();
  void set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* match);

  // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  bool has_graph_data() const;
  void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData& graph_data() const;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* release_graph_data();
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* mutable_graph_data();
  void set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStats_GraphData* graph_data);

  // optional bool delta_frame = 5;
  bool has_delta_frame() const;
  void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  bool delta_frame() const;
  void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails > buildings_;
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* match_;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* graph_data_;
  bool delta_frame_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_TeamDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_TeamDetails();

  CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_TeamDetails(CMsgDOTARealtimeGameStatsTerse_TeamDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(CMsgDOTARealtimeGameStatsTerse_TeamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_TeamDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_TeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails& a, CMsgDOTARealtimeGameStatsTerse_TeamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_TeamDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_TeamDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_TeamDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 6;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
      mutable_players();
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& players(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
      players() const;

  // optional string team_name = 3;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 8;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 8;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional string team_logo_url = 9;
  bool has_team_logo_url() const;
  void clear_team_logo_url();
  static const int kTeamLogoUrlFieldNumber = 9;
  const ::std::string& team_logo_url() const;
  void set_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_team_logo_url(::std::string&& value);
  #endif
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_team_logo_url();
  ::std::string* release_team_logo_url();
  void set_allocated_team_logo_url(::std::string* team_logo_url);

  // optional uint32 team_number = 1;
  bool has_team_number() const;
  void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  ::google::protobuf::uint32 team_number() const;
  void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional fixed64 team_logo = 4;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // optional uint32 net_worth = 7;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 7;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails > players_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::internal::ArenaStringPtr team_logo_url_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 net_worth_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PlayerDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_PlayerDetails();

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(CMsgDOTARealtimeGameStatsTerse_PlayerDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(CMsgDOTARealtimeGameStatsTerse_PlayerDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails& a, CMsgDOTARealtimeGameStatsTerse_PlayerDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint32 playerid() const;
  void set_playerid(::google::protobuf::uint32 value);

  // optional uint32 team = 4;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 4;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  ::google::protobuf::uint32 heroid() const;
  void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 6;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 7;
  bool has_kill_count() const;
  void clear_kill_count();
  static const int kKillCountFieldNumber = 7;
  ::google::protobuf::uint32 kill_count() const;
  void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 8;
  bool has_death_count() const;
  void clear_death_count();
  static const int kDeathCountFieldNumber = 8;
  ::google::protobuf::uint32 death_count() const;
  void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 9;
  bool has_assists_count() const;
  void clear_assists_count();
  static const int kAssistsCountFieldNumber = 9;
  ::google::protobuf::uint32 assists_count() const;
  void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 10;
  bool has_denies_count() const;
  void clear_denies_count();
  static const int kDeniesCountFieldNumber = 10;
  ::google::protobuf::uint32 denies_count() const;
  void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 11;
  bool has_lh_count() const;
  void clear_lh_count();
  static const int kLhCountFieldNumber = 11;
  ::google::protobuf::uint32 lh_count() const;
  void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 gold = 12;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 12;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional float x = 13;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 13;
  float x() const;
  void set_x(float value);

  // optional float y = 14;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 14;
  float y() const;
  void set_y(float value);

  // optional uint32 net_worth = 15;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 15;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  ::google::protobuf::uint32 net_worth_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_BuildingDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_BuildingDetails();

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(CMsgDOTARealtimeGameStatsTerse_BuildingDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(CMsgDOTARealtimeGameStatsTerse_BuildingDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails& a, CMsgDOTARealtimeGameStatsTerse_BuildingDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional float heading = 2;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  float heading() const;
  void set_heading(float value);

  // optional uint32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 lane = 4;
  bool has_lane() const;
  void clear_lane();
  static const int kLaneFieldNumber = 4;
  ::google::protobuf::uint32 lane() const;
  void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  bool has_tier() const;
  void clear_tier();
  static const int kTierFieldNumber = 5;
  ::google::protobuf::uint32 tier() const;
  void set_tier(::google::protobuf::uint32 value);

  // optional float x = 6;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 6;
  float x() const;
  void set_x(float value);

  // optional float y = 7;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 7;
  float y() const;
  void set_y(float value);

  // optional bool destroyed = 8;
  bool has_destroyed() const;
  void clear_destroyed();
  static const int kDestroyedFieldNumber = 8;
  bool destroyed() const;
  void set_destroyed(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  float x_;
  float y_;
  bool destroyed_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PickBanDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_PickBanDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_PickBanDetails();

  CMsgDOTARealtimeGameStatsTerse_PickBanDetails(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_PickBanDetails(CMsgDOTARealtimeGameStatsTerse_PickBanDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_PickBanDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails& operator=(CMsgDOTARealtimeGameStatsTerse_PickBanDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_PickBanDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_PickBanDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails& a, CMsgDOTARealtimeGameStatsTerse_PickBanDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_PickBanDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero = 1;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 1;
  ::google::protobuf::uint32 hero() const;
  void set_hero(::google::protobuf::uint32 value);

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_;
  ::google::protobuf::uint32 team_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_MatchDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_MatchDetails();

  CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_MatchDetails(CMsgDOTARealtimeGameStatsTerse_MatchDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(CMsgDOTARealtimeGameStatsTerse_MatchDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_MatchDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_MatchDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails& a, CMsgDOTARealtimeGameStatsTerse_MatchDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_MatchDetails>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_MatchDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_MatchDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 steam_broadcaster_account_ids = 6;
  int steam_broadcaster_account_ids_size() const;
  void clear_steam_broadcaster_account_ids();
  static const int kSteamBroadcasterAccountIdsFieldNumber = 6;
  ::google::protobuf::uint32 steam_broadcaster_account_ids(int index) const;
  void set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value);
  void add_steam_broadcaster_account_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      steam_broadcaster_account_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_steam_broadcaster_account_ids();

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  int picks_size() const;
  void clear_picks();
  static const int kPicksFieldNumber = 11;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* mutable_picks(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
      mutable_picks();
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& picks(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* add_picks();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
      picks() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  int bans_size() const;
  void clear_bans();
  static const int kBansFieldNumber = 12;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* mutable_bans(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
      mutable_bans();
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& bans(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* add_bans();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
      bans() const;

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  bool has_matchid() const;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint64 matchid() const;
  void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional int32 game_time = 4;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 4;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // optional uint32 game_mode = 7;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 7;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 8;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 8;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 league_node_id = 9;
  bool has_league_node_id() const;
  void clear_league_node_id();
  static const int kLeagueNodeIdFieldNumber = 9;
  ::google::protobuf::uint32 league_node_id() const;
  void set_league_node_id(::google::protobuf::uint32 value);

  // optional uint32 game_state = 10;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 10;
  ::google::protobuf::uint32 game_state() const;
  void set_game_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > steam_broadcaster_account_ids_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails > picks_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails > bans_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 league_node_id_;
  ::google::protobuf::uint32 game_state_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_GraphData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse_GraphData();
  virtual ~CMsgDOTARealtimeGameStatsTerse_GraphData();

  CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);

  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse_GraphData(CMsgDOTARealtimeGameStatsTerse_GraphData&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_GraphData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(CMsgDOTARealtimeGameStatsTerse_GraphData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse_GraphData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse_GraphData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_GraphData*>(
               &_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse_GraphData& a, CMsgDOTARealtimeGameStatsTerse_GraphData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse_GraphData* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_GraphData>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse_GraphData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_GraphData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  int graph_gold_size() const;
  void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  ::google::protobuf::int32 graph_gold(int index) const;
  void set_graph_gold(int index, ::google::protobuf::int32 value);
  void add_graph_gold(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARealtimeGameStatsTerse) */ {
 public:
  CMsgDOTARealtimeGameStatsTerse();
  virtual ~CMsgDOTARealtimeGameStatsTerse();

  CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from);

  inline CMsgDOTARealtimeGameStatsTerse& operator=(const CMsgDOTARealtimeGameStatsTerse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARealtimeGameStatsTerse(CMsgDOTARealtimeGameStatsTerse&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse& operator=(CMsgDOTARealtimeGameStatsTerse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARealtimeGameStatsTerse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARealtimeGameStatsTerse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse*>(
               &_CMsgDOTARealtimeGameStatsTerse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(CMsgDOTARealtimeGameStatsTerse* other);
  friend void swap(CMsgDOTARealtimeGameStatsTerse& a, CMsgDOTARealtimeGameStatsTerse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARealtimeGameStatsTerse* New() const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse>(nullptr);
  }

  CMsgDOTARealtimeGameStatsTerse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStatsTerse_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_GraphData GraphData;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 2;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* mutable_teams(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
      mutable_teams();
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails& teams(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* add_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
      teams() const;

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
      mutable_buildings();
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& buildings(int index) const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
      buildings() const;

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match() const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* release_match();
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* mutable_match();
  void set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match);

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  bool has_graph_data() const;
  void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data() const;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* release_graph_data();
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* mutable_graph_data();
  void set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data);

  // optional bool delta_frame = 5;
  bool has_delta_frame() const;
  void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  bool delta_frame() const;
  void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARealtimeGameStatsTerse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails > buildings_;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match_;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data_;
  bool delta_frame_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastTimelineEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABroadcastTimelineEvent) */ {
 public:
  CMsgDOTABroadcastTimelineEvent();
  virtual ~CMsgDOTABroadcastTimelineEvent();

  CMsgDOTABroadcastTimelineEvent(const CMsgDOTABroadcastTimelineEvent& from);

  inline CMsgDOTABroadcastTimelineEvent& operator=(const CMsgDOTABroadcastTimelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABroadcastTimelineEvent(CMsgDOTABroadcastTimelineEvent&& from) noexcept
    : CMsgDOTABroadcastTimelineEvent() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABroadcastTimelineEvent& operator=(CMsgDOTABroadcastTimelineEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABroadcastTimelineEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABroadcastTimelineEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABroadcastTimelineEvent*>(
               &_CMsgDOTABroadcastTimelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(CMsgDOTABroadcastTimelineEvent* other);
  friend void swap(CMsgDOTABroadcastTimelineEvent& a, CMsgDOTABroadcastTimelineEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABroadcastTimelineEvent* New() const final {
    return CreateMaybeMessage<CMsgDOTABroadcastTimelineEvent>(nullptr);
  }

  CMsgDOTABroadcastTimelineEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABroadcastTimelineEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABroadcastTimelineEvent& from);
  void MergeFrom(const CMsgDOTABroadcastTimelineEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABroadcastTimelineEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_data = 4;
  bool has_string_data() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 4;
  const ::std::string& string_data() const;
  void set_string_data(const ::std::string& value);
  #if LANG_CXX11
  void set_string_data(::std::string&& value);
  #endif
  void set_string_data(const char* value);
  void set_string_data(const char* value, size_t size);
  ::std::string* mutable_string_data();
  ::std::string* release_string_data();
  void set_allocated_string_data(::std::string* string_data);

  // optional fixed32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::uint32 data() const;
  void set_data(::google::protobuf::uint32 value);

  // optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  ::proto::dota::EBroadcastTimelineEvent event() const;
  void set_event(::proto::dota::EBroadcastTimelineEvent value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABroadcastTimelineEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_data_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 data_;
  int event_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientMatchGroupsVersion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientMatchGroupsVersion) */ {
 public:
  CMsgGCToClientMatchGroupsVersion();
  virtual ~CMsgGCToClientMatchGroupsVersion();

  CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from);

  inline CMsgGCToClientMatchGroupsVersion& operator=(const CMsgGCToClientMatchGroupsVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientMatchGroupsVersion(CMsgGCToClientMatchGroupsVersion&& from) noexcept
    : CMsgGCToClientMatchGroupsVersion() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientMatchGroupsVersion& operator=(CMsgGCToClientMatchGroupsVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientMatchGroupsVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientMatchGroupsVersion* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientMatchGroupsVersion*>(
               &_CMsgGCToClientMatchGroupsVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(CMsgGCToClientMatchGroupsVersion* other);
  friend void swap(CMsgGCToClientMatchGroupsVersion& a, CMsgGCToClientMatchGroupsVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientMatchGroupsVersion* New() const final {
    return CreateMaybeMessage<CMsgGCToClientMatchGroupsVersion>(nullptr);
  }

  CMsgGCToClientMatchGroupsVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientMatchGroupsVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientMatchGroupsVersion& from);
  void MergeFrom(const CMsgGCToClientMatchGroupsVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientMatchGroupsVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchgroups_version = 1;
  bool has_matchgroups_version() const;
  void clear_matchgroups_version();
  static const int kMatchgroupsVersionFieldNumber = 1;
  ::google::protobuf::uint32 matchgroups_version() const;
  void set_matchgroups_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientMatchGroupsVersion)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 matchgroups_version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASDOHeroStatsHistory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASDOHeroStatsHistory) */ {
 public:
  CMsgDOTASDOHeroStatsHistory();
  virtual ~CMsgDOTASDOHeroStatsHistory();

  CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from);

  inline CMsgDOTASDOHeroStatsHistory& operator=(const CMsgDOTASDOHeroStatsHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASDOHeroStatsHistory(CMsgDOTASDOHeroStatsHistory&& from) noexcept
    : CMsgDOTASDOHeroStatsHistory() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASDOHeroStatsHistory& operator=(CMsgDOTASDOHeroStatsHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASDOHeroStatsHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASDOHeroStatsHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASDOHeroStatsHistory*>(
               &_CMsgDOTASDOHeroStatsHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(CMsgDOTASDOHeroStatsHistory* other);
  friend void swap(CMsgDOTASDOHeroStatsHistory& a, CMsgDOTASDOHeroStatsHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASDOHeroStatsHistory* New() const final {
    return CreateMaybeMessage<CMsgDOTASDOHeroStatsHistory>(nullptr);
  }

  CMsgDOTASDOHeroStatsHistory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASDOHeroStatsHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASDOHeroStatsHistory& from);
  void MergeFrom(const CMsgDOTASDOHeroStatsHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASDOHeroStatsHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 2;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 3;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 3;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // optional bool won = 5;
  bool has_won() const;
  void clear_won();
  static const int kWonFieldNumber = 5;
  bool won() const;
  void set_won(bool value);

  // optional uint32 gpm = 6;
  bool has_gpm() const;
  void clear_gpm();
  static const int kGpmFieldNumber = 6;
  ::google::protobuf::uint32 gpm() const;
  void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 xpm = 7;
  bool has_xpm() const;
  void clear_xpm();
  static const int kXpmFieldNumber = 7;
  ::google::protobuf::uint32 xpm() const;
  void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 kills = 8;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 8;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 9;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 9;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 10;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 10;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASDOHeroStatsHistory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 start_time_;
  bool won_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonRewards_Reward final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonRewards.Reward) */ {
 public:
  CMsgDOTASeasonRewards_Reward();
  virtual ~CMsgDOTASeasonRewards_Reward();

  CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from);

  inline CMsgDOTASeasonRewards_Reward& operator=(const CMsgDOTASeasonRewards_Reward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonRewards_Reward(CMsgDOTASeasonRewards_Reward&& from) noexcept
    : CMsgDOTASeasonRewards_Reward() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonRewards_Reward& operator=(CMsgDOTASeasonRewards_Reward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonRewards_Reward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonRewards_Reward* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonRewards_Reward*>(
               &_CMsgDOTASeasonRewards_Reward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(CMsgDOTASeasonRewards_Reward* other);
  friend void swap(CMsgDOTASeasonRewards_Reward& a, CMsgDOTASeasonRewards_Reward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonRewards_Reward* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonRewards_Reward>(nullptr);
  }

  CMsgDOTASeasonRewards_Reward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonRewards_Reward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonRewards_Reward& from);
  void MergeFrom(const CMsgDOTASeasonRewards_Reward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonRewards_Reward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string image = 7;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 7;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional uint32 itemdef = 2;
  bool has_itemdef() const;
  void clear_itemdef();
  static const int kItemdefFieldNumber = 2;
  ::google::protobuf::uint32 itemdef() const;
  void set_itemdef(::google::protobuf::uint32 value);

  // optional uint32 importance = 3;
  bool has_importance() const;
  void clear_importance();
  static const int kImportanceFieldNumber = 3;
  ::google::protobuf::uint32 importance() const;
  void set_importance(::google::protobuf::uint32 value);

  // optional uint32 base_level = 4;
  bool has_base_level() const;
  void clear_base_level();
  static const int kBaseLevelFieldNumber = 4;
  ::google::protobuf::uint32 base_level() const;
  void set_base_level(::google::protobuf::uint32 value);

  // optional uint32 repeat_level = 5;
  bool has_repeat_level() const;
  void clear_repeat_level();
  static const int kRepeatLevelFieldNumber = 5;
  ::google::protobuf::uint32 repeat_level() const;
  void set_repeat_level(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  bool has_reward_type() const;
  void clear_reward_type();
  static const int kRewardTypeFieldNumber = 6;
  ::proto::dota::CMsgDOTASeasonRewards_ERewardType reward_type() const;
  void set_reward_type(::proto::dota::CMsgDOTASeasonRewards_ERewardType value);

  // optional uint32 action_id = 8;
  bool has_action_id() const;
  void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // optional uint32 effect_index = 9;
  bool has_effect_index() const;
  void clear_effect_index();
  static const int kEffectIndexFieldNumber = 9;
  ::google::protobuf::uint32 effect_index() const;
  void set_effect_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonRewards.Reward)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::uint32 itemdef_;
  ::google::protobuf::uint32 importance_;
  ::google::protobuf::uint32 base_level_;
  ::google::protobuf::uint32 repeat_level_;
  int reward_type_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::uint32 effect_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonRewards final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonRewards) */ {
 public:
  CMsgDOTASeasonRewards();
  virtual ~CMsgDOTASeasonRewards();

  CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from);

  inline CMsgDOTASeasonRewards& operator=(const CMsgDOTASeasonRewards& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonRewards(CMsgDOTASeasonRewards&& from) noexcept
    : CMsgDOTASeasonRewards() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonRewards& operator=(CMsgDOTASeasonRewards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonRewards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonRewards* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonRewards*>(
               &_CMsgDOTASeasonRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(CMsgDOTASeasonRewards* other);
  friend void swap(CMsgDOTASeasonRewards& a, CMsgDOTASeasonRewards& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonRewards* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonRewards>(nullptr);
  }

  CMsgDOTASeasonRewards* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonRewards>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonRewards& from);
  void MergeFrom(const CMsgDOTASeasonRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonRewards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonRewards_Reward Reward;

  typedef CMsgDOTASeasonRewards_ERewardType ERewardType;
  static const ERewardType EconItem =
    CMsgDOTASeasonRewards_ERewardType_EconItem;
  static const ERewardType MysteryWheel =
    CMsgDOTASeasonRewards_ERewardType_MysteryWheel;
  static const ERewardType AbilityEffect =
    CMsgDOTASeasonRewards_ERewardType_AbilityEffect;
  static const ERewardType Other =
    CMsgDOTASeasonRewards_ERewardType_Other;
  static const ERewardType MysteryWheelPointsBased =
    CMsgDOTASeasonRewards_ERewardType_MysteryWheelPointsBased;
  static inline bool ERewardType_IsValid(int value) {
    return CMsgDOTASeasonRewards_ERewardType_IsValid(value);
  }
  static const ERewardType ERewardType_MIN =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_MIN;
  static const ERewardType ERewardType_MAX =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX;
  static const int ERewardType_ARRAYSIZE =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERewardType_descriptor() {
    return CMsgDOTASeasonRewards_ERewardType_descriptor();
  }
  static inline const ::std::string& ERewardType_Name(ERewardType value) {
    return CMsgDOTASeasonRewards_ERewardType_Name(value);
  }
  static inline bool ERewardType_Parse(const ::std::string& name,
      ERewardType* value) {
    return CMsgDOTASeasonRewards_ERewardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  int rewards_size() const;
  void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  ::proto::dota::CMsgDOTASeasonRewards_Reward* mutable_rewards(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >*
      mutable_rewards();
  const ::proto::dota::CMsgDOTASeasonRewards_Reward& rewards(int index) const;
  ::proto::dota::CMsgDOTASeasonRewards_Reward* add_rewards();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >&
      rewards() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonRewards)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward > rewards_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonAchievements_Achievement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonAchievements.Achievement) */ {
 public:
  CMsgDOTASeasonAchievements_Achievement();
  virtual ~CMsgDOTASeasonAchievements_Achievement();

  CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from);

  inline CMsgDOTASeasonAchievements_Achievement& operator=(const CMsgDOTASeasonAchievements_Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonAchievements_Achievement(CMsgDOTASeasonAchievements_Achievement&& from) noexcept
    : CMsgDOTASeasonAchievements_Achievement() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonAchievements_Achievement& operator=(CMsgDOTASeasonAchievements_Achievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonAchievements_Achievement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonAchievements_Achievement* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonAchievements_Achievement*>(
               &_CMsgDOTASeasonAchievements_Achievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(CMsgDOTASeasonAchievements_Achievement* other);
  friend void swap(CMsgDOTASeasonAchievements_Achievement& a, CMsgDOTASeasonAchievements_Achievement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonAchievements_Achievement* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonAchievements_Achievement>(nullptr);
  }

  CMsgDOTASeasonAchievements_Achievement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonAchievements_Achievement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from);
  void MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonAchievements_Achievement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional uint32 action_id = 4;
  bool has_action_id() const;
  void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // optional uint32 max_grants = 5;
  bool has_max_grants() const;
  void clear_max_grants();
  static const int kMaxGrantsFieldNumber = 5;
  ::google::protobuf::uint32 max_grants() const;
  void set_max_grants(::google::protobuf::uint32 value);

  // optional uint32 normal_points = 6;
  bool has_normal_points() const;
  void clear_normal_points();
  static const int kNormalPointsFieldNumber = 6;
  ::google::protobuf::uint32 normal_points() const;
  void set_normal_points(::google::protobuf::uint32 value);

  // optional uint32 tracking_achievement = 7;
  bool has_tracking_achievement() const;
  void clear_tracking_achievement();
  static const int kTrackingAchievementFieldNumber = 7;
  ::google::protobuf::uint32 tracking_achievement() const;
  void set_tracking_achievement(::google::protobuf::uint32 value);

  // optional uint32 achievement_goal = 8;
  bool has_achievement_goal() const;
  void clear_achievement_goal();
  static const int kAchievementGoalFieldNumber = 8;
  ::google::protobuf::uint32 achievement_goal() const;
  void set_achievement_goal(::google::protobuf::uint32 value);

  // optional uint32 achievement_level = 9;
  bool has_achievement_level() const;
  void clear_achievement_level();
  static const int kAchievementLevelFieldNumber = 9;
  ::google::protobuf::uint32 achievement_level() const;
  void set_achievement_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonAchievements.Achievement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::uint32 max_grants_;
  ::google::protobuf::uint32 normal_points_;
  ::google::protobuf::uint32 tracking_achievement_;
  ::google::protobuf::uint32 achievement_goal_;
  ::google::protobuf::uint32 achievement_level_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonAchievements final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonAchievements) */ {
 public:
  CMsgDOTASeasonAchievements();
  virtual ~CMsgDOTASeasonAchievements();

  CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from);

  inline CMsgDOTASeasonAchievements& operator=(const CMsgDOTASeasonAchievements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonAchievements(CMsgDOTASeasonAchievements&& from) noexcept
    : CMsgDOTASeasonAchievements() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonAchievements& operator=(CMsgDOTASeasonAchievements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonAchievements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonAchievements* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonAchievements*>(
               &_CMsgDOTASeasonAchievements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(CMsgDOTASeasonAchievements* other);
  friend void swap(CMsgDOTASeasonAchievements& a, CMsgDOTASeasonAchievements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonAchievements* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonAchievements>(nullptr);
  }

  CMsgDOTASeasonAchievements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonAchievements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonAchievements& from);
  void MergeFrom(const CMsgDOTASeasonAchievements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonAchievements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonAchievements_Achievement Achievement;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  int achievements_size() const;
  void clear_achievements();
  static const int kAchievementsFieldNumber = 1;
  ::proto::dota::CMsgDOTASeasonAchievements_Achievement* mutable_achievements(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >*
      mutable_achievements();
  const ::proto::dota::CMsgDOTASeasonAchievements_Achievement& achievements(int index) const;
  ::proto::dota::CMsgDOTASeasonAchievements_Achievement* add_achievements();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >&
      achievements() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonAchievements)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement > achievements_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Choice final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions.Choice) */ {
 public:
  CMsgDOTASeasonPredictions_Choice();
  virtual ~CMsgDOTASeasonPredictions_Choice();

  CMsgDOTASeasonPredictions_Choice(const CMsgDOTASeasonPredictions_Choice& from);

  inline CMsgDOTASeasonPredictions_Choice& operator=(const CMsgDOTASeasonPredictions_Choice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions_Choice(CMsgDOTASeasonPredictions_Choice&& from) noexcept
    : CMsgDOTASeasonPredictions_Choice() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_Choice& operator=(CMsgDOTASeasonPredictions_Choice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions_Choice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions_Choice* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_Choice*>(
               &_CMsgDOTASeasonPredictions_Choice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(CMsgDOTASeasonPredictions_Choice* other);
  friend void swap(CMsgDOTASeasonPredictions_Choice& a, CMsgDOTASeasonPredictions_Choice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions_Choice* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Choice>(nullptr);
  }

  CMsgDOTASeasonPredictions_Choice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Choice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions_Choice& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Choice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_Choice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional uint32 min_raw_value = 3;
  bool has_min_raw_value() const;
  void clear_min_raw_value();
  static const int kMinRawValueFieldNumber = 3;
  ::google::protobuf::uint32 min_raw_value() const;
  void set_min_raw_value(::google::protobuf::uint32 value);

  // optional uint32 max_raw_value = 4;
  bool has_max_raw_value() const;
  void clear_max_raw_value();
  static const int kMaxRawValueFieldNumber = 4;
  ::google::protobuf::uint32 max_raw_value() const;
  void set_max_raw_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions.Choice)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 min_raw_value_;
  ::google::protobuf::uint32 max_raw_value_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Answers final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions.Answers) */ {
 public:
  CMsgDOTASeasonPredictions_Answers();
  virtual ~CMsgDOTASeasonPredictions_Answers();

  CMsgDOTASeasonPredictions_Answers(const CMsgDOTASeasonPredictions_Answers& from);

  inline CMsgDOTASeasonPredictions_Answers& operator=(const CMsgDOTASeasonPredictions_Answers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions_Answers(CMsgDOTASeasonPredictions_Answers&& from) noexcept
    : CMsgDOTASeasonPredictions_Answers() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_Answers& operator=(CMsgDOTASeasonPredictions_Answers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions_Answers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions_Answers* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_Answers*>(
               &_CMsgDOTASeasonPredictions_Answers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(CMsgDOTASeasonPredictions_Answers* other);
  friend void swap(CMsgDOTASeasonPredictions_Answers& a, CMsgDOTASeasonPredictions_Answers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions_Answers* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Answers>(nullptr);
  }

  CMsgDOTASeasonPredictions_Answers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Answers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions_Answers& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Answers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_Answers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 answer_id = 1;
  bool has_answer_id() const;
  void clear_answer_id();
  static const int kAnswerIdFieldNumber = 1;
  ::google::protobuf::uint32 answer_id() const;
  void set_answer_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions.Answers)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 answer_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_QueryKeyValues final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues) */ {
 public:
  CMsgDOTASeasonPredictions_QueryKeyValues();
  virtual ~CMsgDOTASeasonPredictions_QueryKeyValues();

  CMsgDOTASeasonPredictions_QueryKeyValues(const CMsgDOTASeasonPredictions_QueryKeyValues& from);

  inline CMsgDOTASeasonPredictions_QueryKeyValues& operator=(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions_QueryKeyValues(CMsgDOTASeasonPredictions_QueryKeyValues&& from) noexcept
    : CMsgDOTASeasonPredictions_QueryKeyValues() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_QueryKeyValues& operator=(CMsgDOTASeasonPredictions_QueryKeyValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions_QueryKeyValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions_QueryKeyValues* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_QueryKeyValues*>(
               &_CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(CMsgDOTASeasonPredictions_QueryKeyValues* other);
  friend void swap(CMsgDOTASeasonPredictions_QueryKeyValues& a, CMsgDOTASeasonPredictions_QueryKeyValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions_QueryKeyValues* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_QueryKeyValues>(nullptr);
  }

  CMsgDOTASeasonPredictions_QueryKeyValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_QueryKeyValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_QueryKeyValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Prediction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions.Prediction) */ {
 public:
  CMsgDOTASeasonPredictions_Prediction();
  virtual ~CMsgDOTASeasonPredictions_Prediction();

  CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from);

  inline CMsgDOTASeasonPredictions_Prediction& operator=(const CMsgDOTASeasonPredictions_Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions_Prediction(CMsgDOTASeasonPredictions_Prediction&& from) noexcept
    : CMsgDOTASeasonPredictions_Prediction() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_Prediction& operator=(CMsgDOTASeasonPredictions_Prediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions_Prediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions_Prediction* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_Prediction*>(
               &_CMsgDOTASeasonPredictions_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(CMsgDOTASeasonPredictions_Prediction* other);
  friend void swap(CMsgDOTASeasonPredictions_Prediction& a, CMsgDOTASeasonPredictions_Prediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions_Prediction* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Prediction>(nullptr);
  }

  CMsgDOTASeasonPredictions_Prediction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Prediction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_Prediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  int choices_size() const;
  void clear_choices();
  static const int kChoicesFieldNumber = 3;
  ::proto::dota::CMsgDOTASeasonPredictions_Choice* mutable_choices(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
      mutable_choices();
  const ::proto::dota::CMsgDOTASeasonPredictions_Choice& choices(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_Choice* add_choices();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
      choices() const;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  int answers_size() const;
  void clear_answers();
  static const int kAnswersFieldNumber = 10;
  ::proto::dota::CMsgDOTASeasonPredictions_Answers* mutable_answers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >*
      mutable_answers();
  const ::proto::dota::CMsgDOTASeasonPredictions_Answers& answers(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_Answers* add_answers();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >&
      answers() const;

  // repeated uint32 query_bind_params = 12;
  int query_bind_params_size() const;
  void clear_query_bind_params();
  static const int kQueryBindParamsFieldNumber = 12;
  ::google::protobuf::uint32 query_bind_params(int index) const;
  void set_query_bind_params(int index, ::google::protobuf::uint32 value);
  void add_query_bind_params(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      query_bind_params() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_query_bind_params();

  // optional string question = 2;
  bool has_question() const;
  void clear_question();
  static const int kQuestionFieldNumber = 2;
  const ::std::string& question() const;
  void set_question(const ::std::string& value);
  #if LANG_CXX11
  void set_question(::std::string&& value);
  #endif
  void set_question(const char* value);
  void set_question(const char* value, size_t size);
  ::std::string* mutable_question();
  ::std::string* release_question();
  void set_allocated_question(::std::string* question);

  // optional string query_name = 11;
  bool has_query_name() const;
  void clear_query_name();
  static const int kQueryNameFieldNumber = 11;
  const ::std::string& query_name() const;
  void set_query_name(const ::std::string& value);
  #if LANG_CXX11
  void set_query_name(::std::string&& value);
  #endif
  void set_query_name(const char* value);
  void set_query_name(const char* value, size_t size);
  ::std::string* mutable_query_name();
  ::std::string* release_query_name();
  void set_allocated_query_name(::std::string* query_name);

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType type() const;
  void set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value);

  // optional uint32 selection_id = 4;
  bool has_selection_id() const;
  void clear_selection_id();
  static const int kSelectionIdFieldNumber = 4;
  ::google::protobuf::uint32 selection_id() const;
  void set_selection_id(::google::protobuf::uint32 value);

  // optional uint32 start_date = 5;
  bool has_start_date() const;
  void clear_start_date();
  static const int kStartDateFieldNumber = 5;
  ::google::protobuf::uint32 start_date() const;
  void set_start_date(::google::protobuf::uint32 value);

  // optional uint32 lock_date = 6;
  bool has_lock_date() const;
  void clear_lock_date();
  static const int kLockDateFieldNumber = 6;
  ::google::protobuf::uint32 lock_date() const;
  void set_lock_date(::google::protobuf::uint32 value);

  // optional uint32 reward = 7;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 7;
  ::google::protobuf::uint32 reward() const;
  void set_reward(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  bool has_answer_type() const;
  void clear_answer_type();
  static const int kAnswerTypeFieldNumber = 8;
  ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType answer_type() const;
  void set_answer_type(::proto::dota::CMsgDOTASeasonPredictions_eAnswerType value);

  // optional uint32 answer_id = 9;
  bool has_answer_id() const;
  void clear_answer_id();
  static const int kAnswerIdFieldNumber = 9;
  ::google::protobuf::uint32 answer_id() const;
  void set_answer_id(::google::protobuf::uint32 value);

  // optional uint32 lock_on_selection_id = 13;
  bool has_lock_on_selection_id() const;
  void clear_lock_on_selection_id();
  static const int kLockOnSelectionIdFieldNumber = 13;
  ::google::protobuf::uint32 lock_on_selection_id() const;
  void set_lock_on_selection_id(::google::protobuf::uint32 value);

  // optional uint32 lock_on_selection_value = 14;
  bool has_lock_on_selection_value() const;
  void clear_lock_on_selection_value();
  static const int kLockOnSelectionValueFieldNumber = 14;
  ::google::protobuf::uint32 lock_on_selection_value() const;
  void set_lock_on_selection_value(::google::protobuf::uint32 value);

  // optional bool lock_on_selection_set = 15;
  bool has_lock_on_selection_set() const;
  void clear_lock_on_selection_set();
  static const int kLockOnSelectionSetFieldNumber = 15;
  bool lock_on_selection_set() const;
  void set_lock_on_selection_set(bool value);

  // optional bool use_answer_value_ranges = 16;
  bool has_use_answer_value_ranges() const;
  void clear_use_answer_value_ranges();
  static const int kUseAnswerValueRangesFieldNumber = 16;
  bool use_answer_value_ranges() const;
  void set_use_answer_value_ranges(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions.Prediction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice > choices_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers > answers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > query_bind_params_;
  ::google::protobuf::internal::ArenaStringPtr question_;
  ::google::protobuf::internal::ArenaStringPtr query_name_;
  int type_;
  ::google::protobuf::uint32 selection_id_;
  ::google::protobuf::uint32 start_date_;
  ::google::protobuf::uint32 lock_date_;
  ::google::protobuf::uint32 reward_;
  int answer_type_;
  ::google::protobuf::uint32 answer_id_;
  ::google::protobuf::uint32 lock_on_selection_id_;
  ::google::protobuf::uint32 lock_on_selection_value_;
  bool lock_on_selection_set_;
  bool use_answer_value_ranges_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_InGamePrediction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction) */ {
 public:
  CMsgDOTASeasonPredictions_InGamePrediction();
  virtual ~CMsgDOTASeasonPredictions_InGamePrediction();

  CMsgDOTASeasonPredictions_InGamePrediction(const CMsgDOTASeasonPredictions_InGamePrediction& from);

  inline CMsgDOTASeasonPredictions_InGamePrediction& operator=(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions_InGamePrediction(CMsgDOTASeasonPredictions_InGamePrediction&& from) noexcept
    : CMsgDOTASeasonPredictions_InGamePrediction() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_InGamePrediction& operator=(CMsgDOTASeasonPredictions_InGamePrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions_InGamePrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions_InGamePrediction* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_InGamePrediction*>(
               &_CMsgDOTASeasonPredictions_InGamePrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(CMsgDOTASeasonPredictions_InGamePrediction* other);
  friend void swap(CMsgDOTASeasonPredictions_InGamePrediction& a, CMsgDOTASeasonPredictions_InGamePrediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions_InGamePrediction* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_InGamePrediction>(nullptr);
  }

  CMsgDOTASeasonPredictions_InGamePrediction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_InGamePrediction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_InGamePrediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  int choices_size() const;
  void clear_choices();
  static const int kChoicesFieldNumber = 6;
  ::proto::dota::CMsgDOTASeasonPredictions_Choice* mutable_choices(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
      mutable_choices();
  const ::proto::dota::CMsgDOTASeasonPredictions_Choice& choices(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_Choice* add_choices();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
      choices() const;

  // repeated string required_heroes = 7;
  int required_heroes_size() const;
  void clear_required_heroes();
  static const int kRequiredHeroesFieldNumber = 7;
  const ::std::string& required_heroes(int index) const;
  ::std::string* mutable_required_heroes(int index);
  void set_required_heroes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_required_heroes(int index, ::std::string&& value);
  #endif
  void set_required_heroes(int index, const char* value);
  void set_required_heroes(int index, const char* value, size_t size);
  ::std::string* add_required_heroes();
  void add_required_heroes(const ::std::string& value);
  #if LANG_CXX11
  void add_required_heroes(::std::string&& value);
  #endif
  void add_required_heroes(const char* value);
  void add_required_heroes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& required_heroes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_required_heroes();

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  int query_values_size() const;
  void clear_query_values();
  static const int kQueryValuesFieldNumber = 9;
  ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* mutable_query_values(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >*
      mutable_query_values();
  const ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues& query_values(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* add_query_values();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >&
      query_values() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string question = 5;
  bool has_question() const;
  void clear_question();
  static const int kQuestionFieldNumber = 5;
  const ::std::string& question() const;
  void set_question(const ::std::string& value);
  #if LANG_CXX11
  void set_question(::std::string&& value);
  #endif
  void set_question(const char* value);
  void set_question(const char* value, size_t size);
  ::std::string* mutable_question();
  ::std::string* release_question();
  void set_allocated_question(::std::string* question);

  // optional string query_name = 8;
  bool has_query_name() const;
  void clear_query_name();
  static const int kQueryNameFieldNumber = 8;
  const ::std::string& query_name() const;
  void set_query_name(const ::std::string& value);
  #if LANG_CXX11
  void set_query_name(::std::string&& value);
  #endif
  void set_query_name(const char* value);
  void set_query_name(const char* value, size_t size);
  ::std::string* mutable_query_name();
  ::std::string* release_query_name();
  void set_allocated_query_name(::std::string* query_name);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType type() const;
  void set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value);

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 4;
  ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t group() const;
  void set_group(::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value);

  // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  bool has_answer_resolution_type() const;
  void clear_answer_resolution_type();
  static const int kAnswerResolutionTypeFieldNumber = 10;
  ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t answer_resolution_type() const;
  void set_answer_resolution_type(::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t value);

  // optional uint32 points_to_grant = 11;
  bool has_points_to_grant() const;
  void clear_points_to_grant();
  static const int kPointsToGrantFieldNumber = 11;
  ::google::protobuf::uint32 points_to_grant() const;
  void set_points_to_grant(::google::protobuf::uint32 value);

  // optional uint32 reward_action = 12;
  bool has_reward_action() const;
  void clear_reward_action();
  static const int kRewardActionFieldNumber = 12;
  ::google::protobuf::uint32 reward_action() const;
  void set_reward_action(::google::protobuf::uint32 value);

  // optional uint32 debug_force_selection = 13;
  bool has_debug_force_selection() const;
  void clear_debug_force_selection();
  static const int kDebugForceSelectionFieldNumber = 13;
  ::google::protobuf::uint32 debug_force_selection() const;
  void set_debug_force_selection(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  bool has_raw_value_type() const;
  void clear_raw_value_type();
  static const int kRawValueTypeFieldNumber = 14;
  ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t raw_value_type() const;
  void set_raw_value_type(::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice > choices_;
  ::google::protobuf::RepeatedPtrField<::std::string> required_heroes_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues > query_values_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr question_;
  ::google::protobuf::internal::ArenaStringPtr query_name_;
  ::google::protobuf::uint32 id_;
  int type_;
  int group_;
  int answer_resolution_type_;
  ::google::protobuf::uint32 points_to_grant_;
  ::google::protobuf::uint32 reward_action_;
  ::google::protobuf::uint32 debug_force_selection_;
  int raw_value_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeasonPredictions) */ {
 public:
  CMsgDOTASeasonPredictions();
  virtual ~CMsgDOTASeasonPredictions();

  CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from);

  inline CMsgDOTASeasonPredictions& operator=(const CMsgDOTASeasonPredictions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeasonPredictions(CMsgDOTASeasonPredictions&& from) noexcept
    : CMsgDOTASeasonPredictions() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions& operator=(CMsgDOTASeasonPredictions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeasonPredictions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeasonPredictions* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions*>(
               &_CMsgDOTASeasonPredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(CMsgDOTASeasonPredictions* other);
  friend void swap(CMsgDOTASeasonPredictions& a, CMsgDOTASeasonPredictions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeasonPredictions* New() const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions>(nullptr);
  }

  CMsgDOTASeasonPredictions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeasonPredictions& from);
  void MergeFrom(const CMsgDOTASeasonPredictions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonPredictions_Choice Choice;
  typedef CMsgDOTASeasonPredictions_Answers Answers;
  typedef CMsgDOTASeasonPredictions_QueryKeyValues QueryKeyValues;
  typedef CMsgDOTASeasonPredictions_Prediction Prediction;
  typedef CMsgDOTASeasonPredictions_InGamePrediction InGamePrediction;

  typedef CMsgDOTASeasonPredictions_ePredictionType ePredictionType;
  static const ePredictionType Generic =
    CMsgDOTASeasonPredictions_ePredictionType_Generic;
  static const ePredictionType Hero =
    CMsgDOTASeasonPredictions_ePredictionType_Hero;
  static const ePredictionType Team =
    CMsgDOTASeasonPredictions_ePredictionType_Team;
  static const ePredictionType Player =
    CMsgDOTASeasonPredictions_ePredictionType_Player;
  static const ePredictionType Special =
    CMsgDOTASeasonPredictions_ePredictionType_Special;
  static const ePredictionType YesNo =
    CMsgDOTASeasonPredictions_ePredictionType_YesNo;
  static inline bool ePredictionType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_ePredictionType_IsValid(value);
  }
  static const ePredictionType ePredictionType_MIN =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MIN;
  static const ePredictionType ePredictionType_MAX =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX;
  static const int ePredictionType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePredictionType_descriptor() {
    return CMsgDOTASeasonPredictions_ePredictionType_descriptor();
  }
  static inline const ::std::string& ePredictionType_Name(ePredictionType value) {
    return CMsgDOTASeasonPredictions_ePredictionType_Name(value);
  }
  static inline bool ePredictionType_Parse(const ::std::string& name,
      ePredictionType* value) {
    return CMsgDOTASeasonPredictions_ePredictionType_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eAnswerType eAnswerType;
  static const eAnswerType SingleInt =
    CMsgDOTASeasonPredictions_eAnswerType_SingleInt;
  static const eAnswerType SingleFloat =
    CMsgDOTASeasonPredictions_eAnswerType_SingleFloat;
  static const eAnswerType MultipleInt =
    CMsgDOTASeasonPredictions_eAnswerType_MultipleInt;
  static const eAnswerType MultipleFloat =
    CMsgDOTASeasonPredictions_eAnswerType_MultipleFloat;
  static const eAnswerType AnswerTeam =
    CMsgDOTASeasonPredictions_eAnswerType_AnswerTeam;
  static const eAnswerType SingleTime =
    CMsgDOTASeasonPredictions_eAnswerType_SingleTime;
  static const eAnswerType MultipleTime =
    CMsgDOTASeasonPredictions_eAnswerType_MultipleTime;
  static const eAnswerType NoAnswer =
    CMsgDOTASeasonPredictions_eAnswerType_NoAnswer;
  static inline bool eAnswerType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eAnswerType_IsValid(value);
  }
  static const eAnswerType eAnswerType_MIN =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MIN;
  static const eAnswerType eAnswerType_MAX =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX;
  static const int eAnswerType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAnswerType_descriptor() {
    return CMsgDOTASeasonPredictions_eAnswerType_descriptor();
  }
  static inline const ::std::string& eAnswerType_Name(eAnswerType value) {
    return CMsgDOTASeasonPredictions_eAnswerType_Name(value);
  }
  static inline bool eAnswerType_Parse(const ::std::string& name,
      eAnswerType* value) {
    return CMsgDOTASeasonPredictions_eAnswerType_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eResolutionType_t eResolutionType_t;
  static const eResolutionType_t InvalidQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery;
  static const eResolutionType_t FirstToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_FirstToPassQuery;
  static const eResolutionType_t LastToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_LastToPassQuery;
  static const eResolutionType_t LastRemainingQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_LastRemainingQuery;
  static const eResolutionType_t MaxToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_MaxToPassQuery;
  static const eResolutionType_t MinToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_MinToPassQuery;
  static const eResolutionType_t SumQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_SumQuery;
  static const eResolutionType_t MaxTeamSumToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_MaxTeamSumToPassQuery;
  static const eResolutionType_t MinTeamSumToPassQuery =
    CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery;
  static inline bool eResolutionType_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value);
  }
  static const eResolutionType_t eResolutionType_t_MIN =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MIN;
  static const eResolutionType_t eResolutionType_t_MAX =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX;
  static const int eResolutionType_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResolutionType_t_descriptor() {
    return CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
  }
  static inline const ::std::string& eResolutionType_t_Name(eResolutionType_t value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_Name(value);
  }
  static inline bool eResolutionType_t_Parse(const ::std::string& name,
      eResolutionType_t* value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eRandomSelectionGroup_t eRandomSelectionGroup_t;
  static const eRandomSelectionGroup_t EarlyGame =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame;
  static const eRandomSelectionGroup_t MidGame =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_MidGame;
  static const eRandomSelectionGroup_t LateGame =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_LateGame;
  static const eRandomSelectionGroup_t Count =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count;
  static inline bool eRandomSelectionGroup_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value);
  }
  static const eRandomSelectionGroup_t eRandomSelectionGroup_t_MIN =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MIN;
  static const eRandomSelectionGroup_t eRandomSelectionGroup_t_MAX =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX;
  static const int eRandomSelectionGroup_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRandomSelectionGroup_t_descriptor() {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
  }
  static inline const ::std::string& eRandomSelectionGroup_t_Name(eRandomSelectionGroup_t value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Name(value);
  }
  static inline bool eRandomSelectionGroup_t_Parse(const ::std::string& name,
      eRandomSelectionGroup_t* value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eRawValueType_t eRawValueType_t;
  static const eRawValueType_t Number =
    CMsgDOTASeasonPredictions_eRawValueType_t_Number;
  static const eRawValueType_t Time =
    CMsgDOTASeasonPredictions_eRawValueType_t_Time;
  static inline bool eRawValueType_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value);
  }
  static const eRawValueType_t eRawValueType_t_MIN =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MIN;
  static const eRawValueType_t eRawValueType_t_MAX =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX;
  static const int eRawValueType_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRawValueType_t_descriptor() {
    return CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
  }
  static inline const ::std::string& eRawValueType_t_Name(eRawValueType_t value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_Name(value);
  }
  static inline bool eRawValueType_t_Parse(const ::std::string& name,
      eRawValueType_t* value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  int predictions_size() const;
  void clear_predictions();
  static const int kPredictionsFieldNumber = 1;
  ::proto::dota::CMsgDOTASeasonPredictions_Prediction* mutable_predictions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >*
      mutable_predictions();
  const ::proto::dota::CMsgDOTASeasonPredictions_Prediction& predictions(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_Prediction* add_predictions();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >&
      predictions() const;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  int in_game_predictions_size() const;
  void clear_in_game_predictions();
  static const int kInGamePredictionsFieldNumber = 2;
  ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* mutable_in_game_predictions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >*
      mutable_in_game_predictions();
  const ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction& in_game_predictions(int index) const;
  ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* add_in_game_predictions();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >&
      in_game_predictions() const;

  // optional uint32 in_game_prediction_count_per_game = 3;
  bool has_in_game_prediction_count_per_game() const;
  void clear_in_game_prediction_count_per_game();
  static const int kInGamePredictionCountPerGameFieldNumber = 3;
  ::google::protobuf::uint32 in_game_prediction_count_per_game() const;
  void set_in_game_prediction_count_per_game(::google::protobuf::uint32 value);

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  bool has_in_game_prediction_voting_period_minutes() const;
  void clear_in_game_prediction_voting_period_minutes();
  static const int kInGamePredictionVotingPeriodMinutesFieldNumber = 4;
  ::google::protobuf::uint32 in_game_prediction_voting_period_minutes() const;
  void set_in_game_prediction_voting_period_minutes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeasonPredictions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction > predictions_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction > in_game_predictions_;
  ::google::protobuf::uint32 in_game_prediction_count_per_game_;
  ::google::protobuf::uint32 in_game_prediction_voting_period_minutes_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player_CustomGameData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch.Player.CustomGameData) */ {
 public:
  CMsgDOTAMatch_Player_CustomGameData();
  virtual ~CMsgDOTAMatch_Player_CustomGameData();

  CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from);

  inline CMsgDOTAMatch_Player_CustomGameData& operator=(const CMsgDOTAMatch_Player_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_Player_CustomGameData(CMsgDOTAMatch_Player_CustomGameData&& from) noexcept
    : CMsgDOTAMatch_Player_CustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player_CustomGameData& operator=(CMsgDOTAMatch_Player_CustomGameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch_Player_CustomGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_Player_CustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player_CustomGameData*>(
               &_CMsgDOTAMatch_Player_CustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(CMsgDOTAMatch_Player_CustomGameData* other);
  friend void swap(CMsgDOTAMatch_Player_CustomGameData& a, CMsgDOTAMatch_Player_CustomGameData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_Player_CustomGameData* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player_CustomGameData>(nullptr);
  }

  CMsgDOTAMatch_Player_CustomGameData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player_CustomGameData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from);
  void MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Player_CustomGameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  ::google::protobuf::uint32 dota_team() const;
  void set_dota_team(::google::protobuf::uint32 value);

  // optional bool winner = 2;
  bool has_winner() const;
  void clear_winner();
  static const int kWinnerFieldNumber = 2;
  bool winner() const;
  void set_winner(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 dota_team_;
  bool winner_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch.Player) */ {
 public:
  CMsgDOTAMatch_Player();
  virtual ~CMsgDOTAMatch_Player();

  CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from);

  inline CMsgDOTAMatch_Player& operator=(const CMsgDOTAMatch_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_Player(CMsgDOTAMatch_Player&& from) noexcept
    : CMsgDOTAMatch_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player& operator=(CMsgDOTAMatch_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player*>(
               &_CMsgDOTAMatch_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(CMsgDOTAMatch_Player* other);
  friend void swap(CMsgDOTAMatch_Player& a, CMsgDOTAMatch_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_Player* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player>(nullptr);
  }

  CMsgDOTAMatch_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch_Player& from);
  void MergeFrom(const CMsgDOTAMatch_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player_CustomGameData CustomGameData;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  int ability_upgrades_size() const;
  void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 47;
  ::proto::dota::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  const ::proto::dota::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  ::proto::dota::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  int additional_units_inventory_size() const;
  void clear_additional_units_inventory();
  static const int kAdditionalUnitsInventoryFieldNumber = 48;
  ::proto::dota::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  const ::proto::dota::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  ::proto::dota::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  int permanent_buffs_size() const;
  void clear_permanent_buffs();
  static const int kPermanentBuffsFieldNumber = 57;
  ::proto::dota::CMatchPlayerPermanentBuff* mutable_permanent_buffs(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >*
      mutable_permanent_buffs();
  const ::proto::dota::CMatchPlayerPermanentBuff& permanent_buffs(int index) const;
  ::proto::dota::CMatchPlayerPermanentBuff* add_permanent_buffs();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >&
      permanent_buffs() const;

  // optional string player_name = 29;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 29;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional string pro_name = 72;
  bool has_pro_name() const;
  void clear_pro_name();
  static const int kProNameFieldNumber = 72;
  const ::std::string& pro_name() const;
  void set_pro_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pro_name(::std::string&& value);
  #endif
  void set_pro_name(const char* value);
  void set_pro_name(const char* value, size_t size);
  ::std::string* mutable_pro_name();
  ::std::string* release_pro_name();
  void set_allocated_pro_name(::std::string* pro_name);

  // optional string real_name = 73;
  bool has_real_name() const;
  void clear_real_name();
  static const int kRealNameFieldNumber = 73;
  const ::std::string& real_name() const;
  void set_real_name(const ::std::string& value);
  #if LANG_CXX11
  void set_real_name(::std::string&& value);
  #endif
  void set_real_name(const char* value);
  void set_real_name(const char* value, size_t size);
  ::std::string* mutable_real_name();
  ::std::string* release_real_name();
  void set_allocated_real_name(::std::string* real_name);

  // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  bool has_custom_game_data() const;
  void clear_custom_game_data();
  static const int kCustomGameDataFieldNumber = 50;
  const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData& custom_game_data() const;
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* release_custom_game_data();
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_Player_CustomGameData* custom_game_data);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 2;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 item_0 = 4;
  bool has_item_0() const;
  void clear_item_0();
  static const int kItem0FieldNumber = 4;
  ::google::protobuf::uint32 item_0() const;
  void set_item_0(::google::protobuf::uint32 value);

  // optional uint32 item_1 = 5;
  bool has_item_1() const;
  void clear_item_1();
  static const int kItem1FieldNumber = 5;
  ::google::protobuf::uint32 item_1() const;
  void set_item_1(::google::protobuf::uint32 value);

  // optional uint32 item_2 = 6;
  bool has_item_2() const;
  void clear_item_2();
  static const int kItem2FieldNumber = 6;
  ::google::protobuf::uint32 item_2() const;
  void set_item_2(::google::protobuf::uint32 value);

  // optional uint32 item_3 = 7;
  bool has_item_3() const;
  void clear_item_3();
  static const int kItem3FieldNumber = 7;
  ::google::protobuf::uint32 item_3() const;
  void set_item_3(::google::protobuf::uint32 value);

  // optional uint32 item_4 = 8;
  bool has_item_4() const;
  void clear_item_4();
  static const int kItem4FieldNumber = 8;
  ::google::protobuf::uint32 item_4() const;
  void set_item_4(::google::protobuf::uint32 value);

  // optional uint32 item_5 = 9;
  bool has_item_5() const;
  void clear_item_5();
  static const int kItem5FieldNumber = 9;
  ::google::protobuf::uint32 item_5() const;
  void set_item_5(::google::protobuf::uint32 value);

  // optional float expected_team_contribution = 10;
  bool has_expected_team_contribution() const;
  void clear_expected_team_contribution();
  static const int kExpectedTeamContributionFieldNumber = 10;
  float expected_team_contribution() const;
  void set_expected_team_contribution(float value);

  // optional float scaled_metric = 11;
  bool has_scaled_metric() const;
  void clear_scaled_metric();
  static const int kScaledMetricFieldNumber = 11;
  float scaled_metric() const;
  void set_scaled_metric(float value);

  // optional uint32 previous_rank = 12;
  bool has_previous_rank() const;
  void clear_previous_rank();
  static const int kPreviousRankFieldNumber = 12;
  ::google::protobuf::uint32 previous_rank() const;
  void set_previous_rank(::google::protobuf::uint32 value);

  // optional sint32 rank_change = 13;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 13;
  ::google::protobuf::int32 rank_change() const;
  void set_rank_change(::google::protobuf::int32 value);

  // optional uint32 kills = 14;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 14;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 15;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 15;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 16;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 16;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 leaver_status = 17;
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 17;
  ::google::protobuf::uint32 leaver_status() const;
  void set_leaver_status(::google::protobuf::uint32 value);

  // optional uint32 gold = 18;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 18;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 19;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 19;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 20;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 20;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 21;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 21;
  ::google::protobuf::uint32 gold_per_min() const;
  void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 XP_per_min = 22;
  bool has_xp_per_min() const;
  void clear_xp_per_min();
  static const int kXPPerMinFieldNumber = 22;
  ::google::protobuf::uint32 xp_per_min() const;
  void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 gold_spent = 23;
  bool has_gold_spent() const;
  void clear_gold_spent();
  static const int kGoldSpentFieldNumber = 23;
  ::google::protobuf::uint32 gold_spent() const;
  void set_gold_spent(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  bool has_hero_damage() const;
  void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  ::google::protobuf::uint32 hero_damage() const;
  void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  bool has_tower_damage() const;
  void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  ::google::protobuf::uint32 tower_damage() const;
  void set_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 26;
  bool has_hero_healing() const;
  void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 26;
  ::google::protobuf::uint32 hero_healing() const;
  void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 level = 27;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 27;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 time_last_seen = 28;
  bool has_time_last_seen() const;
  void clear_time_last_seen();
  static const int kTimeLastSeenFieldNumber = 28;
  ::google::protobuf::uint32 time_last_seen() const;
  void set_time_last_seen(::google::protobuf::uint32 value);

  // optional uint32 support_ability_value = 30;
  bool has_support_ability_value() const;
  void clear_support_ability_value();
  static const int kSupportAbilityValueFieldNumber = 30;
  ::google::protobuf::uint32 support_ability_value() const;
  void set_support_ability_value(::google::protobuf::uint32 value);

  // optional uint32 search_rank = 34;
  bool has_search_rank() const;
  void clear_search_rank();
  static const int kSearchRankFieldNumber = 34;
  ::google::protobuf::uint32 search_rank() const;
  void set_search_rank(::google::protobuf::uint32 value);

  // optional uint32 search_rank_uncertainty = 35;
  bool has_search_rank_uncertainty() const;
  void clear_search_rank_uncertainty();
  static const int kSearchRankUncertaintyFieldNumber = 35;
  ::google::protobuf::uint32 search_rank_uncertainty() const;
  void set_search_rank_uncertainty(::google::protobuf::uint32 value);

  // optional int32 rank_uncertainty_change = 36;
  bool has_rank_uncertainty_change() const;
  void clear_rank_uncertainty_change();
  static const int kRankUncertaintyChangeFieldNumber = 36;
  ::google::protobuf::int32 rank_uncertainty_change() const;
  void set_rank_uncertainty_change(::google::protobuf::int32 value);

  // optional fixed64 party_id = 38;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 38;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 hero_play_count = 37;
  bool has_hero_play_count() const;
  void clear_hero_play_count();
  static const int kHeroPlayCountFieldNumber = 37;
  ::google::protobuf::uint32 hero_play_count() const;
  void set_hero_play_count(::google::protobuf::uint32 value);

  // optional float scaled_kills = 39;
  bool has_scaled_kills() const;
  void clear_scaled_kills();
  static const int kScaledKillsFieldNumber = 39;
  float scaled_kills() const;
  void set_scaled_kills(float value);

  // optional float scaled_deaths = 40;
  bool has_scaled_deaths() const;
  void clear_scaled_deaths();
  static const int kScaledDeathsFieldNumber = 40;
  float scaled_deaths() const;
  void set_scaled_deaths(float value);

  // optional float scaled_assists = 41;
  bool has_scaled_assists() const;
  void clear_scaled_assists();
  static const int kScaledAssistsFieldNumber = 41;
  float scaled_assists() const;
  void set_scaled_assists(float value);

  // optional uint32 claimed_farm_gold = 42;
  bool has_claimed_farm_gold() const;
  void clear_claimed_farm_gold();
  static const int kClaimedFarmGoldFieldNumber = 42;
  ::google::protobuf::uint32 claimed_farm_gold() const;
  void set_claimed_farm_gold(::google::protobuf::uint32 value);

  // optional uint32 support_gold = 43;
  bool has_support_gold() const;
  void clear_support_gold();
  static const int kSupportGoldFieldNumber = 43;
  ::google::protobuf::uint32 support_gold() const;
  void set_support_gold(::google::protobuf::uint32 value);

  // optional uint32 claimed_denies = 44;
  bool has_claimed_denies() const;
  void clear_claimed_denies();
  static const int kClaimedDeniesFieldNumber = 44;
  ::google::protobuf::uint32 claimed_denies() const;
  void set_claimed_denies(::google::protobuf::uint32 value);

  // optional uint32 claimed_misses = 45;
  bool has_claimed_misses() const;
  void clear_claimed_misses();
  static const int kClaimedMissesFieldNumber = 45;
  ::google::protobuf::uint32 claimed_misses() const;
  void set_claimed_misses(::google::protobuf::uint32 value);

  // optional uint32 misses = 46;
  bool has_misses() const;
  void clear_misses();
  static const int kMissesFieldNumber = 46;
  ::google::protobuf::uint32 misses() const;
  void set_misses(::google::protobuf::uint32 value);

  // optional bool solo_rank = 49;
  bool has_solo_rank() const;
  void clear_solo_rank();
  static const int kSoloRankFieldNumber = 49;
  bool solo_rank() const;
  void set_solo_rank(bool value);

  // optional bool seasonal_rank = 53;
  bool has_seasonal_rank() const;
  void clear_seasonal_rank();
  static const int kSeasonalRankFieldNumber = 53;
  bool seasonal_rank() const;
  void set_seasonal_rank(bool value);

  // optional bool rank_tier_updated = 66;
  bool has_rank_tier_updated() const;
  void clear_rank_tier_updated();
  static const int kRankTierUpdatedFieldNumber = 66;
  bool rank_tier_updated() const;
  void set_rank_tier_updated(bool value);

  // optional bool feeding_detected = 32;
  bool has_feeding_detected() const;
  void clear_feeding_detected();
  static const int kFeedingDetectedFieldNumber = 32;
  bool feeding_detected() const;
  void set_feeding_detected(bool value);

  // optional uint32 net_worth = 52;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 52;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // optional uint32 scaled_hero_damage = 54;
  bool has_scaled_hero_damage() const;
  void clear_scaled_hero_damage();
  static const int kScaledHeroDamageFieldNumber = 54;
  ::google::protobuf::uint32 scaled_hero_damage() const;
  void set_scaled_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 scaled_tower_damage = 55;
  bool has_scaled_tower_damage() const;
  void clear_scaled_tower_damage();
  static const int kScaledTowerDamageFieldNumber = 55;
  ::google::protobuf::uint32 scaled_tower_damage() const;
  void set_scaled_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 scaled_hero_healing = 56;
  bool has_scaled_hero_healing() const;
  void clear_scaled_hero_healing();
  static const int kScaledHeroHealingFieldNumber = 56;
  ::google::protobuf::uint32 scaled_hero_healing() const;
  void set_scaled_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 bot_difficulty = 58;
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 58;
  ::google::protobuf::uint32 bot_difficulty() const;
  void set_bot_difficulty(::google::protobuf::uint32 value);

  // optional uint32 item_6 = 59;
  bool has_item_6() const;
  void clear_item_6();
  static const int kItem6FieldNumber = 59;
  ::google::protobuf::uint32 item_6() const;
  void set_item_6(::google::protobuf::uint32 value);

  // optional uint32 item_7 = 60;
  bool has_item_7() const;
  void clear_item_7();
  static const int kItem7FieldNumber = 60;
  ::google::protobuf::uint32 item_7() const;
  void set_item_7(::google::protobuf::uint32 value);

  // optional uint32 item_8 = 61;
  bool has_item_8() const;
  void clear_item_8();
  static const int kItem8FieldNumber = 61;
  ::google::protobuf::uint32 item_8() const;
  void set_item_8(::google::protobuf::uint32 value);

  // optional bool active_plus_subscription = 51;
  bool has_active_plus_subscription() const;
  void clear_active_plus_subscription();
  static const int kActivePlusSubscriptionFieldNumber = 51;
  bool active_plus_subscription() const;
  void set_active_plus_subscription(bool value);

  // optional bool hero_was_randomed = 64;
  bool has_hero_was_randomed() const;
  void clear_hero_was_randomed();
  static const int kHeroWasRandomedFieldNumber = 64;
  bool hero_was_randomed() const;
  void set_hero_was_randomed(bool value);

  // optional bool hero_was_bonus = 65;
  bool has_hero_was_bonus() const;
  void clear_hero_was_bonus();
  static const int kHeroWasBonusFieldNumber = 65;
  bool hero_was_bonus() const;
  void set_hero_was_bonus(bool value);

  // optional bool hero_was_dota_plus_suggestion = 69;
  bool has_hero_was_dota_plus_suggestion() const;
  void clear_hero_was_dota_plus_suggestion();
  static const int kHeroWasDotaPlusSuggestionFieldNumber = 69;
  bool hero_was_dota_plus_suggestion() const;
  void set_hero_was_dota_plus_suggestion(bool value);

  // optional uint32 hero_pick_order = 63;
  bool has_hero_pick_order() const;
  void clear_hero_pick_order();
  static const int kHeroPickOrderFieldNumber = 63;
  ::google::protobuf::uint32 hero_pick_order() const;
  void set_hero_pick_order(::google::protobuf::uint32 value);

  // optional uint32 hero_damage_received_pre_reduction = 67;
  bool has_hero_damage_received_pre_reduction() const;
  void clear_hero_damage_received_pre_reduction();
  static const int kHeroDamageReceivedPreReductionFieldNumber = 67;
  ::google::protobuf::uint32 hero_damage_received_pre_reduction() const;
  void set_hero_damage_received_pre_reduction(::google::protobuf::uint32 value);

  // optional uint32 hero_damage_received_post_reduction = 68;
  bool has_hero_damage_received_post_reduction() const;
  void clear_hero_damage_received_post_reduction();
  static const int kHeroDamageReceivedPostReductionFieldNumber = 68;
  ::google::protobuf::uint32 hero_damage_received_post_reduction() const;
  void set_hero_damage_received_post_reduction(::google::protobuf::uint32 value);

  // optional uint32 seconds_dead = 70;
  bool has_seconds_dead() const;
  void clear_seconds_dead();
  static const int kSecondsDeadFieldNumber = 70;
  ::google::protobuf::uint32 seconds_dead() const;
  void set_seconds_dead(::google::protobuf::uint32 value);

  // optional uint32 gold_lost_to_death = 71;
  bool has_gold_lost_to_death() const;
  void clear_gold_lost_to_death();
  static const int kGoldLostToDeathFieldNumber = 71;
  ::google::protobuf::uint32 gold_lost_to_death() const;
  void set_gold_lost_to_death(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory > additional_units_inventory_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff > permanent_buffs_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::internal::ArenaStringPtr pro_name_;
  ::google::protobuf::internal::ArenaStringPtr real_name_;
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* custom_game_data_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 item_0_;
  ::google::protobuf::uint32 item_1_;
  ::google::protobuf::uint32 item_2_;
  ::google::protobuf::uint32 item_3_;
  ::google::protobuf::uint32 item_4_;
  ::google::protobuf::uint32 item_5_;
  float expected_team_contribution_;
  float scaled_metric_;
  ::google::protobuf::uint32 previous_rank_;
  ::google::protobuf::int32 rank_change_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 leaver_status_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 gold_spent_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 time_last_seen_;
  ::google::protobuf::uint32 support_ability_value_;
  ::google::protobuf::uint32 search_rank_;
  ::google::protobuf::uint32 search_rank_uncertainty_;
  ::google::protobuf::int32 rank_uncertainty_change_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 hero_play_count_;
  float scaled_kills_;
  float scaled_deaths_;
  float scaled_assists_;
  ::google::protobuf::uint32 claimed_farm_gold_;
  ::google::protobuf::uint32 support_gold_;
  ::google::protobuf::uint32 claimed_denies_;
  ::google::protobuf::uint32 claimed_misses_;
  ::google::protobuf::uint32 misses_;
  bool solo_rank_;
  bool seasonal_rank_;
  bool rank_tier_updated_;
  bool feeding_detected_;
  ::google::protobuf::uint32 net_worth_;
  ::google::protobuf::uint32 scaled_hero_damage_;
  ::google::protobuf::uint32 scaled_tower_damage_;
  ::google::protobuf::uint32 scaled_hero_healing_;
  ::google::protobuf::uint32 bot_difficulty_;
  ::google::protobuf::uint32 item_6_;
  ::google::protobuf::uint32 item_7_;
  ::google::protobuf::uint32 item_8_;
  bool active_plus_subscription_;
  bool hero_was_randomed_;
  bool hero_was_bonus_;
  bool hero_was_dota_plus_suggestion_;
  ::google::protobuf::uint32 hero_pick_order_;
  ::google::protobuf::uint32 hero_damage_received_pre_reduction_;
  ::google::protobuf::uint32 hero_damage_received_post_reduction_;
  ::google::protobuf::uint32 seconds_dead_;
  ::google::protobuf::uint32 gold_lost_to_death_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch.BroadcasterInfo) */ {
 public:
  CMsgDOTAMatch_BroadcasterInfo();
  virtual ~CMsgDOTAMatch_BroadcasterInfo();

  CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from);

  inline CMsgDOTAMatch_BroadcasterInfo& operator=(const CMsgDOTAMatch_BroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_BroadcasterInfo(CMsgDOTAMatch_BroadcasterInfo&& from) noexcept
    : CMsgDOTAMatch_BroadcasterInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_BroadcasterInfo& operator=(CMsgDOTAMatch_BroadcasterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch_BroadcasterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_BroadcasterInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_BroadcasterInfo*>(
               &_CMsgDOTAMatch_BroadcasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(CMsgDOTAMatch_BroadcasterInfo* other);
  friend void swap(CMsgDOTAMatch_BroadcasterInfo& a, CMsgDOTAMatch_BroadcasterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_BroadcasterInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterInfo>(nullptr);
  }

  CMsgDOTAMatch_BroadcasterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from);
  void MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_BroadcasterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch.BroadcasterChannel) */ {
 public:
  CMsgDOTAMatch_BroadcasterChannel();
  virtual ~CMsgDOTAMatch_BroadcasterChannel();

  CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from);

  inline CMsgDOTAMatch_BroadcasterChannel& operator=(const CMsgDOTAMatch_BroadcasterChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_BroadcasterChannel(CMsgDOTAMatch_BroadcasterChannel&& from) noexcept
    : CMsgDOTAMatch_BroadcasterChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_BroadcasterChannel& operator=(CMsgDOTAMatch_BroadcasterChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch_BroadcasterChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_BroadcasterChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_BroadcasterChannel*>(
               &_CMsgDOTAMatch_BroadcasterChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(CMsgDOTAMatch_BroadcasterChannel* other);
  friend void swap(CMsgDOTAMatch_BroadcasterChannel& a, CMsgDOTAMatch_BroadcasterChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_BroadcasterChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterChannel>(nullptr);
  }

  CMsgDOTAMatch_BroadcasterChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from);
  void MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_BroadcasterChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  int broadcaster_infos_size() const;
  void clear_broadcaster_infos();
  static const int kBroadcasterInfosFieldNumber = 3;
  ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* mutable_broadcaster_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >*
      mutable_broadcaster_infos();
  const ::proto::dota::CMsgDOTAMatch_BroadcasterInfo& broadcaster_infos(int index) const;
  ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* add_broadcaster_infos();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >&
      broadcaster_infos() const;

  // optional string country_code = 1;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string language_code = 4;
  bool has_language_code() const;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 4;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo > broadcaster_infos_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_CustomGameData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch.CustomGameData) */ {
 public:
  CMsgDOTAMatch_CustomGameData();
  virtual ~CMsgDOTAMatch_CustomGameData();

  CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from);

  inline CMsgDOTAMatch_CustomGameData& operator=(const CMsgDOTAMatch_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_CustomGameData(CMsgDOTAMatch_CustomGameData&& from) noexcept
    : CMsgDOTAMatch_CustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_CustomGameData& operator=(CMsgDOTAMatch_CustomGameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch_CustomGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_CustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_CustomGameData*>(
               &_CMsgDOTAMatch_CustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(CMsgDOTAMatch_CustomGameData* other);
  friend void swap(CMsgDOTAMatch_CustomGameData& a, CMsgDOTAMatch_CustomGameData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_CustomGameData* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch_CustomGameData>(nullptr);
  }

  CMsgDOTAMatch_CustomGameData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_CustomGameData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch_CustomGameData& from);
  void MergeFrom(const CMsgDOTAMatch_CustomGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_CustomGameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string map_name = 2;
  bool has_map_name() const;
  void clear_map_name();
  static const int kMapNameFieldNumber = 2;
  const ::std::string& map_name() const;
  void set_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_map_name(::std::string&& value);
  #endif
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  ::std::string* mutable_map_name();
  ::std::string* release_map_name();
  void set_allocated_map_name(::std::string* map_name);

  // optional uint64 custom_game_id = 1;
  bool has_custom_game_id() const;
  void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 1;
  ::google::protobuf::uint64 custom_game_id() const;
  void set_custom_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch.CustomGameData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_name_;
  ::google::protobuf::uint64 custom_game_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatch) */ {
 public:
  CMsgDOTAMatch();
  virtual ~CMsgDOTAMatch();

  CMsgDOTAMatch(const CMsgDOTAMatch& from);

  inline CMsgDOTAMatch& operator=(const CMsgDOTAMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch(CMsgDOTAMatch&& from) noexcept
    : CMsgDOTAMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch& operator=(CMsgDOTAMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch*>(
               &_CMsgDOTAMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(CMsgDOTAMatch* other);
  friend void swap(CMsgDOTAMatch& a, CMsgDOTAMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatch>(nullptr);
  }

  CMsgDOTAMatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatch& from);
  void MergeFrom(const CMsgDOTAMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player Player;
  typedef CMsgDOTAMatch_BroadcasterInfo BroadcasterInfo;
  typedef CMsgDOTAMatch_BroadcasterChannel BroadcasterChannel;
  typedef CMsgDOTAMatch_CustomGameData CustomGameData;

  typedef CMsgDOTAMatch_ReplayState ReplayState;
  static const ReplayState REPLAY_AVAILABLE =
    CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
  static const ReplayState REPLAY_NOT_RECORDED =
    CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED;
  static const ReplayState REPLAY_EXPIRED =
    CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
  static inline bool ReplayState_IsValid(int value) {
    return CMsgDOTAMatch_ReplayState_IsValid(value);
  }
  static const ReplayState ReplayState_MIN =
    CMsgDOTAMatch_ReplayState_ReplayState_MIN;
  static const ReplayState ReplayState_MAX =
    CMsgDOTAMatch_ReplayState_ReplayState_MAX;
  static const int ReplayState_ARRAYSIZE =
    CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplayState_descriptor() {
    return CMsgDOTAMatch_ReplayState_descriptor();
  }
  static inline const ::std::string& ReplayState_Name(ReplayState value) {
    return CMsgDOTAMatch_ReplayState_Name(value);
  }
  static inline bool ReplayState_Parse(const ::std::string& name,
      ReplayState* value) {
    return CMsgDOTAMatch_ReplayState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 5;
  ::proto::dota::CMsgDOTAMatch_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >*
      mutable_players();
  const ::proto::dota::CMsgDOTAMatch_Player& players(int index) const;
  ::proto::dota::CMsgDOTAMatch_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >&
      players() const;

  // repeated uint32 tower_status = 8;
  int tower_status_size() const;
  void clear_tower_status();
  static const int kTowerStatusFieldNumber = 8;
  ::google::protobuf::uint32 tower_status(int index) const;
  void set_tower_status(int index, ::google::protobuf::uint32 value);
  void add_tower_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tower_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  int barracks_status_size() const;
  void clear_barracks_status();
  static const int kBarracksStatusFieldNumber = 9;
  ::google::protobuf::uint32 barracks_status(int index) const;
  void set_barracks_status(int index, ::google::protobuf::uint32 value);
  void add_barracks_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      barracks_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_barracks_status();

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  int picks_bans_size() const;
  void clear_picks_bans();
  static const int kPicksBansFieldNumber = 32;
  ::proto::dota::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  const ::proto::dota::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::proto::dota::CMatchHeroSelectEvent* add_picks_bans();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >&
      picks_bans() const;

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  int broadcaster_channels_size() const;
  void clear_broadcaster_channels();
  static const int kBroadcasterChannelsFieldNumber = 43;
  ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* mutable_broadcaster_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >*
      mutable_broadcaster_channels();
  const ::proto::dota::CMsgDOTAMatch_BroadcasterChannel& broadcaster_channels(int index) const;
  ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* add_broadcaster_channels();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >&
      broadcaster_channels() const;

  // optional string radiant_team_name = 23;
  bool has_radiant_team_name() const;
  void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 23;
  const ::std::string& radiant_team_name() const;
  void set_radiant_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_name(::std::string&& value);
  #endif
  void set_radiant_team_name(const char* value);
  void set_radiant_team_name(const char* value, size_t size);
  ::std::string* mutable_radiant_team_name();
  ::std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 24;
  bool has_dire_team_name() const;
  void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 24;
  const ::std::string& dire_team_name() const;
  void set_dire_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_name(::std::string&& value);
  #endif
  void set_dire_team_name(const char* value);
  void set_dire_team_name(const char* value, size_t size);
  ::std::string* mutable_dire_team_name();
  ::std::string* release_dire_team_name();
  void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional string radiant_team_tag = 37;
  bool has_radiant_team_tag() const;
  void clear_radiant_team_tag();
  static const int kRadiantTeamTagFieldNumber = 37;
  const ::std::string& radiant_team_tag() const;
  void set_radiant_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_tag(::std::string&& value);
  #endif
  void set_radiant_team_tag(const char* value);
  void set_radiant_team_tag(const char* value, size_t size);
  ::std::string* mutable_radiant_team_tag();
  ::std::string* release_radiant_team_tag();
  void set_allocated_radiant_team_tag(::std::string* radiant_team_tag);

  // optional string dire_team_tag = 38;
  bool has_dire_team_tag() const;
  void clear_dire_team_tag();
  static const int kDireTeamTagFieldNumber = 38;
  const ::std::string& dire_team_tag() const;
  void set_dire_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_tag(::std::string&& value);
  #endif
  void set_dire_team_tag(const char* value);
  void set_dire_team_tag(const char* value, size_t size);
  ::std::string* mutable_dire_team_tag();
  ::std::string* release_dire_team_tag();
  void set_allocated_dire_team_tag(::std::string* dire_team_tag);

  // optional string radiant_team_logo_url = 54;
  bool has_radiant_team_logo_url() const;
  void clear_radiant_team_logo_url();
  static const int kRadiantTeamLogoUrlFieldNumber = 54;
  const ::std::string& radiant_team_logo_url() const;
  void set_radiant_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_logo_url(::std::string&& value);
  #endif
  void set_radiant_team_logo_url(const char* value);
  void set_radiant_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_radiant_team_logo_url();
  ::std::string* release_radiant_team_logo_url();
  void set_allocated_radiant_team_logo_url(::std::string* radiant_team_logo_url);

  // optional string dire_team_logo_url = 55;
  bool has_dire_team_logo_url() const;
  void clear_dire_team_logo_url();
  static const int kDireTeamLogoUrlFieldNumber = 55;
  const ::std::string& dire_team_logo_url() const;
  void set_dire_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_logo_url(::std::string&& value);
  #endif
  void set_dire_team_logo_url(const char* value);
  void set_dire_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_dire_team_logo_url();
  ::std::string* release_dire_team_logo_url();
  void set_allocated_dire_team_logo_url(::std::string* dire_team_logo_url);

  // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  bool has_custom_game_data() const;
  void clear_custom_game_data();
  static const int kCustomGameDataFieldNumber = 45;
  const ::proto::dota::CMsgDOTAMatch_CustomGameData& custom_game_data() const;
  ::proto::dota::CMsgDOTAMatch_CustomGameData* release_custom_game_data();
  ::proto::dota::CMsgDOTAMatch_CustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_CustomGameData* custom_game_data);

  // optional uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional fixed32 startTime = 4;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint32 starttime() const;
  void set_starttime(::google::protobuf::uint32 value);

  // optional uint64 match_id = 6;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 6;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 cluster = 10;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 10;
  ::google::protobuf::uint32 cluster() const;
  void set_cluster(::google::protobuf::uint32 value);

  // optional uint32 first_blood_time = 12;
  bool has_first_blood_time() const;
  void clear_first_blood_time();
  static const int kFirstBloodTimeFieldNumber = 12;
  ::google::protobuf::uint32 first_blood_time() const;
  void set_first_blood_time(::google::protobuf::uint32 value);

  // optional fixed32 replay_salt = 13;
  bool has_replay_salt() const;
  void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 13;
  ::google::protobuf::uint32 replay_salt() const;
  void set_replay_salt(::google::protobuf::uint32 value);

  // optional fixed32 server_ip = 14;
  bool has_server_ip() const;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 14;
  ::google::protobuf::uint32 server_ip() const;
  void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 server_port = 15;
  bool has_server_port() const;
  void clear_server_port();
  static const int kServerPortFieldNumber = 15;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 16;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 16;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 human_players = 17;
  bool has_human_players() const;
  void clear_human_players();
  static const int kHumanPlayersFieldNumber = 17;
  ::google::protobuf::uint32 human_players() const;
  void set_human_players(::google::protobuf::uint32 value);

  // optional uint32 average_skill = 18;
  bool has_average_skill() const;
  void clear_average_skill();
  static const int kAverageSkillFieldNumber = 18;
  ::google::protobuf::uint32 average_skill() const;
  void set_average_skill(::google::protobuf::uint32 value);

  // optional float game_balance = 19;
  bool has_game_balance() const;
  void clear_game_balance();
  static const int kGameBalanceFieldNumber = 19;
  float game_balance() const;
  void set_game_balance(float value);

  // optional uint32 radiant_team_id = 20;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 20;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional uint32 dire_team_id = 21;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 21;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 leagueid = 22;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 22;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint64 radiant_team_logo = 25;
  bool has_radiant_team_logo() const;
  void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 25;
  ::google::protobuf::uint64 radiant_team_logo() const;
  void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint64 dire_team_logo = 26;
  bool has_dire_team_logo() const;
  void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 26;
  ::google::protobuf::uint64 dire_team_logo() const;
  void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional uint32 radiant_team_complete = 27;
  bool has_radiant_team_complete() const;
  void clear_radiant_team_complete();
  static const int kRadiantTeamCompleteFieldNumber = 27;
  ::google::protobuf::uint32 radiant_team_complete() const;
  void set_radiant_team_complete(::google::protobuf::uint32 value);

  // optional uint32 dire_team_complete = 28;
  bool has_dire_team_complete() const;
  void clear_dire_team_complete();
  static const int kDireTeamCompleteFieldNumber = 28;
  ::google::protobuf::uint32 dire_team_complete() const;
  void set_dire_team_complete(::google::protobuf::uint32 value);

  // optional uint32 positive_votes = 29;
  bool has_positive_votes() const;
  void clear_positive_votes();
  static const int kPositiveVotesFieldNumber = 29;
  ::google::protobuf::uint32 positive_votes() const;
  void set_positive_votes(::google::protobuf::uint32 value);

  // optional uint32 negative_votes = 30;
  bool has_negative_votes() const;
  void clear_negative_votes();
  static const int kNegativeVotesFieldNumber = 30;
  ::google::protobuf::uint32 negative_votes() const;
  void set_negative_votes(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 31;
  ::proto::dota::DOTA_GameMode game_mode() const;
  void set_game_mode(::proto::dota::DOTA_GameMode value);

  // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  bool has_replay_state() const;
  void clear_replay_state();
  static const int kReplayStateFieldNumber = 34;
  ::proto::dota::CMsgDOTAMatch_ReplayState replay_state() const;
  void set_replay_state(::proto::dota::CMsgDOTAMatch_ReplayState value);

  // optional uint64 match_seq_num = 33;
  bool has_match_seq_num() const;
  void clear_match_seq_num();
  static const int kMatchSeqNumFieldNumber = 33;
  ::google::protobuf::uint64 match_seq_num() const;
  void set_match_seq_num(::google::protobuf::uint64 value);

  // optional uint32 radiant_guild_id = 35;
  bool has_radiant_guild_id() const;
  void clear_radiant_guild_id();
  static const int kRadiantGuildIdFieldNumber = 35;
  ::google::protobuf::uint32 radiant_guild_id() const;
  void set_radiant_guild_id(::google::protobuf::uint32 value);

  // optional uint32 dire_guild_id = 36;
  bool has_dire_guild_id() const;
  void clear_dire_guild_id();
  static const int kDireGuildIdFieldNumber = 36;
  ::google::protobuf::uint32 dire_guild_id() const;
  void set_dire_guild_id(::google::protobuf::uint32 value);

  // optional uint32 series_id = 39;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 39;
  ::google::protobuf::uint32 series_id() const;
  void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 40;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 40;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 engine = 44;
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 44;
  ::google::protobuf::uint32 engine() const;
  void set_engine(::google::protobuf::uint32 value);

  // optional uint32 match_flags = 46;
  bool has_match_flags() const;
  void clear_match_flags();
  static const int kMatchFlagsFieldNumber = 46;
  ::google::protobuf::uint32 match_flags() const;
  void set_match_flags(::google::protobuf::uint32 value);

  // optional fixed32 private_metadata_key = 47;
  bool has_private_metadata_key() const;
  void clear_private_metadata_key();
  static const int kPrivateMetadataKeyFieldNumber = 47;
  ::google::protobuf::uint32 private_metadata_key() const;
  void set_private_metadata_key(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_score = 48;
  bool has_radiant_team_score() const;
  void clear_radiant_team_score();
  static const int kRadiantTeamScoreFieldNumber = 48;
  ::google::protobuf::uint32 radiant_team_score() const;
  void set_radiant_team_score(::google::protobuf::uint32 value);

  // optional uint32 dire_team_score = 49;
  bool has_dire_team_score() const;
  void clear_dire_team_score();
  static const int kDireTeamScoreFieldNumber = 49;
  ::google::protobuf::uint32 dire_team_score() const;
  void set_dire_team_score(::google::protobuf::uint32 value);

  // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 50;
  ::proto::dota::EMatchOutcome match_outcome() const;
  void set_match_outcome(::proto::dota::EMatchOutcome value);

  // optional uint32 pre_game_duration = 53;
  bool has_pre_game_duration() const;
  void clear_pre_game_duration();
  static const int kPreGameDurationFieldNumber = 53;
  ::google::protobuf::uint32 pre_game_duration() const;
  void set_pre_game_duration(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 51;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 51;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_round = 52;
  bool has_tournament_round() const;
  void clear_tournament_round();
  static const int kTournamentRoundFieldNumber = 52;
  ::google::protobuf::uint32 tournament_round() const;
  void set_tournament_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatch)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player > players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tower_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > barracks_status_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent > picks_bans_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel > broadcaster_channels_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_name_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_name_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_tag_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_tag_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_logo_url_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_logo_url_;
  ::proto::dota::CMsgDOTAMatch_CustomGameData* custom_game_data_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 cluster_;
  ::google::protobuf::uint32 first_blood_time_;
  ::google::protobuf::uint32 replay_salt_;
  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 human_players_;
  ::google::protobuf::uint32 average_skill_;
  float game_balance_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 radiant_team_complete_;
  ::google::protobuf::uint32 dire_team_complete_;
  ::google::protobuf::uint32 positive_votes_;
  ::google::protobuf::uint32 negative_votes_;
  int game_mode_;
  int replay_state_;
  ::google::protobuf::uint64 match_seq_num_;
  ::google::protobuf::uint32 radiant_guild_id_;
  ::google::protobuf::uint32 dire_guild_id_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 engine_;
  ::google::protobuf::uint32 match_flags_;
  ::google::protobuf::uint32 private_metadata_key_;
  ::google::protobuf::uint32 radiant_team_score_;
  ::google::protobuf::uint32 dire_team_score_;
  int match_outcome_;
  ::google::protobuf::uint32 pre_game_duration_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_round_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerCard_StatModifier final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPlayerCard.StatModifier) */ {
 public:
  CMsgPlayerCard_StatModifier();
  virtual ~CMsgPlayerCard_StatModifier();

  CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from);

  inline CMsgPlayerCard_StatModifier& operator=(const CMsgPlayerCard_StatModifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPlayerCard_StatModifier(CMsgPlayerCard_StatModifier&& from) noexcept
    : CMsgPlayerCard_StatModifier() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerCard_StatModifier& operator=(CMsgPlayerCard_StatModifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPlayerCard_StatModifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPlayerCard_StatModifier* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerCard_StatModifier*>(
               &_CMsgPlayerCard_StatModifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(CMsgPlayerCard_StatModifier* other);
  friend void swap(CMsgPlayerCard_StatModifier& a, CMsgPlayerCard_StatModifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerCard_StatModifier* New() const final {
    return CreateMaybeMessage<CMsgPlayerCard_StatModifier>(nullptr);
  }

  CMsgPlayerCard_StatModifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerCard_StatModifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPlayerCard_StatModifier& from);
  void MergeFrom(const CMsgPlayerCard_StatModifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerCard_StatModifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stat = 1;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 1;
  ::google::protobuf::uint32 stat() const;
  void set_stat(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPlayerCard.StatModifier)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 stat_;
  ::google::protobuf::uint32 value_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerCard final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPlayerCard) */ {
 public:
  CMsgPlayerCard();
  virtual ~CMsgPlayerCard();

  CMsgPlayerCard(const CMsgPlayerCard& from);

  inline CMsgPlayerCard& operator=(const CMsgPlayerCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPlayerCard(CMsgPlayerCard&& from) noexcept
    : CMsgPlayerCard() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerCard& operator=(CMsgPlayerCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPlayerCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPlayerCard* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerCard*>(
               &_CMsgPlayerCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(CMsgPlayerCard* other);
  friend void swap(CMsgPlayerCard& a, CMsgPlayerCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerCard* New() const final {
    return CreateMaybeMessage<CMsgPlayerCard>(nullptr);
  }

  CMsgPlayerCard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerCard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPlayerCard& from);
  void MergeFrom(const CMsgPlayerCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPlayerCard_StatModifier StatModifier;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  int stat_modifier_size() const;
  void clear_stat_modifier();
  static const int kStatModifierFieldNumber = 2;
  ::proto::dota::CMsgPlayerCard_StatModifier* mutable_stat_modifier(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >*
      mutable_stat_modifier();
  const ::proto::dota::CMsgPlayerCard_StatModifier& stat_modifier(int index) const;
  ::proto::dota::CMsgPlayerCard_StatModifier* add_stat_modifier();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >&
      stat_modifier() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPlayerCard)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier > stat_modifier_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAFantasyPlayerStats) */ {
 public:
  CMsgDOTAFantasyPlayerStats();
  virtual ~CMsgDOTAFantasyPlayerStats();

  CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from);

  inline CMsgDOTAFantasyPlayerStats& operator=(const CMsgDOTAFantasyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAFantasyPlayerStats(CMsgDOTAFantasyPlayerStats&& from) noexcept
    : CMsgDOTAFantasyPlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerStats& operator=(CMsgDOTAFantasyPlayerStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAFantasyPlayerStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAFantasyPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerStats*>(
               &_CMsgDOTAFantasyPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(CMsgDOTAFantasyPlayerStats* other);
  friend void swap(CMsgDOTAFantasyPlayerStats& a, CMsgDOTAFantasyPlayerStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerStats* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStats>(nullptr);
  }

  CMsgDOTAFantasyPlayerStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 player_account_id = 1;
  bool has_player_account_id() const;
  void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 player_account_id() const;
  void set_player_account_id(::google::protobuf::uint32 value);

  // optional bool match_completed = 3;
  bool has_match_completed() const;
  void clear_match_completed();
  static const int kMatchCompletedFieldNumber = 3;
  bool match_completed() const;
  void set_match_completed(bool value);

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 5;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 5;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 delay = 6;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 6;
  ::google::protobuf::uint32 delay() const;
  void set_delay(::google::protobuf::uint32 value);

  // optional uint32 series_id = 7;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 7;
  ::google::protobuf::uint32 series_id() const;
  void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 kills = 10;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 10;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 11;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 11;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 cs = 12;
  bool has_cs() const;
  void clear_cs();
  static const int kCsFieldNumber = 12;
  ::google::protobuf::uint32 cs() const;
  void set_cs(::google::protobuf::uint32 value);

  // optional float gpm = 13;
  bool has_gpm() const;
  void clear_gpm();
  static const int kGpmFieldNumber = 13;
  float gpm() const;
  void set_gpm(float value);

  // optional uint32 tower_kills = 14;
  bool has_tower_kills() const;
  void clear_tower_kills();
  static const int kTowerKillsFieldNumber = 14;
  ::google::protobuf::uint32 tower_kills() const;
  void set_tower_kills(::google::protobuf::uint32 value);

  // optional uint32 roshan_kills = 15;
  bool has_roshan_kills() const;
  void clear_roshan_kills();
  static const int kRoshanKillsFieldNumber = 15;
  ::google::protobuf::uint32 roshan_kills() const;
  void set_roshan_kills(::google::protobuf::uint32 value);

  // optional float teamfight_participation = 16;
  bool has_teamfight_participation() const;
  void clear_teamfight_participation();
  static const int kTeamfightParticipationFieldNumber = 16;
  float teamfight_participation() const;
  void set_teamfight_participation(float value);

  // optional uint32 wards_placed = 17;
  bool has_wards_placed() const;
  void clear_wards_placed();
  static const int kWardsPlacedFieldNumber = 17;
  ::google::protobuf::uint32 wards_placed() const;
  void set_wards_placed(::google::protobuf::uint32 value);

  // optional uint32 camps_stacked = 18;
  bool has_camps_stacked() const;
  void clear_camps_stacked();
  static const int kCampsStackedFieldNumber = 18;
  ::google::protobuf::uint32 camps_stacked() const;
  void set_camps_stacked(::google::protobuf::uint32 value);

  // optional uint32 runes_grabbed = 19;
  bool has_runes_grabbed() const;
  void clear_runes_grabbed();
  static const int kRunesGrabbedFieldNumber = 19;
  ::google::protobuf::uint32 runes_grabbed() const;
  void set_runes_grabbed(::google::protobuf::uint32 value);

  // optional uint32 first_blood = 20;
  bool has_first_blood() const;
  void clear_first_blood();
  static const int kFirstBloodFieldNumber = 20;
  ::google::protobuf::uint32 first_blood() const;
  void set_first_blood(::google::protobuf::uint32 value);

  // optional float stuns = 21;
  bool has_stuns() const;
  void clear_stuns();
  static const int kStunsFieldNumber = 21;
  float stuns() const;
  void set_stuns(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAFantasyPlayerStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 player_account_id_;
  bool match_completed_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 cs_;
  float gpm_;
  ::google::protobuf::uint32 tower_kills_;
  ::google::protobuf::uint32 roshan_kills_;
  float teamfight_participation_;
  ::google::protobuf::uint32 wards_placed_;
  ::google::protobuf::uint32 camps_stacked_;
  ::google::protobuf::uint32 runes_grabbed_;
  ::google::protobuf::uint32 first_blood_;
  float stuns_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerMatchStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAFantasyPlayerMatchStats) */ {
 public:
  CMsgDOTAFantasyPlayerMatchStats();
  virtual ~CMsgDOTAFantasyPlayerMatchStats();

  CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from);

  inline CMsgDOTAFantasyPlayerMatchStats& operator=(const CMsgDOTAFantasyPlayerMatchStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAFantasyPlayerMatchStats(CMsgDOTAFantasyPlayerMatchStats&& from) noexcept
    : CMsgDOTAFantasyPlayerMatchStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerMatchStats& operator=(CMsgDOTAFantasyPlayerMatchStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAFantasyPlayerMatchStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAFantasyPlayerMatchStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerMatchStats*>(
               &_CMsgDOTAFantasyPlayerMatchStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(CMsgDOTAFantasyPlayerMatchStats* other);
  friend void swap(CMsgDOTAFantasyPlayerMatchStats& a, CMsgDOTAFantasyPlayerMatchStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerMatchStats* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerMatchStats>(nullptr);
  }

  CMsgDOTAFantasyPlayerMatchStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerMatchStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerMatchStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  ::proto::dota::CMsgDOTAFantasyPlayerStats* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
      mutable_matches();
  const ::proto::dota::CMsgDOTAFantasyPlayerStats& matches(int index) const;
  ::proto::dota::CMsgDOTAFantasyPlayerStats* add_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
      matches() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats > matches_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Mode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode) */ {
 public:
  CMsgDOTABotDebugInfo_Bot_Mode();
  virtual ~CMsgDOTABotDebugInfo_Bot_Mode();

  CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from);

  inline CMsgDOTABotDebugInfo_Bot_Mode& operator=(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABotDebugInfo_Bot_Mode(CMsgDOTABotDebugInfo_Bot_Mode&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot_Mode() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot_Mode& operator=(CMsgDOTABotDebugInfo_Bot_Mode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABotDebugInfo_Bot_Mode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABotDebugInfo_Bot_Mode* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot_Mode*>(
               &_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(CMsgDOTABotDebugInfo_Bot_Mode* other);
  friend void swap(CMsgDOTABotDebugInfo_Bot_Mode& a, CMsgDOTABotDebugInfo_Bot_Mode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABotDebugInfo_Bot_Mode* New() const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Mode>(nullptr);
  }

  CMsgDOTABotDebugInfo_Bot_Mode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Mode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot_Mode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mode_id = 1;
  bool has_mode_id() const;
  void clear_mode_id();
  static const int kModeIdFieldNumber = 1;
  ::google::protobuf::uint32 mode_id() const;
  void set_mode_id(::google::protobuf::uint32 value);

  // optional float desire = 2;
  bool has_desire() const;
  void clear_desire();
  static const int kDesireFieldNumber = 2;
  float desire() const;
  void set_desire(float value);

  // optional uint32 target_entity = 3;
  bool has_target_entity() const;
  void clear_target_entity();
  static const int kTargetEntityFieldNumber = 3;
  ::google::protobuf::uint32 target_entity() const;
  void set_target_entity(::google::protobuf::uint32 value);

  // optional uint32 target_x = 4;
  bool has_target_x() const;
  void clear_target_x();
  static const int kTargetXFieldNumber = 4;
  ::google::protobuf::uint32 target_x() const;
  void set_target_x(::google::protobuf::uint32 value);

  // optional uint32 target_y = 5;
  bool has_target_y() const;
  void clear_target_y();
  static const int kTargetYFieldNumber = 5;
  ::google::protobuf::uint32 target_y() const;
  void set_target_y(::google::protobuf::uint32 value);

  // optional uint32 target_z = 6;
  bool has_target_z() const;
  void clear_target_z();
  static const int kTargetZFieldNumber = 6;
  ::google::protobuf::uint32 target_z() const;
  void set_target_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 mode_id_;
  float desire_;
  ::google::protobuf::uint32 target_entity_;
  ::google::protobuf::uint32 target_x_;
  ::google::protobuf::uint32 target_y_;
  ::google::protobuf::uint32 target_z_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Action final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABotDebugInfo.Bot.Action) */ {
 public:
  CMsgDOTABotDebugInfo_Bot_Action();
  virtual ~CMsgDOTABotDebugInfo_Bot_Action();

  CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from);

  inline CMsgDOTABotDebugInfo_Bot_Action& operator=(const CMsgDOTABotDebugInfo_Bot_Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABotDebugInfo_Bot_Action(CMsgDOTABotDebugInfo_Bot_Action&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot_Action() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot_Action& operator=(CMsgDOTABotDebugInfo_Bot_Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABotDebugInfo_Bot_Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABotDebugInfo_Bot_Action* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot_Action*>(
               &_CMsgDOTABotDebugInfo_Bot_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(CMsgDOTABotDebugInfo_Bot_Action* other);
  friend void swap(CMsgDOTABotDebugInfo_Bot_Action& a, CMsgDOTABotDebugInfo_Bot_Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABotDebugInfo_Bot_Action* New() const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Action>(nullptr);
  }

  CMsgDOTABotDebugInfo_Bot_Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot_Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string action_target = 2;
  bool has_action_target() const;
  void clear_action_target();
  static const int kActionTargetFieldNumber = 2;
  const ::std::string& action_target() const;
  void set_action_target(const ::std::string& value);
  #if LANG_CXX11
  void set_action_target(::std::string&& value);
  #endif
  void set_action_target(const char* value);
  void set_action_target(const char* value, size_t size);
  ::std::string* mutable_action_target();
  ::std::string* release_action_target();
  void set_allocated_action_target(::std::string* action_target);

  // optional uint32 action_id = 1;
  bool has_action_id() const;
  void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr action_target_;
  ::google::protobuf::uint32 action_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABotDebugInfo.Bot) */ {
 public:
  CMsgDOTABotDebugInfo_Bot();
  virtual ~CMsgDOTABotDebugInfo_Bot();

  CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from);

  inline CMsgDOTABotDebugInfo_Bot& operator=(const CMsgDOTABotDebugInfo_Bot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABotDebugInfo_Bot(CMsgDOTABotDebugInfo_Bot&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot& operator=(CMsgDOTABotDebugInfo_Bot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABotDebugInfo_Bot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABotDebugInfo_Bot* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot*>(
               &_CMsgDOTABotDebugInfo_Bot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(CMsgDOTABotDebugInfo_Bot* other);
  friend void swap(CMsgDOTABotDebugInfo_Bot& a, CMsgDOTABotDebugInfo_Bot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABotDebugInfo_Bot* New() const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot>(nullptr);
  }

  CMsgDOTABotDebugInfo_Bot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot_Mode Mode;
  typedef CMsgDOTABotDebugInfo_Bot_Action Action;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 11;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* mutable_modes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >*
      mutable_modes();
  const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode& modes(int index) const;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* add_modes();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >&
      modes() const;

  // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 12;
  const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action& action() const;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* release_action();
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* mutable_action();
  void set_allocated_action(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* action);

  // optional uint32 player_owner_id = 1;
  bool has_player_owner_id() const;
  void clear_player_owner_id();
  static const int kPlayerOwnerIdFieldNumber = 1;
  ::google::protobuf::uint32 player_owner_id() const;
  void set_player_owner_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 3;
  bool has_difficulty() const;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // optional uint32 power_current = 4;
  bool has_power_current() const;
  void clear_power_current();
  static const int kPowerCurrentFieldNumber = 4;
  ::google::protobuf::uint32 power_current() const;
  void set_power_current(::google::protobuf::uint32 value);

  // optional uint32 power_max = 5;
  bool has_power_max() const;
  void clear_power_max();
  static const int kPowerMaxFieldNumber = 5;
  ::google::protobuf::uint32 power_max() const;
  void set_power_max(::google::protobuf::uint32 value);

  // optional uint32 move_target_x = 6;
  bool has_move_target_x() const;
  void clear_move_target_x();
  static const int kMoveTargetXFieldNumber = 6;
  ::google::protobuf::uint32 move_target_x() const;
  void set_move_target_x(::google::protobuf::uint32 value);

  // optional uint32 move_target_y = 7;
  bool has_move_target_y() const;
  void clear_move_target_y();
  static const int kMoveTargetYFieldNumber = 7;
  ::google::protobuf::uint32 move_target_y() const;
  void set_move_target_y(::google::protobuf::uint32 value);

  // optional uint32 move_target_z = 8;
  bool has_move_target_z() const;
  void clear_move_target_z();
  static const int kMoveTargetZFieldNumber = 8;
  ::google::protobuf::uint32 move_target_z() const;
  void set_move_target_z(::google::protobuf::uint32 value);

  // optional uint32 active_mode_id = 9;
  bool has_active_mode_id() const;
  void clear_active_mode_id();
  static const int kActiveModeIdFieldNumber = 9;
  ::google::protobuf::uint32 active_mode_id() const;
  void set_active_mode_id(::google::protobuf::uint32 value);

  // optional float execution_time = 10;
  bool has_execution_time() const;
  void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 10;
  float execution_time() const;
  void set_execution_time(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABotDebugInfo.Bot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode > modes_;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* action_;
  ::google::protobuf::uint32 player_owner_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 power_current_;
  ::google::protobuf::uint32 power_max_;
  ::google::protobuf::uint32 move_target_x_;
  ::google::protobuf::uint32 move_target_y_;
  ::google::protobuf::uint32 move_target_z_;
  ::google::protobuf::uint32 active_mode_id_;
  float execution_time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABotDebugInfo) */ {
 public:
  CMsgDOTABotDebugInfo();
  virtual ~CMsgDOTABotDebugInfo();

  CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from);

  inline CMsgDOTABotDebugInfo& operator=(const CMsgDOTABotDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABotDebugInfo(CMsgDOTABotDebugInfo&& from) noexcept
    : CMsgDOTABotDebugInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo& operator=(CMsgDOTABotDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTABotDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABotDebugInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo*>(
               &_CMsgDOTABotDebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(CMsgDOTABotDebugInfo* other);
  friend void swap(CMsgDOTABotDebugInfo& a, CMsgDOTABotDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABotDebugInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo>(nullptr);
  }

  CMsgDOTABotDebugInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTABotDebugInfo& from);
  void MergeFrom(const CMsgDOTABotDebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot Bot;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  int bots_size() const;
  void clear_bots();
  static const int kBotsFieldNumber = 1;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot* mutable_bots(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >*
      mutable_bots();
  const ::proto::dota::CMsgDOTABotDebugInfo_Bot& bots(int index) const;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot* add_bots();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >&
      bots() const;

  // repeated uint32 rune_status = 13;
  int rune_status_size() const;
  void clear_rune_status();
  static const int kRuneStatusFieldNumber = 13;
  ::google::protobuf::uint32 rune_status(int index) const;
  void set_rune_status(int index, ::google::protobuf::uint32 value);
  void add_rune_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rune_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rune_status();

  // optional float desire_push_lane_top = 2;
  bool has_desire_push_lane_top() const;
  void clear_desire_push_lane_top();
  static const int kDesirePushLaneTopFieldNumber = 2;
  float desire_push_lane_top() const;
  void set_desire_push_lane_top(float value);

  // optional float desire_push_lane_mid = 3;
  bool has_desire_push_lane_mid() const;
  void clear_desire_push_lane_mid();
  static const int kDesirePushLaneMidFieldNumber = 3;
  float desire_push_lane_mid() const;
  void set_desire_push_lane_mid(float value);

  // optional float desire_push_lane_bot = 4;
  bool has_desire_push_lane_bot() const;
  void clear_desire_push_lane_bot();
  static const int kDesirePushLaneBotFieldNumber = 4;
  float desire_push_lane_bot() const;
  void set_desire_push_lane_bot(float value);

  // optional float desire_defend_lane_top = 5;
  bool has_desire_defend_lane_top() const;
  void clear_desire_defend_lane_top();
  static const int kDesireDefendLaneTopFieldNumber = 5;
  float desire_defend_lane_top() const;
  void set_desire_defend_lane_top(float value);

  // optional float desire_defend_lane_mid = 6;
  bool has_desire_defend_lane_mid() const;
  void clear_desire_defend_lane_mid();
  static const int kDesireDefendLaneMidFieldNumber = 6;
  float desire_defend_lane_mid() const;
  void set_desire_defend_lane_mid(float value);

  // optional float desire_defend_lane_bot = 7;
  bool has_desire_defend_lane_bot() const;
  void clear_desire_defend_lane_bot();
  static const int kDesireDefendLaneBotFieldNumber = 7;
  float desire_defend_lane_bot() const;
  void set_desire_defend_lane_bot(float value);

  // optional float desire_farm_lane_top = 8;
  bool has_desire_farm_lane_top() const;
  void clear_desire_farm_lane_top();
  static const int kDesireFarmLaneTopFieldNumber = 8;
  float desire_farm_lane_top() const;
  void set_desire_farm_lane_top(float value);

  // optional float desire_farm_lane_mid = 9;
  bool has_desire_farm_lane_mid() const;
  void clear_desire_farm_lane_mid();
  static const int kDesireFarmLaneMidFieldNumber = 9;
  float desire_farm_lane_mid() const;
  void set_desire_farm_lane_mid(float value);

  // optional float desire_farm_lane_bot = 10;
  bool has_desire_farm_lane_bot() const;
  void clear_desire_farm_lane_bot();
  static const int kDesireFarmLaneBotFieldNumber = 10;
  float desire_farm_lane_bot() const;
  void set_desire_farm_lane_bot(float value);

  // optional float desire_farm_roshan = 11;
  bool has_desire_farm_roshan() const;
  void clear_desire_farm_roshan();
  static const int kDesireFarmRoshanFieldNumber = 11;
  float desire_farm_roshan() const;
  void set_desire_farm_roshan(float value);

  // optional float execution_time = 12;
  bool has_execution_time() const;
  void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 12;
  float execution_time() const;
  void set_execution_time(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABotDebugInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot > bots_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rune_status_;
  float desire_push_lane_top_;
  float desire_push_lane_mid_;
  float desire_push_lane_bot_;
  float desire_defend_lane_top_;
  float desire_defend_lane_mid_;
  float desire_defend_lane_bot_;
  float desire_farm_lane_top_;
  float desire_farm_lane_mid_;
  float desire_farm_lane_bot_;
  float desire_farm_roshan_;
  float execution_time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgSuccessfulHero final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgSuccessfulHero) */ {
 public:
  CMsgSuccessfulHero();
  virtual ~CMsgSuccessfulHero();

  CMsgSuccessfulHero(const CMsgSuccessfulHero& from);

  inline CMsgSuccessfulHero& operator=(const CMsgSuccessfulHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSuccessfulHero(CMsgSuccessfulHero&& from) noexcept
    : CMsgSuccessfulHero() {
    *this = ::std::move(from);
  }

  inline CMsgSuccessfulHero& operator=(CMsgSuccessfulHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSuccessfulHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSuccessfulHero* internal_default_instance() {
    return reinterpret_cast<const CMsgSuccessfulHero*>(
               &_CMsgSuccessfulHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(CMsgSuccessfulHero* other);
  friend void swap(CMsgSuccessfulHero& a, CMsgSuccessfulHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSuccessfulHero* New() const final {
    return CreateMaybeMessage<CMsgSuccessfulHero>(nullptr);
  }

  CMsgSuccessfulHero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSuccessfulHero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSuccessfulHero& from);
  void MergeFrom(const CMsgSuccessfulHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSuccessfulHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional float win_percent = 2;
  bool has_win_percent() const;
  void clear_win_percent();
  static const int kWinPercentFieldNumber = 2;
  float win_percent() const;
  void set_win_percent(float value);

  // optional uint32 longest_streak = 3;
  bool has_longest_streak() const;
  void clear_longest_streak();
  static const int kLongestStreakFieldNumber = 3;
  ::google::protobuf::uint32 longest_streak() const;
  void set_longest_streak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgSuccessfulHero)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  float win_percent_;
  ::google::protobuf::uint32 longest_streak_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgRecentMatchInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgRecentMatchInfo) */ {
 public:
  CMsgRecentMatchInfo();
  virtual ~CMsgRecentMatchInfo();

  CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from);

  inline CMsgRecentMatchInfo& operator=(const CMsgRecentMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRecentMatchInfo(CMsgRecentMatchInfo&& from) noexcept
    : CMsgRecentMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRecentMatchInfo& operator=(CMsgRecentMatchInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRecentMatchInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRecentMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRecentMatchInfo*>(
               &_CMsgRecentMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(CMsgRecentMatchInfo* other);
  friend void swap(CMsgRecentMatchInfo& a, CMsgRecentMatchInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRecentMatchInfo* New() const final {
    return CreateMaybeMessage<CMsgRecentMatchInfo>(nullptr);
  }

  CMsgRecentMatchInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRecentMatchInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRecentMatchInfo& from);
  void MergeFrom(const CMsgRecentMatchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRecentMatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  ::proto::dota::DOTA_GameMode game_mode() const;
  void set_game_mode(::proto::dota::DOTA_GameMode value);

  // optional uint32 kills = 3;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 3;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 5;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 7;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 8;
  ::proto::dota::EMatchOutcome match_outcome() const;
  void set_match_outcome(::proto::dota::EMatchOutcome value);

  // optional uint32 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgRecentMatchInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 match_id_;
  int game_mode_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 player_slot_;
  int match_outcome_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips_SingleTip final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgMatchTips.SingleTip) */ {
 public:
  CMsgMatchTips_SingleTip();
  virtual ~CMsgMatchTips_SingleTip();

  CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from);

  inline CMsgMatchTips_SingleTip& operator=(const CMsgMatchTips_SingleTip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchTips_SingleTip(CMsgMatchTips_SingleTip&& from) noexcept
    : CMsgMatchTips_SingleTip() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips_SingleTip& operator=(CMsgMatchTips_SingleTip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgMatchTips_SingleTip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchTips_SingleTip* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips_SingleTip*>(
               &_CMsgMatchTips_SingleTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(CMsgMatchTips_SingleTip* other);
  friend void swap(CMsgMatchTips_SingleTip& a, CMsgMatchTips_SingleTip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchTips_SingleTip* New() const final {
    return CreateMaybeMessage<CMsgMatchTips_SingleTip>(nullptr);
  }

  CMsgMatchTips_SingleTip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchTips_SingleTip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgMatchTips_SingleTip& from);
  void MergeFrom(const CMsgMatchTips_SingleTip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips_SingleTip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 source_account_id = 1;
  bool has_source_account_id() const;
  void clear_source_account_id();
  static const int kSourceAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 source_account_id() const;
  void set_source_account_id(::google::protobuf::uint32 value);

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 tip_amount = 3;
  bool has_tip_amount() const;
  void clear_tip_amount();
  static const int kTipAmountFieldNumber = 3;
  ::google::protobuf::uint32 tip_amount() const;
  void set_tip_amount(::google::protobuf::uint32 value);

  // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  ::proto::dota::EEvent event_id() const;
  void set_event_id(::proto::dota::EEvent value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgMatchTips.SingleTip)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 source_account_id_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 tip_amount_;
  int event_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgMatchTips) */ {
 public:
  CMsgMatchTips();
  virtual ~CMsgMatchTips();

  CMsgMatchTips(const CMsgMatchTips& from);

  inline CMsgMatchTips& operator=(const CMsgMatchTips& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchTips(CMsgMatchTips&& from) noexcept
    : CMsgMatchTips() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips& operator=(CMsgMatchTips&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgMatchTips& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchTips* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips*>(
               &_CMsgMatchTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(CMsgMatchTips* other);
  friend void swap(CMsgMatchTips& a, CMsgMatchTips& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchTips* New() const final {
    return CreateMaybeMessage<CMsgMatchTips>(nullptr);
  }

  CMsgMatchTips* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchTips>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgMatchTips& from);
  void MergeFrom(const CMsgMatchTips& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchTips_SingleTip SingleTip;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
  int tips_size() const;
  void clear_tips();
  static const int kTipsFieldNumber = 2;
  ::proto::dota::CMsgMatchTips_SingleTip* mutable_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips_SingleTip >*
      mutable_tips();
  const ::proto::dota::CMsgMatchTips_SingleTip& tips(int index) const;
  ::proto::dota::CMsgMatchTips_SingleTip* add_tips();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips_SingleTip >&
      tips() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgMatchTips)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips_SingleTip > tips_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal.Player) */ {
 public:
  CMsgDOTAMatchMinimal_Player();
  virtual ~CMsgDOTAMatchMinimal_Player();

  CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from);

  inline CMsgDOTAMatchMinimal_Player& operator=(const CMsgDOTAMatchMinimal_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchMinimal_Player(CMsgDOTAMatchMinimal_Player&& from) noexcept
    : CMsgDOTAMatchMinimal_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal_Player& operator=(CMsgDOTAMatchMinimal_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatchMinimal_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchMinimal_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Player*>(
               &_CMsgDOTAMatchMinimal_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(CMsgDOTAMatchMinimal_Player* other);
  friend void swap(CMsgDOTAMatchMinimal_Player& a, CMsgDOTAMatchMinimal_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal_Player* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Player>(nullptr);
  }

  CMsgDOTAMatchMinimal_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatchMinimal_Player& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 6;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 6;
  ::google::protobuf::uint32 items(int index) const;
  void set_items(int index, ::google::protobuf::uint32 value);
  void add_items(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // optional string pro_name = 8;
  bool has_pro_name() const;
  void clear_pro_name();
  static const int kProNameFieldNumber = 8;
  const ::std::string& pro_name() const;
  void set_pro_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pro_name(::std::string&& value);
  #endif
  void set_pro_name(const char* value);
  void set_pro_name(const char* value, size_t size);
  ::std::string* mutable_pro_name();
  ::std::string* release_pro_name();
  void set_allocated_pro_name(::std::string* pro_name);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 kills = 3;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 3;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 5;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 7;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::internal::ArenaStringPtr pro_name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 player_slot_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Tourney final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal.Tourney) */ {
 public:
  CMsgDOTAMatchMinimal_Tourney();
  virtual ~CMsgDOTAMatchMinimal_Tourney();

  CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from);

  inline CMsgDOTAMatchMinimal_Tourney& operator=(const CMsgDOTAMatchMinimal_Tourney& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchMinimal_Tourney(CMsgDOTAMatchMinimal_Tourney&& from) noexcept
    : CMsgDOTAMatchMinimal_Tourney() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal_Tourney& operator=(CMsgDOTAMatchMinimal_Tourney&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatchMinimal_Tourney& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchMinimal_Tourney* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Tourney*>(
               &_CMsgDOTAMatchMinimal_Tourney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(CMsgDOTAMatchMinimal_Tourney* other);
  friend void swap(CMsgDOTAMatchMinimal_Tourney& a, CMsgDOTAMatchMinimal_Tourney& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal_Tourney* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Tourney>(nullptr);
  }

  CMsgDOTAMatchMinimal_Tourney* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Tourney>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal_Tourney* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string radiant_team_name = 3;
  bool has_radiant_team_name() const;
  void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 3;
  const ::std::string& radiant_team_name() const;
  void set_radiant_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_name(::std::string&& value);
  #endif
  void set_radiant_team_name(const char* value);
  void set_radiant_team_name(const char* value, size_t size);
  ::std::string* mutable_radiant_team_name();
  ::std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 6;
  bool has_dire_team_name() const;
  void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 6;
  const ::std::string& dire_team_name() const;
  void set_dire_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_name(::std::string&& value);
  #endif
  void set_dire_team_name(const char* value);
  void set_dire_team_name(const char* value, size_t size);
  ::std::string* mutable_dire_team_name();
  ::std::string* release_dire_team_name();
  void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional string radiant_team_logo_url = 14;
  bool has_radiant_team_logo_url() const;
  void clear_radiant_team_logo_url();
  static const int kRadiantTeamLogoUrlFieldNumber = 14;
  const ::std::string& radiant_team_logo_url() const;
  void set_radiant_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_logo_url(::std::string&& value);
  #endif
  void set_radiant_team_logo_url(const char* value);
  void set_radiant_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_radiant_team_logo_url();
  ::std::string* release_radiant_team_logo_url();
  void set_allocated_radiant_team_logo_url(::std::string* radiant_team_logo_url);

  // optional string dire_team_logo_url = 15;
  bool has_dire_team_logo_url() const;
  void clear_dire_team_logo_url();
  static const int kDireTeamLogoUrlFieldNumber = 15;
  const ::std::string& dire_team_logo_url() const;
  void set_dire_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_logo_url(::std::string&& value);
  #endif
  void set_dire_team_logo_url(const char* value);
  void set_dire_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_dire_team_logo_url();
  ::std::string* release_dire_team_logo_url();
  void set_allocated_dire_team_logo_url(::std::string* dire_team_logo_url);

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_id = 2;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional fixed64 radiant_team_logo = 4;
  bool has_radiant_team_logo() const;
  void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 4;
  ::google::protobuf::uint64 radiant_team_logo() const;
  void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint32 dire_team_id = 5;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 5;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional fixed64 dire_team_logo = 7;
  bool has_dire_team_logo() const;
  void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 7;
  ::google::protobuf::uint64 dire_team_logo() const;
  void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional uint32 series_game = 9;
  bool has_series_game() const;
  void clear_series_game();
  static const int kSeriesGameFieldNumber = 9;
  ::google::protobuf::uint32 series_game() const;
  void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_tournament_id = 10;
  bool has_weekend_tourney_tournament_id() const;
  void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 10;
  ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  bool has_weekend_tourney_season_trophy_id() const;
  void clear_weekend_tourney_season_trophy_id();
  static const int kWeekendTourneySeasonTrophyIdFieldNumber = 11;
  ::google::protobuf::uint32 weekend_tourney_season_trophy_id() const;
  void set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 12;
  bool has_weekend_tourney_division() const;
  void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 12;
  ::google::protobuf::uint32 weekend_tourney_division() const;
  void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 13;
  bool has_weekend_tourney_skill_level() const;
  void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 13;
  ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal.Tourney)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_name_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_name_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_logo_url_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_logo_url_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint32 weekend_tourney_season_trophy_id_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal) */ {
 public:
  CMsgDOTAMatchMinimal();
  virtual ~CMsgDOTAMatchMinimal();

  CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from);

  inline CMsgDOTAMatchMinimal& operator=(const CMsgDOTAMatchMinimal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchMinimal(CMsgDOTAMatchMinimal&& from) noexcept
    : CMsgDOTAMatchMinimal() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal& operator=(CMsgDOTAMatchMinimal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAMatchMinimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchMinimal* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal*>(
               &_CMsgDOTAMatchMinimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(CMsgDOTAMatchMinimal* other);
  friend void swap(CMsgDOTAMatchMinimal& a, CMsgDOTAMatchMinimal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal* New() const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal>(nullptr);
  }

  CMsgDOTAMatchMinimal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAMatchMinimal& from);
  void MergeFrom(const CMsgDOTAMatchMinimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatchMinimal_Player Player;
  typedef CMsgDOTAMatchMinimal_Tourney Tourney;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 6;
  ::proto::dota::CMsgDOTAMatchMinimal_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >*
      mutable_players();
  const ::proto::dota::CMsgDOTAMatchMinimal_Player& players(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >&
      players() const;

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  bool has_tourney() const;
  void clear_tourney();
  static const int kTourneyFieldNumber = 7;
  const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& tourney() const;
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* release_tourney();
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* mutable_tourney();
  void set_allocated_tourney(::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney);

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional fixed32 start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  ::proto::dota::DOTA_GameMode game_mode() const;
  void set_game_mode(::proto::dota::DOTA_GameMode value);

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 8;
  ::proto::dota::EMatchOutcome match_outcome() const;
  void set_match_outcome(::proto::dota::EMatchOutcome value);

  // optional uint32 radiant_score = 9;
  bool has_radiant_score() const;
  void clear_radiant_score();
  static const int kRadiantScoreFieldNumber = 9;
  ::google::protobuf::uint32 radiant_score() const;
  void set_radiant_score(::google::protobuf::uint32 value);

  // optional uint32 dire_score = 10;
  bool has_dire_score() const;
  void clear_dire_score();
  static const int kDireScoreFieldNumber = 10;
  ::google::protobuf::uint32 dire_score() const;
  void set_dire_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player > players_;
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 duration_;
  int game_mode_;
  int match_outcome_;
  ::google::protobuf::uint32 radiant_score_;
  ::google::protobuf::uint32 dire_score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgConsumableUsage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgConsumableUsage) */ {
 public:
  CMsgConsumableUsage();
  virtual ~CMsgConsumableUsage();

  CMsgConsumableUsage(const CMsgConsumableUsage& from);

  inline CMsgConsumableUsage& operator=(const CMsgConsumableUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgConsumableUsage(CMsgConsumableUsage&& from) noexcept
    : CMsgConsumableUsage() {
    *this = ::std::move(from);
  }

  inline CMsgConsumableUsage& operator=(CMsgConsumableUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgConsumableUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgConsumableUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgConsumableUsage*>(
               &_CMsgConsumableUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(CMsgConsumableUsage* other);
  friend void swap(CMsgConsumableUsage& a, CMsgConsumableUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgConsumableUsage* New() const final {
    return CreateMaybeMessage<CMsgConsumableUsage>(nullptr);
  }

  CMsgConsumableUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgConsumableUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgConsumableUsage& from);
  void MergeFrom(const CMsgConsumableUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConsumableUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def = 1;
  bool has_item_def() const;
  void clear_item_def();
  static const int kItemDefFieldNumber = 1;
  ::google::protobuf::uint32 item_def() const;
  void set_item_def(::google::protobuf::uint32 value);

  // optional int32 quantity_change = 2;
  bool has_quantity_change() const;
  void clear_quantity_change();
  static const int kQuantityChangeFieldNumber = 2;
  ::google::protobuf::int32 quantity_change() const;
  void set_quantity_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgConsumableUsage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 item_def_;
  ::google::protobuf::int32 quantity_change_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchConsumableUsage_PlayerUsage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgMatchConsumableUsage.PlayerUsage) */ {
 public:
  CMsgMatchConsumableUsage_PlayerUsage();
  virtual ~CMsgMatchConsumableUsage_PlayerUsage();

  CMsgMatchConsumableUsage_PlayerUsage(const CMsgMatchConsumableUsage_PlayerUsage& from);

  inline CMsgMatchConsumableUsage_PlayerUsage& operator=(const CMsgMatchConsumableUsage_PlayerUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchConsumableUsage_PlayerUsage(CMsgMatchConsumableUsage_PlayerUsage&& from) noexcept
    : CMsgMatchConsumableUsage_PlayerUsage() {
    *this = ::std::move(from);
  }

  inline CMsgMatchConsumableUsage_PlayerUsage& operator=(CMsgMatchConsumableUsage_PlayerUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgMatchConsumableUsage_PlayerUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchConsumableUsage_PlayerUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchConsumableUsage_PlayerUsage*>(
               &_CMsgMatchConsumableUsage_PlayerUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(CMsgMatchConsumableUsage_PlayerUsage* other);
  friend void swap(CMsgMatchConsumableUsage_PlayerUsage& a, CMsgMatchConsumableUsage_PlayerUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchConsumableUsage_PlayerUsage* New() const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage_PlayerUsage>(nullptr);
  }

  CMsgMatchConsumableUsage_PlayerUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage_PlayerUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgMatchConsumableUsage_PlayerUsage& from);
  void MergeFrom(const CMsgMatchConsumableUsage_PlayerUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchConsumableUsage_PlayerUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
  int consumables_used_size() const;
  void clear_consumables_used();
  static const int kConsumablesUsedFieldNumber = 2;
  ::proto::dota::CMsgConsumableUsage* mutable_consumables_used(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConsumableUsage >*
      mutable_consumables_used();
  const ::proto::dota::CMsgConsumableUsage& consumables_used(int index) const;
  ::proto::dota::CMsgConsumableUsage* add_consumables_used();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConsumableUsage >&
      consumables_used() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgMatchConsumableUsage.PlayerUsage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConsumableUsage > consumables_used_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchConsumableUsage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgMatchConsumableUsage) */ {
 public:
  CMsgMatchConsumableUsage();
  virtual ~CMsgMatchConsumableUsage();

  CMsgMatchConsumableUsage(const CMsgMatchConsumableUsage& from);

  inline CMsgMatchConsumableUsage& operator=(const CMsgMatchConsumableUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchConsumableUsage(CMsgMatchConsumableUsage&& from) noexcept
    : CMsgMatchConsumableUsage() {
    *this = ::std::move(from);
  }

  inline CMsgMatchConsumableUsage& operator=(CMsgMatchConsumableUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgMatchConsumableUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchConsumableUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchConsumableUsage*>(
               &_CMsgMatchConsumableUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(CMsgMatchConsumableUsage* other);
  friend void swap(CMsgMatchConsumableUsage& a, CMsgMatchConsumableUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchConsumableUsage* New() const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage>(nullptr);
  }

  CMsgMatchConsumableUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgMatchConsumableUsage& from);
  void MergeFrom(const CMsgMatchConsumableUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchConsumableUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchConsumableUsage_PlayerUsage PlayerUsage;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  int player_consumables_used_size() const;
  void clear_player_consumables_used();
  static const int kPlayerConsumablesUsedFieldNumber = 1;
  ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* mutable_player_consumables_used(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >*
      mutable_player_consumables_used();
  const ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage& player_consumables_used(int index) const;
  ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* add_player_consumables_used();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >&
      player_consumables_used() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgMatchConsumableUsage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage > player_consumables_used_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAGameAccountClient

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_id)
  return account_id_;
}
inline void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.wins)
  return wins_;
}
inline void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.losses)
  return losses_;
}
inline void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.xp)
  return xp_;
}
inline void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.level)
  return level_;
}
inline void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
inline void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
inline bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.secondary_leaver_count)
  return secondary_leaver_count_;
}
inline void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  secondary_leaver_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
inline bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.low_priority_until_date)
  return low_priority_until_date_;
}
inline void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  low_priority_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 prevent_public_text_chat_until_date = 86;
inline bool CSODOTAGameAccountClient::has_prevent_public_text_chat_until_date() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_prevent_public_text_chat_until_date() {
  prevent_public_text_chat_until_date_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_public_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
  return prevent_public_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_public_text_chat_until_date(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00020000u;
  prevent_public_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
inline bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return last_secondary_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  last_secondary_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
inline bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.teaching)
  return teaching_;
}
inline void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  teaching_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
inline bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leadership)
  return leadership_;
}
inline void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  leadership_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
inline bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.friendly)
  return friendly_;
}
inline void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  friendly_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
inline bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
inline void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.forgiving)
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.match_disabled_count)
}

// optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
inline bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::proto::dota::PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_account_type_);
}
inline void CSODOTAGameAccountClient::set_partner_account_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
inline bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
inline void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return shutdownlawterminatetimestamp_;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  shutdownlawterminatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
inline bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
inline bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.competitive_rank)
  return competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 calibration_games_remaining = 51;
inline bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.calibration_games_remaining)
  return calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.calibration_games_remaining)
}

// optional uint32 solo_competitive_rank = 52;
inline bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_competitive_rank)
  return solo_competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  solo_competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_competitive_rank)
}

// optional uint32 solo_calibration_games_remaining = 54;
inline bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_calibration_games_remaining)
  return solo_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  solo_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_calibration_games_remaining)
}

// optional uint32 recruitment_level = 55;
inline bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recruitment_level)
  return recruitment_level_;
}
inline void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  recruitment_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
inline bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.has_new_notifications)
  return has_new_notifications_;
}
inline void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  _has_bits_[1] |= 0x00000200u;
  has_new_notifications_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
inline bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.is_league_admin)
  return is_league_admin_;
}
inline void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  _has_bits_[1] |= 0x00000400u;
  is_league_admin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
inline bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.casual_games_played)
  return casual_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  casual_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
inline bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_competitive_games_played)
  return solo_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  solo_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
inline bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.party_competitive_games_played)
  return party_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  party_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
inline bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  casual_1v1_games_played_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.casual_1v1_games_played)
  return casual_1v1_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_1v1_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  casual_1v1_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 competitive_team_games_played = 66;
inline bool CSODOTAGameAccountClient::has_competitive_team_games_played() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::clear_competitive_team_games_played() {
  competitive_team_games_played_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_team_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.competitive_team_games_played)
  return competitive_team_games_played_;
}
inline void CSODOTAGameAccountClient::set_competitive_team_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  competitive_team_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.competitive_team_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
inline bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  curr_all_hero_challenge_id_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return curr_all_hero_challenge_id_;
}
inline void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  curr_all_hero_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
inline bool CSODOTAGameAccountClient::has_play_time_points() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::clear_play_time_points() {
  play_time_points_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.play_time_points)
  return play_time_points_;
}
inline void CSODOTAGameAccountClient::set_play_time_points(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  play_time_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
inline bool CSODOTAGameAccountClient::has_account_flags() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::clear_account_flags() {
  account_flags_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_flags)
  return account_flags_;
}
inline void CSODOTAGameAccountClient::set_account_flags(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
inline bool CSODOTAGameAccountClient::has_play_time_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::clear_play_time_level() {
  play_time_level_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.play_time_level)
  return play_time_level_;
}
inline void CSODOTAGameAccountClient::set_play_time_level(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  play_time_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.play_time_level)
}

// optional uint32 player_behavior_seq_num_last_report = 71;
inline bool CSODOTAGameAccountClient::has_player_behavior_seq_num_last_report() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_seq_num_last_report() {
  player_behavior_seq_num_last_report_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_seq_num_last_report() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
  return player_behavior_seq_num_last_report_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_seq_num_last_report(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  player_behavior_seq_num_last_report_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
}

// optional uint32 player_behavior_score_last_report = 72;
inline bool CSODOTAGameAccountClient::has_player_behavior_score_last_report() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_score_last_report() {
  player_behavior_score_last_report_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_score_last_report() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_score_last_report)
  return player_behavior_score_last_report_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_score_last_report(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  player_behavior_score_last_report_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_score_last_report)
}

// optional bool player_behavior_report_old_data = 73;
inline bool CSODOTAGameAccountClient::has_player_behavior_report_old_data() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_report_old_data() {
  player_behavior_report_old_data_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool CSODOTAGameAccountClient::player_behavior_report_old_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_report_old_data)
  return player_behavior_report_old_data_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_report_old_data(bool value) {
  _has_bits_[1] |= 0x00000800u;
  player_behavior_report_old_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_report_old_data)
}

// optional uint32 tourney_skill_level = 74;
inline bool CSODOTAGameAccountClient::has_tourney_skill_level() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAGameAccountClient::set_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00008000u;
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.tourney_skill_level)
}

// optional uint32 tourney_recent_participation_date = 85;
inline bool CSODOTAGameAccountClient::has_tourney_recent_participation_date() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_tourney_recent_participation_date() {
  tourney_recent_participation_date_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_recent_participation_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.tourney_recent_participation_date)
  return tourney_recent_participation_date_;
}
inline void CSODOTAGameAccountClient::set_tourney_recent_participation_date(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00010000u;
  tourney_recent_participation_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.tourney_recent_participation_date)
}

// optional uint32 favorite_team = 87;
inline bool CSODOTAGameAccountClient::has_favorite_team() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_favorite_team() {
  favorite_team_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::favorite_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.favorite_team)
  return favorite_team_;
}
inline void CSODOTAGameAccountClient::set_favorite_team(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.favorite_team)
}

// optional uint64 anchored_phone_number_id = 88;
inline bool CSODOTAGameAccountClient::has_anchored_phone_number_id() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_anchored_phone_number_id() {
  anchored_phone_number_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00080000u;
}
inline ::google::protobuf::uint64 CSODOTAGameAccountClient::anchored_phone_number_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.anchored_phone_number_id)
  return anchored_phone_number_id_;
}
inline void CSODOTAGameAccountClient::set_anchored_phone_number_id(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x00080000u;
  anchored_phone_number_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.anchored_phone_number_id)
}

// optional uint32 ranked_matchmaking_ban_until_date = 89;
inline bool CSODOTAGameAccountClient::has_ranked_matchmaking_ban_until_date() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_ranked_matchmaking_ban_until_date() {
  ranked_matchmaking_ban_until_date_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::ranked_matchmaking_ban_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
  return ranked_matchmaking_ban_until_date_;
}
inline void CSODOTAGameAccountClient::set_ranked_matchmaking_ban_until_date(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  ranked_matchmaking_ban_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
}

// optional uint32 recent_game_time_1 = 90;
inline bool CSODOTAGameAccountClient::has_recent_game_time_1() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_1() {
  recent_game_time_1_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_1)
  return recent_game_time_1_;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_1(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  recent_game_time_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_1)
}

// optional uint32 recent_game_time_2 = 91;
inline bool CSODOTAGameAccountClient::has_recent_game_time_2() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_2() {
  recent_game_time_2_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_2)
  return recent_game_time_2_;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_2(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  recent_game_time_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_2)
}

// optional uint32 recent_game_time_3 = 92;
inline bool CSODOTAGameAccountClient::has_recent_game_time_3() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_3() {
  recent_game_time_3_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_3)
  return recent_game_time_3_;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_3(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  recent_game_time_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_3)
}

// optional uint32 general_seasonal_ranked_rank = 93;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank() {
  general_seasonal_ranked_rank_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank)
  return general_seasonal_ranked_rank_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  general_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank)
}

// optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_calibration_games_remaining() {
  general_seasonal_ranked_calibration_games_remaining_ = 0u;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
  return general_seasonal_ranked_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x02000000u;
  general_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 general_seasonal_ranked_games_played = 95;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_games_played() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_games_played() {
  general_seasonal_ranked_games_played_ = 0u;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
  return general_seasonal_ranked_games_played_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x04000000u;
  general_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
}

// optional uint32 general_seasonal_ranked_rank_peak = 96;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank_peak() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank_peak() {
  general_seasonal_ranked_rank_peak_ = 0u;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
  return general_seasonal_ranked_rank_peak_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x08000000u;
  general_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
}

// optional bool general_seasonal_rank_transferred = 97;
inline bool CSODOTAGameAccountClient::has_general_seasonal_rank_transferred() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_rank_transferred() {
  general_seasonal_rank_transferred_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool CSODOTAGameAccountClient::general_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_rank_transferred)
  return general_seasonal_rank_transferred_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_rank_transferred(bool value) {
  _has_bits_[1] |= 0x00001000u;
  general_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_rank_transferred)
}

// optional uint32 solo_seasonal_ranked_rank = 98;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank() {
  solo_seasonal_ranked_rank_ = 0u;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
  return solo_seasonal_ranked_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x10000000u;
  solo_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
}

// optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_calibration_games_remaining() {
  solo_seasonal_ranked_calibration_games_remaining_ = 0u;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
  return solo_seasonal_ranked_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x20000000u;
  solo_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 solo_seasonal_ranked_games_played = 100;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_games_played() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_games_played() {
  solo_seasonal_ranked_games_played_ = 0u;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
  return solo_seasonal_ranked_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x40000000u;
  solo_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
}

// optional uint32 solo_seasonal_ranked_rank_peak = 101;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank_peak() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank_peak() {
  solo_seasonal_ranked_rank_peak_ = 0u;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
  return solo_seasonal_ranked_rank_peak_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x80000000u;
  solo_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
}

// optional bool solo_seasonal_rank_transferred = 102;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_rank_transferred() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_rank_transferred() {
  solo_seasonal_rank_transferred_ = false;
  _has_bits_[2] &= ~0x00000002u;
}
inline bool CSODOTAGameAccountClient::solo_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
  return solo_seasonal_rank_transferred_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_rank_transferred(bool value) {
  _has_bits_[2] |= 0x00000002u;
  solo_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
}

// optional uint64 favorite_team_packed = 103;
inline bool CSODOTAGameAccountClient::has_favorite_team_packed() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::clear_favorite_team_packed() {
  favorite_team_packed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CSODOTAGameAccountClient::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.favorite_team_packed)
  return favorite_team_packed_;
}
inline void CSODOTAGameAccountClient::set_favorite_team_packed(::google::protobuf::uint64 value) {
  _has_bits_[2] |= 0x00000001u;
  favorite_team_packed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.favorite_team_packed)
}

// optional uint32 recent_report_time = 104;
inline bool CSODOTAGameAccountClient::has_recent_report_time() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_report_time() {
  recent_report_time_ = 0u;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_report_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_report_time)
  return recent_report_time_;
}
inline void CSODOTAGameAccountClient::set_recent_report_time(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000004u;
  recent_report_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_report_time)
}

// optional uint32 custom_game_disabled_until_date = 105;
inline bool CSODOTAGameAccountClient::has_custom_game_disabled_until_date() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::clear_custom_game_disabled_until_date() {
  custom_game_disabled_until_date_ = 0u;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::custom_game_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.custom_game_disabled_until_date)
  return custom_game_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_custom_game_disabled_until_date(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000008u;
  custom_game_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.custom_game_disabled_until_date)
}

// optional uint32 recent_win_time_1 = 106;
inline bool CSODOTAGameAccountClient::has_recent_win_time_1() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_1() {
  recent_win_time_1_ = 0u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_win_time_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_win_time_1)
  return recent_win_time_1_;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_1(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  recent_win_time_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_win_time_1)
}

// optional uint32 recent_win_time_2 = 107;
inline bool CSODOTAGameAccountClient::has_recent_win_time_2() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_2() {
  recent_win_time_2_ = 0u;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_win_time_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_win_time_2)
  return recent_win_time_2_;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_2(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000020u;
  recent_win_time_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_win_time_2)
}

// optional uint32 recent_win_time_3 = 108;
inline bool CSODOTAGameAccountClient::has_recent_win_time_3() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_3() {
  recent_win_time_3_ = 0u;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recent_win_time_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_win_time_3)
  return recent_win_time_3_;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_3(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000040u;
  recent_win_time_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_win_time_3)
}

// -------------------------------------------------------------------

// CSODOTAGameAccountPlus

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAGameAccountPlus::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.account_id)
  return account_id_;
}
inline void CSODOTAGameAccountPlus::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.account_id)
}

// optional uint32 original_start_date = 2;
inline bool CSODOTAGameAccountPlus::has_original_start_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_original_start_date() {
  original_start_date_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::original_start_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.original_start_date)
  return original_start_date_;
}
inline void CSODOTAGameAccountPlus::set_original_start_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  original_start_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.original_start_date)
}

// optional uint32 plus_flags = 3;
inline bool CSODOTAGameAccountPlus::has_plus_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_plus_flags() {
  plus_flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::plus_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.plus_flags)
  return plus_flags_;
}
inline void CSODOTAGameAccountPlus::set_plus_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  plus_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.plus_flags)
}

// optional uint32 plus_status = 4;
inline bool CSODOTAGameAccountPlus::has_plus_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_plus_status() {
  plus_status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::plus_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.plus_status)
  return plus_status_;
}
inline void CSODOTAGameAccountPlus::set_plus_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  plus_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.plus_status)
}

// optional uint32 prepaid_time_start = 5;
inline bool CSODOTAGameAccountPlus::has_prepaid_time_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_prepaid_time_start() {
  prepaid_time_start_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::prepaid_time_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.prepaid_time_start)
  return prepaid_time_start_;
}
inline void CSODOTAGameAccountPlus::set_prepaid_time_start(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  prepaid_time_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.prepaid_time_start)
}

// optional uint32 prepaid_time_balance = 6;
inline bool CSODOTAGameAccountPlus::has_prepaid_time_balance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_prepaid_time_balance() {
  prepaid_time_balance_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::prepaid_time_balance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.prepaid_time_balance)
  return prepaid_time_balance_;
}
inline void CSODOTAGameAccountPlus::set_prepaid_time_balance(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  prepaid_time_balance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.prepaid_time_balance)
}

// optional fixed32 next_payment_date = 7;
inline bool CSODOTAGameAccountPlus::has_next_payment_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_next_payment_date() {
  next_payment_date_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAGameAccountPlus::next_payment_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.next_payment_date)
  return next_payment_date_;
}
inline void CSODOTAGameAccountPlus::set_next_payment_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  next_payment_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.next_payment_date)
}

// optional fixed64 steam_agreement_id = 8;
inline bool CSODOTAGameAccountPlus::has_steam_agreement_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountPlus::clear_steam_agreement_id() {
  steam_agreement_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CSODOTAGameAccountPlus::steam_agreement_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountPlus.steam_agreement_id)
  return steam_agreement_id_;
}
inline void CSODOTAGameAccountPlus::set_steam_agreement_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  steam_agreement_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountPlus.steam_agreement_id)
}

// -------------------------------------------------------------------

// CMsgLobbyPlayerPlusSubscriptionData_HeroBadge

// optional uint32 hero_id = 1;
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_id)
  return hero_id_;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_id)
}

// optional uint32 hero_badge_xp = 2;
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::has_hero_badge_xp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::clear_hero_badge_xp() {
  hero_badge_xp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::hero_badge_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_badge_xp)
  return hero_badge_xp_;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::set_hero_badge_xp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hero_badge_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_badge_xp)
}

// -------------------------------------------------------------------

// CMsgLobbyPlayerPlusSubscriptionData

// repeated .proto.dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
inline int CMsgLobbyPlayerPlusSubscriptionData::hero_badges_size() const {
  return hero_badges_.size();
}
inline void CMsgLobbyPlayerPlusSubscriptionData::clear_hero_badges() {
  hero_badges_.Clear();
}
inline ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* CMsgLobbyPlayerPlusSubscriptionData::mutable_hero_badges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return hero_badges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >*
CMsgLobbyPlayerPlusSubscriptionData::mutable_hero_badges() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return &hero_badges_;
}
inline const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& CMsgLobbyPlayerPlusSubscriptionData::hero_badges(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return hero_badges_.Get(index);
}
inline ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* CMsgLobbyPlayerPlusSubscriptionData::add_hero_badges() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return hero_badges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >&
CMsgLobbyPlayerPlusSubscriptionData::hero_badges() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return hero_badges_;
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_ChatWheelMessageRange

// optional uint32 message_id_start = 1;
inline bool CMsgLobbyEventPoints_ChatWheelMessageRange::has_message_id_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_message_id_start() {
  message_id_start_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_ChatWheelMessageRange::message_id_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_start)
  return message_id_start_;
}
inline void CMsgLobbyEventPoints_ChatWheelMessageRange::set_message_id_start(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  message_id_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_start)
}

// optional uint32 message_id_end = 2;
inline bool CMsgLobbyEventPoints_ChatWheelMessageRange::has_message_id_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_message_id_end() {
  message_id_end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_ChatWheelMessageRange::message_id_end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_end)
  return message_id_end_;
}
inline void CMsgLobbyEventPoints_ChatWheelMessageRange::set_message_id_end(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  message_id_end_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_end)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_PeriodicResourceValues

// optional uint32 remaining = 1;
inline bool CMsgLobbyEventPoints_PeriodicResourceValues::has_remaining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints_PeriodicResourceValues::clear_remaining() {
  remaining_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_PeriodicResourceValues::remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues.remaining)
  return remaining_;
}
inline void CMsgLobbyEventPoints_PeriodicResourceValues::set_remaining(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues.remaining)
}

// optional uint32 max = 2;
inline bool CMsgLobbyEventPoints_PeriodicResourceValues::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyEventPoints_PeriodicResourceValues::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_PeriodicResourceValues::max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues.max)
  return max_;
}
inline void CMsgLobbyEventPoints_PeriodicResourceValues::set_max(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues.max)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
inline bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.account_id)
  return account_id_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
inline bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  normal_points_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.normal_points)
  return normal_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_normal_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  premium_points_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points)
  return premium_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
inline bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  owned_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.owned)
  return owned_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  _has_bits_[0] |= 0x00000100u;
  owned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint32 favorite_team = 5;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team() {
  favorite_team_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team)
  return favorite_team_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team)
}

// optional uint32 favorite_team_level = 6;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_level() {
  favorite_team_level_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
  return favorite_team_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  favorite_team_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
}

// optional uint32 points_held = 7;
inline bool CMsgLobbyEventPoints_AccountPoints::has_points_held() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_points_held() {
  points_held_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::points_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.points_held)
  return points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_points_held(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  points_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.points_held)
}

// optional uint32 premium_points_held = 8;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points_held() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points_held() {
  premium_points_held_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points_held)
  return premium_points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points_held(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  premium_points_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points_held)
}

// optional uint32 favorite_team_foil_level = 9;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_foil_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_foil_level() {
  favorite_team_foil_level_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_foil_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
  return favorite_team_foil_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_foil_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  favorite_team_foil_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
}

// optional uint64 active_effects_mask = 12;
inline bool CMsgLobbyEventPoints_AccountPoints::has_active_effects_mask() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_active_effects_mask() {
  active_effects_mask_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint64 CMsgLobbyEventPoints_AccountPoints::active_effects_mask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
  return active_effects_mask_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_active_effects_mask(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  active_effects_mask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
}

// repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
inline int CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges_size() const {
  return unlocked_chat_wheel_message_ranges_.size();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_unlocked_chat_wheel_message_ranges() {
  unlocked_chat_wheel_message_ranges_.Clear();
}
inline ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* CMsgLobbyEventPoints_AccountPoints::mutable_unlocked_chat_wheel_message_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >*
CMsgLobbyEventPoints_AccountPoints::mutable_unlocked_chat_wheel_message_ranges() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return &unlocked_chat_wheel_message_ranges_;
}
inline const ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange& CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Get(index);
}
inline ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* CMsgLobbyEventPoints_AccountPoints::add_unlocked_chat_wheel_message_ranges() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >&
CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_;
}

// optional .proto.dota.CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
inline bool CMsgLobbyEventPoints_AccountPoints::has_plus_subscription_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_plus_subscription_data() {
  if (plus_subscription_data_ != nullptr) plus_subscription_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData& CMsgLobbyEventPoints_AccountPoints::plus_subscription_data() const {
  const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* p = plus_subscription_data_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.plus_subscription_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData*>(
      &::proto::dota::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_);
}
inline ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* CMsgLobbyEventPoints_AccountPoints::release_plus_subscription_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventPoints.AccountPoints.plus_subscription_data)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* temp = plus_subscription_data_;
  plus_subscription_data_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* CMsgLobbyEventPoints_AccountPoints::mutable_plus_subscription_data() {
  _has_bits_[0] |= 0x00000001u;
  if (plus_subscription_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgLobbyPlayerPlusSubscriptionData>(GetArenaNoVirtual());
    plus_subscription_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.plus_subscription_data)
  return plus_subscription_data_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_allocated_plus_subscription_data(::proto::dota::CMsgLobbyPlayerPlusSubscriptionData* plus_subscription_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plus_subscription_data_;
  }
  if (plus_subscription_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plus_subscription_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plus_subscription_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plus_subscription_data_ = plus_subscription_data;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventPoints.AccountPoints.plus_subscription_data)
}

// optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
inline bool CMsgLobbyEventPoints_AccountPoints::has_wager_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_wager_tokens() {
  if (wager_tokens_ != nullptr) wager_tokens_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& CMsgLobbyEventPoints_AccountPoints::wager_tokens() const {
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* p = wager_tokens_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      &::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_);
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::release_wager_tokens() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* temp = wager_tokens_;
  wager_tokens_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::mutable_wager_tokens() {
  _has_bits_[0] |= 0x00000002u;
  if (wager_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues>(GetArenaNoVirtual());
    wager_tokens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens)
  return wager_tokens_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_allocated_wager_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* wager_tokens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wager_tokens_;
  }
  if (wager_tokens) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wager_tokens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wager_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wager_tokens_ = wager_tokens;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens)
}

// optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
inline bool CMsgLobbyEventPoints_AccountPoints::has_rank_wager_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_rank_wager_tokens() {
  if (rank_wager_tokens_ != nullptr) rank_wager_tokens_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& CMsgLobbyEventPoints_AccountPoints::rank_wager_tokens() const {
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* p = rank_wager_tokens_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      &::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_);
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::release_rank_wager_tokens() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* temp = rank_wager_tokens_;
  rank_wager_tokens_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::mutable_rank_wager_tokens() {
  _has_bits_[0] |= 0x00000004u;
  if (rank_wager_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues>(GetArenaNoVirtual());
    rank_wager_tokens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens)
  return rank_wager_tokens_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_allocated_rank_wager_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* rank_wager_tokens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rank_wager_tokens_;
  }
  if (rank_wager_tokens) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rank_wager_tokens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rank_wager_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rank_wager_tokens_ = rank_wager_tokens;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens)
}

// optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
inline bool CMsgLobbyEventPoints_AccountPoints::has_tip_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_tip_tokens() {
  if (tip_tokens_ != nullptr) tip_tokens_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& CMsgLobbyEventPoints_AccountPoints::tip_tokens() const {
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* p = tip_tokens_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_tokens)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      &::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_);
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::release_tip_tokens() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_tokens)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* temp = tip_tokens_;
  tip_tokens_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::mutable_tip_tokens() {
  _has_bits_[0] |= 0x00000008u;
  if (tip_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues>(GetArenaNoVirtual());
    tip_tokens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_tokens)
  return tip_tokens_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_allocated_tip_tokens(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* tip_tokens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tip_tokens_;
  }
  if (tip_tokens) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tip_tokens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tip_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tip_tokens_ = tip_tokens;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_tokens)
}

// optional uint32 tip_amount = 20;
inline bool CMsgLobbyEventPoints_AccountPoints::has_tip_amount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_tip_amount() {
  tip_amount_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::tip_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_amount)
  return tip_amount_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_tip_amount(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  tip_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.tip_amount)
}

// optional .proto.dota.CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
inline bool CMsgLobbyEventPoints_AccountPoints::has_periodic_point_adjustments() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_periodic_point_adjustments() {
  if (periodic_point_adjustments_ != nullptr) periodic_point_adjustments_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues& CMsgLobbyEventPoints_AccountPoints::periodic_point_adjustments() const {
  const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* p = periodic_point_adjustments_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.periodic_point_adjustments)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues*>(
      &::proto::dota::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_);
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::release_periodic_point_adjustments() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventPoints.AccountPoints.periodic_point_adjustments)
  _has_bits_[0] &= ~0x00000010u;
  ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* temp = periodic_point_adjustments_;
  periodic_point_adjustments_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* CMsgLobbyEventPoints_AccountPoints::mutable_periodic_point_adjustments() {
  _has_bits_[0] |= 0x00000010u;
  if (periodic_point_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues>(GetArenaNoVirtual());
    periodic_point_adjustments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.periodic_point_adjustments)
  return periodic_point_adjustments_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_allocated_periodic_point_adjustments(::proto::dota::CMsgLobbyEventPoints_PeriodicResourceValues* periodic_point_adjustments) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete periodic_point_adjustments_;
  }
  if (periodic_point_adjustments) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      periodic_point_adjustments = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, periodic_point_adjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  periodic_point_adjustments_ = periodic_point_adjustments;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventPoints.AccountPoints.periodic_point_adjustments)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
inline bool CMsgLobbyEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.event_id)
  return event_id_;
}
inline void CMsgLobbyEventPoints::set_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.event_id)
}

// repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
inline int CMsgLobbyEventPoints::account_points_size() const {
  return account_points_.size();
}
inline void CMsgLobbyEventPoints::clear_account_points() {
  account_points_.Clear();
}
inline ::proto::dota::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyEventPoints.account_points)
  return &account_points_;
}
inline const ::proto::dota::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Get(index);
}
inline ::proto::dota::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_;
}

// -------------------------------------------------------------------

// CMsgLocalServerFakeLobbyData

// optional uint32 account_id = 1;
inline bool CMsgLocalServerFakeLobbyData::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLocalServerFakeLobbyData::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLocalServerFakeLobbyData::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.account_id)
  return account_id_;
}
inline void CMsgLocalServerFakeLobbyData::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLocalServerFakeLobbyData.account_id)
}

// repeated .proto.dota.CMsgLobbyEventPoints event_points = 2;
inline int CMsgLocalServerFakeLobbyData::event_points_size() const {
  return event_points_.size();
}
inline void CMsgLocalServerFakeLobbyData::clear_event_points() {
  event_points_.Clear();
}
inline ::proto::dota::CMsgLobbyEventPoints* CMsgLocalServerFakeLobbyData::mutable_event_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLocalServerFakeLobbyData.event_points)
  return event_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints >*
CMsgLocalServerFakeLobbyData::mutable_event_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLocalServerFakeLobbyData.event_points)
  return &event_points_;
}
inline const ::proto::dota::CMsgLobbyEventPoints& CMsgLocalServerFakeLobbyData::event_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.event_points)
  return event_points_.Get(index);
}
inline ::proto::dota::CMsgLobbyEventPoints* CMsgLocalServerFakeLobbyData::add_event_points() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLocalServerFakeLobbyData.event_points)
  return event_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints >&
CMsgLocalServerFakeLobbyData::event_points() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLocalServerFakeLobbyData.event_points)
  return event_points_;
}

// optional bool is_plus_subscriber = 3;
inline bool CMsgLocalServerFakeLobbyData::has_is_plus_subscriber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLocalServerFakeLobbyData::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgLocalServerFakeLobbyData::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.is_plus_subscriber)
  return is_plus_subscriber_;
}
inline void CMsgLocalServerFakeLobbyData::set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_plus_subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLocalServerFakeLobbyData.is_plus_subscriber)
}

// optional uint32 primary_event_id = 4;
inline bool CMsgLocalServerFakeLobbyData::has_primary_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLocalServerFakeLobbyData::clear_primary_event_id() {
  primary_event_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgLocalServerFakeLobbyData::primary_event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.primary_event_id)
  return primary_event_id_;
}
inline void CMsgLocalServerFakeLobbyData::set_primary_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  primary_event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLocalServerFakeLobbyData.primary_event_id)
}

// optional uint32 favorite_team = 5;
inline bool CMsgLocalServerFakeLobbyData::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLocalServerFakeLobbyData::clear_favorite_team() {
  favorite_team_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgLocalServerFakeLobbyData::favorite_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.favorite_team)
  return favorite_team_;
}
inline void CMsgLocalServerFakeLobbyData::set_favorite_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLocalServerFakeLobbyData.favorite_team)
}

// optional uint32 favorite_team_quality = 6;
inline bool CMsgLocalServerFakeLobbyData::has_favorite_team_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLocalServerFakeLobbyData::clear_favorite_team_quality() {
  favorite_team_quality_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgLocalServerFakeLobbyData::favorite_team_quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLocalServerFakeLobbyData.favorite_team_quality)
  return favorite_team_quality_;
}
inline void CMsgLocalServerFakeLobbyData::set_favorite_team_quality(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  favorite_team_quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLocalServerFakeLobbyData.favorite_team_quality)
}

// -------------------------------------------------------------------

// CMsgBattleCupVictory

// optional uint32 account_id = 1;
inline bool CMsgBattleCupVictory::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBattleCupVictory::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.account_id)
  return account_id_;
}
inline void CMsgBattleCupVictory::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.account_id)
}

// optional uint32 win_date = 2;
inline bool CMsgBattleCupVictory::has_win_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBattleCupVictory::clear_win_date() {
  win_date_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::win_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.win_date)
  return win_date_;
}
inline void CMsgBattleCupVictory::set_win_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  win_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.win_date)
}

// optional uint32 valid_until = 3;
inline bool CMsgBattleCupVictory::has_valid_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBattleCupVictory::clear_valid_until() {
  valid_until_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::valid_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.valid_until)
  return valid_until_;
}
inline void CMsgBattleCupVictory::set_valid_until(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.valid_until)
}

// optional uint32 skill_level = 4;
inline bool CMsgBattleCupVictory::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBattleCupVictory::clear_skill_level() {
  skill_level_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.skill_level)
  return skill_level_;
}
inline void CMsgBattleCupVictory::set_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.skill_level)
}

// optional uint32 tournament_id = 5;
inline bool CMsgBattleCupVictory::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBattleCupVictory::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.tournament_id)
  return tournament_id_;
}
inline void CMsgBattleCupVictory::set_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.tournament_id)
}

// optional uint32 division_id = 6;
inline bool CMsgBattleCupVictory::has_division_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBattleCupVictory::clear_division_id() {
  division_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.division_id)
  return division_id_;
}
inline void CMsgBattleCupVictory::set_division_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.division_id)
}

// optional uint32 team_id = 7;
inline bool CMsgBattleCupVictory::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBattleCupVictory::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.team_id)
  return team_id_;
}
inline void CMsgBattleCupVictory::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.team_id)
}

// optional uint32 streak = 8;
inline bool CMsgBattleCupVictory::has_streak() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBattleCupVictory::clear_streak() {
  streak_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.streak)
  return streak_;
}
inline void CMsgBattleCupVictory::set_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.streak)
}

// optional uint32 trophy_id = 9;
inline bool CMsgBattleCupVictory::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgBattleCupVictory::clear_trophy_id() {
  trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.trophy_id)
  return trophy_id_;
}
inline void CMsgBattleCupVictory::set_trophy_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.trophy_id)
}

// -------------------------------------------------------------------

// CMsgLobbyBattleCupVictoryList

// repeated .proto.dota.CMsgBattleCupVictory winners = 1;
inline int CMsgLobbyBattleCupVictoryList::winners_size() const {
  return winners_.size();
}
inline void CMsgLobbyBattleCupVictoryList::clear_winners() {
  winners_.Clear();
}
inline ::proto::dota::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::mutable_winners(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >*
CMsgLobbyBattleCupVictoryList::mutable_winners() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return &winners_;
}
inline const ::proto::dota::CMsgBattleCupVictory& CMsgLobbyBattleCupVictoryList::winners(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Get(index);
}
inline ::proto::dota::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::add_winners() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >&
CMsgLobbyBattleCupVictoryList::winners() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_;
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastNotification.message)
  return message_.GetNoArena();
}
inline void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastNotification.message)
}
#if LANG_CXX11
inline void CMsgDOTABroadcastNotification::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTABroadcastNotification.message)
}
#endif
inline void CMsgDOTABroadcastNotification::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTABroadcastNotification.message)
}
inline ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABroadcastNotification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTABroadcastNotification::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABroadcastNotification.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABroadcastNotification.message)
}

// -------------------------------------------------------------------

// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
inline bool CProtoItemHeroStatue::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemHeroStatue::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.hero_id)
  return hero_id_;
}
inline void CProtoItemHeroStatue::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemHeroStatue::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemHeroStatue::clear_status_effect_index() {
  status_effect_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemHeroStatue::set_status_effect_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemHeroStatue::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemHeroStatue::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.sequence_name)
  return sequence_name_.GetNoArena();
}
inline void CProtoItemHeroStatue::set_sequence_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.sequence_name)
}
#if LANG_CXX11
inline void CProtoItemHeroStatue::set_sequence_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemHeroStatue.sequence_name)
}
#endif
inline void CProtoItemHeroStatue::set_sequence_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemHeroStatue.sequence_name)
}
inline void CProtoItemHeroStatue::set_sequence_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemHeroStatue.sequence_name)
}
inline ::std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemHeroStatue.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CProtoItemHeroStatue::release_sequence_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemHeroStatue.sequence_name)
  if (!has_sequence_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sequence_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CProtoItemHeroStatue::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemHeroStatue::has_cycle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemHeroStatue::clear_cycle() {
  cycle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.cycle)
  return cycle_;
}
inline void CProtoItemHeroStatue::set_cycle(float value) {
  _has_bits_[0] |= 0x00000010u;
  cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemHeroStatue::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemHeroStatue::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemHeroStatue::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.wearable)
}
inline void CProtoItemHeroStatue::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemHeroStatue.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemHeroStatue.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemHeroStatue.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemHeroStatue::has_inscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemHeroStatue::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.inscription)
  return inscription_.GetNoArena();
}
inline void CProtoItemHeroStatue::set_inscription(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.inscription)
}
#if LANG_CXX11
inline void CProtoItemHeroStatue::set_inscription(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemHeroStatue.inscription)
}
#endif
inline void CProtoItemHeroStatue::set_inscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemHeroStatue.inscription)
}
inline void CProtoItemHeroStatue::set_inscription(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemHeroStatue.inscription)
}
inline ::std::string* CProtoItemHeroStatue::mutable_inscription() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemHeroStatue.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CProtoItemHeroStatue::release_inscription() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemHeroStatue.inscription)
  if (!has_inscription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inscription_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CProtoItemHeroStatue::set_allocated_inscription(::std::string* inscription) {
  if (inscription != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemHeroStatue::style_size() const {
  return style_.size();
}
inline void CProtoItemHeroStatue::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.style)
  return style_.Get(index);
}
inline void CProtoItemHeroStatue::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.style)
}
inline void CProtoItemHeroStatue::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemHeroStatue.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemHeroStatue.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemHeroStatue.style)
  return &style_;
}

// optional bool tournament_drop = 8;
inline bool CProtoItemHeroStatue::has_tournament_drop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemHeroStatue::clear_tournament_drop() {
  tournament_drop_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.tournament_drop)
  return tournament_drop_;
}
inline void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  _has_bits_[0] |= 0x00000020u;
  tournament_drop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.tournament_drop)
}

// -------------------------------------------------------------------

// CProtoItemTeamShowcase

// optional uint32 hero_id = 1;
inline bool CProtoItemTeamShowcase::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemTeamShowcase::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.hero_id)
  return hero_id_;
}
inline void CProtoItemTeamShowcase::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemTeamShowcase::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemTeamShowcase::clear_status_effect_index() {
  status_effect_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::status_effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemTeamShowcase::set_status_effect_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemTeamShowcase::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemTeamShowcase::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CProtoItemTeamShowcase::sequence_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.GetNoArena();
}
inline void CProtoItemTeamShowcase::set_sequence_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
#if LANG_CXX11
inline void CProtoItemTeamShowcase::set_sequence_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
#endif
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_sequence_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CProtoItemTeamShowcase::release_sequence_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemTeamShowcase.sequence_name)
  if (!has_sequence_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sequence_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CProtoItemTeamShowcase::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemTeamShowcase.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemTeamShowcase::has_cycle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemTeamShowcase::clear_cycle() {
  cycle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CProtoItemTeamShowcase::cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.cycle)
  return cycle_;
}
inline void CProtoItemTeamShowcase::set_cycle(float value) {
  _has_bits_[0] |= 0x00000010u;
  cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemTeamShowcase::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemTeamShowcase::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::wearable(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemTeamShowcase::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.wearable)
}
inline void CProtoItemTeamShowcase::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemTeamShowcase.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::wearable() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemTeamShowcase.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemTeamShowcase.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemTeamShowcase::has_inscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemTeamShowcase::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CProtoItemTeamShowcase::inscription() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.inscription)
  return inscription_.GetNoArena();
}
inline void CProtoItemTeamShowcase::set_inscription(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.inscription)
}
#if LANG_CXX11
inline void CProtoItemTeamShowcase::set_inscription(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemTeamShowcase.inscription)
}
#endif
inline void CProtoItemTeamShowcase::set_inscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemTeamShowcase.inscription)
}
inline void CProtoItemTeamShowcase::set_inscription(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemTeamShowcase.inscription)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_inscription() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemTeamShowcase.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CProtoItemTeamShowcase::release_inscription() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemTeamShowcase.inscription)
  if (!has_inscription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inscription_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CProtoItemTeamShowcase::set_allocated_inscription(::std::string* inscription) {
  if (inscription != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemTeamShowcase.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemTeamShowcase::style_size() const {
  return style_.size();
}
inline void CProtoItemTeamShowcase::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::style(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.style)
  return style_.Get(index);
}
inline void CProtoItemTeamShowcase::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.style)
}
inline void CProtoItemTeamShowcase::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemTeamShowcase.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::style() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemTeamShowcase.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemTeamShowcase.style)
  return &style_;
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerAbilityUpgrade.time)
  return time_;
}
inline void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerAbilityUpgrade.time)
}

// -------------------------------------------------------------------

// CMatchPlayerTimedStats

// optional uint32 time = 1;
inline bool CMatchPlayerTimedStats::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerTimedStats::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.time)
  return time_;
}
inline void CMatchPlayerTimedStats::set_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.time)
}

// optional uint32 kills = 2;
inline bool CMatchPlayerTimedStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerTimedStats::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.kills)
  return kills_;
}
inline void CMatchPlayerTimedStats::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.kills)
}

// optional uint32 deaths = 3;
inline bool CMatchPlayerTimedStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchPlayerTimedStats::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.deaths)
  return deaths_;
}
inline void CMatchPlayerTimedStats::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.deaths)
}

// optional uint32 assists = 4;
inline bool CMatchPlayerTimedStats::has_assists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMatchPlayerTimedStats::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.assists)
  return assists_;
}
inline void CMatchPlayerTimedStats::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.assists)
}

// optional uint32 net_worth = 5;
inline bool CMatchPlayerTimedStats::has_net_worth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMatchPlayerTimedStats::clear_net_worth() {
  net_worth_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.net_worth)
  return net_worth_;
}
inline void CMatchPlayerTimedStats::set_net_worth(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.net_worth)
}

// optional uint32 last_hits = 6;
inline bool CMatchPlayerTimedStats::has_last_hits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMatchPlayerTimedStats::clear_last_hits() {
  last_hits_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.last_hits)
  return last_hits_;
}
inline void CMatchPlayerTimedStats::set_last_hits(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.last_hits)
}

// optional uint32 denies = 7;
inline bool CMatchPlayerTimedStats::has_denies() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMatchPlayerTimedStats::clear_denies() {
  denies_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMatchPlayerTimedStats::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerTimedStats.denies)
  return denies_;
}
inline void CMatchPlayerTimedStats::set_denies(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerTimedStats.denies)
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.GetNoArena();
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
#if LANG_CXX11
inline void CMatchAdditionalUnitInventory::set_unit_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
#endif
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
inline ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  if (!has_unit_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unit_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
inline int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMatchAdditionalUnitInventory.items)
}
inline void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMatchAdditionalUnitInventory.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMatchAdditionalUnitInventory.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMatchAdditionalUnitInventory.items)
  return &items_;
}

// -------------------------------------------------------------------

// CMatchPlayerPermanentBuff

// optional uint32 permanent_buff = 1;
inline bool CMatchPlayerPermanentBuff::has_permanent_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerPermanentBuff::clear_permanent_buff() {
  permanent_buff_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMatchPlayerPermanentBuff::permanent_buff() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerPermanentBuff.permanent_buff)
  return permanent_buff_;
}
inline void CMatchPlayerPermanentBuff::set_permanent_buff(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  permanent_buff_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerPermanentBuff.permanent_buff)
}

// optional uint32 stack_count = 2;
inline bool CMatchPlayerPermanentBuff::has_stack_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerPermanentBuff::clear_stack_count() {
  stack_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMatchPlayerPermanentBuff::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerPermanentBuff.stack_count)
  return stack_count_;
}
inline void CMatchPlayerPermanentBuff::set_stack_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerPermanentBuff.stack_count)
}

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.team)
  return team_;
}
inline void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
inline void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.event)
  return event_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.event)
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.timestamp)
  return timestamp_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.timestamp)
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
  return fantasy_league_id_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
}

// optional uint32 season = 4;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_season() {
  season_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::season() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.season)
  return season_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_season(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  season_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.season)
}

// optional uint32 reference_data = 5;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.reference_data)
  return reference_data_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  reference_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.reference_data)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHasItemQuery::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemQuery::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAHasItemQuery::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemQuery::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemQuery.item_id)
  return item_id_;
}
inline void CMsgDOTAHasItemQuery::set_item_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemQuery.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
inline bool CMsgDOTAHasItemResponse::has_has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemResponse::clear_has_item() {
  has_item_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemResponse.has_item)
  return has_item_;
}
inline void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemResponse.has_item)
}

// -------------------------------------------------------------------

// CMsgGCIsProQuery

// optional uint32 account_id = 1;
inline bool CMsgGCIsProQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCIsProQuery::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgGCIsProQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIsProQuery.account_id)
  return account_id_;
}
inline void CMsgGCIsProQuery::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIsProQuery.account_id)
}

// -------------------------------------------------------------------

// CMsgGCIsProResponse

// optional bool is_pro = 1;
inline bool CMsgGCIsProResponse::has_is_pro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCIsProResponse::clear_is_pro() {
  is_pro_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCIsProResponse::is_pro() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIsProResponse.is_pro)
  return is_pro_;
}
inline void CMsgGCIsProResponse::set_is_pro(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_pro_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIsProResponse.is_pro)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemDefsQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsQuery::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemDefsQuery::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsQuery.account_id)
}

// repeated uint32 itemdef_ids = 2;
inline int CMsgDOTAHasItemDefsQuery::itemdef_ids_size() const {
  return itemdef_ids_.size();
}
inline void CMsgDOTAHasItemDefsQuery::clear_itemdef_ids() {
  itemdef_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::itemdef_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_.Get(index);
}
inline void CMsgDOTAHasItemDefsQuery::set_itemdef_ids(int index, ::google::protobuf::uint32 value) {
  itemdef_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline void CMsgDOTAHasItemDefsQuery::add_itemdef_ids(::google::protobuf::uint32 value) {
  itemdef_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAHasItemDefsQuery::itemdef_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAHasItemDefsQuery::mutable_itemdef_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return &itemdef_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsResponse

// optional bool has_items = 1;
inline bool CMsgDOTAHasItemDefsResponse::has_has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsResponse::clear_has_items() {
  has_items_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAHasItemDefsResponse::has_items() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsResponse.has_items)
  return has_items_;
}
inline void CMsgDOTAHasItemDefsResponse::set_has_items(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_items_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsResponse.has_items)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfo

// optional uint32 account_id = 1;
inline bool CMsgGCGetPlayerCardItemInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfo.account_id)
  return account_id_;
}
inline void CMsgGCGetPlayerCardItemInfo::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfo.account_id)
}

// repeated uint64 player_card_item_ids = 2;
inline int CMsgGCGetPlayerCardItemInfo::player_card_item_ids_size() const {
  return player_card_item_ids_.size();
}
inline void CMsgGCGetPlayerCardItemInfo::clear_player_card_item_ids() {
  player_card_item_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfo::player_card_item_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_.Get(index);
}
inline void CMsgGCGetPlayerCardItemInfo::set_player_card_item_ids(int index, ::google::protobuf::uint64 value) {
  player_card_item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline void CMsgGCGetPlayerCardItemInfo::add_player_card_item_ids(::google::protobuf::uint64 value) {
  player_card_item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetPlayerCardItemInfo::player_card_item_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetPlayerCardItemInfo::mutable_player_card_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return &player_card_item_ids_;
}

// optional uint32 all_for_event = 3;
inline bool CMsgGCGetPlayerCardItemInfo::has_all_for_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfo::clear_all_for_event() {
  all_for_event_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfo::all_for_event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfo.all_for_event)
  return all_for_event_;
}
inline void CMsgGCGetPlayerCardItemInfo::set_all_for_event(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  all_for_event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfo.all_for_event)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo

// optional uint64 player_card_item_id = 1;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_player_card_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_player_card_item_id() {
  player_card_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
  return player_card_item_id_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_player_card_item_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  player_card_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
}

// optional uint32 account_id = 2;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
  return account_id_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
}

// optional uint64 packed_bonuses = 3;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_packed_bonuses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_packed_bonuses() {
  packed_bonuses_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::packed_bonuses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
  return packed_bonuses_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_packed_bonuses(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  packed_bonuses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse

// repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
inline int CMsgGCGetPlayerCardItemInfoResponse::player_card_infos_size() const {
  return player_card_infos_.size();
}
inline void CMsgGCGetPlayerCardItemInfoResponse::clear_player_card_infos() {
  player_card_infos_.Clear();
}
inline ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return &player_card_infos_;
}
inline const ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse::player_card_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Get(index);
}
inline ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::add_player_card_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
CMsgGCGetPlayerCardItemInfoResponse::player_card_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_;
}

// -------------------------------------------------------------------

// CMsgGCToGCFantasySetMatchLeague

// optional uint64 match_id = 1;
inline bool CMsgGCToGCFantasySetMatchLeague::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgGCToGCFantasySetMatchLeague::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCFantasySetMatchLeague.match_id)
  return match_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCFantasySetMatchLeague.match_id)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToGCFantasySetMatchLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCToGCFantasySetMatchLeague::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCFantasySetMatchLeague.league_id)
  return league_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCFantasySetMatchLeague.league_id)
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.account_id)
  return account_id_;
}
inline void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2 [(.proto.dota.key_field) = true];
inline bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.location_id)
  return location_id_;
}
inline void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  location_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.completed)
  return completed_;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
inline int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeagueAdminList.account_ids)
  return account_ids_.Get(index);
}
inline void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeagueAdminList.account_ids)
}
inline void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLeagueAdminList.account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLeagueAdminList.account_ids)
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLeagueAdminList.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// CCompendiumTimestampedData

// optional uint32 game_time = 1;
inline bool CCompendiumTimestampedData::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCompendiumTimestampedData::clear_game_time() {
  game_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.game_time)
  return game_time_;
}
inline void CCompendiumTimestampedData::set_game_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.game_time)
}

// optional uint32 gpm = 2;
inline bool CCompendiumTimestampedData::has_gpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCompendiumTimestampedData::clear_gpm() {
  gpm_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.gpm)
  return gpm_;
}
inline void CCompendiumTimestampedData::set_gpm(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.gpm)
}

// optional uint32 xpm = 3;
inline bool CCompendiumTimestampedData::has_xpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCompendiumTimestampedData::clear_xpm() {
  xpm_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.xpm)
  return xpm_;
}
inline void CCompendiumTimestampedData::set_xpm(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.xpm)
}

// optional uint32 kills = 4;
inline bool CCompendiumTimestampedData::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCompendiumTimestampedData::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.kills)
  return kills_;
}
inline void CCompendiumTimestampedData::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.kills)
}

// optional uint32 deaths = 5;
inline bool CCompendiumTimestampedData::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCompendiumTimestampedData::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.deaths)
  return deaths_;
}
inline void CCompendiumTimestampedData::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.deaths)
}

// repeated uint32 item_purchases = 6;
inline int CCompendiumTimestampedData::item_purchases_size() const {
  return item_purchases_.size();
}
inline void CCompendiumTimestampedData::clear_item_purchases() {
  item_purchases_.Clear();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.item_purchases)
  return item_purchases_.Get(index);
}
inline void CCompendiumTimestampedData::set_item_purchases(int index, ::google::protobuf::uint32 value) {
  item_purchases_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.item_purchases)
}
inline void CCompendiumTimestampedData::add_item_purchases(::google::protobuf::uint32 value) {
  item_purchases_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumTimestampedData.item_purchases)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCompendiumTimestampedData::item_purchases() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumTimestampedData.item_purchases)
  return item_purchases_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCompendiumTimestampedData::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumTimestampedData.item_purchases)
  return &item_purchases_;
}

// -------------------------------------------------------------------

// CCompendiumGameTimeline

// repeated .proto.dota.CCompendiumTimestampedData data = 1;
inline int CCompendiumGameTimeline::data_size() const {
  return data_.size();
}
inline void CCompendiumGameTimeline::clear_data() {
  data_.Clear();
}
inline ::proto::dota::CCompendiumTimestampedData* CCompendiumGameTimeline::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameTimeline.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >*
CCompendiumGameTimeline::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameTimeline.data)
  return &data_;
}
inline const ::proto::dota::CCompendiumTimestampedData& CCompendiumGameTimeline::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameTimeline.data)
  return data_.Get(index);
}
inline ::proto::dota::CCompendiumTimestampedData* CCompendiumGameTimeline::add_data() {
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >&
CCompendiumGameTimeline::data() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameTimeline.data)
  return data_;
}

// repeated string tags = 2;
inline int CCompendiumGameTimeline::tags_size() const {
  return tags_.size();
}
inline void CCompendiumGameTimeline::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CCompendiumGameTimeline::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Get(index);
}
inline ::std::string* CCompendiumGameTimeline::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Mutable(index);
}
inline void CCompendiumGameTimeline::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CCompendiumGameTimeline::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CCompendiumGameTimeline::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCompendiumGameTimeline.tags)
}
inline ::std::string* CCompendiumGameTimeline::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Add();
}
inline void CCompendiumGameTimeline::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.tags)
}
#if LANG_CXX11
inline void CCompendiumGameTimeline::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.tags)
}
#endif
inline void CCompendiumGameTimeline::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CCompendiumGameTimeline.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CCompendiumGameTimeline::tags() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameTimeline.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CCompendiumGameTimeline::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameTimeline.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// CCompendiumGameList

// repeated .proto.dota.CCompendiumGameTimeline games = 1;
inline int CCompendiumGameList::games_size() const {
  return games_.size();
}
inline void CCompendiumGameList::clear_games() {
  games_.Clear();
}
inline ::proto::dota::CCompendiumGameTimeline* CCompendiumGameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameList.games)
  return games_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >*
CCompendiumGameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameList.games)
  return &games_;
}
inline const ::proto::dota::CCompendiumGameTimeline& CCompendiumGameList::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameList.games)
  return games_.Get(index);
}
inline ::proto::dota::CCompendiumGameTimeline* CCompendiumGameList::add_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameList.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >&
CCompendiumGameList::games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameList.games)
  return games_;
}

// -------------------------------------------------------------------

// CAdditionalEquipSlot

// optional uint32 class_id = 1;
inline bool CAdditionalEquipSlot::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAdditionalEquipSlot::clear_class_id() {
  class_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::class_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.class_id)
  return class_id_;
}
inline void CAdditionalEquipSlot::set_class_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  class_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.class_id)
}

// optional uint32 slot_id = 2;
inline bool CAdditionalEquipSlot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAdditionalEquipSlot::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.slot_id)
  return slot_id_;
}
inline void CAdditionalEquipSlot::set_slot_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.slot_id)
}

// optional uint32 def_index = 3;
inline bool CAdditionalEquipSlot::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAdditionalEquipSlot::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.def_index)
  return def_index_;
}
inline void CAdditionalEquipSlot::set_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.def_index)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return trophy_id_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return trophy_score_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  trophy_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return static_cast< ::proto::dota::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::proto::dota::CMsgDOTAProfileCard_EStatID value) {
  assert(::proto::dota::CMsgDOTAProfileCard_EStatID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return stat_score_;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stat_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
inline bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  serialized_item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.GetNoArena();
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
#if LANG_CXX11
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_item_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
#endif
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  if (!has_serialized_item()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serialized_item_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(::std::string* serialized_item) {
  if (serialized_item != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_item);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Item.item_id)
  return item_id_;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_item_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return hero_id_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return hero_wins_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hero_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return hero_losses_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return emoticon_id_;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  emoticon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Team::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Team::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Team.team_id)
  return team_id_;
}
inline void CMsgDOTAProfileCard_Slot_Team::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Team.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
inline bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.slot_id)
  return slot_id_;
}
inline void CMsgDOTAProfileCard_Slot::set_slot_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
inline bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != nullptr) trophy_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* p = trophy_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  _has_bits_[0] |= 0x00000001u;
  if (trophy_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Trophy>(GetArenaNoVirtual());
    trophy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  return trophy_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trophy_;
  }
  if (trophy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trophy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trophy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trophy_ = trophy;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
inline bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != nullptr) stat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* p = stat_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  _has_bits_[0] |= 0x00000002u;
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Stat>(GetArenaNoVirtual());
    stat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  return stat_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_stat(::proto::dota::CMsgDOTAProfileCard_Slot_Stat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.stat)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
inline bool CMsgDOTAProfileCard_Slot::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Item* p = item_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Item*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Item_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.item)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  _has_bits_[0] |= 0x00000004u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Item>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.item)
  return item_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_item(::proto::dota::CMsgDOTAProfileCard_Slot_Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.item)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
inline bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != nullptr) hero_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* p = hero_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  _has_bits_[0] |= 0x00000008u;
  if (hero_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Hero>(GetArenaNoVirtual());
    hero_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  return hero_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_hero(::proto::dota::CMsgDOTAProfileCard_Slot_Hero* hero) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hero_;
  }
  if (hero) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hero = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hero, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hero_ = hero;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.hero)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
inline bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != nullptr) emoticon_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* p = emoticon_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  _has_bits_[0] &= ~0x00000010u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  _has_bits_[0] |= 0x00000010u;
  if (emoticon_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon>(GetArenaNoVirtual());
    emoticon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete emoticon_;
  }
  if (emoticon) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emoticon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  emoticon_ = emoticon;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
inline bool CMsgDOTAProfileCard_Slot::has_team() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::clear_team() {
  if (team_ != nullptr) team_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::team() const {
  const ::proto::dota::CMsgDOTAProfileCard_Slot_Team* p = team_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.team)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAProfileCard_Slot_Team*>(
      &::proto::dota::_CMsgDOTAProfileCard_Slot_Team_default_instance_);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::release_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.team)
  _has_bits_[0] &= ~0x00000020u;
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team* temp = team_;
  team_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::mutable_team() {
  _has_bits_[0] |= 0x00000020u;
  if (team_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAProfileCard_Slot_Team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.team)
  return team_;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_team(::proto::dota::CMsgDOTAProfileCard_Slot_Team* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.team)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.account_id)
  return account_id_;
}
inline void CMsgDOTAProfileCard::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.account_id)
}

// optional uint32 background_def_index = 2;
inline bool CMsgDOTAProfileCard::has_background_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard::clear_background_def_index() {
  background_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::background_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.background_def_index)
  return background_def_index_;
}
inline void CMsgDOTAProfileCard::set_background_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  background_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.background_def_index)
}

// repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
inline int CMsgDOTAProfileCard::slots_size() const {
  return slots_.size();
}
inline void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAProfileCard.slots)
  return &slots_;
}
inline const ::proto::dota::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Get(index);
}
inline ::proto::dota::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_;
}

// optional uint32 badge_points = 4;
inline bool CMsgDOTAProfileCard::has_badge_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.badge_points)
  return badge_points_;
}
inline void CMsgDOTAProfileCard::set_badge_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  badge_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
inline bool CMsgDOTAProfileCard::has_event_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.event_points)
  return event_points_;
}
inline void CMsgDOTAProfileCard::set_event_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
inline bool CMsgDOTAProfileCard::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.event_id)
  return event_id_;
}
inline void CMsgDOTAProfileCard::set_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.event_id)
}

// optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
inline bool CMsgDOTAProfileCard::has_recent_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard::clear_recent_battle_cup_victory() {
  if (recent_battle_cup_victory_ != nullptr) recent_battle_cup_victory_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgBattleCupVictory& CMsgDOTAProfileCard::recent_battle_cup_victory() const {
  const ::proto::dota::CMsgBattleCupVictory* p = recent_battle_cup_victory_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgBattleCupVictory*>(
      &::proto::dota::_CMsgBattleCupVictory_default_instance_);
}
inline ::proto::dota::CMsgBattleCupVictory* CMsgDOTAProfileCard::release_recent_battle_cup_victory() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgBattleCupVictory* temp = recent_battle_cup_victory_;
  recent_battle_cup_victory_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgBattleCupVictory* CMsgDOTAProfileCard::mutable_recent_battle_cup_victory() {
  _has_bits_[0] |= 0x00000001u;
  if (recent_battle_cup_victory_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgBattleCupVictory>(GetArenaNoVirtual());
    recent_battle_cup_victory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  return recent_battle_cup_victory_;
}
inline void CMsgDOTAProfileCard::set_allocated_recent_battle_cup_victory(::proto::dota::CMsgBattleCupVictory* recent_battle_cup_victory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recent_battle_cup_victory_;
  }
  if (recent_battle_cup_victory) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recent_battle_cup_victory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recent_battle_cup_victory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recent_battle_cup_victory_ = recent_battle_cup_victory;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
}

// optional uint32 rank_tier = 8;
inline bool CMsgDOTAProfileCard::has_rank_tier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAProfileCard::clear_rank_tier() {
  rank_tier_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::rank_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.rank_tier)
  return rank_tier_;
}
inline void CMsgDOTAProfileCard::set_rank_tier(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  rank_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.rank_tier)
}

// optional uint32 leaderboard_rank = 9;
inline bool CMsgDOTAProfileCard::has_leaderboard_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAProfileCard::clear_leaderboard_rank() {
  leaderboard_rank_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::leaderboard_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.leaderboard_rank)
  return leaderboard_rank_;
}
inline void CMsgDOTAProfileCard::set_leaderboard_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  leaderboard_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.leaderboard_rank)
}

// optional bool is_plus_subscriber = 10;
inline bool CMsgDOTAProfileCard::has_is_plus_subscriber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAProfileCard::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgDOTAProfileCard::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.is_plus_subscriber)
  return is_plus_subscriber_;
}
inline void CMsgDOTAProfileCard::set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_plus_subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.is_plus_subscriber)
}

// optional uint32 plus_original_start_date = 11;
inline bool CMsgDOTAProfileCard::has_plus_original_start_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAProfileCard::clear_plus_original_start_date() {
  plus_original_start_date_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::plus_original_start_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.plus_original_start_date)
  return plus_original_start_date_;
}
inline void CMsgDOTAProfileCard::set_plus_original_start_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  plus_original_start_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.plus_original_start_date)
}

// optional uint32 rank_tier_score = 12;
inline bool CMsgDOTAProfileCard::has_rank_tier_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAProfileCard::clear_rank_tier_score() {
  rank_tier_score_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::rank_tier_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.rank_tier_score)
  return rank_tier_score_;
}
inline void CMsgDOTAProfileCard::set_rank_tier_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  rank_tier_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.rank_tier_score)
}

// optional uint32 previous_rank_tier = 13;
inline bool CMsgDOTAProfileCard::has_previous_rank_tier() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAProfileCard::clear_previous_rank_tier() {
  previous_rank_tier_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::previous_rank_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.previous_rank_tier)
  return previous_rank_tier_;
}
inline void CMsgDOTAProfileCard::set_previous_rank_tier(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  previous_rank_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.previous_rank_tier)
}

// -------------------------------------------------------------------

// CSODOTAPlayerChallenge

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.account_id)
  return account_id_;
}
inline void CSODOTAPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
inline bool CSODOTAPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.event_id)
  return event_id_;
}
inline void CSODOTAPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
inline bool CSODOTAPlayerChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.slot_id)
  return slot_id_;
}
inline void CSODOTAPlayerChallenge::set_slot_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 int_param_0 = 5;
inline bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_int_param_0() {
  int_param_0_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.int_param_0)
  return int_param_0_;
}
inline void CSODOTAPlayerChallenge::set_int_param_0(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  int_param_0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
inline bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_int_param_1() {
  int_param_1_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.int_param_1)
  return int_param_1_;
}
inline void CSODOTAPlayerChallenge::set_int_param_1(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  int_param_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
inline bool CSODOTAPlayerChallenge::has_created_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_created_time() {
  created_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.created_time)
  return created_time_;
}
inline void CSODOTAPlayerChallenge::set_created_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  created_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
inline bool CSODOTAPlayerChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_completed() {
  completed_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.completed)
  return completed_;
}
inline void CSODOTAPlayerChallenge::set_completed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
inline bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CSODOTAPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
inline bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_challenge_tier() {
  challenge_tier_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.challenge_tier)
  return challenge_tier_;
}
inline void CSODOTAPlayerChallenge::set_challenge_tier(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  challenge_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
inline bool CSODOTAPlayerChallenge::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.flags)
  return flags_;
}
inline void CSODOTAPlayerChallenge::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.flags)
}

// optional uint32 attempts = 12;
inline bool CSODOTAPlayerChallenge::has_attempts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_attempts() {
  attempts_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::attempts() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.attempts)
  return attempts_;
}
inline void CSODOTAPlayerChallenge::set_attempts(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  attempts_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.attempts)
}

// optional uint32 complete_limit = 13;
inline bool CSODOTAPlayerChallenge::has_complete_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_complete_limit() {
  complete_limit_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::complete_limit() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.complete_limit)
  return complete_limit_;
}
inline void CSODOTAPlayerChallenge::set_complete_limit(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  complete_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.complete_limit)
}

// optional uint32 quest_rank = 14;
inline bool CSODOTAPlayerChallenge::has_quest_rank() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_quest_rank() {
  quest_rank_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::quest_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.quest_rank)
  return quest_rank_;
}
inline void CSODOTAPlayerChallenge::set_quest_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  quest_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.quest_rank)
}

// optional uint32 max_quest_rank = 15;
inline bool CSODOTAPlayerChallenge::has_max_quest_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_max_quest_rank() {
  max_quest_rank_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::max_quest_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.max_quest_rank)
  return max_quest_rank_;
}
inline void CSODOTAPlayerChallenge::set_max_quest_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_quest_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.max_quest_rank)
}

// optional uint32 instance_id = 16;
inline bool CSODOTAPlayerChallenge::has_instance_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_instance_id() {
  instance_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.instance_id)
  return instance_id_;
}
inline void CSODOTAPlayerChallenge::set_instance_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.instance_id)
}

// optional uint32 hero_id = 17;
inline bool CSODOTAPlayerChallenge::has_hero_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.hero_id)
  return hero_id_;
}
inline void CSODOTAPlayerChallenge::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.hero_id)
}

// optional uint32 template_id = 18;
inline bool CSODOTAPlayerChallenge::has_template_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAPlayerChallenge::clear_template_id() {
  template_id_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::template_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.template_id)
  return template_id_;
}
inline void CSODOTAPlayerChallenge::set_template_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  template_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.template_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCRerollPlayerChallenge

// optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::EEvent CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRerollPlayerChallenge.event_id)
  return static_cast< ::proto::dota::EEvent >(event_id_);
}
inline void CMsgClientToGCRerollPlayerChallenge::set_event_id(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
inline bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

// optional uint32 hero_id = 4;
inline bool CMsgClientToGCRerollPlayerChallenge::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRerollPlayerChallenge.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRerollPlayerChallenge.hero_id)
}

// -------------------------------------------------------------------

// CMsgGCRerollPlayerChallengeResponse

// optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
inline bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRerollPlayerChallengeResponse.result)
  return static_cast< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult >(result_);
}
inline void CMsgGCRerollPlayerChallengeResponse::set_result(::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRerollPlayerChallengeResponse.result)
}

// -------------------------------------------------------------------

// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
inline int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return top_custom_games_.size();
}
inline void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  top_custom_games_.Clear();
}
inline ::google::protobuf::uint64 CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_.Get(index);
}
inline void CMsgGCTopCustomGamesList::set_top_custom_games(int index, ::google::protobuf::uint64 value) {
  top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
}
inline void CMsgGCTopCustomGamesList::add_top_custom_games(::google::protobuf::uint64 value) {
  top_custom_games_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return &top_custom_games_;
}

// optional uint64 game_of_the_day = 2;
inline bool CMsgGCTopCustomGamesList::has_game_of_the_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCTopCustomGamesList::clear_game_of_the_day() {
  game_of_the_day_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgGCTopCustomGamesList::game_of_the_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCTopCustomGamesList.game_of_the_day)
  return game_of_the_day_;
}
inline void CMsgGCTopCustomGamesList::set_game_of_the_day(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_of_the_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCTopCustomGamesList.game_of_the_day)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
#endif
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  if (!has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional string team_tag = 10;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  return team_tag_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}
#endif
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  if (!has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// optional uint32 net_worth = 9;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_net_worth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_net_worth() {
  net_worth_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.net_worth)
  return net_worth_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_net_worth(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.net_worth)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &players_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_;
}

// optional bool only_team = 7;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  only_team_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return only_team_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  _has_bits_[0] |= 0x00000080u;
  only_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  cheers_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return cheers_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cheers_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

// optional string team_logo_url = 11;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo_url() {
  team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  return team_logo_url_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}
#endif
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_logo_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  return team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  if (!has_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_logo_url(::std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_ItemDetails

// optional uint32 item_ability_id = 1;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_item_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_item_ability_id() {
  item_ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::item_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.item_ability_id)
  return item_ability_id_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_item_ability_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  item_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.item_ability_id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
#endif
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.time)
  return time_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  sold_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return sold_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  stackcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return stackcount_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  stackcount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityDetails

// optional uint32 id = 1;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return id_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
#endif
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  cooldown_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return cooldown_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  _has_bits_[0] |= 0x00000008u;
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  cooldown_max_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return cooldown_max_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  _has_bits_[0] |= 0x00000010u;
  cooldown_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional uint32 victimid = 1;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  victimid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return victimid_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  victimid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return kills_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return assists_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityList

// repeated uint32 id = 1;
inline int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return id_.size();
}
inline void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline void CMsgDOTARealtimeGameStats_AbilityList::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return &id_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  playerid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
#endif
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  heroid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  healthpoints_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return healthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  healthpoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  maxhealthpoints_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return maxhealthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  maxhealthpoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  healthregenrate_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return healthregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  _has_bits_[0] |= 0x00000080u;
  healthregenrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  manapoints_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return manapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  manapoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  maxmanapoints_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return maxmanapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  maxmanapoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  manaregenrate_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return manaregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  _has_bits_[0] |= 0x00000400u;
  manaregenrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  base_strength_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return base_strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  base_strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  base_agility_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return base_agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  base_agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  base_intelligence_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return base_intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  base_intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  base_armor_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return base_armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  base_armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  base_movespeed_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return base_movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  base_movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  base_damage_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return base_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  strength_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  agility_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  intelligence_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  armor_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  movespeed_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return abilities_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  abilities_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &abilities_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_;
}

// optional uint32 level = 27;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  hero_healing_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  gold_per_min_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  xp_per_min_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return xp_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  net_gold_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return net_gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  net_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  gold_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  x_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  _has_bits_[1] |= 0x00000010u;
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  y_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  _has_bits_[1] |= 0x00000020u;
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  respawn_time_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return respawn_time_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return ultimate_cooldown_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  has_buyback_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return has_buyback_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  _has_bits_[1] |= 0x00000100u;
  has_buyback_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return items_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  items_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &items_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return stashitems_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  stashitems_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &stashitems_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return itemshoppinglist_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  itemshoppinglist_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &itemshoppinglist_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return levelpoints_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  levelpoints_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &levelpoints_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return hero_to_hero_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  hero_to_hero_stats_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &hero_to_hero_stats_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  has_ultimate_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return has_ultimate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  _has_bits_[1] |= 0x00000200u;
  has_ultimate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  has_ultimate_mana_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return has_ultimate_mana_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  _has_bits_[1] |= 0x00000400u;
  has_ultimate_mana_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  _has_bits_[0] |= 0x00000002u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  lane_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lane_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  tier_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// optional bool destroyed = 9;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
  return destroyed_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_destroyed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_KillDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  player_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  death_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return death_time_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  death_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional uint32 killer_player_id = 3;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  killer_player_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return killer_player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  player_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// optional uint32 selected_hero = 2;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_hero() {
  selected_hero_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
  return selected_hero_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_hero(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  selected_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
}

// optional uint32 selected_graph = 3;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_graph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_graph() {
  selected_graph_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
  return selected_graph_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_graph(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  selected_graph_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  hero_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return hero_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_matchid() {
  matchid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  matchid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  time_of_day_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return time_of_day_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  _has_bits_[0] |= 0x00000008u;
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  is_nightstalker_night_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return is_nightstalker_night_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_nightstalker_night_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 game_state = 19;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_state() {
  game_state_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_state)
  return game_state_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_state)
}

// optional uint32 teamid_radiant = 8;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  teamid_radiant_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return teamid_radiant_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  teamid_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  teamid_dire_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return teamid_dire_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  teamid_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
inline int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return picks_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  picks_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &picks_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
inline int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return bans_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  bans_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &bans_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
inline int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return kills_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  kills_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &kills_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
inline int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return broadcasters_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  broadcasters_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &broadcasters_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_;
}

// optional uint32 game_mode = 14;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional uint32 league_node_id = 18;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_node_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_node_id() {
  league_node_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_node_id)
  return league_node_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_node_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  league_node_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_node_id)
}

// optional bool single_team = 16;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  single_team_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return single_team_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  _has_bits_[0] |= 0x00000100u;
  single_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  cheers_peak_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return cheers_peak_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  cheers_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  stats_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, ::google::protobuf::int32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(::google::protobuf::int32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return &stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  loc_stats_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &loc_stats_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return &graph_gold_;
}

// repeated int32 graph_xp = 2;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return graph_xp_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  graph_xp_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, ::google::protobuf::int32 value) {
  graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(::google::protobuf::int32 value) {
  graph_xp_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return &graph_xp_;
}

// repeated int32 graph_kill = 3;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return graph_kill_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  graph_kill_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, ::google::protobuf::int32 value) {
  graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(::google::protobuf::int32 value) {
  graph_kill_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return &graph_kill_;
}

// repeated int32 graph_tower = 4;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return graph_tower_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  graph_tower_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, ::google::protobuf::int32 value) {
  graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(::google::protobuf::int32 value) {
  graph_tower_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return &graph_tower_;
}

// repeated int32 graph_rax = 5;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return graph_rax_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  graph_rax_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, ::google::protobuf::int32 value) {
  graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(::google::protobuf::int32 value) {
  graph_rax_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return &graph_rax_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
inline int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return team_loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  team_loc_stats_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &team_loc_stats_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats

// optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStats::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* p = match_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.match)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails*>(
      &::proto::dota::_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.match)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  _has_bits_[0] |= 0x00000001u;
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails>(GetArenaNoVirtual());
    match_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.match)
  return match_;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete match_;
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.match)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStats::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_teams() {
  teams_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return &teams_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStats::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_buildings() {
  buildings_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return &buildings_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_;
}

// optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (graph_data_ != nullptr) graph_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* p = graph_data_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData*>(
      &::proto::dota::_CMsgDOTARealtimeGameStats_GraphData_default_instance_);
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* temp = graph_data_;
  graph_data_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  _has_bits_[0] |= 0x00000002u;
  if (graph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStats_GraphData>(GetArenaNoVirtual());
    graph_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graph_data_;
  }
  if (graph_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graph_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  graph_data_ = graph_data;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  delta_frame_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  _has_bits_[0] |= 0x00000004u;
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
#endif
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  if (!has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional string team_tag = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  return team_tag_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}
#endif
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  if (!has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// optional uint32 net_worth = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_net_worth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_net_worth() {
  net_worth_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.net_worth)
  return net_worth_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_net_worth(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.net_worth)
}

// optional string team_logo_url = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo_url() {
  team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  return team_logo_url_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}
#endif
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_logo_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  return team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  if (!has_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_logo_url(::std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &players_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  playerid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.GetNoArena();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
#if LANG_CXX11
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
#endif
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  heroid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  gold_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  _has_bits_[0] |= 0x00001000u;
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  _has_bits_[0] |= 0x00002000u;
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

// optional uint32 net_worth = 15;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_net_worth() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_net_worth() {
  net_worth_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.net_worth)
  return net_worth_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_net_worth(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.net_worth)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  _has_bits_[0] |= 0x00000002u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  lane_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lane_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  tier_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// optional bool destroyed = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
  return destroyed_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_destroyed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::clear_hero() {
  hero_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails.hero)
  return hero_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_matchid() {
  matchid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  matchid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return steam_broadcaster_account_ids_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  steam_broadcaster_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return &steam_broadcaster_account_ids_;
}

// optional uint32 game_mode = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

// optional uint32 league_node_id = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_node_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_node_id() {
  league_node_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_node_id)
  return league_node_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_node_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  league_node_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_node_id)
}

// optional uint32 game_state = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_state() {
  game_state_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_state)
  return game_state_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_state)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks_size() const {
  return picks_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_picks() {
  picks_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return picks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return &picks_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return picks_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return picks_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans_size() const {
  return bans_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_bans() {
  bans_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return bans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return &bans_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return bans_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return bans_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return &graph_gold_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse

// optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* p = match_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
      &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  _has_bits_[0] |= 0x00000001u;
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails>(GetArenaNoVirtual());
    match_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  return match_;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete match_;
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  teams_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return &teams_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  buildings_.Clear();
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return &buildings_;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Get(index);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_;
}

// optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (graph_data_ != nullptr) graph_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* p = graph_data_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData*>(
      &::proto::dota::_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_);
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = graph_data_;
  graph_data_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  _has_bits_[0] |= 0x00000002u;
  if (graph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData>(GetArenaNoVirtual());
    graph_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graph_data_;
  }
  if (graph_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graph_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  graph_data_ = graph_data;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  delta_frame_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  _has_bits_[0] |= 0x00000004u;
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastTimelineEvent

// optional .proto.dota.EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
inline bool CMsgDOTABroadcastTimelineEvent::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABroadcastTimelineEvent::clear_event() {
  event_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::proto::dota::EBroadcastTimelineEvent CMsgDOTABroadcastTimelineEvent::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastTimelineEvent.event)
  return static_cast< ::proto::dota::EBroadcastTimelineEvent >(event_);
}
inline void CMsgDOTABroadcastTimelineEvent::set_event(::proto::dota::EBroadcastTimelineEvent value) {
  assert(::proto::dota::EBroadcastTimelineEvent_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastTimelineEvent.event)
}

// optional fixed32 timestamp = 2;
inline bool CMsgDOTABroadcastTimelineEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABroadcastTimelineEvent::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTABroadcastTimelineEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastTimelineEvent.timestamp)
  return timestamp_;
}
inline void CMsgDOTABroadcastTimelineEvent::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastTimelineEvent.timestamp)
}

// optional uint32 data = 3;
inline bool CMsgDOTABroadcastTimelineEvent::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABroadcastTimelineEvent::clear_data() {
  data_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTABroadcastTimelineEvent::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastTimelineEvent.data)
  return data_;
}
inline void CMsgDOTABroadcastTimelineEvent::set_data(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastTimelineEvent.data)
}

// optional string string_data = 4;
inline bool CMsgDOTABroadcastTimelineEvent::has_string_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastTimelineEvent::clear_string_data() {
  string_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTABroadcastTimelineEvent::string_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
  return string_data_.GetNoArena();
}
inline void CMsgDOTABroadcastTimelineEvent::set_string_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
}
#if LANG_CXX11
inline void CMsgDOTABroadcastTimelineEvent::set_string_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
}
#endif
inline void CMsgDOTABroadcastTimelineEvent::set_string_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
}
inline void CMsgDOTABroadcastTimelineEvent::set_string_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
}
inline ::std::string* CMsgDOTABroadcastTimelineEvent::mutable_string_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
  return string_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTABroadcastTimelineEvent::release_string_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
  if (!has_string_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTABroadcastTimelineEvent::set_allocated_string_data(::std::string* string_data) {
  if (string_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABroadcastTimelineEvent.string_data)
}

// -------------------------------------------------------------------

// CMsgGCToClientMatchGroupsVersion

// optional uint32 matchgroups_version = 1;
inline bool CMsgGCToClientMatchGroupsVersion::has_matchgroups_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientMatchGroupsVersion::clear_matchgroups_version() {
  matchgroups_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgGCToClientMatchGroupsVersion::matchgroups_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientMatchGroupsVersion.matchgroups_version)
  return matchgroups_version_;
}
inline void CMsgGCToClientMatchGroupsVersion::set_matchgroups_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  matchgroups_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientMatchGroupsVersion.matchgroups_version)
}

// -------------------------------------------------------------------

// CMsgDOTASDOHeroStatsHistory

// optional uint64 match_id = 1;
inline bool CMsgDOTASDOHeroStatsHistory::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTASDOHeroStatsHistory::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.match_id)
  return match_id_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.match_id)
}

// optional uint32 game_mode = 2;
inline bool CMsgDOTASDOHeroStatsHistory::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.game_mode)
  return game_mode_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_game_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.game_mode)
}

// optional uint32 lobby_type = 3;
inline bool CMsgDOTASDOHeroStatsHistory::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_lobby_type() {
  lobby_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.lobby_type)
  return lobby_type_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_lobby_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.lobby_type)
}

// optional uint32 start_time = 4;
inline bool CMsgDOTASDOHeroStatsHistory::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.start_time)
  return start_time_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_start_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.start_time)
}

// optional bool won = 5;
inline bool CMsgDOTASDOHeroStatsHistory::has_won() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_won() {
  won_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDOTASDOHeroStatsHistory::won() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.won)
  return won_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_won(bool value) {
  _has_bits_[0] |= 0x00000010u;
  won_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.won)
}

// optional uint32 gpm = 6;
inline bool CMsgDOTASDOHeroStatsHistory::has_gpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_gpm() {
  gpm_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.gpm)
  return gpm_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_gpm(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.gpm)
}

// optional uint32 xpm = 7;
inline bool CMsgDOTASDOHeroStatsHistory::has_xpm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_xpm() {
  xpm_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.xpm)
  return xpm_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_xpm(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.xpm)
}

// optional uint32 kills = 8;
inline bool CMsgDOTASDOHeroStatsHistory::has_kills() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.kills)
  return kills_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.kills)
}

// optional uint32 deaths = 9;
inline bool CMsgDOTASDOHeroStatsHistory::has_deaths() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.deaths)
  return deaths_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.deaths)
}

// optional uint32 assists = 10;
inline bool CMsgDOTASDOHeroStatsHistory::has_assists() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.assists)
  return assists_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.assists)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonRewards_Reward

// optional string name = 1;
inline bool CMsgDOTASeasonRewards_Reward::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonRewards_Reward::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  return name_.GetNoArena();
}
inline void CMsgDOTASeasonRewards_Reward::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonRewards_Reward::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
#endif
inline void CMsgDOTASeasonRewards_Reward::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
inline void CMsgDOTASeasonRewards_Reward::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonRewards_Reward::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}

// optional uint32 itemdef = 2;
inline bool CMsgDOTASeasonRewards_Reward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_itemdef() {
  itemdef_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::itemdef() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.itemdef)
  return itemdef_;
}
inline void CMsgDOTASeasonRewards_Reward::set_itemdef(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.itemdef)
}

// optional uint32 importance = 3;
inline bool CMsgDOTASeasonRewards_Reward::has_importance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_importance() {
  importance_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::importance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.importance)
  return importance_;
}
inline void CMsgDOTASeasonRewards_Reward::set_importance(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  importance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.importance)
}

// optional uint32 base_level = 4;
inline bool CMsgDOTASeasonRewards_Reward::has_base_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_base_level() {
  base_level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::base_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.base_level)
  return base_level_;
}
inline void CMsgDOTASeasonRewards_Reward::set_base_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  base_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.base_level)
}

// optional uint32 repeat_level = 5;
inline bool CMsgDOTASeasonRewards_Reward::has_repeat_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_repeat_level() {
  repeat_level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::repeat_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.repeat_level)
  return repeat_level_;
}
inline void CMsgDOTASeasonRewards_Reward::set_repeat_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeat_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.repeat_level)
}

// optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
inline bool CMsgDOTASeasonRewards_Reward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_reward_type() {
  reward_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::proto::dota::CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_Reward::reward_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.reward_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonRewards_ERewardType >(reward_type_);
}
inline void CMsgDOTASeasonRewards_Reward::set_reward_type(::proto::dota::CMsgDOTASeasonRewards_ERewardType value) {
  assert(::proto::dota::CMsgDOTASeasonRewards_ERewardType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  reward_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.reward_type)
}

// optional string image = 7;
inline bool CMsgDOTASeasonRewards_Reward::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeasonRewards_Reward::image() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  return image_.GetNoArena();
}
inline void CMsgDOTASeasonRewards_Reward::set_image(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
#if LANG_CXX11
inline void CMsgDOTASeasonRewards_Reward::set_image(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
#endif
inline void CMsgDOTASeasonRewards_Reward::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
inline void CMsgDOTASeasonRewards_Reward::set_image(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::release_image() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  if (!has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonRewards_Reward::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}

// optional uint32 action_id = 8;
inline bool CMsgDOTASeasonRewards_Reward::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_action_id() {
  action_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.action_id)
  return action_id_;
}
inline void CMsgDOTASeasonRewards_Reward::set_action_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.action_id)
}

// optional uint32 effect_index = 9;
inline bool CMsgDOTASeasonRewards_Reward::has_effect_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::clear_effect_index() {
  effect_index_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.effect_index)
  return effect_index_;
}
inline void CMsgDOTASeasonRewards_Reward::set_effect_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.effect_index)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonRewards

// repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
inline int CMsgDOTASeasonRewards::rewards_size() const {
  return rewards_.size();
}
inline void CMsgDOTASeasonRewards::clear_rewards() {
  rewards_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >*
CMsgDOTASeasonRewards::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonRewards.rewards)
  return &rewards_;
}
inline const ::proto::dota::CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards::rewards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::add_rewards() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >&
CMsgDOTASeasonRewards::rewards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// CMsgDOTASeasonAchievements_Achievement

// optional string name = 1;
inline bool CMsgDOTASeasonAchievements_Achievement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  return name_.GetNoArena();
}
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonAchievements_Achievement::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
#endif
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}

// optional string description = 2;
inline bool CMsgDOTASeasonAchievements_Achievement::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  return description_.GetNoArena();
}
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
#if LANG_CXX11
inline void CMsgDOTASeasonAchievements_Achievement::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
#endif
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}

// optional string image = 3;
inline bool CMsgDOTASeasonAchievements_Achievement::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::image() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  return image_.GetNoArena();
}
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
#if LANG_CXX11
inline void CMsgDOTASeasonAchievements_Achievement::set_image(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
#endif
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_image() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_image() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  if (!has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return image_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}

// optional uint32 action_id = 4;
inline bool CMsgDOTASeasonAchievements_Achievement::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_action_id() {
  action_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.action_id)
  return action_id_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_action_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.action_id)
}

// optional uint32 max_grants = 5;
inline bool CMsgDOTASeasonAchievements_Achievement::has_max_grants() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_max_grants() {
  max_grants_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::max_grants() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.max_grants)
  return max_grants_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_max_grants(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_grants_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.max_grants)
}

// optional uint32 normal_points = 6;
inline bool CMsgDOTASeasonAchievements_Achievement::has_normal_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_normal_points() {
  normal_points_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::normal_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.normal_points)
  return normal_points_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_normal_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.normal_points)
}

// optional uint32 tracking_achievement = 7;
inline bool CMsgDOTASeasonAchievements_Achievement::has_tracking_achievement() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_tracking_achievement() {
  tracking_achievement_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::tracking_achievement() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
  return tracking_achievement_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_tracking_achievement(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tracking_achievement_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
}

// optional uint32 achievement_goal = 8;
inline bool CMsgDOTASeasonAchievements_Achievement::has_achievement_goal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_achievement_goal() {
  achievement_goal_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_goal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_goal)
  return achievement_goal_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_achievement_goal(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  achievement_goal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_goal)
}

// optional uint32 achievement_level = 9;
inline bool CMsgDOTASeasonAchievements_Achievement::has_achievement_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_achievement_level() {
  achievement_level_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_level)
  return achievement_level_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_achievement_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  achievement_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_level)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonAchievements

// repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
inline int CMsgDOTASeasonAchievements::achievements_size() const {
  return achievements_.size();
}
inline void CMsgDOTASeasonAchievements::clear_achievements() {
  achievements_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >*
CMsgDOTASeasonAchievements::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return &achievements_;
}
inline const ::proto::dota::CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements::achievements(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::add_achievements() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >&
CMsgDOTASeasonAchievements::achievements() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_;
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Choice

// optional uint32 value = 1;
inline bool CMsgDOTASeasonPredictions_Choice::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.value)
  return value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.value)
}

// optional string name = 2;
inline bool CMsgDOTASeasonPredictions_Choice::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_Choice::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  return name_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_Choice::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_Choice::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
#endif
inline void CMsgDOTASeasonPredictions_Choice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
inline void CMsgDOTASeasonPredictions_Choice::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_Choice::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_Choice::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_Choice::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}

// optional uint32 min_raw_value = 3;
inline bool CMsgDOTASeasonPredictions_Choice::has_min_raw_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_min_raw_value() {
  min_raw_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::min_raw_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.min_raw_value)
  return min_raw_value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_min_raw_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  min_raw_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.min_raw_value)
}

// optional uint32 max_raw_value = 4;
inline bool CMsgDOTASeasonPredictions_Choice::has_max_raw_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_max_raw_value() {
  max_raw_value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::max_raw_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.max_raw_value)
  return max_raw_value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_max_raw_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_raw_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.max_raw_value)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Answers

// optional uint32 answer_id = 1;
inline bool CMsgDOTASeasonPredictions_Answers::has_answer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Answers::clear_answer_id() {
  answer_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Answers::answer_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Answers.answer_id)
  return answer_id_;
}
inline void CMsgDOTASeasonPredictions_Answers::set_answer_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Answers.answer_id)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_QueryKeyValues

// optional string name = 1;
inline bool CMsgDOTASeasonPredictions_QueryKeyValues::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return name_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
#endif
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}

// optional string value = 2;
inline bool CMsgDOTASeasonPredictions_QueryKeyValues::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return value_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
#endif
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Prediction

// optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
inline bool CMsgDOTASeasonPredictions_Prediction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_Prediction::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.type)
}

// optional string question = 2;
inline bool CMsgDOTASeasonPredictions_Prediction::has_question() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_Prediction::question() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  return question_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_Prediction::set_question(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
#endif
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_question() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::release_question() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  if (!has_question()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return question_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_question(::std::string* question) {
  if (question != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
inline int CMsgDOTASeasonPredictions_Prediction::choices_size() const {
  return choices_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_choices() {
  choices_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_Prediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return &choices_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Prediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::add_choices() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_Prediction::choices() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_;
}

// optional uint32 selection_id = 4;
inline bool CMsgDOTASeasonPredictions_Prediction::has_selection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_selection_id() {
  selection_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::selection_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.selection_id)
  return selection_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_selection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  selection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.selection_id)
}

// optional uint32 start_date = 5;
inline bool CMsgDOTASeasonPredictions_Prediction::has_start_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_start_date() {
  start_date_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::start_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.start_date)
  return start_date_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_start_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  start_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.start_date)
}

// optional uint32 lock_date = 6;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_date() {
  lock_date_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_date)
  return lock_date_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lock_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_date)
}

// optional uint32 reward = 7;
inline bool CMsgDOTASeasonPredictions_Prediction::has_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_reward() {
  reward_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::reward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.reward)
  return reward_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_reward(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  reward_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.reward)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_type() {
  answer_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_Prediction::answer_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType >(answer_type_);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_type(::proto::dota::CMsgDOTASeasonPredictions_eAnswerType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  answer_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_type)
}

// optional uint32 answer_id = 9;
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_id() {
  answer_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::answer_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_id)
  return answer_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_id)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
inline int CMsgDOTASeasonPredictions_Prediction::answers_size() const {
  return answers_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answers() {
  answers_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >*
CMsgDOTASeasonPredictions_Prediction::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return &answers_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Prediction::answers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::add_answers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >&
CMsgDOTASeasonPredictions_Prediction::answers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_;
}

// optional string query_name = 11;
inline bool CMsgDOTASeasonPredictions_Prediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_query_name() {
  query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_Prediction::query_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  return query_name_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
#endif
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_query_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  return query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::release_query_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  if (!has_query_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return query_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}

// repeated uint32 query_bind_params = 12;
inline int CMsgDOTASeasonPredictions_Prediction::query_bind_params_size() const {
  return query_bind_params_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_query_bind_params() {
  query_bind_params_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::query_bind_params(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_.Get(index);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_bind_params(int index, ::google::protobuf::uint32 value) {
  query_bind_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
inline void CMsgDOTASeasonPredictions_Prediction::add_query_bind_params(::google::protobuf::uint32 value) {
  query_bind_params_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTASeasonPredictions_Prediction::query_bind_params() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTASeasonPredictions_Prediction::mutable_query_bind_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return &query_bind_params_;
}

// optional uint32 lock_on_selection_id = 13;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_id() {
  lock_on_selection_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
  return lock_on_selection_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  lock_on_selection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
}

// optional uint32 lock_on_selection_value = 14;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_value() {
  lock_on_selection_value_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
  return lock_on_selection_value_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  lock_on_selection_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
}

// optional bool lock_on_selection_set = 15;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_set() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_set() {
  lock_on_selection_set_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgDOTASeasonPredictions_Prediction::lock_on_selection_set() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
  return lock_on_selection_set_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_set(bool value) {
  _has_bits_[0] |= 0x00000800u;
  lock_on_selection_set_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
}

// optional bool use_answer_value_ranges = 16;
inline bool CMsgDOTASeasonPredictions_Prediction::has_use_answer_value_ranges() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_use_answer_value_ranges() {
  use_answer_value_ranges_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgDOTASeasonPredictions_Prediction::use_answer_value_ranges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
  return use_answer_value_ranges_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_use_answer_value_ranges(bool value) {
  _has_bits_[0] |= 0x00001000u;
  use_answer_value_ranges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_InGamePrediction

// optional uint32 id = 1;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.id)
  return id_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.id)
}

// optional string name = 2;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  return name_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
#endif
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_InGamePrediction::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.type)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_group() {
  group_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_InGamePrediction::group() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.group)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(group_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_group(::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  group_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.group)
}

// optional string question = 5;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_question() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::question() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  return question_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
#endif
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_question() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_question() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  if (!has_question()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return question_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_question(::std::string* question) {
  if (question != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
inline int CMsgDOTASeasonPredictions_InGamePrediction::choices_size() const {
  return choices_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_choices() {
  choices_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return &choices_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_InGamePrediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::add_choices() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_InGamePrediction::choices() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_;
}

// repeated string required_heroes = 7;
inline int CMsgDOTASeasonPredictions_InGamePrediction::required_heroes_size() const {
  return required_heroes_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_required_heroes() {
  required_heroes_.Clear();
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::required_heroes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Get(index);
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Mutable(index);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  required_heroes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  required_heroes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_heroes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value, size_t size) {
  required_heroes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Add();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const ::std::string& value) {
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(::std::string&& value) {
  required_heroes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
#endif
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value, size_t size) {
  required_heroes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CMsgDOTASeasonPredictions_InGamePrediction::required_heroes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return &required_heroes_;
}

// optional string query_name = 8;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_name() {
  query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::query_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return query_name_.GetNoArena();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
#if LANG_CXX11
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
#endif
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_query_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  if (!has_query_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return query_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
inline int CMsgDOTASeasonPredictions_InGamePrediction::query_values_size() const {
  return query_values_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_values() {
  query_values_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return &query_values_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_InGamePrediction::query_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::add_query_values() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >&
CMsgDOTASeasonPredictions_InGamePrediction::query_values() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_;
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_answer_resolution_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_answer_resolution_type() {
  answer_resolution_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_InGamePrediction::answer_resolution_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t >(answer_resolution_type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_answer_resolution_type(::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  answer_resolution_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
}

// optional uint32 points_to_grant = 11;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_points_to_grant() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_points_to_grant() {
  points_to_grant_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::points_to_grant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
  return points_to_grant_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_points_to_grant(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  points_to_grant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
}

// optional uint32 reward_action = 12;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_reward_action() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_reward_action() {
  reward_action_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::reward_action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
  return reward_action_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_reward_action(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  reward_action_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
}

// optional uint32 debug_force_selection = 13;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_debug_force_selection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_debug_force_selection() {
  debug_force_selection_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::debug_force_selection() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
  return debug_force_selection_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_debug_force_selection(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  debug_force_selection_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_raw_value_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_raw_value_type() {
  raw_value_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_InGamePrediction::raw_value_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t >(raw_value_type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_raw_value_type(::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  raw_value_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions

// repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
inline int CMsgDOTASeasonPredictions::predictions_size() const {
  return predictions_.size();
}
inline void CMsgDOTASeasonPredictions::clear_predictions() {
  predictions_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >*
CMsgDOTASeasonPredictions::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return &predictions_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions::predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::add_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >&
CMsgDOTASeasonPredictions::predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_;
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
inline int CMsgDOTASeasonPredictions::in_game_predictions_size() const {
  return in_game_predictions_.size();
}
inline void CMsgDOTASeasonPredictions::clear_in_game_predictions() {
  in_game_predictions_.Clear();
}
inline ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::mutable_in_game_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >*
CMsgDOTASeasonPredictions::mutable_in_game_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return &in_game_predictions_;
}
inline const ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions::in_game_predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Get(index);
}
inline ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::add_in_game_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >&
CMsgDOTASeasonPredictions::in_game_predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_;
}

// optional uint32 in_game_prediction_count_per_game = 3;
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_count_per_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_count_per_game() {
  in_game_prediction_count_per_game_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_count_per_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
  return in_game_prediction_count_per_game_;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_count_per_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  in_game_prediction_count_per_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
}

// optional uint32 in_game_prediction_voting_period_minutes = 4;
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_voting_period_minutes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_voting_period_minutes() {
  in_game_prediction_voting_period_minutes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_voting_period_minutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
  return in_game_prediction_voting_period_minutes_;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_voting_period_minutes(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  in_game_prediction_voting_period_minutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player_CustomGameData

// optional uint32 dota_team = 1;
inline bool CMsgDOTAMatch_Player_CustomGameData::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player_CustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.CustomGameData.dota_team)
  return dota_team_;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_dota_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.CustomGameData.dota_team)
}

// optional bool winner = 2;
inline bool CMsgDOTAMatch_Player_CustomGameData::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_winner() {
  winner_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDOTAMatch_Player_CustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.CustomGameData.winner)
  return winner_;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_winner(bool value) {
  _has_bits_[0] |= 0x00000002u;
  winner_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.CustomGameData.winner)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatch_Player::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CMsgDOTAMatch_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatch_Player::set_player_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.player_slot)
}

// optional uint32 hero_id = 3;
inline bool CMsgDOTAMatch_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatch_Player::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_id)
}

// optional uint32 item_0 = 4;
inline bool CMsgDOTAMatch_Player::has_item_0() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_0() {
  item_0_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_0)
  return item_0_;
}
inline void CMsgDOTAMatch_Player::set_item_0(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  item_0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_0)
}

// optional uint32 item_1 = 5;
inline bool CMsgDOTAMatch_Player::has_item_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_1() {
  item_1_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_1)
  return item_1_;
}
inline void CMsgDOTAMatch_Player::set_item_1(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  item_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_1)
}

// optional uint32 item_2 = 6;
inline bool CMsgDOTAMatch_Player::has_item_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_2() {
  item_2_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_2)
  return item_2_;
}
inline void CMsgDOTAMatch_Player::set_item_2(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  item_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_2)
}

// optional uint32 item_3 = 7;
inline bool CMsgDOTAMatch_Player::has_item_3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_3() {
  item_3_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_3)
  return item_3_;
}
inline void CMsgDOTAMatch_Player::set_item_3(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  item_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_3)
}

// optional uint32 item_4 = 8;
inline bool CMsgDOTAMatch_Player::has_item_4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_4() {
  item_4_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_4)
  return item_4_;
}
inline void CMsgDOTAMatch_Player::set_item_4(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  item_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_4)
}

// optional uint32 item_5 = 9;
inline bool CMsgDOTAMatch_Player::has_item_5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_5() {
  item_5_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_5)
  return item_5_;
}
inline void CMsgDOTAMatch_Player::set_item_5(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  item_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_5)
}

// optional uint32 item_6 = 59;
inline bool CMsgDOTAMatch_Player::has_item_6() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_6() {
  item_6_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_6() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_6)
  return item_6_;
}
inline void CMsgDOTAMatch_Player::set_item_6(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  item_6_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_6)
}

// optional uint32 item_7 = 60;
inline bool CMsgDOTAMatch_Player::has_item_7() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_7() {
  item_7_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_7() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_7)
  return item_7_;
}
inline void CMsgDOTAMatch_Player::set_item_7(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  item_7_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_7)
}

// optional uint32 item_8 = 61;
inline bool CMsgDOTAMatch_Player::has_item_8() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_item_8() {
  item_8_ = 0u;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_8() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_8)
  return item_8_;
}
inline void CMsgDOTAMatch_Player::set_item_8(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x02000000u;
  item_8_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_8)
}

// optional float expected_team_contribution = 10;
inline bool CMsgDOTAMatch_Player::has_expected_team_contribution() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_expected_team_contribution() {
  expected_team_contribution_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgDOTAMatch_Player::expected_team_contribution() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.expected_team_contribution)
  return expected_team_contribution_;
}
inline void CMsgDOTAMatch_Player::set_expected_team_contribution(float value) {
  _has_bits_[0] |= 0x00002000u;
  expected_team_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.expected_team_contribution)
}

// optional float scaled_metric = 11;
inline bool CMsgDOTAMatch_Player::has_scaled_metric() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_metric() {
  scaled_metric_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgDOTAMatch_Player::scaled_metric() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_metric)
  return scaled_metric_;
}
inline void CMsgDOTAMatch_Player::set_scaled_metric(float value) {
  _has_bits_[0] |= 0x00004000u;
  scaled_metric_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_metric)
}

// optional uint32 previous_rank = 12;
inline bool CMsgDOTAMatch_Player::has_previous_rank() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_previous_rank() {
  previous_rank_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::previous_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.previous_rank)
  return previous_rank_;
}
inline void CMsgDOTAMatch_Player::set_previous_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  previous_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.previous_rank)
}

// optional sint32 rank_change = 13;
inline bool CMsgDOTAMatch_Player::has_rank_change() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::int32 CMsgDOTAMatch_Player::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.rank_change)
  return rank_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_change(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.rank_change)
}

// optional bool solo_rank = 49;
inline bool CMsgDOTAMatch_Player::has_solo_rank() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_solo_rank() {
  solo_rank_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool CMsgDOTAMatch_Player::solo_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.solo_rank)
  return solo_rank_;
}
inline void CMsgDOTAMatch_Player::set_solo_rank(bool value) {
  _has_bits_[1] |= 0x00004000u;
  solo_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.solo_rank)
}

// optional bool seasonal_rank = 53;
inline bool CMsgDOTAMatch_Player::has_seasonal_rank() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_seasonal_rank() {
  seasonal_rank_ = false;
  _has_bits_[1] &= ~0x00008000u;
}
inline bool CMsgDOTAMatch_Player::seasonal_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.seasonal_rank)
  return seasonal_rank_;
}
inline void CMsgDOTAMatch_Player::set_seasonal_rank(bool value) {
  _has_bits_[1] |= 0x00008000u;
  seasonal_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.seasonal_rank)
}

// optional bool rank_tier_updated = 66;
inline bool CMsgDOTAMatch_Player::has_rank_tier_updated() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_rank_tier_updated() {
  rank_tier_updated_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool CMsgDOTAMatch_Player::rank_tier_updated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.rank_tier_updated)
  return rank_tier_updated_;
}
inline void CMsgDOTAMatch_Player::set_rank_tier_updated(bool value) {
  _has_bits_[1] |= 0x00010000u;
  rank_tier_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.rank_tier_updated)
}

// optional uint32 kills = 14;
inline bool CMsgDOTAMatch_Player::has_kills() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatch_Player::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.kills)
}

// optional uint32 deaths = 15;
inline bool CMsgDOTAMatch_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatch_Player::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.deaths)
}

// optional uint32 assists = 16;
inline bool CMsgDOTAMatch_Player::has_assists() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatch_Player::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.assists)
}

// optional uint32 leaver_status = 17;
inline bool CMsgDOTAMatch_Player::has_leaver_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_leaver_status() {
  leaver_status_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.leaver_status)
  return leaver_status_;
}
inline void CMsgDOTAMatch_Player::set_leaver_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.leaver_status)
}

// optional uint32 gold = 18;
inline bool CMsgDOTAMatch_Player::has_gold() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_gold() {
  gold_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold)
  return gold_;
}
inline void CMsgDOTAMatch_Player::set_gold(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold)
}

// optional uint32 last_hits = 19;
inline bool CMsgDOTAMatch_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_last_hits() {
  last_hits_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.last_hits)
  return last_hits_;
}
inline void CMsgDOTAMatch_Player::set_last_hits(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.last_hits)
}

// optional uint32 denies = 20;
inline bool CMsgDOTAMatch_Player::has_denies() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_denies() {
  denies_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.denies)
  return denies_;
}
inline void CMsgDOTAMatch_Player::set_denies(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.denies)
}

// optional uint32 gold_per_min = 21;
inline bool CMsgDOTAMatch_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_gold_per_min() {
  gold_per_min_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTAMatch_Player::set_gold_per_min(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold_per_min)
}

// optional uint32 XP_per_min = 22;
inline bool CMsgDOTAMatch_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_xp_per_min() {
  xp_per_min_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.XP_per_min)
  return xp_per_min_;
}
inline void CMsgDOTAMatch_Player::set_xp_per_min(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.XP_per_min)
}

// optional uint32 gold_spent = 23;
inline bool CMsgDOTAMatch_Player::has_gold_spent() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_gold_spent() {
  gold_spent_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_spent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold_spent)
  return gold_spent_;
}
inline void CMsgDOTAMatch_Player::set_gold_spent(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold_spent)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTAMatch_Player::has_hero_damage() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_damage() {
  hero_damage_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTAMatch_Player::set_hero_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTAMatch_Player::has_tower_damage() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_tower_damage() {
  tower_damage_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTAMatch_Player::set_tower_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.tower_damage)
}

// optional uint32 hero_healing = 26;
inline bool CMsgDOTAMatch_Player::has_hero_healing() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_healing() {
  hero_healing_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTAMatch_Player::set_hero_healing(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_healing)
}

// optional uint32 level = 27;
inline bool CMsgDOTAMatch_Player::has_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.level)
  return level_;
}
inline void CMsgDOTAMatch_Player::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.level)
}

// optional uint32 time_last_seen = 28;
inline bool CMsgDOTAMatch_Player::has_time_last_seen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_time_last_seen() {
  time_last_seen_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::time_last_seen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.time_last_seen)
  return time_last_seen_;
}
inline void CMsgDOTAMatch_Player::set_time_last_seen(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.time_last_seen)
}

// optional string player_name = 29;
inline bool CMsgDOTAMatch_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatch_Player::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgDOTAMatch_Player::set_player_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.player_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_Player::set_player_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.Player.player_name)
}
#endif
inline void CMsgDOTAMatch_Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.Player.player_name)
}
inline void CMsgDOTAMatch_Player::set_player_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.Player.player_name)
}
inline ::std::string* CMsgDOTAMatch_Player::mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.player_name)
  if (!has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.player_name)
}

// optional uint32 support_ability_value = 30;
inline bool CMsgDOTAMatch_Player::has_support_ability_value() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_support_ability_value() {
  support_ability_value_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_ability_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.support_ability_value)
  return support_ability_value_;
}
inline void CMsgDOTAMatch_Player::set_support_ability_value(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.support_ability_value)
}

// optional bool feeding_detected = 32;
inline bool CMsgDOTAMatch_Player::has_feeding_detected() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_feeding_detected() {
  feeding_detected_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool CMsgDOTAMatch_Player::feeding_detected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.feeding_detected)
  return feeding_detected_;
}
inline void CMsgDOTAMatch_Player::set_feeding_detected(bool value) {
  _has_bits_[1] |= 0x00020000u;
  feeding_detected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.feeding_detected)
}

// optional uint32 search_rank = 34;
inline bool CMsgDOTAMatch_Player::has_search_rank() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_search_rank() {
  search_rank_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.search_rank)
  return search_rank_;
}
inline void CMsgDOTAMatch_Player::set_search_rank(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  search_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.search_rank)
}

// optional uint32 search_rank_uncertainty = 35;
inline bool CMsgDOTAMatch_Player::has_search_rank_uncertainty() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_search_rank_uncertainty() {
  search_rank_uncertainty_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.search_rank_uncertainty)
  return search_rank_uncertainty_;
}
inline void CMsgDOTAMatch_Player::set_search_rank_uncertainty(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  search_rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.search_rank_uncertainty)
}

// optional int32 rank_uncertainty_change = 36;
inline bool CMsgDOTAMatch_Player::has_rank_uncertainty_change() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_rank_uncertainty_change() {
  rank_uncertainty_change_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CMsgDOTAMatch_Player::rank_uncertainty_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.rank_uncertainty_change)
  return rank_uncertainty_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_uncertainty_change(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  rank_uncertainty_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.rank_uncertainty_change)
}

// optional uint32 hero_play_count = 37;
inline bool CMsgDOTAMatch_Player::has_hero_play_count() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_play_count() {
  hero_play_count_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_play_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_play_count)
  return hero_play_count_;
}
inline void CMsgDOTAMatch_Player::set_hero_play_count(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  hero_play_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_play_count)
}

// optional fixed64 party_id = 38;
inline bool CMsgDOTAMatch_Player::has_party_id() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_party_id() {
  party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch_Player::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.party_id)
  return party_id_;
}
inline void CMsgDOTAMatch_Player::set_party_id(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x00000010u;
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.party_id)
}

// optional uint32 scaled_hero_damage = 54;
inline bool CMsgDOTAMatch_Player::has_scaled_hero_damage() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_damage() {
  scaled_hero_damage_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_hero_damage)
  return scaled_hero_damage_;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_damage(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00080000u;
  scaled_hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 55;
inline bool CMsgDOTAMatch_Player::has_scaled_tower_damage() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_tower_damage() {
  scaled_tower_damage_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_tower_damage)
  return scaled_tower_damage_;
}
inline void CMsgDOTAMatch_Player::set_scaled_tower_damage(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  scaled_tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 56;
inline bool CMsgDOTAMatch_Player::has_scaled_hero_healing() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_healing() {
  scaled_hero_healing_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_hero_healing)
  return scaled_hero_healing_;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_healing(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  scaled_hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_hero_healing)
}

// optional float scaled_kills = 39;
inline bool CMsgDOTAMatch_Player::has_scaled_kills() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_kills() {
  scaled_kills_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float CMsgDOTAMatch_Player::scaled_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_kills)
  return scaled_kills_;
}
inline void CMsgDOTAMatch_Player::set_scaled_kills(float value) {
  _has_bits_[1] |= 0x00000040u;
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_kills)
}

// optional float scaled_deaths = 40;
inline bool CMsgDOTAMatch_Player::has_scaled_deaths() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float CMsgDOTAMatch_Player::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_deaths)
  return scaled_deaths_;
}
inline void CMsgDOTAMatch_Player::set_scaled_deaths(float value) {
  _has_bits_[1] |= 0x00000080u;
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_deaths)
}

// optional float scaled_assists = 41;
inline bool CMsgDOTAMatch_Player::has_scaled_assists() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_scaled_assists() {
  scaled_assists_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float CMsgDOTAMatch_Player::scaled_assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_assists)
  return scaled_assists_;
}
inline void CMsgDOTAMatch_Player::set_scaled_assists(float value) {
  _has_bits_[1] |= 0x00000100u;
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_assists)
}

// optional uint32 claimed_farm_gold = 42;
inline bool CMsgDOTAMatch_Player::has_claimed_farm_gold() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_farm_gold)
  return claimed_farm_gold_;
}
inline void CMsgDOTAMatch_Player::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_farm_gold)
}

// optional uint32 support_gold = 43;
inline bool CMsgDOTAMatch_Player::has_support_gold() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_support_gold() {
  support_gold_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.support_gold)
  return support_gold_;
}
inline void CMsgDOTAMatch_Player::set_support_gold(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.support_gold)
}

// optional uint32 claimed_denies = 44;
inline bool CMsgDOTAMatch_Player::has_claimed_denies() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_claimed_denies() {
  claimed_denies_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_denies)
  return claimed_denies_;
}
inline void CMsgDOTAMatch_Player::set_claimed_denies(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_denies)
}

// optional uint32 claimed_misses = 45;
inline bool CMsgDOTAMatch_Player::has_claimed_misses() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_claimed_misses() {
  claimed_misses_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_misses)
  return claimed_misses_;
}
inline void CMsgDOTAMatch_Player::set_claimed_misses(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_misses)
}

// optional uint32 misses = 46;
inline bool CMsgDOTAMatch_Player::has_misses() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_misses() {
  misses_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.misses)
  return misses_;
}
inline void CMsgDOTAMatch_Player::set_misses(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.misses)
}

// repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
inline int CMsgDOTAMatch_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CMsgDOTAMatch_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline ::proto::dota::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >*
CMsgDOTAMatch_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return &ability_upgrades_;
}
inline const ::proto::dota::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline ::proto::dota::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >&
CMsgDOTAMatch_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_;
}

// repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
inline int CMsgDOTAMatch_Player::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
inline void CMsgDOTAMatch_Player::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
inline ::proto::dota::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >*
CMsgDOTAMatch_Player::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return &additional_units_inventory_;
}
inline const ::proto::dota::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
inline ::proto::dota::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >&
CMsgDOTAMatch_Player::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_;
}

// repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
inline int CMsgDOTAMatch_Player::permanent_buffs_size() const {
  return permanent_buffs_.size();
}
inline void CMsgDOTAMatch_Player::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
inline ::proto::dota::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >*
CMsgDOTAMatch_Player::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return &permanent_buffs_;
}
inline const ::proto::dota::CMatchPlayerPermanentBuff& CMsgDOTAMatch_Player::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Get(index);
}
inline ::proto::dota::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::add_permanent_buffs() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >&
CMsgDOTAMatch_Player::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_;
}

// optional string pro_name = 72;
inline bool CMsgDOTAMatch_Player::has_pro_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_pro_name() {
  pro_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAMatch_Player::pro_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.pro_name)
  return pro_name_.GetNoArena();
}
inline void CMsgDOTAMatch_Player::set_pro_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.pro_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_Player::set_pro_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pro_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.Player.pro_name)
}
#endif
inline void CMsgDOTAMatch_Player::set_pro_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.Player.pro_name)
}
inline void CMsgDOTAMatch_Player::set_pro_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.Player.pro_name)
}
inline ::std::string* CMsgDOTAMatch_Player::mutable_pro_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.pro_name)
  return pro_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_Player::release_pro_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.pro_name)
  if (!has_pro_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pro_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_Player::set_allocated_pro_name(::std::string* pro_name) {
  if (pro_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pro_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pro_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.pro_name)
}

// optional string real_name = 73;
inline bool CMsgDOTAMatch_Player::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_real_name() {
  real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTAMatch_Player::real_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.real_name)
  return real_name_.GetNoArena();
}
inline void CMsgDOTAMatch_Player::set_real_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.real_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_Player::set_real_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  real_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.Player.real_name)
}
#endif
inline void CMsgDOTAMatch_Player::set_real_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.Player.real_name)
}
inline void CMsgDOTAMatch_Player::set_real_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.Player.real_name)
}
inline ::std::string* CMsgDOTAMatch_Player::mutable_real_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.real_name)
  return real_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_Player::release_real_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.real_name)
  if (!has_real_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return real_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_Player::set_allocated_real_name(::std::string* real_name) {
  if (real_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  real_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.real_name)
}

// optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
inline bool CMsgDOTAMatch_Player::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_custom_game_data() {
  if (custom_game_data_ != nullptr) custom_game_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player::custom_game_data() const {
  const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* p = custom_game_data_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData*>(
      &::proto::dota::_CMsgDOTAMatch_Player_CustomGameData_default_instance_);
}
inline ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::mutable_custom_game_data() {
  _has_bits_[0] |= 0x00000008u;
  if (custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_Player_CustomGameData>(GetArenaNoVirtual());
    custom_game_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  return custom_game_data_;
}
inline void CMsgDOTAMatch_Player::set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_Player_CustomGameData* custom_game_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_game_data_;
  }
  if (custom_game_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_game_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
}

// optional bool active_plus_subscription = 51;
inline bool CMsgDOTAMatch_Player::has_active_plus_subscription() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_active_plus_subscription() {
  active_plus_subscription_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool CMsgDOTAMatch_Player::active_plus_subscription() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.active_plus_subscription)
  return active_plus_subscription_;
}
inline void CMsgDOTAMatch_Player::set_active_plus_subscription(bool value) {
  _has_bits_[1] |= 0x04000000u;
  active_plus_subscription_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.active_plus_subscription)
}

// optional uint32 net_worth = 52;
inline bool CMsgDOTAMatch_Player::has_net_worth() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_net_worth() {
  net_worth_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.net_worth)
  return net_worth_;
}
inline void CMsgDOTAMatch_Player::set_net_worth(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.net_worth)
}

// optional uint32 bot_difficulty = 58;
inline bool CMsgDOTAMatch_Player::has_bot_difficulty() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_bot_difficulty() {
  bot_difficulty_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.bot_difficulty)
  return bot_difficulty_;
}
inline void CMsgDOTAMatch_Player::set_bot_difficulty(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.bot_difficulty)
}

// optional uint32 hero_pick_order = 63;
inline bool CMsgDOTAMatch_Player::has_hero_pick_order() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_pick_order() {
  hero_pick_order_ = 0u;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_pick_order() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_pick_order)
  return hero_pick_order_;
}
inline void CMsgDOTAMatch_Player::set_hero_pick_order(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x40000000u;
  hero_pick_order_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_pick_order)
}

// optional bool hero_was_randomed = 64;
inline bool CMsgDOTAMatch_Player::has_hero_was_randomed() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_was_randomed() {
  hero_was_randomed_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool CMsgDOTAMatch_Player::hero_was_randomed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_was_randomed)
  return hero_was_randomed_;
}
inline void CMsgDOTAMatch_Player::set_hero_was_randomed(bool value) {
  _has_bits_[1] |= 0x08000000u;
  hero_was_randomed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_was_randomed)
}

// optional bool hero_was_bonus = 65;
inline bool CMsgDOTAMatch_Player::has_hero_was_bonus() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_was_bonus() {
  hero_was_bonus_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool CMsgDOTAMatch_Player::hero_was_bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_was_bonus)
  return hero_was_bonus_;
}
inline void CMsgDOTAMatch_Player::set_hero_was_bonus(bool value) {
  _has_bits_[1] |= 0x10000000u;
  hero_was_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_was_bonus)
}

// optional bool hero_was_dota_plus_suggestion = 69;
inline bool CMsgDOTAMatch_Player::has_hero_was_dota_plus_suggestion() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_was_dota_plus_suggestion() {
  hero_was_dota_plus_suggestion_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool CMsgDOTAMatch_Player::hero_was_dota_plus_suggestion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_was_dota_plus_suggestion)
  return hero_was_dota_plus_suggestion_;
}
inline void CMsgDOTAMatch_Player::set_hero_was_dota_plus_suggestion(bool value) {
  _has_bits_[1] |= 0x20000000u;
  hero_was_dota_plus_suggestion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_was_dota_plus_suggestion)
}

// optional uint32 hero_damage_received_pre_reduction = 67;
inline bool CMsgDOTAMatch_Player::has_hero_damage_received_pre_reduction() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_damage_received_pre_reduction() {
  hero_damage_received_pre_reduction_ = 0u;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage_received_pre_reduction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_damage_received_pre_reduction)
  return hero_damage_received_pre_reduction_;
}
inline void CMsgDOTAMatch_Player::set_hero_damage_received_pre_reduction(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x80000000u;
  hero_damage_received_pre_reduction_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_damage_received_pre_reduction)
}

// optional uint32 hero_damage_received_post_reduction = 68;
inline bool CMsgDOTAMatch_Player::has_hero_damage_received_post_reduction() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_hero_damage_received_post_reduction() {
  hero_damage_received_post_reduction_ = 0u;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage_received_post_reduction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_damage_received_post_reduction)
  return hero_damage_received_post_reduction_;
}
inline void CMsgDOTAMatch_Player::set_hero_damage_received_post_reduction(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000001u;
  hero_damage_received_post_reduction_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_damage_received_post_reduction)
}

// optional uint32 seconds_dead = 70;
inline bool CMsgDOTAMatch_Player::has_seconds_dead() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_seconds_dead() {
  seconds_dead_ = 0u;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::seconds_dead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.seconds_dead)
  return seconds_dead_;
}
inline void CMsgDOTAMatch_Player::set_seconds_dead(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000002u;
  seconds_dead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.seconds_dead)
}

// optional uint32 gold_lost_to_death = 71;
inline bool CMsgDOTAMatch_Player::has_gold_lost_to_death() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::clear_gold_lost_to_death() {
  gold_lost_to_death_ = 0u;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_lost_to_death() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold_lost_to_death)
  return gold_lost_to_death_;
}
inline void CMsgDOTAMatch_Player::set_gold_lost_to_death(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000004u;
  gold_lost_to_death_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold_lost_to_death)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterInfo

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_BroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_BroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterInfo.account_id)
  return account_id_;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterInfo.account_id)
}

// optional string name = 2;
inline bool CMsgDOTAMatch_BroadcasterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  return name_.GetNoArena();
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
#endif
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_BroadcasterInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterChannel

// optional string country_code = 1;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
#endif
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  if (!has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return country_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_country_code(::std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}

// optional string description = 2;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  return description_.GetNoArena();
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
#endif
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}

// repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
inline int CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos_size() const {
  return broadcaster_infos_.size();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_broadcaster_infos() {
  broadcaster_infos_.Clear();
}
inline ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >*
CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return &broadcaster_infos_;
}
inline const ::proto::dota::CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::add_broadcaster_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >&
CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_;
}

// optional string language_code = 4;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_language_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::language_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  return language_code_.GetNoArena();
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
#endif
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_language_code() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_language_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  if (!has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_language_code(::std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_CustomGameData

// optional uint64 custom_game_id = 1;
inline bool CMsgDOTAMatch_CustomGameData::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_CustomGameData::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch_CustomGameData::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.CustomGameData.custom_game_id)
  return custom_game_id_;
}
inline void CMsgDOTAMatch_CustomGameData::set_custom_game_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.CustomGameData.custom_game_id)
}

// optional string map_name = 2;
inline bool CMsgDOTAMatch_CustomGameData::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_CustomGameData::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatch_CustomGameData::map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  return map_name_.GetNoArena();
}
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_CustomGameData::set_map_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
#endif
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
inline ::std::string* CMsgDOTAMatch_CustomGameData::mutable_map_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_CustomGameData::release_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  if (!has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_CustomGameData::set_allocated_map_name(::std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch

// optional uint32 duration = 3;
inline bool CMsgDOTAMatch::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.duration)
  return duration_;
}
inline void CMsgDOTAMatch::set_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.duration)
}

// optional fixed32 startTime = 4;
inline bool CMsgDOTAMatch::has_starttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch::clear_starttime() {
  starttime_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::starttime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.startTime)
  return starttime_;
}
inline void CMsgDOTAMatch::set_starttime(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  starttime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.startTime)
}

// repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
inline int CMsgDOTAMatch::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatch::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CMsgDOTAMatch_Player* CMsgDOTAMatch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >*
CMsgDOTAMatch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.players)
  return &players_;
}
inline const ::proto::dota::CMsgDOTAMatch_Player& CMsgDOTAMatch::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatch_Player* CMsgDOTAMatch::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >&
CMsgDOTAMatch::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.players)
  return players_;
}

// optional uint64 match_id = 6;
inline bool CMsgDOTAMatch::has_match_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_id)
  return match_id_;
}
inline void CMsgDOTAMatch::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_id)
}

// repeated uint32 tower_status = 8;
inline int CMsgDOTAMatch::tower_status_size() const {
  return tower_status_.size();
}
inline void CMsgDOTAMatch::clear_tower_status() {
  tower_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tower_status)
  return tower_status_.Get(index);
}
inline void CMsgDOTAMatch::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tower_status)
}
inline void CMsgDOTAMatch::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.tower_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::tower_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.tower_status)
  return tower_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
inline int CMsgDOTAMatch::barracks_status_size() const {
  return barracks_status_.size();
}
inline void CMsgDOTAMatch::clear_barracks_status() {
  barracks_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.barracks_status)
  return barracks_status_.Get(index);
}
inline void CMsgDOTAMatch::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.barracks_status)
}
inline void CMsgDOTAMatch::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.barracks_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::barracks_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.barracks_status)
  return barracks_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
inline bool CMsgDOTAMatch::has_cluster() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch::clear_cluster() {
  cluster_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.cluster)
  return cluster_;
}
inline void CMsgDOTAMatch::set_cluster(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.cluster)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgDOTAMatch::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch::clear_first_blood_time() {
  first_blood_time_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::first_blood_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.first_blood_time)
  return first_blood_time_;
}
inline void CMsgDOTAMatch::set_first_blood_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.first_blood_time)
}

// optional fixed32 replay_salt = 13;
inline bool CMsgDOTAMatch::has_replay_salt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch::clear_replay_salt() {
  replay_salt_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::replay_salt() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.replay_salt)
  return replay_salt_;
}
inline void CMsgDOTAMatch::set_replay_salt(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.replay_salt)
}

// optional fixed32 server_ip = 14;
inline bool CMsgDOTAMatch::has_server_ip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch::clear_server_ip() {
  server_ip_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.server_ip)
  return server_ip_;
}
inline void CMsgDOTAMatch::set_server_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.server_ip)
}

// optional uint32 server_port = 15;
inline bool CMsgDOTAMatch::has_server_port() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.server_port)
  return server_port_;
}
inline void CMsgDOTAMatch::set_server_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.server_port)
}

// optional uint32 lobby_type = 16;
inline bool CMsgDOTAMatch::has_lobby_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch::clear_lobby_type() {
  lobby_type_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.lobby_type)
  return lobby_type_;
}
inline void CMsgDOTAMatch::set_lobby_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.lobby_type)
}

// optional uint32 human_players = 17;
inline bool CMsgDOTAMatch::has_human_players() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch::clear_human_players() {
  human_players_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::human_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.human_players)
  return human_players_;
}
inline void CMsgDOTAMatch::set_human_players(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  human_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.human_players)
}

// optional uint32 average_skill = 18;
inline bool CMsgDOTAMatch::has_average_skill() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch::clear_average_skill() {
  average_skill_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::average_skill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.average_skill)
  return average_skill_;
}
inline void CMsgDOTAMatch::set_average_skill(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  average_skill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.average_skill)
}

// optional float game_balance = 19;
inline bool CMsgDOTAMatch::has_game_balance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch::clear_game_balance() {
  game_balance_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float CMsgDOTAMatch::game_balance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.game_balance)
  return game_balance_;
}
inline void CMsgDOTAMatch::set_game_balance(float value) {
  _has_bits_[0] |= 0x00040000u;
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.game_balance)
}

// optional uint32 radiant_team_id = 20;
inline bool CMsgDOTAMatch::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatch::set_radiant_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_id)
}

// optional uint32 dire_team_id = 21;
inline bool CMsgDOTAMatch::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_id() {
  dire_team_id_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatch::set_dire_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_id)
}

// optional uint32 leagueid = 22;
inline bool CMsgDOTAMatch::has_leagueid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch::clear_leagueid() {
  leagueid_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.leagueid)
  return leagueid_;
}
inline void CMsgDOTAMatch::set_leagueid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.leagueid)
}

// optional string radiant_team_name = 23;
inline bool CMsgDOTAMatch::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
inline void CMsgDOTAMatch::set_radiant_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_radiant_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
#endif
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.radiant_team_name)
  if (!has_radiant_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radiant_team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.radiant_team_name)
}

// optional string dire_team_name = 24;
inline bool CMsgDOTAMatch::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAMatch::dire_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.GetNoArena();
}
inline void CMsgDOTAMatch::set_dire_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_dire_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.dire_team_name)
}
#endif
inline void CMsgDOTAMatch::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.dire_team_name)
}
inline void CMsgDOTAMatch::set_dire_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.dire_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.dire_team_name)
  if (!has_dire_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dire_team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.dire_team_name)
}

// optional uint64 radiant_team_logo = 25;
inline bool CMsgDOTAMatch::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_logo() {
  radiant_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatch::set_radiant_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_logo)
}

// optional uint64 dire_team_logo = 26;
inline bool CMsgDOTAMatch::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_logo() {
  dire_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatch::set_dire_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_logo)
}

// optional string radiant_team_logo_url = 54;
inline bool CMsgDOTAMatch::has_radiant_team_logo_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_logo_url() {
  radiant_team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
  return radiant_team_logo_url_.GetNoArena();
}
inline void CMsgDOTAMatch::set_radiant_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_radiant_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  radiant_team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
}
#endif
inline void CMsgDOTAMatch::set_radiant_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
}
inline void CMsgDOTAMatch::set_radiant_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_logo_url() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
  return radiant_team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
  if (!has_radiant_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return radiant_team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_logo_url(::std::string* radiant_team_logo_url) {
  if (radiant_team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  radiant_team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.radiant_team_logo_url)
}

// optional string dire_team_logo_url = 55;
inline bool CMsgDOTAMatch::has_dire_team_logo_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_logo_url() {
  dire_team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& CMsgDOTAMatch::dire_team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
  return dire_team_logo_url_.GetNoArena();
}
inline void CMsgDOTAMatch::set_dire_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_dire_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  dire_team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
}
#endif
inline void CMsgDOTAMatch::set_dire_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
}
inline void CMsgDOTAMatch::set_dire_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_logo_url() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
  return dire_team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
  if (!has_dire_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return dire_team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_dire_team_logo_url(::std::string* dire_team_logo_url) {
  if (dire_team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dire_team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.dire_team_logo_url)
}

// optional uint32 radiant_team_complete = 27;
inline bool CMsgDOTAMatch::has_radiant_team_complete() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_complete() {
  radiant_team_complete_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_complete)
  return radiant_team_complete_;
}
inline void CMsgDOTAMatch::set_radiant_team_complete(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  radiant_team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_complete)
}

// optional uint32 dire_team_complete = 28;
inline bool CMsgDOTAMatch::has_dire_team_complete() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_complete() {
  dire_team_complete_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_complete)
  return dire_team_complete_;
}
inline void CMsgDOTAMatch::set_dire_team_complete(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  dire_team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_complete)
}

// optional uint32 positive_votes = 29;
inline bool CMsgDOTAMatch::has_positive_votes() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch::clear_positive_votes() {
  positive_votes_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::positive_votes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.positive_votes)
  return positive_votes_;
}
inline void CMsgDOTAMatch::set_positive_votes(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  positive_votes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.positive_votes)
}

// optional uint32 negative_votes = 30;
inline bool CMsgDOTAMatch::has_negative_votes() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch::clear_negative_votes() {
  negative_votes_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::negative_votes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.negative_votes)
  return negative_votes_;
}
inline void CMsgDOTAMatch::set_negative_votes(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  negative_votes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.negative_votes)
}

// optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatch::has_game_mode() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::proto::dota::DOTA_GameMode CMsgDOTAMatch::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatch::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.game_mode)
}

// repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
inline int CMsgDOTAMatch::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CMsgDOTAMatch::clear_picks_bans() {
  picks_bans_.Clear();
}
inline ::proto::dota::CMatchHeroSelectEvent* CMsgDOTAMatch::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >*
CMsgDOTAMatch::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.picks_bans)
  return &picks_bans_;
}
inline const ::proto::dota::CMatchHeroSelectEvent& CMsgDOTAMatch::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Get(index);
}
inline ::proto::dota::CMatchHeroSelectEvent* CMsgDOTAMatch::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >&
CMsgDOTAMatch::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_;
}

// optional uint64 match_seq_num = 33;
inline bool CMsgDOTAMatch::has_match_seq_num() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch::clear_match_seq_num() {
  match_seq_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::match_seq_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_seq_num)
  return match_seq_num_;
}
inline void CMsgDOTAMatch::set_match_seq_num(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x40000000u;
  match_seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_seq_num)
}

// optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
inline bool CMsgDOTAMatch::has_replay_state() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch::clear_replay_state() {
  replay_state_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::proto::dota::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::replay_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.replay_state)
  return static_cast< ::proto::dota::CMsgDOTAMatch_ReplayState >(replay_state_);
}
inline void CMsgDOTAMatch::set_replay_state(::proto::dota::CMsgDOTAMatch_ReplayState value) {
  assert(::proto::dota::CMsgDOTAMatch_ReplayState_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  replay_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.replay_state)
}

// optional uint32 radiant_guild_id = 35;
inline bool CMsgDOTAMatch::has_radiant_guild_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_guild_id() {
  radiant_guild_id_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_guild_id)
  return radiant_guild_id_;
}
inline void CMsgDOTAMatch::set_radiant_guild_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  radiant_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_guild_id)
}

// optional uint32 dire_guild_id = 36;
inline bool CMsgDOTAMatch::has_dire_guild_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_guild_id() {
  dire_guild_id_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_guild_id)
  return dire_guild_id_;
}
inline void CMsgDOTAMatch::set_dire_guild_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  dire_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_guild_id)
}

// optional string radiant_team_tag = 37;
inline bool CMsgDOTAMatch::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.GetNoArena();
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_radiant_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
#endif
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_tag() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  if (!has_radiant_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return radiant_team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}

// optional string dire_team_tag = 38;
inline bool CMsgDOTAMatch::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgDOTAMatch::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.GetNoArena();
}
inline void CMsgDOTAMatch::set_dire_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_dire_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
#endif
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_tag() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.dire_team_tag)
  if (!has_dire_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dire_team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.dire_team_tag)
}

// optional uint32 series_id = 39;
inline bool CMsgDOTAMatch::has_series_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.series_id)
  return series_id_;
}
inline void CMsgDOTAMatch::set_series_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.series_id)
}

// optional uint32 series_type = 40;
inline bool CMsgDOTAMatch::has_series_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.series_type)
  return series_type_;
}
inline void CMsgDOTAMatch::set_series_type(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.series_type)
}

// repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
inline int CMsgDOTAMatch::broadcaster_channels_size() const {
  return broadcaster_channels_.size();
}
inline void CMsgDOTAMatch::clear_broadcaster_channels() {
  broadcaster_channels_.Clear();
}
inline ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::mutable_broadcaster_channels(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >*
CMsgDOTAMatch::mutable_broadcaster_channels() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return &broadcaster_channels_;
}
inline const ::proto::dota::CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch::broadcaster_channels(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::add_broadcaster_channels() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >&
CMsgDOTAMatch::broadcaster_channels() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_;
}

// optional uint32 engine = 44;
inline bool CMsgDOTAMatch::has_engine() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch::clear_engine() {
  engine_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::engine() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.engine)
  return engine_;
}
inline void CMsgDOTAMatch::set_engine(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  engine_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.engine)
}

// optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
inline bool CMsgDOTAMatch::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch::clear_custom_game_data() {
  if (custom_game_data_ != nullptr) custom_game_data_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::proto::dota::CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch::custom_game_data() const {
  const ::proto::dota::CMsgDOTAMatch_CustomGameData* p = custom_game_data_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.custom_game_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAMatch_CustomGameData*>(
      &::proto::dota::_CMsgDOTAMatch_CustomGameData_default_instance_);
}
inline ::proto::dota::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.custom_game_data)
  _has_bits_[0] &= ~0x00000040u;
  ::proto::dota::CMsgDOTAMatch_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::mutable_custom_game_data() {
  _has_bits_[0] |= 0x00000040u;
  if (custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAMatch_CustomGameData>(GetArenaNoVirtual());
    custom_game_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.custom_game_data)
  return custom_game_data_;
}
inline void CMsgDOTAMatch::set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_CustomGameData* custom_game_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_game_data_;
  }
  if (custom_game_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_game_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.custom_game_data)
}

// optional uint32 match_flags = 46;
inline bool CMsgDOTAMatch::has_match_flags() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch::clear_match_flags() {
  match_flags_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::match_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_flags)
  return match_flags_;
}
inline void CMsgDOTAMatch::set_match_flags(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  match_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_flags)
}

// optional fixed32 private_metadata_key = 47;
inline bool CMsgDOTAMatch::has_private_metadata_key() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch::clear_private_metadata_key() {
  private_metadata_key_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::private_metadata_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.private_metadata_key)
  return private_metadata_key_;
}
inline void CMsgDOTAMatch::set_private_metadata_key(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  private_metadata_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.private_metadata_key)
}

// optional uint32 radiant_team_score = 48;
inline bool CMsgDOTAMatch::has_radiant_team_score() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch::clear_radiant_team_score() {
  radiant_team_score_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_score)
  return radiant_team_score_;
}
inline void CMsgDOTAMatch::set_radiant_team_score(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  radiant_team_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_score)
}

// optional uint32 dire_team_score = 49;
inline bool CMsgDOTAMatch::has_dire_team_score() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch::clear_dire_team_score() {
  dire_team_score_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_score)
  return dire_team_score_;
}
inline void CMsgDOTAMatch::set_dire_team_score(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  dire_team_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_score)
}

// optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatch::has_match_outcome() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::proto::dota::EMatchOutcome CMsgDOTAMatch::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
inline void CMsgDOTAMatch::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_outcome)
}

// optional uint32 tournament_id = 51;
inline bool CMsgDOTAMatch::has_tournament_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTAMatch::set_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tournament_id)
}

// optional uint32 tournament_round = 52;
inline bool CMsgDOTAMatch::has_tournament_round() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch::clear_tournament_round() {
  tournament_round_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tournament_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tournament_round)
  return tournament_round_;
}
inline void CMsgDOTAMatch::set_tournament_round(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  tournament_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tournament_round)
}

// optional uint32 pre_game_duration = 53;
inline bool CMsgDOTAMatch::has_pre_game_duration() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch::clear_pre_game_duration() {
  pre_game_duration_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.pre_game_duration)
  return pre_game_duration_;
}
inline void CMsgDOTAMatch::set_pre_game_duration(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  pre_game_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.pre_game_duration)
}

// -------------------------------------------------------------------

// CMsgPlayerCard_StatModifier

// optional uint32 stat = 1;
inline bool CMsgPlayerCard_StatModifier::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPlayerCard_StatModifier::clear_stat() {
  stat_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgPlayerCard_StatModifier::stat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.StatModifier.stat)
  return stat_;
}
inline void CMsgPlayerCard_StatModifier::set_stat(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.StatModifier.stat)
}

// optional uint32 value = 2;
inline bool CMsgPlayerCard_StatModifier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPlayerCard_StatModifier::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgPlayerCard_StatModifier::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.StatModifier.value)
  return value_;
}
inline void CMsgPlayerCard_StatModifier::set_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.StatModifier.value)
}

// -------------------------------------------------------------------

// CMsgPlayerCard

// optional uint32 account_id = 1;
inline bool CMsgPlayerCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPlayerCard::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgPlayerCard::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.account_id)
  return account_id_;
}
inline void CMsgPlayerCard::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.account_id)
}

// repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
inline int CMsgPlayerCard::stat_modifier_size() const {
  return stat_modifier_.size();
}
inline void CMsgPlayerCard::clear_stat_modifier() {
  stat_modifier_.Clear();
}
inline ::proto::dota::CMsgPlayerCard_StatModifier* CMsgPlayerCard::mutable_stat_modifier(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >*
CMsgPlayerCard::mutable_stat_modifier() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPlayerCard.stat_modifier)
  return &stat_modifier_;
}
inline const ::proto::dota::CMsgPlayerCard_StatModifier& CMsgPlayerCard::stat_modifier(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Get(index);
}
inline ::proto::dota::CMsgPlayerCard_StatModifier* CMsgPlayerCard::add_stat_modifier() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >&
CMsgPlayerCard::stat_modifier() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStats

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyPlayerStats::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.player_account_id)
  return player_account_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_player_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.player_account_id)
}

// optional uint64 match_id = 2;
inline bool CMsgDOTAFantasyPlayerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAFantasyPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.match_id)
  return match_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.match_id)
}

// optional bool match_completed = 3;
inline bool CMsgDOTAFantasyPlayerStats::has_match_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_completed() {
  match_completed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTAFantasyPlayerStats::match_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.match_completed)
  return match_completed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_completed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  match_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.match_completed)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTAFantasyPlayerStats::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.team_id)
  return team_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.team_id)
}

// optional uint32 league_id = 5;
inline bool CMsgDOTAFantasyPlayerStats::has_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.league_id)
  return league_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.league_id)
}

// optional uint32 delay = 6;
inline bool CMsgDOTAFantasyPlayerStats::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_delay() {
  delay_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.delay)
  return delay_;
}
inline void CMsgDOTAFantasyPlayerStats::set_delay(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.delay)
}

// optional uint32 series_id = 7;
inline bool CMsgDOTAFantasyPlayerStats::has_series_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.series_id)
  return series_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.series_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAFantasyPlayerStats::has_series_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.series_type)
  return series_type_;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.series_type)
}

// optional uint32 kills = 10;
inline bool CMsgDOTAFantasyPlayerStats::has_kills() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.kills)
  return kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.kills)
}

// optional uint32 deaths = 11;
inline bool CMsgDOTAFantasyPlayerStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.deaths)
  return deaths_;
}
inline void CMsgDOTAFantasyPlayerStats::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.deaths)
}

// optional uint32 cs = 12;
inline bool CMsgDOTAFantasyPlayerStats::has_cs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_cs() {
  cs_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::cs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.cs)
  return cs_;
}
inline void CMsgDOTAFantasyPlayerStats::set_cs(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  cs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.cs)
}

// optional float gpm = 13;
inline bool CMsgDOTAFantasyPlayerStats::has_gpm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_gpm() {
  gpm_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTAFantasyPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.gpm)
  return gpm_;
}
inline void CMsgDOTAFantasyPlayerStats::set_gpm(float value) {
  _has_bits_[0] |= 0x00000800u;
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.gpm)
}

// optional uint32 tower_kills = 14;
inline bool CMsgDOTAFantasyPlayerStats::has_tower_kills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_tower_kills() {
  tower_kills_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::tower_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.tower_kills)
  return tower_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_tower_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.tower_kills)
}

// optional uint32 roshan_kills = 15;
inline bool CMsgDOTAFantasyPlayerStats::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_roshan_kills() {
  roshan_kills_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::roshan_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.roshan_kills)
  return roshan_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_roshan_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.roshan_kills)
}

// optional float teamfight_participation = 16;
inline bool CMsgDOTAFantasyPlayerStats::has_teamfight_participation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_teamfight_participation() {
  teamfight_participation_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgDOTAFantasyPlayerStats::teamfight_participation() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.teamfight_participation)
  return teamfight_participation_;
}
inline void CMsgDOTAFantasyPlayerStats::set_teamfight_participation(float value) {
  _has_bits_[0] |= 0x00004000u;
  teamfight_participation_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.teamfight_participation)
}

// optional uint32 wards_placed = 17;
inline bool CMsgDOTAFantasyPlayerStats::has_wards_placed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_wards_placed() {
  wards_placed_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::wards_placed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.wards_placed)
  return wards_placed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_wards_placed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  wards_placed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.wards_placed)
}

// optional uint32 camps_stacked = 18;
inline bool CMsgDOTAFantasyPlayerStats::has_camps_stacked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_camps_stacked() {
  camps_stacked_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::camps_stacked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.camps_stacked)
  return camps_stacked_;
}
inline void CMsgDOTAFantasyPlayerStats::set_camps_stacked(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  camps_stacked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.camps_stacked)
}

// optional uint32 runes_grabbed = 19;
inline bool CMsgDOTAFantasyPlayerStats::has_runes_grabbed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_runes_grabbed() {
  runes_grabbed_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::runes_grabbed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.runes_grabbed)
  return runes_grabbed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_runes_grabbed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  runes_grabbed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.runes_grabbed)
}

// optional uint32 first_blood = 20;
inline bool CMsgDOTAFantasyPlayerStats::has_first_blood() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_first_blood() {
  first_blood_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::first_blood() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.first_blood)
  return first_blood_;
}
inline void CMsgDOTAFantasyPlayerStats::set_first_blood(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  first_blood_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.first_blood)
}

// optional float stuns = 21;
inline bool CMsgDOTAFantasyPlayerStats::has_stuns() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::clear_stuns() {
  stuns_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CMsgDOTAFantasyPlayerStats::stuns() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.stuns)
  return stuns_;
}
inline void CMsgDOTAFantasyPlayerStats::set_stuns(float value) {
  _has_bits_[0] |= 0x00080000u;
  stuns_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.stuns)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerMatchStats

// repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
inline int CMsgDOTAFantasyPlayerMatchStats::matches_size() const {
  return matches_.size();
}
inline void CMsgDOTAFantasyPlayerMatchStats::clear_matches() {
  matches_.Clear();
}
inline ::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyPlayerMatchStats::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return &matches_;
}
inline const ::proto::dota::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerMatchStats::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyPlayerMatchStats::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Mode

// optional uint32 mode_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_mode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_mode_id() {
  mode_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::mode_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
  return mode_id_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_mode_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  mode_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
}

// optional float desire = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_desire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_desire() {
  desire_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTABotDebugInfo_Bot_Mode::desire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.desire)
  return desire_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_desire(float value) {
  _has_bits_[0] |= 0x00000002u;
  desire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.desire)
}

// optional uint32 target_entity = 3;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_entity() {
  target_entity_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
  return target_entity_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_entity(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
}

// optional uint32 target_x = 4;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_x() {
  target_x_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_x)
  return target_x_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_x(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  target_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_x)
}

// optional uint32 target_y = 5;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_y() {
  target_y_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_y)
  return target_y_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_y(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  target_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_y)
}

// optional uint32 target_z = 6;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_z() {
  target_z_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_z)
  return target_z_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_z(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  target_z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_z)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Action

// optional uint32 action_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_id() {
  action_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Action::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_id)
  return action_id_;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_id)
}

// optional string action_target = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_target() {
  action_target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTABotDebugInfo_Bot_Action::action_target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return action_target_.GetNoArena();
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
#if LANG_CXX11
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
#endif
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline ::std::string* CMsgDOTABotDebugInfo_Bot_Action::mutable_action_target() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return action_target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTABotDebugInfo_Bot_Action::release_action_target() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  if (!has_action_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_target_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_allocated_action_target(::std::string* action_target) {
  if (action_target != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_target);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot

// optional uint32 player_owner_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot::has_player_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_player_owner_id() {
  player_owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::player_owner_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.player_owner_id)
  return player_owner_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_player_owner_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_owner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.player_owner_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTABotDebugInfo_Bot::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.hero_id)
  return hero_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.hero_id)
}

// optional uint32 difficulty = 3;
inline bool CMsgDOTABotDebugInfo_Bot::has_difficulty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_difficulty() {
  difficulty_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.difficulty)
  return difficulty_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_difficulty(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.difficulty)
}

// optional uint32 power_current = 4;
inline bool CMsgDOTABotDebugInfo_Bot::has_power_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_current() {
  power_current_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.power_current)
  return power_current_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_current(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  power_current_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.power_current)
}

// optional uint32 power_max = 5;
inline bool CMsgDOTABotDebugInfo_Bot::has_power_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_max() {
  power_max_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.power_max)
  return power_max_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_max(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  power_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.power_max)
}

// optional uint32 move_target_x = 6;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_x() {
  move_target_x_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_x)
  return move_target_x_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_x(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  move_target_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_x)
}

// optional uint32 move_target_y = 7;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_y() {
  move_target_y_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_y)
  return move_target_y_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_y(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  move_target_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_y)
}

// optional uint32 move_target_z = 8;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_z() {
  move_target_z_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_z)
  return move_target_z_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_z(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  move_target_z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_z)
}

// optional uint32 active_mode_id = 9;
inline bool CMsgDOTABotDebugInfo_Bot::has_active_mode_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_active_mode_id() {
  active_mode_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::active_mode_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.active_mode_id)
  return active_mode_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_active_mode_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  active_mode_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.active_mode_id)
}

// optional float execution_time = 10;
inline bool CMsgDOTABotDebugInfo_Bot::has_execution_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_execution_time() {
  execution_time_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDOTABotDebugInfo_Bot::execution_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.execution_time)
  return execution_time_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_execution_time(float value) {
  _has_bits_[0] |= 0x00000400u;
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.execution_time)
}

// repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
inline int CMsgDOTABotDebugInfo_Bot::modes_size() const {
  return modes_.size();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_modes() {
  modes_.Clear();
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >*
CMsgDOTABotDebugInfo_Bot::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return &modes_;
}
inline const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot::modes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Get(index);
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::add_modes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >&
CMsgDOTABotDebugInfo_Bot::modes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_;
}

// optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
inline bool CMsgDOTABotDebugInfo_Bot::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot::action() const {
  const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* p = action_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action*>(
      &::proto::dota::_CMsgDOTABotDebugInfo_Bot_Action_default_instance_);
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::release_action() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTABotDebugInfo_Bot_Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  return action_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_allocated_action(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo

// repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
inline int CMsgDOTABotDebugInfo::bots_size() const {
  return bots_.size();
}
inline void CMsgDOTABotDebugInfo::clear_bots() {
  bots_.Clear();
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::mutable_bots(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >*
CMsgDOTABotDebugInfo::mutable_bots() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.bots)
  return &bots_;
}
inline const ::proto::dota::CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo::bots(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Get(index);
}
inline ::proto::dota::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::add_bots() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >&
CMsgDOTABotDebugInfo::bots() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_;
}

// optional float desire_push_lane_top = 2;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_top() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_top() {
  desire_push_lane_top_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_top)
  return desire_push_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_top(float value) {
  _has_bits_[0] |= 0x00000001u;
  desire_push_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_top)
}

// optional float desire_push_lane_mid = 3;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_mid() {
  desire_push_lane_mid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_mid)
  return desire_push_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_mid(float value) {
  _has_bits_[0] |= 0x00000002u;
  desire_push_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_mid)
}

// optional float desire_push_lane_bot = 4;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_bot() {
  desire_push_lane_bot_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_bot)
  return desire_push_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_bot(float value) {
  _has_bits_[0] |= 0x00000004u;
  desire_push_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_bot)
}

// optional float desire_defend_lane_top = 5;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_top() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_top() {
  desire_defend_lane_top_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_top)
  return desire_defend_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_top(float value) {
  _has_bits_[0] |= 0x00000008u;
  desire_defend_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_top)
}

// optional float desire_defend_lane_mid = 6;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_mid() {
  desire_defend_lane_mid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_mid)
  return desire_defend_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_mid(float value) {
  _has_bits_[0] |= 0x00000010u;
  desire_defend_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_mid)
}

// optional float desire_defend_lane_bot = 7;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_bot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_bot() {
  desire_defend_lane_bot_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_bot)
  return desire_defend_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_bot(float value) {
  _has_bits_[0] |= 0x00000020u;
  desire_defend_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_bot)
}

// optional float desire_farm_lane_top = 8;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_top() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_top() {
  desire_farm_lane_top_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_top)
  return desire_farm_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_top(float value) {
  _has_bits_[0] |= 0x00000040u;
  desire_farm_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_top)
}

// optional float desire_farm_lane_mid = 9;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_mid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_mid() {
  desire_farm_lane_mid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_mid)
  return desire_farm_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_mid(float value) {
  _has_bits_[0] |= 0x00000080u;
  desire_farm_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_mid)
}

// optional float desire_farm_lane_bot = 10;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_bot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_bot() {
  desire_farm_lane_bot_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_bot)
  return desire_farm_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_bot(float value) {
  _has_bits_[0] |= 0x00000100u;
  desire_farm_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_bot)
}

// optional float desire_farm_roshan = 11;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_roshan() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_roshan() {
  desire_farm_roshan_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDOTABotDebugInfo::desire_farm_roshan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_roshan)
  return desire_farm_roshan_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_roshan(float value) {
  _has_bits_[0] |= 0x00000200u;
  desire_farm_roshan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_roshan)
}

// optional float execution_time = 12;
inline bool CMsgDOTABotDebugInfo::has_execution_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTABotDebugInfo::clear_execution_time() {
  execution_time_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDOTABotDebugInfo::execution_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.execution_time)
  return execution_time_;
}
inline void CMsgDOTABotDebugInfo::set_execution_time(float value) {
  _has_bits_[0] |= 0x00000400u;
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.execution_time)
}

// repeated uint32 rune_status = 13;
inline int CMsgDOTABotDebugInfo::rune_status_size() const {
  return rune_status_.size();
}
inline void CMsgDOTABotDebugInfo::clear_rune_status() {
  rune_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo::rune_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return rune_status_.Get(index);
}
inline void CMsgDOTABotDebugInfo::set_rune_status(int index, ::google::protobuf::uint32 value) {
  rune_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.rune_status)
}
inline void CMsgDOTABotDebugInfo::add_rune_status(::google::protobuf::uint32 value) {
  rune_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.rune_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTABotDebugInfo::rune_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return rune_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTABotDebugInfo::mutable_rune_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return &rune_status_;
}

// -------------------------------------------------------------------

// CMsgSuccessfulHero

// optional uint32 hero_id = 1;
inline bool CMsgSuccessfulHero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSuccessfulHero::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSuccessfulHero::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuccessfulHero.hero_id)
  return hero_id_;
}
inline void CMsgSuccessfulHero::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuccessfulHero.hero_id)
}

// optional float win_percent = 2;
inline bool CMsgSuccessfulHero::has_win_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSuccessfulHero::clear_win_percent() {
  win_percent_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSuccessfulHero::win_percent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuccessfulHero.win_percent)
  return win_percent_;
}
inline void CMsgSuccessfulHero::set_win_percent(float value) {
  _has_bits_[0] |= 0x00000002u;
  win_percent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuccessfulHero.win_percent)
}

// optional uint32 longest_streak = 3;
inline bool CMsgSuccessfulHero::has_longest_streak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSuccessfulHero::clear_longest_streak() {
  longest_streak_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSuccessfulHero::longest_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuccessfulHero.longest_streak)
  return longest_streak_;
}
inline void CMsgSuccessfulHero::set_longest_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  longest_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuccessfulHero.longest_streak)
}

// -------------------------------------------------------------------

// CMsgRecentMatchInfo

// optional uint64 match_id = 1;
inline bool CMsgRecentMatchInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRecentMatchInfo::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgRecentMatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.match_id)
  return match_id_;
}
inline void CMsgRecentMatchInfo::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.match_id)
}

// optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgRecentMatchInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRecentMatchInfo::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::DOTA_GameMode CMsgRecentMatchInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
inline void CMsgRecentMatchInfo::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.game_mode)
}

// optional uint32 kills = 3;
inline bool CMsgRecentMatchInfo::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRecentMatchInfo::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.kills)
  return kills_;
}
inline void CMsgRecentMatchInfo::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgRecentMatchInfo::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgRecentMatchInfo::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.deaths)
  return deaths_;
}
inline void CMsgRecentMatchInfo::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgRecentMatchInfo::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgRecentMatchInfo::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.assists)
  return assists_;
}
inline void CMsgRecentMatchInfo::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.assists)
}

// optional uint32 duration = 6;
inline bool CMsgRecentMatchInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgRecentMatchInfo::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.duration)
  return duration_;
}
inline void CMsgRecentMatchInfo::set_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.duration)
}

// optional uint32 player_slot = 7;
inline bool CMsgRecentMatchInfo::has_player_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgRecentMatchInfo::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.player_slot)
  return player_slot_;
}
inline void CMsgRecentMatchInfo::set_player_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.player_slot)
}

// optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgRecentMatchInfo::has_match_outcome() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgRecentMatchInfo::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::proto::dota::EMatchOutcome CMsgRecentMatchInfo::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
inline void CMsgRecentMatchInfo::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.match_outcome)
}

// optional uint32 timestamp = 9;
inline bool CMsgRecentMatchInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgRecentMatchInfo::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgRecentMatchInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecentMatchInfo.timestamp)
  return timestamp_;
}
inline void CMsgRecentMatchInfo::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecentMatchInfo.timestamp)
}

// -------------------------------------------------------------------

// CMsgMatchTips_SingleTip

// optional uint32 source_account_id = 1;
inline bool CMsgMatchTips_SingleTip::has_source_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMatchTips_SingleTip::clear_source_account_id() {
  source_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgMatchTips_SingleTip::source_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchTips.SingleTip.source_account_id)
  return source_account_id_;
}
inline void CMsgMatchTips_SingleTip::set_source_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  source_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgMatchTips.SingleTip.source_account_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgMatchTips_SingleTip::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgMatchTips_SingleTip::clear_target_account_id() {
  target_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgMatchTips_SingleTip::target_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchTips.SingleTip.target_account_id)
  return target_account_id_;
}
inline void CMsgMatchTips_SingleTip::set_target_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgMatchTips.SingleTip.target_account_id)
}

// optional uint32 tip_amount = 3;
inline bool CMsgMatchTips_SingleTip::has_tip_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgMatchTips_SingleTip::clear_tip_amount() {
  tip_amount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgMatchTips_SingleTip::tip_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchTips.SingleTip.tip_amount)
  return tip_amount_;
}
inline void CMsgMatchTips_SingleTip::set_tip_amount(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tip_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgMatchTips.SingleTip.tip_amount)
}

// optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
inline bool CMsgMatchTips_SingleTip::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgMatchTips_SingleTip::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::proto::dota::EEvent CMsgMatchTips_SingleTip::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchTips.SingleTip.event_id)
  return static_cast< ::proto::dota::EEvent >(event_id_);
}
inline void CMsgMatchTips_SingleTip::set_event_id(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgMatchTips.SingleTip.event_id)
}

// -------------------------------------------------------------------

// CMsgMatchTips

// repeated .proto.dota.CMsgMatchTips.SingleTip tips = 2;
inline int CMsgMatchTips::tips_size() const {
  return tips_.size();
}
inline void CMsgMatchTips::clear_tips() {
  tips_.Clear();
}
inline ::proto::dota::CMsgMatchTips_SingleTip* CMsgMatchTips::mutable_tips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgMatchTips.tips)
  return tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips_SingleTip >*
CMsgMatchTips::mutable_tips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgMatchTips.tips)
  return &tips_;
}
inline const ::proto::dota::CMsgMatchTips_SingleTip& CMsgMatchTips::tips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchTips.tips)
  return tips_.Get(index);
}
inline ::proto::dota::CMsgMatchTips_SingleTip* CMsgMatchTips::add_tips() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgMatchTips.tips)
  return tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips_SingleTip >&
CMsgMatchTips::tips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgMatchTips.tips)
  return tips_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatchMinimal_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAMatchMinimal_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
}

// optional uint32 kills = 3;
inline bool CMsgDOTAMatchMinimal_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatchMinimal_Player::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgDOTAMatchMinimal_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatchMinimal_Player::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgDOTAMatchMinimal_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatchMinimal_Player::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
}

// repeated uint32 items = 6;
inline int CMsgDOTAMatchMinimal_Player::items_size() const {
  return items_.size();
}
inline void CMsgDOTAMatchMinimal_Player::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_.Get(index);
}
inline void CMsgDOTAMatchMinimal_Player::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
inline void CMsgDOTAMatchMinimal_Player::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchMinimal_Player::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchMinimal_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return &items_;
}

// optional uint32 player_slot = 7;
inline bool CMsgDOTAMatchMinimal_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatchMinimal_Player::set_player_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
}

// optional string pro_name = 8;
inline bool CMsgDOTAMatchMinimal_Player::has_pro_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::clear_pro_name() {
  pro_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatchMinimal_Player::pro_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
  return pro_name_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Player::set_pro_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Player::set_pro_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pro_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
}
#endif
inline void CMsgDOTAMatchMinimal_Player::set_pro_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
}
inline void CMsgDOTAMatchMinimal_Player::set_pro_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Player::mutable_pro_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
  return pro_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Player::release_pro_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
  if (!has_pro_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pro_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Player::set_allocated_pro_name(::std::string* pro_name) {
  if (pro_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pro_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pro_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Player.pro_name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Tourney

// optional uint32 league_id = 1;
inline bool CMsgDOTAMatchMinimal_Tourney::has_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
  return league_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
  return series_type_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
}

// optional uint32 series_game = 9;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_game() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_game() {
  series_game_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
  return series_game_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
}

// optional uint32 weekend_tourney_tournament_id = 10;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_season_trophy_id = 11;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_season_trophy_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_season_trophy_id() {
  weekend_tourney_season_trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
  return weekend_tourney_season_trophy_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  weekend_tourney_season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
}

// optional uint32 weekend_tourney_division = 12;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 13;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
}

// optional uint32 radiant_team_id = 2;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
}

// optional string radiant_team_name = 3;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  if (!has_radiant_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radiant_team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}

// optional fixed64 radiant_team_logo = 4;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo() {
  radiant_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
}

// optional string radiant_team_logo_url = 14;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo_url() {
  radiant_team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  return radiant_team_logo_url_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  radiant_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_logo_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  return radiant_team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  if (!has_radiant_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return radiant_team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_logo_url(::std::string* radiant_team_logo_url) {
  if (radiant_team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radiant_team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}

// optional uint32 dire_team_id = 5;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_id() {
  dire_team_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
}

// optional string dire_team_name = 6;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  if (!has_dire_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dire_team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}

// optional fixed64 dire_team_logo = 7;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo() {
  dire_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
}

// optional string dire_team_logo_url = 15;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo_url() {
  dire_team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  return dire_team_logo_url_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dire_team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_logo_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  return dire_team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  if (!has_dire_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dire_team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_logo_url(::std::string* dire_team_logo_url) {
  if (dire_team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dire_team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal

// optional uint64 match_id = 1;
inline bool CMsgDOTAMatchMinimal::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_id)
  return match_id_;
}
inline void CMsgDOTAMatchMinimal::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_id)
}

// optional fixed32 start_time = 2;
inline bool CMsgDOTAMatchMinimal::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.start_time)
  return start_time_;
}
inline void CMsgDOTAMatchMinimal::set_start_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.start_time)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAMatchMinimal::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.duration)
  return duration_;
}
inline void CMsgDOTAMatchMinimal::set_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.duration)
}

// optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatchMinimal::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::proto::dota::DOTA_GameMode CMsgDOTAMatchMinimal::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatchMinimal::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.game_mode)
}

// repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
inline int CMsgDOTAMatchMinimal::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatchMinimal::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >*
CMsgDOTAMatchMinimal::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return &players_;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >&
CMsgDOTAMatchMinimal::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_;
}

// optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
inline bool CMsgDOTAMatchMinimal::has_tourney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_tourney() {
  if (tourney_ != nullptr) tourney_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::tourney() const {
  const ::proto::dota::CMsgDOTAMatchMinimal_Tourney* p = tourney_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAMatchMinimal_Tourney*>(
      &::proto::dota::_CMsgDOTAMatchMinimal_Tourney_default_instance_);
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::release_tourney() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.tourney)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* temp = tourney_;
  tourney_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::mutable_tourney() {
  _has_bits_[0] |= 0x00000001u;
  if (tourney_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAMatchMinimal_Tourney>(GetArenaNoVirtual());
    tourney_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return tourney_;
}
inline void CMsgDOTAMatchMinimal::set_allocated_tourney(::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tourney_;
  }
  if (tourney) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tourney = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tourney, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tourney_ = tourney;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.tourney)
}

// optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatchMinimal::has_match_outcome() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::dota::EMatchOutcome CMsgDOTAMatchMinimal::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
inline void CMsgDOTAMatchMinimal::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
}

// optional uint32 radiant_score = 9;
inline bool CMsgDOTAMatchMinimal::has_radiant_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_radiant_score() {
  radiant_score_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::radiant_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.radiant_score)
  return radiant_score_;
}
inline void CMsgDOTAMatchMinimal::set_radiant_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  radiant_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.radiant_score)
}

// optional uint32 dire_score = 10;
inline bool CMsgDOTAMatchMinimal::has_dire_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatchMinimal::clear_dire_score() {
  dire_score_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::dire_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.dire_score)
  return dire_score_;
}
inline void CMsgDOTAMatchMinimal::set_dire_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  dire_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.dire_score)
}

// -------------------------------------------------------------------

// CMsgConsumableUsage

// optional uint32 item_def = 1;
inline bool CMsgConsumableUsage::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgConsumableUsage::clear_item_def() {
  item_def_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgConsumableUsage::item_def() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConsumableUsage.item_def)
  return item_def_;
}
inline void CMsgConsumableUsage::set_item_def(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_def_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConsumableUsage.item_def)
}

// optional int32 quantity_change = 2;
inline bool CMsgConsumableUsage::has_quantity_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgConsumableUsage::clear_quantity_change() {
  quantity_change_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CMsgConsumableUsage::quantity_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConsumableUsage.quantity_change)
  return quantity_change_;
}
inline void CMsgConsumableUsage::set_quantity_change(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quantity_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConsumableUsage.quantity_change)
}

// -------------------------------------------------------------------

// CMsgMatchConsumableUsage_PlayerUsage

// optional uint32 account_id = 1;
inline bool CMsgMatchConsumableUsage_PlayerUsage::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMatchConsumableUsage_PlayerUsage::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgMatchConsumableUsage_PlayerUsage::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.account_id)
  return account_id_;
}
inline void CMsgMatchConsumableUsage_PlayerUsage::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.account_id)
}

// repeated .proto.dota.CMsgConsumableUsage consumables_used = 2;
inline int CMsgMatchConsumableUsage_PlayerUsage::consumables_used_size() const {
  return consumables_used_.size();
}
inline void CMsgMatchConsumableUsage_PlayerUsage::clear_consumables_used() {
  consumables_used_.Clear();
}
inline ::proto::dota::CMsgConsumableUsage* CMsgMatchConsumableUsage_PlayerUsage::mutable_consumables_used(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return consumables_used_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConsumableUsage >*
CMsgMatchConsumableUsage_PlayerUsage::mutable_consumables_used() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return &consumables_used_;
}
inline const ::proto::dota::CMsgConsumableUsage& CMsgMatchConsumableUsage_PlayerUsage::consumables_used(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return consumables_used_.Get(index);
}
inline ::proto::dota::CMsgConsumableUsage* CMsgMatchConsumableUsage_PlayerUsage::add_consumables_used() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return consumables_used_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConsumableUsage >&
CMsgMatchConsumableUsage_PlayerUsage::consumables_used() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return consumables_used_;
}

// -------------------------------------------------------------------

// CMsgMatchConsumableUsage

// repeated .proto.dota.CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
inline int CMsgMatchConsumableUsage::player_consumables_used_size() const {
  return player_consumables_used_.size();
}
inline void CMsgMatchConsumableUsage::clear_player_consumables_used() {
  player_consumables_used_.Clear();
}
inline ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* CMsgMatchConsumableUsage::mutable_player_consumables_used(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgMatchConsumableUsage.player_consumables_used)
  return player_consumables_used_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >*
CMsgMatchConsumableUsage::mutable_player_consumables_used() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgMatchConsumableUsage.player_consumables_used)
  return &player_consumables_used_;
}
inline const ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage& CMsgMatchConsumableUsage::player_consumables_used(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgMatchConsumableUsage.player_consumables_used)
  return player_consumables_used_.Get(index);
}
inline ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage* CMsgMatchConsumableUsage::add_player_consumables_used() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgMatchConsumableUsage.player_consumables_used)
  return player_consumables_used_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchConsumableUsage_PlayerUsage >&
CMsgMatchConsumableUsage::player_consumables_used() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgMatchConsumableUsage.player_consumables_used)
  return player_consumables_used_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgDOTAProfileCard_EStatID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAProfileCard_EStatID>() {
  return ::proto::dota::CMsgDOTAProfileCard_EStatID_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult>() {
  return ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eStat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eStat>() {
  return ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eLocation>() {
  return ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonRewards_ERewardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonRewards_ERewardType>() {
  return ::proto::dota::CMsgDOTASeasonRewards_ERewardType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType>() {
  return ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType>() {
  return ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t>() {
  return ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t>() {
  return ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t>() {
  return ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTAMatch_ReplayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAMatch_ReplayState>() {
  return ::proto::dota::CMsgDOTAMatch_ReplayState_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ESpecialPingValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ESpecialPingValue>() {
  return ::proto::dota::ESpecialPingValue_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EDOTAGCSessionNeed> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EDOTAGCSessionNeed>() {
  return ::proto::dota::EDOTAGCSessionNeed_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_TournamentEvents> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_TournamentEvents>() {
  return ::proto::dota::DOTA_TournamentEvents_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EBroadcastTimelineEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EBroadcastTimelineEvent>() {
  return ::proto::dota::EBroadcastTimelineEvent_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto
