// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#include "dota_gcmessages_client_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fteam_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto;
namespace proto {
namespace dota {
class CMsgDOTATeamMemberSDODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamMemberSDO> _instance;
} _CMsgDOTATeamMemberSDO_default_instance_;
class CMsgDOTATeamAdminSDODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamAdminSDO> _instance;
} _CMsgDOTATeamAdminSDO_default_instance_;
class CMsgDOTATeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamMember> _instance;
} _CMsgDOTATeamMember_default_instance_;
class CMsgDOTATeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeam> _instance;
} _CMsgDOTATeam_default_instance_;
class CMsgDOTATeamInfo_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfo_Member> _instance;
} _CMsgDOTATeamInfo_Member_default_instance_;
class CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfo_AuditEntry> _instance;
} _CMsgDOTATeamInfo_AuditEntry_default_instance_;
class CMsgDOTATeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfo> _instance;
} _CMsgDOTATeamInfo_default_instance_;
class CMsgDOTATeamInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfoRequest> _instance;
} _CMsgDOTATeamInfoRequest_default_instance_;
class CMsgDOTATeamsInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamsInfo> _instance;
} _CMsgDOTATeamsInfo_default_instance_;
class CMsgDOTAMyTeamInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMyTeamInfoRequest> _instance;
} _CMsgDOTAMyTeamInfoRequest_default_instance_;
class CMsgDOTACreateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateTeam> _instance;
} _CMsgDOTACreateTeam_default_instance_;
class CMsgDOTACreateTeamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateTeamResponse> _instance;
} _CMsgDOTACreateTeamResponse_default_instance_;
class CMsgDOTAEditTeamDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditTeamDetails> _instance;
} _CMsgDOTAEditTeamDetails_default_instance_;
class CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditTeamDetailsResponse> _instance;
} _CMsgDOTAEditTeamDetailsResponse_default_instance_;
class CMsgDOTATeamProfileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamProfileResponse> _instance;
} _CMsgDOTATeamProfileResponse_default_instance_;
class CMsgDOTAProTeamListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListRequest> _instance;
} _CMsgDOTAProTeamListRequest_default_instance_;
class CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListResponse_TeamEntry> _instance;
} _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
class CMsgDOTAProTeamListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListResponse> _instance;
} _CMsgDOTAProTeamListResponse_default_instance_;
class CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_InviterToGC> _instance;
} _CMsgDOTATeamInvite_InviterToGC_default_instance_;
class CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCImmediateResponseToInviter> _instance;
} _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCRequestToInvitee> _instance;
} _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
class CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_InviteeResponseToGC> _instance;
} _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCResponseToInviter> _instance;
} _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCResponseToInvitee> _instance;
} _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
class CMsgDOTAKickTeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAKickTeamMember> _instance;
} _CMsgDOTAKickTeamMember_default_instance_;
class CMsgDOTAKickTeamMemberResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAKickTeamMemberResponse> _instance;
} _CMsgDOTAKickTeamMemberResponse_default_instance_;
class CMsgDOTATransferTeamAdminDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATransferTeamAdmin> _instance;
} _CMsgDOTATransferTeamAdmin_default_instance_;
class CMsgDOTATransferTeamAdminResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATransferTeamAdminResponse> _instance;
} _CMsgDOTATransferTeamAdminResponse_default_instance_;
class CMsgDOTALeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveTeam> _instance;
} _CMsgDOTALeaveTeam_default_instance_;
class CMsgDOTALeaveTeamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveTeamResponse> _instance;
} _CMsgDOTALeaveTeamResponse_default_instance_;
class CMsgDOTABetaParticipationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABetaParticipation> _instance;
} _CMsgDOTABetaParticipation_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgDOTATeamMemberSDO_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamMemberSDO_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamMemberSDO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamMemberSDO::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamMemberSDO_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamMemberSDO_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamAdminSDO_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamAdminSDO_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamAdminSDO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamAdminSDO::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamAdminSDO_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamAdminSDO_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamMember_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeam_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInfo_Member_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInfo_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInfo_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInfo_AuditEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInfo_AuditEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInfo_AuditEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto.base,
      &scc_info_CMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInfoRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamsInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamsInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamsInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTAMyTeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAMyTeamInfoRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAMyTeamInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAMyTeamInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAMyTeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAMyTeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTACreateTeam_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTACreateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTACreateTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTACreateTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTACreateTeamResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTACreateTeamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTACreateTeamResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACreateTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACreateTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAEditTeamDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAEditTeamDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAEditTeamDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAEditTeamDetailsResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAEditTeamDetailsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAEditTeamDetailsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAEditTeamDetailsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAEditTeamDetailsResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAEditTeamDetailsResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamProfileResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamProfileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamProfileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTAProTeamListRequest_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProTeamListRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProTeamListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProTeamListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProTeamListRequest_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProTeamListRequest_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAProTeamListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAProTeamListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAProTeamListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {
      &scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base,}};

static void InitDefaultsCMsgDOTATeamInvite_InviterToGC_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_InviterToGC_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_InviterToGC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_InviterToGC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_InviterToGC_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_InviterToGC_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGC_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_InviteeResponseToGC_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGC_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAKickTeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAKickTeamMember_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAKickTeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAKickTeamMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAKickTeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAKickTeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTAKickTeamMemberResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAKickTeamMemberResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAKickTeamMemberResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAKickTeamMemberResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAKickTeamMemberResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAKickTeamMemberResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATransferTeamAdmin_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATransferTeamAdmin_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATransferTeamAdmin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATransferTeamAdmin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATransferTeamAdmin_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATransferTeamAdmin_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTATransferTeamAdminResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATransferTeamAdminResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATransferTeamAdminResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATransferTeamAdminResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATransferTeamAdminResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATransferTeamAdminResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTALeaveTeam_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaveTeam_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaveTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaveTeam_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeaveTeam_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTALeaveTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaveTeamResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaveTeamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaveTeamResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaveTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeaveTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

static void InitDefaultsCMsgDOTABetaParticipation_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTABetaParticipation_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTABetaParticipation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTABetaParticipation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTABetaParticipation_dota_5fgcmessages_5fclient_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTABetaParticipation_dota_5fgcmessages_5fclient_5fteam_2eproto}, {}};

void InitDefaults_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamMemberSDO_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamAdminSDO_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAMyTeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACreateTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAEditTeamDetailsResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProTeamListRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_InviterToGC_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_InviteeResponseToGC_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAKickTeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAKickTeamMemberResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATransferTeamAdmin_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATransferTeamAdminResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaveTeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaveTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTABetaParticipation_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[6];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMemberSDO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMemberSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMemberSDO, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMemberSDO, team_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMemberSDO, profile_team_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamAdminSDO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamAdminSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamAdminSDO, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamAdminSDO, team_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamMember, time_joined_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, admin_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, disbanded_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, fullgamesplayed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, leagues_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, gamesplayed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, gamesplayedwithcurrentroster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, teammatchmakinggamesplayed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, lastplayedgametime_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, lastrenametime_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, recent_match_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, top_match_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeam, pickup_team_),
  ~0u,
  4,
  0,
  1,
  5,
  6,
  15,
  7,
  8,
  9,
  22,
  10,
  11,
  12,
  13,
  2,
  3,
  14,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  16,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_Member, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_Member, time_joined_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_Member, admin_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_AuditEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_AuditEntry, audit_action_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_AuditEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo_AuditEntry, account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, pro_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, pickup_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, ugc_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, ugc_base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, ugc_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, ugc_sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, games_played_total_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, games_played_matchmaking_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, dpc_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, registered_member_account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, audit_entries_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfo, region_),
  ~0u,
  4,
  0,
  1,
  5,
  7,
  8,
  6,
  10,
  11,
  12,
  2,
  3,
  9,
  13,
  14,
  15,
  16,
  17,
  18,
  ~0u,
  ~0u,
  19,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInfoRequest, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamsInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamsInfo, teams_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMyTeamInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAMyTeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeam, pickup_team_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeamResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateTeamResponse, team_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetails, in_use_by_party_),
  6,
  0,
  1,
  4,
  5,
  8,
  9,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditTeamDetailsResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamProfileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamProfileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamProfileResponse, team_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry, member_count_),
  2,
  0,
  3,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAProTeamListResponse, eresult_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviterToGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviterToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviterToGC, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviterToGC, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter, invitee_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter, required_badge_level_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, inviter_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee, logo_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter, invitee_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee, team_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMember, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMemberResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAKickTeamMemberResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdmin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdmin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdmin, new_admin_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdmin, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdminResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATransferTeamAdminResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeam, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveTeamResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABetaParticipation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABetaParticipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTABetaParticipation, access_rights_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::dota::CMsgDOTATeamMemberSDO)},
  { 11, 18, sizeof(::proto::dota::CMsgDOTATeamAdminSDO)},
  { 20, 27, sizeof(::proto::dota::CMsgDOTATeamMember)},
  { 29, 61, sizeof(::proto::dota::CMsgDOTATeam)},
  { 88, 96, sizeof(::proto::dota::CMsgDOTATeamInfo_Member)},
  { 99, 107, sizeof(::proto::dota::CMsgDOTATeamInfo_AuditEntry)},
  { 110, 138, sizeof(::proto::dota::CMsgDOTATeamInfo)},
  { 161, 167, sizeof(::proto::dota::CMsgDOTATeamInfoRequest)},
  { 168, 175, sizeof(::proto::dota::CMsgDOTATeamsInfo)},
  { 177, 182, sizeof(::proto::dota::CMsgDOTAMyTeamInfoRequest)},
  { 182, 196, sizeof(::proto::dota::CMsgDOTACreateTeam)},
  { 205, 212, sizeof(::proto::dota::CMsgDOTACreateTeamResponse)},
  { 214, 229, sizeof(::proto::dota::CMsgDOTAEditTeamDetails)},
  { 239, 245, sizeof(::proto::dota::CMsgDOTAEditTeamDetailsResponse)},
  { 246, 253, sizeof(::proto::dota::CMsgDOTATeamProfileResponse)},
  { 255, 260, sizeof(::proto::dota::CMsgDOTAProTeamListRequest)},
  { 260, 271, sizeof(::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry)},
  { 277, 284, sizeof(::proto::dota::CMsgDOTAProTeamListResponse)},
  { 286, 293, sizeof(::proto::dota::CMsgDOTATeamInvite_InviterToGC)},
  { 295, 303, sizeof(::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter)},
  { 306, 315, sizeof(::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee)},
  { 319, 325, sizeof(::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC)},
  { 326, 333, sizeof(::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter)},
  { 335, 342, sizeof(::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee)},
  { 344, 351, sizeof(::proto::dota::CMsgDOTAKickTeamMember)},
  { 353, 359, sizeof(::proto::dota::CMsgDOTAKickTeamMemberResponse)},
  { 360, 367, sizeof(::proto::dota::CMsgDOTATransferTeamAdmin)},
  { 369, 375, sizeof(::proto::dota::CMsgDOTATransferTeamAdminResponse)},
  { 376, 382, sizeof(::proto::dota::CMsgDOTALeaveTeam)},
  { 383, 389, sizeof(::proto::dota::CMsgDOTALeaveTeamResponse)},
  { 390, 396, sizeof(::proto::dota::CMsgDOTABetaParticipation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamMemberSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamAdminSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInfo_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInfo_AuditEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAMyTeamInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTACreateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTACreateTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAEditTeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAEditTeamDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamProfileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProTeamListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAProTeamListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_InviterToGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAKickTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAKickTeamMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATransferTeamAdmin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATransferTeamAdminResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaveTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTABetaParticipation_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5fteam_2eproto, "dota_gcmessages_client_team.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto, 31, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto[] =
  "\n!dota_gcmessages_client_team.proto\022\npro"
  "to.dota\032\027dota_shared_enums.proto\"V\n\025CMsg"
  "DOTATeamMemberSDO\022\022\n\naccount_id\030\001 \001(\r\022\020\n"
  "\010team_ids\030\002 \003(\r\022\027\n\017profile_team_id\030\003 \001(\r"
  "\"<\n\024CMsgDOTATeamAdminSDO\022\022\n\naccount_id\030\001"
  " \001(\r\022\020\n\010team_ids\030\002 \003(\r\"=\n\022CMsgDOTATeamMe"
  "mber\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013time_joined\030"
  "\004 \001(\r\"\351\004\n\014CMsgDOTATeam\022/\n\007members\030\001 \003(\0132"
  "\036.proto.dota.CMsgDOTATeamMember\022\017\n\007team_"
  "id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022\020\n\010a"
  "dmin_id\030\005 \001(\r\022\024\n\014time_created\030\006 \001(\r\022\021\n\td"
  "isbanded\030\007 \001(\010\022\014\n\004wins\030\010 \001(\r\022\016\n\006losses\030\t"
  " \001(\r\022\014\n\004rank\030\n \001(\r\022#\n\033calibration_games_"
  "remaining\030\030 \001(\r\022\014\n\004logo\030\013 \001(\004\022\021\n\tbase_lo"
  "go\030\014 \001(\004\022\023\n\013banner_logo\030\r \001(\004\022\024\n\014sponsor"
  "_logo\030\016 \001(\004\022\024\n\014country_code\030\017 \001(\t\022\013\n\003url"
  "\030\020 \001(\t\022\027\n\017fullgamesplayed\030\021 \001(\r\022\017\n\007leagu"
  "es\030\022 \003(\r\022\023\n\013gamesplayed\030\023 \001(\r\022$\n\034gamespl"
  "ayedwithcurrentroster\030\024 \001(\r\022\"\n\032teammatch"
  "makinggamesplayed\030\025 \001(\r\022\032\n\022lastplayedgam"
  "etime\030\026 \001(\r\022\026\n\016lastrenametime\030\027 \001(\r\022\030\n\020r"
  "ecent_match_ids\030\031 \003(\004\022\025\n\rtop_match_ids\030\032"
  " \003(\004\022\023\n\013pickup_team\030\033 \001(\010\"\202\006\n\020CMsgDOTATe"
  "amInfo\0224\n\007members\030\001 \003(\0132#.proto.dota.CMs"
  "gDOTATeamInfo.Member\022\017\n\007team_id\030\002 \001(\r\022\014\n"
  "\004name\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022\024\n\014time_created"
  "\030\005 \001(\r\022\013\n\003pro\030\006 \001(\010\022\023\n\013pickup_team\030\010 \001(\010"
  "\022\020\n\010ugc_logo\030\t \001(\004\022\025\n\rugc_base_logo\030\n \001("
  "\004\022\027\n\017ugc_banner_logo\030\013 \001(\004\022\030\n\020ugc_sponso"
  "r_logo\030\014 \001(\004\022\024\n\014country_code\030\r \001(\t\022\013\n\003ur"
  "l\030\016 \001(\t\022\014\n\004wins\030\017 \001(\r\022\016\n\006losses\030\020 \001(\r\022\014\n"
  "\004rank\030\021 \001(\r\022#\n\033calibration_games_remaini"
  "ng\030\022 \001(\r\022\032\n\022games_played_total\030\023 \001(\r\022 \n\030"
  "games_played_matchmaking\030\024 \001(\r\022\022\n\ndpc_po"
  "ints\030\034 \001(\r\022%\n\035registered_member_account_"
  "ids\030\036 \003(\r\022>\n\raudit_entries\030\037 \003(\0132\'.proto"
  ".dota.CMsgDOTATeamInfo.AuditEntry\022>\n\006reg"
  "ion\030\035 \001(\0162\031.proto.dota.ELeagueRegion:\023LE"
  "AGUE_REGION_UNSET\032@\n\006Member\022\022\n\naccount_i"
  "d\030\001 \001(\r\022\023\n\013time_joined\030\002 \001(\r\022\r\n\005admin\030\003 "
  "\001(\010\032I\n\nAuditEntry\022\024\n\014audit_action\030\001 \001(\r\022"
  "\021\n\ttimestamp\030\002 \001(\r\022\022\n\naccount_id\030\003 \001(\r\"G"
  "\n\027CMsgDOTATeamInfoRequest\022,\n\006result\030\001 \001("
  "\0132\034.proto.dota.CMsgDOTATeamInfo\"S\n\021CMsgD"
  "OTATeamsInfo\022\021\n\tleague_id\030\001 \001(\r\022+\n\005teams"
  "\030\002 \003(\0132\034.proto.dota.CMsgDOTATeamInfo\"\033\n\031"
  "CMsgDOTAMyTeamInfoRequest\"\263\001\n\022CMsgDOTACr"
  "eateTeam\022\014\n\004name\030\001 \001(\t\022\013\n\003tag\030\002 \001(\t\022\014\n\004l"
  "ogo\030\003 \001(\004\022\021\n\tbase_logo\030\004 \001(\004\022\023\n\013banner_l"
  "ogo\030\005 \001(\004\022\024\n\014sponsor_logo\030\006 \001(\004\022\024\n\014count"
  "ry_code\030\007 \001(\t\022\013\n\003url\030\010 \001(\t\022\023\n\013pickup_tea"
  "m\030\t \001(\010\"\242\004\n\032CMsgDOTACreateTeamResponse\022F"
  "\n\006result\030\001 \001(\0162-.proto.dota.CMsgDOTACrea"
  "teTeamResponse.Result:\007INVALID\022\017\n\007team_i"
  "d\030\002 \001(\r\"\252\003\n\006Result\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001"
  "\022\013\n\007SUCCESS\020\000\022\016\n\nNAME_EMPTY\020\001\022\027\n\023NAME_BA"
  "D_CHARACTERS\020\002\022\016\n\nNAME_TAKEN\020\003\022\021\n\rNAME_T"
  "OO_LONG\020\004\022\r\n\tTAG_EMPTY\020\005\022\026\n\022TAG_BAD_CHAR"
  "ACTERS\020\006\022\r\n\tTAG_TAKEN\020\007\022\020\n\014TAG_TOO_LONG\020"
  "\010\022\020\n\014CREATOR_BUSY\020\t\022\025\n\021UNSPECIFIED_ERROR"
  "\020\n\022\036\n\032CREATOR_TEAM_LIMIT_REACHED\020\013\022\013\n\007NO"
  "_LOGO\020\014\022\"\n\036CREATOR_TEAM_CREATION_COOLDOW"
  "N\020\r\022\026\n\022LOGO_UPLOAD_FAILED\020\016\022\035\n\031NAME_CHAN"
  "GED_TOO_RECENTLY\020\017\022\036\n\032CREATOR_INSUFFICIE"
  "NT_LEVEL\020\020\022\030\n\024INVALID_ACCOUNT_TYPE\020\021\"\315\001\n"
  "\027CMsgDOTAEditTeamDetails\022\017\n\007team_id\030\001 \001("
  "\r\022\014\n\004name\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022\014\n\004logo\030\004 \001"
  "(\004\022\021\n\tbase_logo\030\005 \001(\004\022\023\n\013banner_logo\030\006 \001"
  "(\004\022\024\n\014sponsor_logo\030\007 \001(\004\022\024\n\014country_code"
  "\030\010 \001(\t\022\013\n\003url\030\t \001(\t\022\027\n\017in_use_by_party\030\n"
  " \001(\010\"\370\001\n\037CMsgDOTAEditTeamDetailsResponse"
  "\022K\n\006result\030\001 \001(\01622.proto.dota.CMsgDOTAEd"
  "itTeamDetailsResponse.Result:\007SUCCESS\"\207\001"
  "\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID"
  "_ACCOUNT_TYPE\020\001\022\026\n\022FAILURE_NOT_MEMBER\020\002\022"
  "\027\n\023FAILURE_TEAM_LOCKED\020\003\022\035\n\031FAILURE_UNSP"
  "ECIFIED_ERROR\020\004\"V\n\033CMsgDOTATeamProfileRe"
  "sponse\022\017\n\007eresult\030\001 \001(\r\022&\n\004team\030\002 \001(\0132\030."
  "proto.dota.CMsgDOTATeam\"\034\n\032CMsgDOTAProTe"
  "amListRequest\"\353\001\n\033CMsgDOTAProTeamListRes"
  "ponse\022@\n\005teams\030\001 \003(\01321.proto.dota.CMsgDO"
  "TAProTeamListResponse.TeamEntry\022\017\n\007eresu"
  "lt\030\002 \001(\r\032y\n\tTeamEntry\022\017\n\007team_id\030\001 \001(\r\022\013"
  "\n\003tag\030\002 \001(\t\022\024\n\014time_created\030\003 \001(\r\022\014\n\004log"
  "o\030\004 \001(\004\022\024\n\014country_code\030\005 \001(\t\022\024\n\014member_"
  "count\030\006 \001(\r\"E\n\036CMsgDOTATeamInvite_Invite"
  "rToGC\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001"
  "(\r\"\251\001\n/CMsgDOTATeamInvite_GCImmediateRes"
  "ponseToInviter\022B\n\006result\030\001 \001(\0162\035.proto.d"
  "ota.ETeamInviteResult:\023TEAM_INVITE_SUCCE"
  "SS\022\024\n\014invitee_name\030\002 \001(\t\022\034\n\024required_bad"
  "ge_level\030\003 \001(\r\"v\n%CMsgDOTATeamInvite_GCR"
  "equestToInvitee\022\032\n\022inviter_account_id\030\001 "
  "\001(\r\022\021\n\tteam_name\030\002 \001(\t\022\020\n\010team_tag\030\003 \001(\t"
  "\022\014\n\004logo\030\004 \001(\004\"l\n&CMsgDOTATeamInvite_Inv"
  "iteeResponseToGC\022B\n\006result\030\001 \001(\0162\035.proto"
  ".dota.ETeamInviteResult:\023TEAM_INVITE_SUC"
  "CESS\"\202\001\n&CMsgDOTATeamInvite_GCResponseTo"
  "Inviter\022B\n\006result\030\001 \001(\0162\035.proto.dota.ETe"
  "amInviteResult:\023TEAM_INVITE_SUCCESS\022\024\n\014i"
  "nvitee_name\030\002 \001(\t\"\177\n&CMsgDOTATeamInvite_"
  "GCResponseToInvitee\022B\n\006result\030\001 \001(\0162\035.pr"
  "oto.dota.ETeamInviteResult:\023TEAM_INVITE_"
  "SUCCESS\022\021\n\tteam_name\030\002 \001(\t\"=\n\026CMsgDOTAKi"
  "ckTeamMember\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007team"
  "_id\030\002 \001(\r\"\233\002\n\036CMsgDOTAKickTeamMemberResp"
  "onse\022J\n\006result\030\001 \001(\01621.proto.dota.CMsgDO"
  "TAKickTeamMemberResponse.Result:\007SUCCESS"
  "\"\254\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVA"
  "LID_ACCOUNT_TYPE\020\001\022\034\n\030FAILURE_KICKER_NOT"
  "_ADMIN\020\002\022\035\n\031FAILURE_KICKEE_NOT_MEMBER\020\003\022"
  "\027\n\023FAILURE_TEAM_LOCKED\020\004\022\035\n\031FAILURE_UNSP"
  "ECIFIED_ERROR\020\005\"J\n\031CMsgDOTATransferTeamA"
  "dmin\022\034\n\024new_admin_account_id\030\001 \001(\r\022\017\n\007te"
  "am_id\030\002 \001(\r\"\224\002\n!CMsgDOTATransferTeamAdmi"
  "nResponse\022M\n\006result\030\001 \001(\01624.proto.dota.C"
  "MsgDOTATransferTeamAdminResponse.Result:"
  "\007SUCCESS\"\237\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAIL"
  "URE_INVALID_ACCOUNT_TYPE\020\001\022\025\n\021FAILURE_NO"
  "T_ADMIN\020\002\022\030\n\024FAILURE_SAME_ACCOUNT\020\003\022\026\n\022F"
  "AILURE_NOT_MEMBER\020\004\022\035\n\031FAILURE_UNSPECIFI"
  "ED_ERROR\020\005\"$\n\021CMsgDOTALeaveTeam\022\017\n\007team_"
  "id\030\001 \001(\r\"\311\001\n\031CMsgDOTALeaveTeamResponse\022E"
  "\n\006result\030\001 \001(\0162,.proto.dota.CMsgDOTALeav"
  "eTeamResponse.Result:\007SUCCESS\"e\n\006Result\022"
  "\013\n\007SUCCESS\020\000\022\026\n\022FAILURE_NOT_MEMBER\020\001\022\027\n\023"
  "FAILURE_TEAM_LOCKED\020\002\022\035\n\031FAILURE_UNSPECI"
  "FIED_ERROR\020\003\"2\n\031CMsgDOTABetaParticipatio"
  "n\022\025\n\raccess_rights\030\001 \001(\r*\332\004\n\021ETeamInvite"
  "Result\022\027\n\023TEAM_INVITE_SUCCESS\020\000\022\'\n#TEAM_"
  "INVITE_FAILURE_INVITE_REJECTED\020\001\022&\n\"TEAM"
  "_INVITE_FAILURE_INVITE_TIMEOUT\020\002\022*\n&TEAM"
  "_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT\020\003\022!\n\035"
  "TEAM_INVITE_ERROR_TEAM_LOCKED\020\004\022+\n\'TEAM_"
  "INVITE_ERROR_INVITEE_NOT_AVAILABLE\020\005\022\"\n\036"
  "TEAM_INVITE_ERROR_INVITEE_BUSY\020\006\022,\n(TEAM"
  "_INVITE_ERROR_INVITEE_ALREADY_MEMBER\020\007\022+"
  "\n\'TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMI"
  "T\020\010\0220\n,TEAM_INVITE_ERROR_INVITEE_INSUFFI"
  "CIENT_LEVEL\020\t\0222\n.TEAM_INVITE_ERROR_INVIT"
  "ER_INVALID_ACCOUNT_TYPE\020\n\022\'\n#TEAM_INVITE"
  "_ERROR_INVITER_NOT_ADMIN\020\013\022.\n*TEAM_INVIT"
  "E_ERROR_INCORRECT_USER_RESPONDED\020\014\022!\n\035TE"
  "AM_INVITE_ERROR_UNSPECIFIED\020\rB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5fteam_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto,
  "dota_gcmessages_client_team.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto, 5756,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5fteam_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5fteam_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[0];
}
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::SUCCESS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_BUSY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::UNSPECIFIED_ERROR;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_LIMIT_REACHED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NO_LOGO;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_CREATION_COOLDOWN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_CHANGED_TOO_RECENTLY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_INSUFFICIENT_LEVEL;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID_ACCOUNT_TYPE;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MIN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MAX;
const int CMsgDOTACreateTeamResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[1];
}
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::SUCCESS;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_NOT_MEMBER;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MIN;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MAX;
const int CMsgDOTAEditTeamDetailsResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[2];
}
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::SUCCESS;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKER_NOT_ADMIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKEE_NOT_MEMBER;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MAX;
const int CMsgDOTAKickTeamMemberResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[3];
}
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::SUCCESS;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_ADMIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_SAME_ACCOUNT;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_MEMBER;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MAX;
const int CMsgDOTATransferTeamAdminResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[4];
}
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::SUCCESS;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_NOT_MEMBER;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MIN;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MAX;
const int CMsgDOTALeaveTeamResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ETeamInviteResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[5];
}
bool ETeamInviteResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgDOTATeamMemberSDO::InitAsDefaultInstance() {
}
class CMsgDOTATeamMemberSDO::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTATeamMemberSDO* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_profile_team_id(CMsgDOTATeamMemberSDO* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamMemberSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamMemberSDO::kTeamIdsFieldNumber;
const int CMsgDOTATeamMemberSDO::kProfileTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamMemberSDO)
}
CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamMemberSDO)
}

void CMsgDOTATeamMemberSDO::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_team_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
}

CMsgDOTATeamMemberSDO::~CMsgDOTATeamMemberSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamMemberSDO)
  SharedDtor();
}

void CMsgDOTATeamMemberSDO::SharedDtor() {
}

void CMsgDOTATeamMemberSDO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamMemberSDO& CMsgDOTATeamMemberSDO::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamMemberSDO_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamMemberSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamMemberSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&profile_team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamMemberSDO::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamMemberSDO*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_team_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_team_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 profile_team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_profile_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamMemberSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamMemberSDO)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 profile_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_profile_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profile_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamMemberSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamMemberSDO)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamMemberSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamMemberSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // optional uint32 profile_team_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profile_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamMemberSDO)
}

::google::protobuf::uint8* CMsgDOTATeamMemberSDO::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamMemberSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  // optional uint32 profile_team_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profile_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamMemberSDO)
  return target;
}

size_t CMsgDOTATeamMemberSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamMemberSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 profile_team_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profile_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamMemberSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMemberSDO* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamMemberSDO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamMemberSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamMemberSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMemberSDO::MergeFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      profile_team_id_ = from.profile_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMemberSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMemberSDO::CopyFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMemberSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMemberSDO::Swap(CMsgDOTATeamMemberSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamMemberSDO::InternalSwap(CMsgDOTATeamMemberSDO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  swap(account_id_, other->account_id_);
  swap(profile_team_id_, other->profile_team_id_);
}

::google::protobuf::Metadata CMsgDOTATeamMemberSDO::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamAdminSDO::InitAsDefaultInstance() {
}
class CMsgDOTATeamAdminSDO::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTATeamAdminSDO* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamAdminSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamAdminSDO::kTeamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamAdminSDO)
}
CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamAdminSDO)
}

void CMsgDOTATeamAdminSDO::SharedCtor() {
  account_id_ = 0u;
}

CMsgDOTATeamAdminSDO::~CMsgDOTATeamAdminSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamAdminSDO)
  SharedDtor();
}

void CMsgDOTATeamAdminSDO::SharedDtor() {
}

void CMsgDOTATeamAdminSDO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamAdminSDO& CMsgDOTATeamAdminSDO::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamAdminSDO_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamAdminSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamAdminSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamAdminSDO::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamAdminSDO*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_team_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_team_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamAdminSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamAdminSDO)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamAdminSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamAdminSDO)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamAdminSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamAdminSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamAdminSDO)
}

::google::protobuf::uint8* CMsgDOTATeamAdminSDO::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamAdminSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamAdminSDO)
  return target;
}

size_t CMsgDOTATeamAdminSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamAdminSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamAdminSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamAdminSDO* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamAdminSDO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamAdminSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamAdminSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamAdminSDO::MergeFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTATeamAdminSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamAdminSDO::CopyFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamAdminSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamAdminSDO::Swap(CMsgDOTATeamAdminSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamAdminSDO::InternalSwap(CMsgDOTATeamAdminSDO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTATeamAdminSDO::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamMember::InitAsDefaultInstance() {
}
class CMsgDOTATeamMember::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTATeamMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_joined(CMsgDOTATeamMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamMember::kAccountIdFieldNumber;
const int CMsgDOTATeamMember::kTimeJoinedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamMember::CMsgDOTATeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamMember)
}
CMsgDOTATeamMember::CMsgDOTATeamMember(const CMsgDOTATeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_joined_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamMember)
}

void CMsgDOTATeamMember::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_joined_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
}

CMsgDOTATeamMember::~CMsgDOTATeamMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamMember)
  SharedDtor();
}

void CMsgDOTATeamMember::SharedDtor() {
}

void CMsgDOTATeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamMember& CMsgDOTATeamMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_joined_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_joined = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_joined(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_joined(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_joined(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamMember)
}

::google::protobuf::uint8* CMsgDOTATeamMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_joined(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamMember)
  return target;
}

size_t CMsgDOTATeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMember::MergeFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMember::CopyFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMember::Swap(CMsgDOTATeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamMember::InternalSwap(CMsgDOTATeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(time_joined_, other->time_joined_);
}

::google::protobuf::Metadata CMsgDOTATeamMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeam::InitAsDefaultInstance() {
}
class CMsgDOTATeam::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tag(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_admin_id(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_time_created(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_disbanded(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_wins(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_losses(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_rank(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_calibration_games_remaining(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_logo(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_base_logo(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_banner_logo(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_sponsor_logo(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_country_code(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_fullgamesplayed(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_gamesplayed(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_gamesplayedwithcurrentroster(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_teammatchmakinggamesplayed(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_lastplayedgametime(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_lastrenametime(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_pickup_team(CMsgDOTATeam* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeam::kMembersFieldNumber;
const int CMsgDOTATeam::kTeamIdFieldNumber;
const int CMsgDOTATeam::kNameFieldNumber;
const int CMsgDOTATeam::kTagFieldNumber;
const int CMsgDOTATeam::kAdminIdFieldNumber;
const int CMsgDOTATeam::kTimeCreatedFieldNumber;
const int CMsgDOTATeam::kDisbandedFieldNumber;
const int CMsgDOTATeam::kWinsFieldNumber;
const int CMsgDOTATeam::kLossesFieldNumber;
const int CMsgDOTATeam::kRankFieldNumber;
const int CMsgDOTATeam::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeam::kLogoFieldNumber;
const int CMsgDOTATeam::kBaseLogoFieldNumber;
const int CMsgDOTATeam::kBannerLogoFieldNumber;
const int CMsgDOTATeam::kSponsorLogoFieldNumber;
const int CMsgDOTATeam::kCountryCodeFieldNumber;
const int CMsgDOTATeam::kUrlFieldNumber;
const int CMsgDOTATeam::kFullgamesplayedFieldNumber;
const int CMsgDOTATeam::kLeaguesFieldNumber;
const int CMsgDOTATeam::kGamesplayedFieldNumber;
const int CMsgDOTATeam::kGamesplayedwithcurrentrosterFieldNumber;
const int CMsgDOTATeam::kTeammatchmakinggamesplayedFieldNumber;
const int CMsgDOTATeam::kLastplayedgametimeFieldNumber;
const int CMsgDOTATeam::kLastrenametimeFieldNumber;
const int CMsgDOTATeam::kRecentMatchIdsFieldNumber;
const int CMsgDOTATeam::kTopMatchIdsFieldNumber;
const int CMsgDOTATeam::kPickupTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeam::CMsgDOTATeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeam)
}
CMsgDOTATeam::CMsgDOTATeam(const CMsgDOTATeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      leagues_(from.leagues_),
      recent_match_ids_(from.recent_match_ids_),
      top_match_ids_(from.top_match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&calibration_games_remaining_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(calibration_games_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeam)
}

void CMsgDOTATeam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calibration_games_remaining_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(calibration_games_remaining_));
}

CMsgDOTATeam::~CMsgDOTATeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeam)
  SharedDtor();
}

void CMsgDOTATeam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeam& CMsgDOTATeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  leagues_.Clear();
  recent_match_ids_.Clear();
  top_match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wins_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(wins_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&losses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disbanded_) -
        reinterpret_cast<char*>(&losses_)) + sizeof(disbanded_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&pickup_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calibration_games_remaining_) -
        reinterpret_cast<char*>(&pickup_team_)) + sizeof(calibration_games_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTATeamMember members = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATeamMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeam.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeam.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 admin_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_admin_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_created = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool disbanded = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_disbanded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wins = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 logo = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 base_logo = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 banner_logo = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 sponsor_logo = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_sponsor_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeam.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeam.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 fullgamesplayed = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_fullgamesplayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 leagues = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) == 144) {
          do {
            msg->add_leagues(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 400 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_leagues();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 gamesplayed = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_gamesplayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gamesplayedwithcurrentroster = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_gamesplayedwithcurrentroster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teammatchmakinggamesplayed = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_teammatchmakinggamesplayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lastplayedgametime = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_lastplayedgametime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lastrenametime = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_lastrenametime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 calibration_games_remaining = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 recent_match_ids = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) == 200) {
          do {
            msg->add_recent_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 456 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_recent_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint64 top_match_ids = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) == 208) {
          do {
            msg->add_top_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 464 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_top_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool pickup_team = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_pickup_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTATeamMember members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 admin_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_admin_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disbanded = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_disbanded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disbanded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_sponsor_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fullgamesplayed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_fullgamesplayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullgamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 leagues = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_leagues())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leagues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gamesplayed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_gamesplayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gamesplayedwithcurrentroster = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_gamesplayedwithcurrentroster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayedwithcurrentroster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammatchmakinggamesplayed = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_teammatchmakinggamesplayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammatchmakinggamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lastplayedgametime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_lastplayedgametime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastplayedgametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lastrenametime = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_lastrenametime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrenametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 recent_match_ids = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 200u, input, this->mutable_recent_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recent_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 top_match_ids = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 208u, input, this->mutable_top_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_pickup_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->members(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 admin_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->admin_id(), output);
  }

  // optional uint32 time_created = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_created(), output);
  }

  // optional bool disbanded = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disbanded(), output);
  }

  // optional uint32 wins = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wins(), output);
  }

  // optional uint32 losses = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->losses(), output);
  }

  // optional uint32 rank = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint64 logo = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->logo(), output);
  }

  // optional uint64 base_logo = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->sponsor_logo(), output);
  }

  // optional string country_code = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->country_code(), output);
  }

  // optional string url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  // optional uint32 fullgamesplayed = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fullgamesplayed(), output);
  }

  // repeated uint32 leagues = 18;
  for (int i = 0, n = this->leagues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->leagues(i), output);
  }

  // optional uint32 gamesplayed = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->gamesplayed(), output);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->gamesplayedwithcurrentroster(), output);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->teammatchmakinggamesplayed(), output);
  }

  // optional uint32 lastplayedgametime = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->lastplayedgametime(), output);
  }

  // optional uint32 lastrenametime = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->lastrenametime(), output);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->calibration_games_remaining(), output);
  }

  // repeated uint64 recent_match_ids = 25;
  for (int i = 0, n = this->recent_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      25, this->recent_match_ids(i), output);
  }

  // repeated uint64 top_match_ids = 26;
  for (int i = 0, n = this->top_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      26, this->top_match_ids(i), output);
  }

  // optional bool pickup_team = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->pickup_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeam)
}

::google::protobuf::uint8* CMsgDOTATeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->members(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 admin_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->admin_id(), target);
  }

  // optional uint32 time_created = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_created(), target);
  }

  // optional bool disbanded = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disbanded(), target);
  }

  // optional uint32 wins = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wins(), target);
  }

  // optional uint32 losses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->losses(), target);
  }

  // optional uint32 rank = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint64 logo = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->logo(), target);
  }

  // optional uint64 base_logo = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->sponsor_logo(), target);
  }

  // optional string country_code = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->country_code(), target);
  }

  // optional string url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  // optional uint32 fullgamesplayed = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fullgamesplayed(), target);
  }

  // repeated uint32 leagues = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->leagues_, target);

  // optional uint32 gamesplayed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->gamesplayed(), target);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->gamesplayedwithcurrentroster(), target);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->teammatchmakinggamesplayed(), target);
  }

  // optional uint32 lastplayedgametime = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->lastplayedgametime(), target);
  }

  // optional uint32 lastrenametime = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->lastrenametime(), target);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->calibration_games_remaining(), target);
  }

  // repeated uint64 recent_match_ids = 25;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(25, this->recent_match_ids_, target);

  // repeated uint64 top_match_ids = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(26, this->top_match_ids_, target);

  // optional bool pickup_team = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->pickup_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeam)
  return target;
}

size_t CMsgDOTATeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated uint32 leagues = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->leagues_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->leagues_size());
    total_size += data_size;
  }

  // repeated uint64 recent_match_ids = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->recent_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->recent_match_ids_size());
    total_size += data_size;
  }

  // repeated uint64 top_match_ids = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->top_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->top_match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 admin_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

    // optional uint32 time_created = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 wins = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 losses = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 rank = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 logo = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

    // optional uint32 fullgamesplayed = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fullgamesplayed());
    }

    // optional bool disbanded = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool pickup_team = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 gamesplayed = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayed());
    }

    // optional uint32 gamesplayedwithcurrentroster = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayedwithcurrentroster());
    }

    // optional uint32 teammatchmakinggamesplayed = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammatchmakinggamesplayed());
    }

    // optional uint32 lastplayedgametime = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastplayedgametime());
    }

    // optional uint32 lastrenametime = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrenametime());
    }

    // optional uint32 calibration_games_remaining = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeam)
    MergeFrom(*source);
  }
}

void CMsgDOTATeam::MergeFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  leagues_.MergeFrom(from.leagues_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      admin_id_ = from.admin_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000080u) {
      wins_ = from.wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000200u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000400u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      fullgamesplayed_ = from.fullgamesplayed_;
    }
    if (cached_has_bits & 0x00008000u) {
      disbanded_ = from.disbanded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00020000u) {
      gamesplayed_ = from.gamesplayed_;
    }
    if (cached_has_bits & 0x00040000u) {
      gamesplayedwithcurrentroster_ = from.gamesplayedwithcurrentroster_;
    }
    if (cached_has_bits & 0x00080000u) {
      teammatchmakinggamesplayed_ = from.teammatchmakinggamesplayed_;
    }
    if (cached_has_bits & 0x00100000u) {
      lastplayedgametime_ = from.lastplayedgametime_;
    }
    if (cached_has_bits & 0x00200000u) {
      lastrenametime_ = from.lastrenametime_;
    }
    if (cached_has_bits & 0x00400000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeam::CopyFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeam::IsInitialized() const {
  return true;
}

void CMsgDOTATeam::Swap(CMsgDOTATeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeam::InternalSwap(CMsgDOTATeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  leagues_.InternalSwap(&other->leagues_);
  recent_match_ids_.InternalSwap(&other->recent_match_ids_);
  top_match_ids_.InternalSwap(&other->top_match_ids_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(admin_id_, other->admin_id_);
  swap(time_created_, other->time_created_);
  swap(wins_, other->wins_);
  swap(losses_, other->losses_);
  swap(rank_, other->rank_);
  swap(logo_, other->logo_);
  swap(base_logo_, other->base_logo_);
  swap(banner_logo_, other->banner_logo_);
  swap(sponsor_logo_, other->sponsor_logo_);
  swap(fullgamesplayed_, other->fullgamesplayed_);
  swap(disbanded_, other->disbanded_);
  swap(pickup_team_, other->pickup_team_);
  swap(gamesplayed_, other->gamesplayed_);
  swap(gamesplayedwithcurrentroster_, other->gamesplayedwithcurrentroster_);
  swap(teammatchmakinggamesplayed_, other->teammatchmakinggamesplayed_);
  swap(lastplayedgametime_, other->lastplayedgametime_);
  swap(lastrenametime_, other->lastrenametime_);
  swap(calibration_games_remaining_, other->calibration_games_remaining_);
}

::google::protobuf::Metadata CMsgDOTATeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInfo_Member::InitAsDefaultInstance() {
}
class CMsgDOTATeamInfo_Member::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTATeamInfo_Member* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_joined(CMsgDOTATeamInfo_Member* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_admin(CMsgDOTATeamInfo_Member* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfo_Member::kAccountIdFieldNumber;
const int CMsgDOTATeamInfo_Member::kTimeJoinedFieldNumber;
const int CMsgDOTATeamInfo_Member::kAdminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfo.Member)
}
CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfo.Member)
}

void CMsgDOTATeamInfo_Member::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(admin_));
}

CMsgDOTATeamInfo_Member::~CMsgDOTATeamInfo_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfo.Member)
  SharedDtor();
}

void CMsgDOTATeamInfo_Member::SharedDtor() {
}

void CMsgDOTATeamInfo_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInfo_Member& CMsgDOTATeamInfo_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInfo_Member_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInfo_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfo.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&admin_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(admin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInfo_Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInfo_Member*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_joined(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool admin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_admin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInfo_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfo.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_joined(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool admin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_admin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfo.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfo.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInfo_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfo.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->admin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfo.Member)
}

::google::protobuf::uint8* CMsgDOTATeamInfo_Member::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfo.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->admin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfo.Member)
  return target;
}

size_t CMsgDOTATeamInfo_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfo.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional bool admin = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_Member* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInfo_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfo.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfo.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_Member::MergeFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      admin_ = from.admin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_Member::CopyFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_Member::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_Member::Swap(CMsgDOTATeamInfo_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfo_Member::InternalSwap(CMsgDOTATeamInfo_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(time_joined_, other->time_joined_);
  swap(admin_, other->admin_);
}

::google::protobuf::Metadata CMsgDOTATeamInfo_Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInfo_AuditEntry::InitAsDefaultInstance() {
}
class CMsgDOTATeamInfo_AuditEntry::HasBitSetters {
 public:
  static void set_has_audit_action(CMsgDOTATeamInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgDOTATeamInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_account_id(CMsgDOTATeamInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfo_AuditEntry::kAuditActionFieldNumber;
const int CMsgDOTATeamInfo_AuditEntry::kTimestampFieldNumber;
const int CMsgDOTATeamInfo_AuditEntry::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfo.AuditEntry)
}
CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(const CMsgDOTATeamInfo_AuditEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&audit_action_, &from.audit_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfo.AuditEntry)
}

void CMsgDOTATeamInfo_AuditEntry::SharedCtor() {
  ::memset(&audit_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
}

CMsgDOTATeamInfo_AuditEntry::~CMsgDOTATeamInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  SharedDtor();
}

void CMsgDOTATeamInfo_AuditEntry::SharedDtor() {
}

void CMsgDOTATeamInfo_AuditEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInfo_AuditEntry& CMsgDOTATeamInfo_AuditEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInfo_AuditEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&audit_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInfo_AuditEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInfo_AuditEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 audit_action = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_audit_action(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInfo_AuditEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audit_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_audit_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audit_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInfo_AuditEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 audit_action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audit_action(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfo.AuditEntry)
}

::google::protobuf::uint8* CMsgDOTATeamInfo_AuditEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 audit_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audit_action(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  return target;
}

size_t CMsgDOTATeamInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 audit_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audit_action());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_AuditEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_AuditEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInfo_AuditEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfo.AuditEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfo.AuditEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_AuditEntry::MergeFrom(const CMsgDOTATeamInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      audit_action_ = from.audit_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_AuditEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_AuditEntry::CopyFrom(const CMsgDOTATeamInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_AuditEntry::Swap(CMsgDOTATeamInfo_AuditEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfo_AuditEntry::InternalSwap(CMsgDOTATeamInfo_AuditEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audit_action_, other->audit_action_);
  swap(timestamp_, other->timestamp_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTATeamInfo_AuditEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInfo::InitAsDefaultInstance() {
}
class CMsgDOTATeamInfo::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tag(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_created(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_pro(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_pickup_team(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_ugc_logo(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_ugc_base_logo(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_ugc_banner_logo(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_ugc_sponsor_logo(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_country_code(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_wins(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_losses(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_rank(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_calibration_games_remaining(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_games_played_total(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_games_played_matchmaking(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_dpc_points(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_region(CMsgDOTATeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfo::kMembersFieldNumber;
const int CMsgDOTATeamInfo::kTeamIdFieldNumber;
const int CMsgDOTATeamInfo::kNameFieldNumber;
const int CMsgDOTATeamInfo::kTagFieldNumber;
const int CMsgDOTATeamInfo::kTimeCreatedFieldNumber;
const int CMsgDOTATeamInfo::kProFieldNumber;
const int CMsgDOTATeamInfo::kPickupTeamFieldNumber;
const int CMsgDOTATeamInfo::kUgcLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBaseLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBannerLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcSponsorLogoFieldNumber;
const int CMsgDOTATeamInfo::kCountryCodeFieldNumber;
const int CMsgDOTATeamInfo::kUrlFieldNumber;
const int CMsgDOTATeamInfo::kWinsFieldNumber;
const int CMsgDOTATeamInfo::kLossesFieldNumber;
const int CMsgDOTATeamInfo::kRankFieldNumber;
const int CMsgDOTATeamInfo::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedTotalFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedMatchmakingFieldNumber;
const int CMsgDOTATeamInfo::kDpcPointsFieldNumber;
const int CMsgDOTATeamInfo::kRegisteredMemberAccountIdsFieldNumber;
const int CMsgDOTATeamInfo::kAuditEntriesFieldNumber;
const int CMsgDOTATeamInfo::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfo::CMsgDOTATeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfo)
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      registered_member_account_ids_(from.registered_member_account_ids_),
      audit_entries_(from.audit_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfo)
}

void CMsgDOTATeamInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(region_));
}

CMsgDOTATeamInfo::~CMsgDOTATeamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfo)
  SharedDtor();
}

void CMsgDOTATeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInfo& CMsgDOTATeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  registered_member_account_ids_.Clear();
  audit_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pro_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(pro_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&pickup_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calibration_games_remaining_) -
        reinterpret_cast<char*>(&pickup_team_)) + sizeof(calibration_games_remaining_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&games_played_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&games_played_total_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATeamInfo_Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInfo.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_created = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool pro = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_pro(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool pickup_team = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pickup_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugc_logo = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_ugc_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugc_base_logo = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_ugc_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugc_banner_logo = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_ugc_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugc_sponsor_logo = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_ugc_sponsor_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInfo.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInfo.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 wins = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 calibration_games_remaining = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_calibration_games_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 games_played_total = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_games_played_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 games_played_matchmaking = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_games_played_matchmaking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dpc_points = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_dpc_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueRegion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(29, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_region(static_cast<::proto::dota::ELeagueRegion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 registered_member_account_ids = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) == 240) {
          do {
            msg->add_registered_member_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 496 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_registered_member_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATeamInfo_AuditEntry::_InternalParse;
          object = msg->add_audit_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 506 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pro = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_pro(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_pickup_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_logo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_ugc_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_base_logo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_ugc_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_banner_logo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_ugc_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_sponsor_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_ugc_sponsor_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_calibration_games_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played_total = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_games_played_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played_matchmaking = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_games_played_matchmaking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_matchmaking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dpc_points = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_dpc_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dpc_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueRegion_IsValid(value)) {
            set_region(static_cast< ::proto::dota::ELeagueRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 registered_member_account_ids = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240u, input, this->mutable_registered_member_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_registered_member_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audit_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->members(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_created(), output);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pro(), output);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pickup_team(), output);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ugc_logo(), output);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ugc_base_logo(), output);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ugc_banner_logo(), output);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ugc_sponsor_logo(), output);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->country_code(), output);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->url(), output);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wins(), output);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->losses(), output);
  }

  // optional uint32 rank = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->rank(), output);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->calibration_games_remaining(), output);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->games_played_total(), output);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->games_played_matchmaking(), output);
  }

  // optional uint32 dpc_points = 28;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->dpc_points(), output);
  }

  // optional .proto.dota.ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->region(), output);
  }

  // repeated uint32 registered_member_account_ids = 30;
  for (int i = 0, n = this->registered_member_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->registered_member_account_ids(i), output);
  }

  // repeated .proto.dota.CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31,
      this->audit_entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfo)
}

::google::protobuf::uint8* CMsgDOTATeamInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->members(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_created(), target);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pro(), target);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pickup_team(), target);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ugc_logo(), target);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ugc_base_logo(), target);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ugc_banner_logo(), target);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ugc_sponsor_logo(), target);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->country_code(), target);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->url(), target);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wins(), target);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->losses(), target);
  }

  // optional uint32 rank = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->rank(), target);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->calibration_games_remaining(), target);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->games_played_total(), target);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->games_played_matchmaking(), target);
  }

  // optional uint32 dpc_points = 28;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->dpc_points(), target);
  }

  // optional .proto.dota.ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->region(), target);
  }

  // repeated uint32 registered_member_account_ids = 30;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(30, this->registered_member_account_ids_, target);

  // repeated .proto.dota.CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->audit_entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfo)
  return target;
}

size_t CMsgDOTATeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated uint32 registered_member_account_ids = 30;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->registered_member_account_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->registered_member_account_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->audit_entries_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audit_entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 time_created = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 ugc_logo = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_logo());
    }

    // optional bool pro = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool pickup_team = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 wins = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint64 ugc_base_logo = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_base_logo());
    }

    // optional uint64 ugc_banner_logo = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_banner_logo());
    }

    // optional uint64 ugc_sponsor_logo = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_sponsor_logo());
    }

    // optional uint32 losses = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 rank = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 calibration_games_remaining = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 games_played_total = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_total());
    }

    // optional uint32 games_played_matchmaking = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_matchmaking());
    }

    // optional uint32 dpc_points = 28;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dpc_points());
    }

    // optional .proto.dota.ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo::MergeFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  registered_member_account_ids_.MergeFrom(from.registered_member_account_ids_);
  audit_entries_.MergeFrom(from.audit_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000040u) {
      ugc_logo_ = from.ugc_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      pro_ = from.pro_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00000200u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000400u) {
      ugc_base_logo_ = from.ugc_base_logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      ugc_banner_logo_ = from.ugc_banner_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      ugc_sponsor_logo_ = from.ugc_sponsor_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00004000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00008000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      games_played_total_ = from.games_played_total_;
    }
    if (cached_has_bits & 0x00020000u) {
      games_played_matchmaking_ = from.games_played_matchmaking_;
    }
    if (cached_has_bits & 0x00040000u) {
      dpc_points_ = from.dpc_points_;
    }
    if (cached_has_bits & 0x00080000u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo::CopyFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo::Swap(CMsgDOTATeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfo::InternalSwap(CMsgDOTATeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  registered_member_account_ids_.InternalSwap(&other->registered_member_account_ids_);
  CastToBase(&audit_entries_)->InternalSwap(CastToBase(&other->audit_entries_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(time_created_, other->time_created_);
  swap(ugc_logo_, other->ugc_logo_);
  swap(pro_, other->pro_);
  swap(pickup_team_, other->pickup_team_);
  swap(wins_, other->wins_);
  swap(ugc_base_logo_, other->ugc_base_logo_);
  swap(ugc_banner_logo_, other->ugc_banner_logo_);
  swap(ugc_sponsor_logo_, other->ugc_sponsor_logo_);
  swap(losses_, other->losses_);
  swap(rank_, other->rank_);
  swap(calibration_games_remaining_, other->calibration_games_remaining_);
  swap(games_played_total_, other->games_played_total_);
  swap(games_played_matchmaking_, other->games_played_matchmaking_);
  swap(dpc_points_, other->dpc_points_);
  swap(region_, other->region_);
}

::google::protobuf::Metadata CMsgDOTATeamInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInfoRequest::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTATeamInfoRequest_default_instance_._instance.get_mutable()->result_ = const_cast< ::proto::dota::CMsgDOTATeamInfo*>(
      ::proto::dota::CMsgDOTATeamInfo::internal_default_instance());
}
class CMsgDOTATeamInfoRequest::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTATeamInfo& result(const CMsgDOTATeamInfoRequest* msg);
  static void set_has_result(CMsgDOTATeamInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTATeamInfo&
CMsgDOTATeamInfoRequest::HasBitSetters::result(const CMsgDOTATeamInfoRequest* msg) {
  return *msg->result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfoRequest::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfoRequest::CMsgDOTATeamInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfoRequest)
}
CMsgDOTATeamInfoRequest::CMsgDOTATeamInfoRequest(const CMsgDOTATeamInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::proto::dota::CMsgDOTATeamInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfoRequest)
}

void CMsgDOTATeamInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  result_ = nullptr;
}

CMsgDOTATeamInfoRequest::~CMsgDOTATeamInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfoRequest)
  SharedDtor();
}

void CMsgDOTATeamInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void CMsgDOTATeamInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInfoRequest& CMsgDOTATeamInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTATeamInfo result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTATeamInfo::_InternalParse;
        object = msg->mutable_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTATeamInfo result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATeamInfo result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfoRequest)
}

::google::protobuf::uint8* CMsgDOTATeamInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATeamInfo result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfoRequest)
  return target;
}

size_t CMsgDOTATeamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTATeamInfo result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfoRequest::MergeFrom(const CMsgDOTATeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::proto::dota::CMsgDOTATeamInfo::MergeFrom(from.result());
  }
}

void CMsgDOTATeamInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfoRequest::CopyFrom(const CMsgDOTATeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfoRequest::Swap(CMsgDOTATeamInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfoRequest::InternalSwap(CMsgDOTATeamInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATeamInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamsInfo::InitAsDefaultInstance() {
}
class CMsgDOTATeamsInfo::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTATeamsInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamsInfo::kLeagueIdFieldNumber;
const int CMsgDOTATeamsInfo::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamsInfo)
}
CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamsInfo)
}

void CMsgDOTATeamsInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  league_id_ = 0u;
}

CMsgDOTATeamsInfo::~CMsgDOTATeamsInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamsInfo)
  SharedDtor();
}

void CMsgDOTATeamsInfo::SharedDtor() {
}

void CMsgDOTATeamsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamsInfo& CMsgDOTATeamsInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamsInfo_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamsInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamsInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATeamInfo::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamsInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamsInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->teams(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamsInfo)
}

::google::protobuf::uint8* CMsgDOTATeamsInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->teams(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamsInfo)
  return target;
}

size_t CMsgDOTATeamsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamsInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamsInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamsInfo::MergeFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_league_id()) {
    set_league_id(from.league_id());
  }
}

void CMsgDOTATeamsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamsInfo::CopyFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamsInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamsInfo::Swap(CMsgDOTATeamsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamsInfo::InternalSwap(CMsgDOTATeamsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  swap(league_id_, other->league_id_);
}

::google::protobuf::Metadata CMsgDOTATeamsInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAMyTeamInfoRequest::InitAsDefaultInstance() {
}
class CMsgDOTAMyTeamInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
}
CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
}

void CMsgDOTAMyTeamInfoRequest::SharedCtor() {
}

CMsgDOTAMyTeamInfoRequest::~CMsgDOTAMyTeamInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
  SharedDtor();
}

void CMsgDOTAMyTeamInfoRequest::SharedDtor() {
}

void CMsgDOTAMyTeamInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAMyTeamInfoRequest& CMsgDOTAMyTeamInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAMyTeamInfoRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAMyTeamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAMyTeamInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAMyTeamInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAMyTeamInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAMyTeamInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMyTeamInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAMyTeamInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return target;
}

size_t CMsgDOTAMyTeamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMyTeamInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAMyTeamInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMyTeamInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMyTeamInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMyTeamInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAMyTeamInfoRequest::Swap(CMsgDOTAMyTeamInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMyTeamInfoRequest::InternalSwap(CMsgDOTAMyTeamInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgDOTAMyTeamInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACreateTeam::InitAsDefaultInstance() {
}
class CMsgDOTACreateTeam::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tag(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logo(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_base_logo(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_banner_logo(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_sponsor_logo(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_country_code(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_pickup_team(CMsgDOTACreateTeam* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateTeam::kNameFieldNumber;
const int CMsgDOTACreateTeam::kTagFieldNumber;
const int CMsgDOTACreateTeam::kLogoFieldNumber;
const int CMsgDOTACreateTeam::kBaseLogoFieldNumber;
const int CMsgDOTACreateTeam::kBannerLogoFieldNumber;
const int CMsgDOTACreateTeam::kSponsorLogoFieldNumber;
const int CMsgDOTACreateTeam::kCountryCodeFieldNumber;
const int CMsgDOTACreateTeam::kUrlFieldNumber;
const int CMsgDOTACreateTeam::kPickupTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateTeam::CMsgDOTACreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateTeam)
}
CMsgDOTACreateTeam::CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(pickup_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateTeam)
}

void CMsgDOTACreateTeam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickup_team_) -
      reinterpret_cast<char*>(&logo_)) + sizeof(pickup_team_));
}

CMsgDOTACreateTeam::~CMsgDOTACreateTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateTeam)
  SharedDtor();
}

void CMsgDOTACreateTeam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTACreateTeam& CMsgDOTACreateTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTACreateTeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTACreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sponsor_logo_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(sponsor_logo_));
  }
  pickup_team_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTACreateTeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTACreateTeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTACreateTeam.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string tag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTACreateTeam.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 logo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 base_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 banner_logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 sponsor_logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_sponsor_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTACreateTeam.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTACreateTeam.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool pickup_team = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_pickup_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTACreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_sponsor_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_pickup_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTACreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logo(), output);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sponsor_logo(), output);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_code(), output);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->pickup_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateTeam)
}

::google::protobuf::uint8* CMsgDOTACreateTeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sponsor_logo(), target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->pickup_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateTeam)
  return target;
}

size_t CMsgDOTACreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 logo = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

  }
  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTACreateTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeam::MergeFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_pickup_team(from.pickup_team());
  }
}

void CMsgDOTACreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeam::CopyFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeam::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeam::Swap(CMsgDOTACreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateTeam::InternalSwap(CMsgDOTACreateTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logo_, other->logo_);
  swap(base_logo_, other->base_logo_);
  swap(banner_logo_, other->banner_logo_);
  swap(sponsor_logo_, other->sponsor_logo_);
  swap(pickup_team_, other->pickup_team_);
}

::google::protobuf::Metadata CMsgDOTACreateTeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACreateTeamResponse::InitAsDefaultInstance() {
}
class CMsgDOTACreateTeamResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTACreateTeamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_id(CMsgDOTACreateTeamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateTeamResponse::kResultFieldNumber;
const int CMsgDOTACreateTeamResponse::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateTeamResponse)
}
CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateTeamResponse)
}

void CMsgDOTACreateTeamResponse::SharedCtor() {
  team_id_ = 0u;
  result_ = -1;
}

CMsgDOTACreateTeamResponse::~CMsgDOTACreateTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateTeamResponse)
  SharedDtor();
}

void CMsgDOTACreateTeamResponse::SharedDtor() {
}

void CMsgDOTACreateTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTACreateTeamResponse& CMsgDOTACreateTeamResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTACreateTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTACreateTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    team_id_ = 0u;
    result_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTACreateTeamResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTACreateTeamResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTACreateTeamResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTACreateTeamResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTACreateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateTeamResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTACreateTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTACreateTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateTeamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTACreateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateTeamResponse)
}

::google::protobuf::uint8* CMsgDOTACreateTeamResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateTeamResponse)
  return target;
}

size_t CMsgDOTACreateTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeamResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTACreateTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeamResponse::MergeFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeamResponse::CopyFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeamResponse::Swap(CMsgDOTACreateTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateTeamResponse::InternalSwap(CMsgDOTACreateTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTACreateTeamResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAEditTeamDetails::InitAsDefaultInstance() {
}
class CMsgDOTAEditTeamDetails::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_name(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tag(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logo(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_base_logo(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_banner_logo(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_sponsor_logo(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_country_code(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_in_use_by_party(CMsgDOTAEditTeamDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditTeamDetails::kTeamIdFieldNumber;
const int CMsgDOTAEditTeamDetails::kNameFieldNumber;
const int CMsgDOTAEditTeamDetails::kTagFieldNumber;
const int CMsgDOTAEditTeamDetails::kLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBaseLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBannerLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kSponsorLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kCountryCodeFieldNumber;
const int CMsgDOTAEditTeamDetails::kUrlFieldNumber;
const int CMsgDOTAEditTeamDetails::kInUseByPartyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditTeamDetails)
}
CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&sponsor_logo_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(sponsor_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditTeamDetails)
}

void CMsgDOTAEditTeamDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sponsor_logo_) -
      reinterpret_cast<char*>(&logo_)) + sizeof(sponsor_logo_));
}

CMsgDOTAEditTeamDetails::~CMsgDOTAEditTeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditTeamDetails)
  SharedDtor();
}

void CMsgDOTAEditTeamDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditTeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAEditTeamDetails& CMsgDOTAEditTeamDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAEditTeamDetails_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAEditTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_use_by_party_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(in_use_by_party_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&banner_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sponsor_logo_) -
        reinterpret_cast<char*>(&banner_logo_)) + sizeof(sponsor_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAEditTeamDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAEditTeamDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAEditTeamDetails.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAEditTeamDetails.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 base_logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 banner_logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_banner_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 sponsor_logo = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_sponsor_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAEditTeamDetails.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAEditTeamDetails.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool in_use_by_party = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_in_use_by_party(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAEditTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditTeamDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_banner_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_sponsor_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_use_by_party = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_in_use_by_party(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_by_party_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditTeamDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAEditTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sponsor_logo(), output);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country_code(), output);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->in_use_by_party(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditTeamDetails)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sponsor_logo(), target);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country_code(), target);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->in_use_by_party(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditTeamDetails)
  return target;
}

size_t CMsgDOTAEditTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditTeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool in_use_by_party = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 banner_logo = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAEditTeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditTeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditTeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetails::MergeFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_use_by_party_ = from.in_use_by_party_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetails::CopyFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetails::Swap(CMsgDOTAEditTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditTeamDetails::InternalSwap(CMsgDOTAEditTeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logo_, other->logo_);
  swap(base_logo_, other->base_logo_);
  swap(team_id_, other->team_id_);
  swap(in_use_by_party_, other->in_use_by_party_);
  swap(banner_logo_, other->banner_logo_);
  swap(sponsor_logo_, other->sponsor_logo_);
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAEditTeamDetailsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAEditTeamDetailsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAEditTeamDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditTeamDetailsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}
CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}

void CMsgDOTAEditTeamDetailsResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAEditTeamDetailsResponse::~CMsgDOTAEditTeamDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  SharedDtor();
}

void CMsgDOTAEditTeamDetailsResponse::SharedDtor() {
}

void CMsgDOTAEditTeamDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAEditTeamDetailsResponse& CMsgDOTAEditTeamDetailsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAEditTeamDetailsResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAEditTeamDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAEditTeamDetailsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAEditTeamDetailsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAEditTeamDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAEditTeamDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetailsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return target;
}

size_t CMsgDOTAEditTeamDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetailsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAEditTeamDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditTeamDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditTeamDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetailsResponse::Swap(CMsgDOTAEditTeamDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditTeamDetailsResponse::InternalSwap(CMsgDOTAEditTeamDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetailsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamProfileResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTATeamProfileResponse_default_instance_._instance.get_mutable()->team_ = const_cast< ::proto::dota::CMsgDOTATeam*>(
      ::proto::dota::CMsgDOTATeam::internal_default_instance());
}
class CMsgDOTATeamProfileResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgDOTATeamProfileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTATeam& team(const CMsgDOTATeamProfileResponse* msg);
  static void set_has_team(CMsgDOTATeamProfileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTATeam&
CMsgDOTATeamProfileResponse::HasBitSetters::team(const CMsgDOTATeamProfileResponse* msg) {
  return *msg->team_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamProfileResponse::kEresultFieldNumber;
const int CMsgDOTATeamProfileResponse::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamProfileResponse)
}
CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::proto::dota::CMsgDOTATeam(*from.team_);
  } else {
    team_ = nullptr;
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamProfileResponse)
}

void CMsgDOTATeamProfileResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eresult_) -
      reinterpret_cast<char*>(&team_)) + sizeof(eresult_));
}

CMsgDOTATeamProfileResponse::~CMsgDOTATeamProfileResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamProfileResponse)
  SharedDtor();
}

void CMsgDOTATeamProfileResponse::SharedDtor() {
  if (this != internal_default_instance()) delete team_;
}

void CMsgDOTATeamProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamProfileResponse& CMsgDOTATeamProfileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamProfileResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != nullptr);
    team_->Clear();
  }
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamProfileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamProfileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTATeam team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTATeam::_InternalParse;
        object = msg->mutable_team();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamProfileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTATeam team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamProfileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamProfileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional .proto.dota.CMsgDOTATeam team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::team(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamProfileResponse)
}

::google::protobuf::uint8* CMsgDOTATeamProfileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional .proto.dota.CMsgDOTATeam team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::team(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamProfileResponse)
  return target;
}

size_t CMsgDOTATeamProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamProfileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTATeam team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_);
    }

    // optional uint32 eresult = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamProfileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamProfileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamProfileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamProfileResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamProfileResponse::MergeFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team()->::proto::dota::CMsgDOTATeam::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamProfileResponse::CopyFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamProfileResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATeamProfileResponse::Swap(CMsgDOTATeamProfileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamProfileResponse::InternalSwap(CMsgDOTATeamProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgDOTATeamProfileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProTeamListRequest::InitAsDefaultInstance() {
}
class CMsgDOTAProTeamListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListRequest)
}
CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListRequest)
}

void CMsgDOTAProTeamListRequest::SharedCtor() {
}

CMsgDOTAProTeamListRequest::~CMsgDOTAProTeamListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListRequest)
  SharedDtor();
}

void CMsgDOTAProTeamListRequest::SharedDtor() {
}

void CMsgDOTAProTeamListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProTeamListRequest& CMsgDOTAProTeamListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProTeamListRequest_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProTeamListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProTeamListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProTeamListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProTeamListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProTeamListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListRequest)
}

::google::protobuf::uint8* CMsgDOTAProTeamListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListRequest)
  return target;
}

size_t CMsgDOTAProTeamListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProTeamListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListRequest::MergeFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAProTeamListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListRequest::CopyFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListRequest::Swap(CMsgDOTAProTeamListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListRequest::InternalSwap(CMsgDOTAProTeamListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgDOTAProTeamListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProTeamListResponse_TeamEntry::InitAsDefaultInstance() {
}
class CMsgDOTAProTeamListResponse_TeamEntry::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tag(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_created(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_logo(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_country_code(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_member_count(CMsgDOTAProTeamListResponse_TeamEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProTeamListResponse_TeamEntry::kTeamIdFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTagFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTimeCreatedFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kLogoFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kCountryCodeFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kMemberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}
CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
}

CMsgDOTAProTeamListResponse_TeamEntry::~CMsgDOTAProTeamListResponse_TeamEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProTeamListResponse_TeamEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse_TeamEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProTeamListResponse_TeamEntry_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProTeamListResponse_TeamEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProTeamListResponse_TeamEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProTeamListResponse_TeamEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string tag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string country_code = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 member_count = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_member_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProTeamListResponse_TeamEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_member_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProTeamListResponse_TeamEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional string country_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->country_code(), output);
  }

  // optional uint32 member_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->member_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse_TeamEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional string country_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->country_code(), target);
  }

  // optional uint32 member_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->member_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return target;
}

size_t CMsgDOTAProTeamListResponse_TeamEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 time_created = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 member_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse_TeamEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProTeamListResponse_TeamEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse_TeamEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse_TeamEntry::Swap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListResponse_TeamEntry::InternalSwap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(time_created_, other->time_created_);
  swap(logo_, other->logo_);
  swap(member_count_, other->member_count_);
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse_TeamEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAProTeamListResponse::InitAsDefaultInstance() {
}
class CMsgDOTAProTeamListResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgDOTAProTeamListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProTeamListResponse::kTeamsFieldNumber;
const int CMsgDOTAProTeamListResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListResponse)
}
CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListResponse)
}

void CMsgDOTAProTeamListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  eresult_ = 0u;
}

CMsgDOTAProTeamListResponse::~CMsgDOTAProTeamListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListResponse)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse::SharedDtor() {
}

void CMsgDOTAProTeamListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAProTeamListResponse& CMsgDOTAProTeamListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAProTeamListResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAProTeamListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAProTeamListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAProTeamListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 eresult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAProTeamListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAProTeamListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->teams(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListResponse)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->teams(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListResponse)
  return target;
}

size_t CMsgDOTAProTeamListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // optional uint32 eresult = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAProTeamListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse::MergeFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgDOTAProTeamListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse::CopyFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse::Swap(CMsgDOTAProTeamListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListResponse::InternalSwap(CMsgDOTAProTeamListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_InviterToGC::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_InviterToGC::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTATeamInvite_InviterToGC* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CMsgDOTATeamInvite_InviterToGC* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_InviterToGC::kAccountIdFieldNumber;
const int CMsgDOTATeamInvite_InviterToGC::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}
CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}

void CMsgDOTATeamInvite_InviterToGC::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTATeamInvite_InviterToGC::~CMsgDOTATeamInvite_InviterToGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviterToGC::SharedDtor() {
}

void CMsgDOTATeamInvite_InviterToGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_InviterToGC& CMsgDOTATeamInvite_InviterToGC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_InviterToGC_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_InviterToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_InviterToGC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_InviterToGC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_InviterToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_InviterToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviterToGC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviterToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviterToGC* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_InviterToGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_InviterToGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_InviterToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviterToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviterToGC::Swap(CMsgDOTATeamInvite_InviterToGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_InviterToGC::InternalSwap(CMsgDOTATeamInvite_InviterToGC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviterToGC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_GCImmediateResponseToInviter::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATeamInvite_GCImmediateResponseToInviter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_invitee_name(CMsgDOTATeamInvite_GCImmediateResponseToInviter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_required_badge_level(CMsgDOTATeamInvite_GCImmediateResponseToInviter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kInviteeNameFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kRequiredBadgeLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}
CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_badge_level_) -
    reinterpret_cast<char*>(&result_)) + sizeof(required_badge_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_badge_level_) -
      reinterpret_cast<char*>(&result_)) + sizeof(required_badge_level_));
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::~CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedDtor() {
  invitee_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_GCImmediateResponseToInviter& CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_GCImmediateResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitee_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_badge_level_) -
        reinterpret_cast<char*>(&result_)) + sizeof(required_badge_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_GCImmediateResponseToInviter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETeamInviteResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::ETeamInviteResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string invitee_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
        object = msg->mutable_invitee_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 required_badge_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_required_badge_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_badge_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_required_badge_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  // optional uint32 required_badge_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_badge_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  // optional uint32 required_badge_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_badge_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCImmediateResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 required_badge_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_badge_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCImmediateResponseToInviter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_GCImmediateResponseToInviter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_badge_level_ = from.required_badge_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitee_name_.Swap(&other->invitee_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(required_badge_level_, other->required_badge_level_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_GCRequestToInvitee::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_GCRequestToInvitee::HasBitSetters {
 public:
  static void set_has_inviter_account_id(CMsgDOTATeamInvite_GCRequestToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_name(CMsgDOTATeamInvite_GCRequestToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_tag(CMsgDOTATeamInvite_GCRequestToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logo(CMsgDOTATeamInvite_GCRequestToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCRequestToInvitee::kInviterAccountIdFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamNameFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamTagFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}
CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviter_account_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviter_account_id_) -
      reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
}

CMsgDOTATeamInvite_GCRequestToInvitee::~CMsgDOTATeamInvite_GCRequestToInvitee() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_GCRequestToInvitee& CMsgDOTATeamInvite_GCRequestToInvitee::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_GCRequestToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_GCRequestToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inviter_account_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_GCRequestToInvitee::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_GCRequestToInvitee*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 inviter_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_inviter_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_GCRequestToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inviter_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_inviter_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviter_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_GCRequestToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviter_account_id(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCRequestToInvitee::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviter_account_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCRequestToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 inviter_account_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviter_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCRequestToInvitee* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_GCRequestToInvitee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      inviter_account_id_ = from.inviter_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Swap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCRequestToInvitee::InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logo_, other->logo_);
  swap(inviter_account_id_, other->inviter_account_id_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCRequestToInvitee::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_InviteeResponseToGC::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_InviteeResponseToGC::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATeamInvite_InviteeResponseToGC* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_InviteeResponseToGC::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}
CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedCtor() {
  result_ = 0;
}

CMsgDOTATeamInvite_InviteeResponseToGC::~CMsgDOTATeamInvite_InviteeResponseToGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedDtor() {
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_InviteeResponseToGC& CMsgDOTATeamInvite_InviteeResponseToGC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_InviteeResponseToGC_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_InviteeResponseToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_InviteeResponseToGC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_InviteeResponseToGC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETeamInviteResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::ETeamInviteResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_InviteeResponseToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_InviteeResponseToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviteeResponseToGC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviteeResponseToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviteeResponseToGC* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_InviteeResponseToGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Swap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_InviteeResponseToGC::InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviteeResponseToGC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_GCResponseToInviter::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_GCResponseToInviter::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATeamInvite_GCResponseToInviter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_invitee_name(CMsgDOTATeamInvite_GCResponseToInviter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInviter::kInviteeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}
CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInviter::~CMsgDOTATeamInvite_GCResponseToInviter() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedDtor() {
  invitee_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInviter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_GCResponseToInviter& CMsgDOTATeamInvite_GCResponseToInviter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_GCResponseToInviter_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_GCResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitee_name_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_GCResponseToInviter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_GCResponseToInviter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETeamInviteResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::ETeamInviteResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string invitee_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
        object = msg->mutable_invitee_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_GCResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_GCResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInviter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), static_cast<int>(this->invitee_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInviter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_GCResponseToInviter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInviter::Swap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitee_name_.Swap(&other->invitee_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInviter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATeamInvite_GCResponseToInvitee::InitAsDefaultInstance() {
}
class CMsgDOTATeamInvite_GCResponseToInvitee::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATeamInvite_GCResponseToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_name(CMsgDOTATeamInvite_GCResponseToInvitee* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCResponseToInvitee::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInvitee::kTeamNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}
CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInvitee::~CMsgDOTATeamInvite_GCResponseToInvitee() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATeamInvite_GCResponseToInvitee& CMsgDOTATeamInvite_GCResponseToInvitee::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATeamInvite_GCResponseToInvitee_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATeamInvite_GCResponseToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATeamInvite_GCResponseToInvitee::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATeamInvite_GCResponseToInvitee*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETeamInviteResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::ETeamInviteResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATeamInvite_GCResponseToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATeamInvite_GCResponseToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInvitee::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInvitee* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATeamInvite_GCResponseToInvitee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Swap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCResponseToInvitee::InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInvitee::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAKickTeamMember::InitAsDefaultInstance() {
}
class CMsgDOTAKickTeamMember::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAKickTeamMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CMsgDOTAKickTeamMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAKickTeamMember::kAccountIdFieldNumber;
const int CMsgDOTAKickTeamMember::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAKickTeamMember)
}
CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAKickTeamMember)
}

void CMsgDOTAKickTeamMember::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTAKickTeamMember::~CMsgDOTAKickTeamMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAKickTeamMember)
  SharedDtor();
}

void CMsgDOTAKickTeamMember::SharedDtor() {
}

void CMsgDOTAKickTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAKickTeamMember& CMsgDOTAKickTeamMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAKickTeamMember_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAKickTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAKickTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAKickTeamMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAKickTeamMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAKickTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAKickTeamMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAKickTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAKickTeamMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAKickTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAKickTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAKickTeamMember)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAKickTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAKickTeamMember)
  return target;
}

size_t CMsgDOTAKickTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAKickTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAKickTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAKickTeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAKickTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAKickTeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMember::MergeFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAKickTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMember::CopyFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMember::Swap(CMsgDOTAKickTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAKickTeamMember::InternalSwap(CMsgDOTAKickTeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTAKickTeamMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAKickTeamMemberResponse::InitAsDefaultInstance() {
}
class CMsgDOTAKickTeamMemberResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAKickTeamMemberResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAKickTeamMemberResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
}
CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
}

void CMsgDOTAKickTeamMemberResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAKickTeamMemberResponse::~CMsgDOTAKickTeamMemberResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
  SharedDtor();
}

void CMsgDOTAKickTeamMemberResponse::SharedDtor() {
}

void CMsgDOTAKickTeamMemberResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAKickTeamMemberResponse& CMsgDOTAKickTeamMemberResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAKickTeamMemberResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAKickTeamMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAKickTeamMemberResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAKickTeamMemberResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAKickTeamMemberResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAKickTeamMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAKickTeamMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAKickTeamMemberResponse)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMemberResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return target;
}

size_t CMsgDOTAKickTeamMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMemberResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAKickTeamMemberResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAKickTeamMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAKickTeamMemberResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMemberResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMemberResponse::Swap(CMsgDOTAKickTeamMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAKickTeamMemberResponse::InternalSwap(CMsgDOTAKickTeamMemberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAKickTeamMemberResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATransferTeamAdmin::InitAsDefaultInstance() {
}
class CMsgDOTATransferTeamAdmin::HasBitSetters {
 public:
  static void set_has_new_admin_account_id(CMsgDOTATransferTeamAdmin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CMsgDOTATransferTeamAdmin* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATransferTeamAdmin::kNewAdminAccountIdFieldNumber;
const int CMsgDOTATransferTeamAdmin::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATransferTeamAdmin)
}
CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_admin_account_id_, &from.new_admin_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATransferTeamAdmin)
}

void CMsgDOTATransferTeamAdmin::SharedCtor() {
  ::memset(&new_admin_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
}

CMsgDOTATransferTeamAdmin::~CMsgDOTATransferTeamAdmin() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATransferTeamAdmin)
  SharedDtor();
}

void CMsgDOTATransferTeamAdmin::SharedDtor() {
}

void CMsgDOTATransferTeamAdmin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATransferTeamAdmin& CMsgDOTATransferTeamAdmin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATransferTeamAdmin_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATransferTeamAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATransferTeamAdmin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_admin_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATransferTeamAdmin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATransferTeamAdmin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 new_admin_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_new_admin_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATransferTeamAdmin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATransferTeamAdmin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_admin_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_new_admin_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_admin_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATransferTeamAdmin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATransferTeamAdmin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATransferTeamAdmin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATransferTeamAdmin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_admin_account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATransferTeamAdmin)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdmin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATransferTeamAdmin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_admin_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATransferTeamAdmin)
  return target;
}

size_t CMsgDOTATransferTeamAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATransferTeamAdmin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_admin_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_admin_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdmin* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATransferTeamAdmin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATransferTeamAdmin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATransferTeamAdmin)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_admin_account_id_ = from.new_admin_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdmin::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdmin::Swap(CMsgDOTATransferTeamAdmin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATransferTeamAdmin::InternalSwap(CMsgDOTATransferTeamAdmin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_admin_account_id_, other->new_admin_account_id_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdmin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATransferTeamAdminResponse::InitAsDefaultInstance() {
}
class CMsgDOTATransferTeamAdminResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATransferTeamAdminResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATransferTeamAdminResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
}
CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
}

void CMsgDOTATransferTeamAdminResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTATransferTeamAdminResponse::~CMsgDOTATransferTeamAdminResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
  SharedDtor();
}

void CMsgDOTATransferTeamAdminResponse::SharedDtor() {
}

void CMsgDOTATransferTeamAdminResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATransferTeamAdminResponse& CMsgDOTATransferTeamAdminResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATransferTeamAdminResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATransferTeamAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATransferTeamAdminResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATransferTeamAdminResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTATransferTeamAdminResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATransferTeamAdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATransferTeamAdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATransferTeamAdminResponse)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdminResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return target;
}

size_t CMsgDOTATransferTeamAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdminResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATransferTeamAdminResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATransferTeamAdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATransferTeamAdminResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdminResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdminResponse::Swap(CMsgDOTATransferTeamAdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATransferTeamAdminResponse::InternalSwap(CMsgDOTATransferTeamAdminResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdminResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaveTeam::InitAsDefaultInstance() {
}
class CMsgDOTALeaveTeam::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTALeaveTeam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveTeam::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveTeam)
}
CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveTeam)
}

void CMsgDOTALeaveTeam::SharedCtor() {
  team_id_ = 0u;
}

CMsgDOTALeaveTeam::~CMsgDOTALeaveTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveTeam)
  SharedDtor();
}

void CMsgDOTALeaveTeam::SharedDtor() {
}

void CMsgDOTALeaveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaveTeam& CMsgDOTALeaveTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaveTeam_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaveTeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaveTeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveTeam)
}

::google::protobuf::uint8* CMsgDOTALeaveTeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveTeam)
  return target;
}

size_t CMsgDOTALeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeam::MergeFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgDOTALeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeam::CopyFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeam::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeam::Swap(CMsgDOTALeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveTeam::InternalSwap(CMsgDOTALeaveTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTALeaveTeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaveTeamResponse::InitAsDefaultInstance() {
}
class CMsgDOTALeaveTeamResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTALeaveTeamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveTeamResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveTeamResponse)
}
CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveTeamResponse)
}

void CMsgDOTALeaveTeamResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTALeaveTeamResponse::~CMsgDOTALeaveTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveTeamResponse)
  SharedDtor();
}

void CMsgDOTALeaveTeamResponse::SharedDtor() {
}

void CMsgDOTALeaveTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaveTeamResponse& CMsgDOTALeaveTeamResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaveTeamResponse_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaveTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaveTeamResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaveTeamResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTALeaveTeamResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTALeaveTeamResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaveTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveTeamResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTALeaveTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTALeaveTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveTeamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaveTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveTeamResponse)
}

::google::protobuf::uint8* CMsgDOTALeaveTeamResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveTeamResponse)
  return target;
}

size_t CMsgDOTALeaveTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeamResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaveTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeamResponse::Swap(CMsgDOTALeaveTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveTeamResponse::InternalSwap(CMsgDOTALeaveTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTALeaveTeamResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTABetaParticipation::InitAsDefaultInstance() {
}
class CMsgDOTABetaParticipation::HasBitSetters {
 public:
  static void set_has_access_rights(CMsgDOTABetaParticipation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABetaParticipation::kAccessRightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABetaParticipation)
}
CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_rights_ = from.access_rights_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABetaParticipation)
}

void CMsgDOTABetaParticipation::SharedCtor() {
  access_rights_ = 0u;
}

CMsgDOTABetaParticipation::~CMsgDOTABetaParticipation() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABetaParticipation)
  SharedDtor();
}

void CMsgDOTABetaParticipation::SharedDtor() {
}

void CMsgDOTABetaParticipation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTABetaParticipation& CMsgDOTABetaParticipation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTABetaParticipation_dota_5fgcmessages_5fclient_5fteam_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTABetaParticipation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABetaParticipation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_rights_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTABetaParticipation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTABetaParticipation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 access_rights = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_access_rights(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTABetaParticipation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABetaParticipation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 access_rights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_access_rights(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_rights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABetaParticipation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABetaParticipation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTABetaParticipation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABetaParticipation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->access_rights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABetaParticipation)
}

::google::protobuf::uint8* CMsgDOTABetaParticipation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABetaParticipation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->access_rights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABetaParticipation)
  return target;
}

size_t CMsgDOTABetaParticipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABetaParticipation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 access_rights = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->access_rights());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABetaParticipation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABetaParticipation* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTABetaParticipation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABetaParticipation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABetaParticipation)
    MergeFrom(*source);
  }
}

void CMsgDOTABetaParticipation::MergeFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_access_rights()) {
    set_access_rights(from.access_rights());
  }
}

void CMsgDOTABetaParticipation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABetaParticipation::CopyFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABetaParticipation::IsInitialized() const {
  return true;
}

void CMsgDOTABetaParticipation::Swap(CMsgDOTABetaParticipation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABetaParticipation::InternalSwap(CMsgDOTABetaParticipation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_rights_, other->access_rights_);
}

::google::protobuf::Metadata CMsgDOTABetaParticipation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamMemberSDO* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamMemberSDO >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamMemberSDO >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamAdminSDO* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamAdminSDO >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamAdminSDO >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInfo_Member* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInfo_Member >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInfo_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInfo_AuditEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInfoRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamsInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAMyTeamInfoRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAMyTeamInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAMyTeamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTACreateTeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTACreateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTACreateTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTACreateTeamResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTACreateTeamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTACreateTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAEditTeamDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAEditTeamDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAEditTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAEditTeamDetailsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAEditTeamDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAEditTeamDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamProfileResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamProfileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProTeamListRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProTeamListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProTeamListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAProTeamListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAProTeamListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAProTeamListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_InviterToGC* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_InviterToGC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_InviterToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_GCRequestToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_InviteeResponseToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_GCResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATeamInvite_GCResponseToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAKickTeamMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAKickTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAKickTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAKickTeamMemberResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAKickTeamMemberResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAKickTeamMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATransferTeamAdmin* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATransferTeamAdmin >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATransferTeamAdmin >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATransferTeamAdminResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATransferTeamAdminResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATransferTeamAdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaveTeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaveTeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaveTeamResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaveTeamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaveTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTABetaParticipation* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTABetaParticipation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTABetaParticipation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
