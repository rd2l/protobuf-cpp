// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_modifiers.proto

#include "dota_modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVector_networkbasetypes_2eproto;
namespace proto {
namespace dota {
class CDOTAModifierBuffTableEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAModifierBuffTableEntry> _instance;
} _CDOTAModifierBuffTableEntry_default_instance_;
class CDOTALuaModifierEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTALuaModifierEntry> _instance;
} _CDOTALuaModifierEntry_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAModifierBuffTableEntry_default_instance_;
    new (ptr) ::proto::dota::CDOTAModifierBuffTableEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAModifierBuffTableEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCDOTALuaModifierEntry_dota_5fmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTALuaModifierEntry_default_instance_;
    new (ptr) ::proto::dota::CDOTALuaModifierEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTALuaModifierEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTALuaModifierEntry_dota_5fmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTALuaModifierEntry_dota_5fmodifiers_2eproto}, {}};

void InitDefaults_dota_5fmodifiers_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTALuaModifierEntry_dota_5fmodifiers_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fmodifiers_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fmodifiers_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fmodifiers_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fmodifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, entry_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, parent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, serial_num_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, modifier_class_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, ability_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, stack_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, creation_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, caster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, ability_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, armor_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, fade_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, subtle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, channel_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, v_start_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, v_end_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, portal_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, portal_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, hero_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, hero_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, movement_speed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, aura_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, activity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, range_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, dd_modifier_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, dd_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, illusion_label_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, active_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, player_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, lua_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAModifierBuffTableEntry, attack_speed_),
  31,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  32,
  16,
  17,
  18,
  19,
  22,
  20,
  7,
  8,
  0,
  1,
  2,
  3,
  21,
  23,
  25,
  26,
  27,
  28,
  29,
  4,
  24,
  5,
  6,
  30,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALuaModifierEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALuaModifierEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALuaModifierEntry, modifier_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTALuaModifierEntry, modifier_filename_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 38, sizeof(::proto::dota::CDOTAModifierBuffTableEntry)},
  { 71, 78, sizeof(::proto::dota::CDOTALuaModifierEntry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAModifierBuffTableEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTALuaModifierEntry_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fmodifiers_2eproto = {
  {}, AddDescriptors_dota_5fmodifiers_2eproto, "dota_modifiers.proto", schemas,
  file_default_instances, TableStruct_dota_5fmodifiers_2eproto::offsets,
  file_level_metadata_dota_5fmodifiers_2eproto, 2, file_level_enum_descriptors_dota_5fmodifiers_2eproto, file_level_service_descriptors_dota_5fmodifiers_2eproto,
};

const char descriptor_table_protodef_dota_5fmodifiers_2eproto[] =
  "\n\024dota_modifiers.proto\022\nproto.dota\032\026netw"
  "orkbasetypes.proto\"\264\006\n\033CDOTAModifierBuff"
  "TableEntry\022Y\n\nentry_type\030\001 \002(\0162$.proto.d"
  "ota.DOTA_MODIFIER_ENTRY_TYPE:\037DOTA_MODIF"
  "IER_ENTRY_TYPE_ACTIVE\022\016\n\006parent\030\002 \002(\005\022\r\n"
  "\005index\030\003 \002(\005\022\022\n\nserial_num\030\004 \002(\005\022\026\n\016modi"
  "fier_class\030\005 \001(\005\022\025\n\rability_level\030\006 \001(\005\022"
  "\023\n\013stack_count\030\007 \001(\005\022\025\n\rcreation_time\030\010 "
  "\001(\002\022\024\n\010duration\030\t \001(\002:\002-1\022\016\n\006caster\030\n \001("
  "\005\022\017\n\007ability\030\013 \001(\005\022\r\n\005armor\030\014 \001(\005\022\021\n\tfad"
  "e_time\030\r \001(\002\022\016\n\006subtle\030\016 \001(\010\022\024\n\014channel_"
  "time\030\017 \001(\002\022\'\n\007v_start\030\020 \001(\0132\026.proto.dota"
  ".CMsgVector\022%\n\005v_end\030\021 \001(\0132\026.proto.dota."
  "CMsgVector\022\032\n\022portal_loop_appear\030\022 \001(\t\022\035"
  "\n\025portal_loop_disappear\030\023 \001(\t\022\030\n\020hero_lo"
  "op_appear\030\024 \001(\t\022\033\n\023hero_loop_disappear\030\025"
  " \001(\t\022\026\n\016movement_speed\030\026 \001(\005\022\014\n\004aura\030\027 \001"
  "(\010\022\020\n\010activity\030\030 \001(\005\022\016\n\006damage\030\031 \001(\005\022\r\n\005"
  "range\030\032 \001(\005\022\031\n\021dd_modifier_index\030\033 \001(\005\022\025"
  "\n\rdd_ability_id\030\034 \001(\005\022\026\n\016illusion_label\030"
  "\035 \001(\t\022\016\n\006active\030\036 \001(\010\022\022\n\nplayer_ids\030\037 \001("
  "\t\022\020\n\010lua_name\030  \001(\t\022\024\n\014attack_speed\030! \001("
  "\005\"I\n\025CDOTALuaModifierEntry\022\025\n\rmodifier_t"
  "ype\030\001 \002(\005\022\031\n\021modifier_filename\030\002 \002(\t*e\n\030"
  "DOTA_MODIFIER_ENTRY_TYPE\022#\n\037DOTA_MODIFIE"
  "R_ENTRY_TYPE_ACTIVE\020\001\022$\n DOTA_MODIFIER_E"
  "NTRY_TYPE_REMOVED\020\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fmodifiers_2eproto = {
  false, InitDefaults_dota_5fmodifiers_2eproto, 
  descriptor_table_protodef_dota_5fmodifiers_2eproto,
  "dota_modifiers.proto", &assign_descriptors_table_dota_5fmodifiers_2eproto, 1066,
};

void AddDescriptors_dota_5fmodifiers_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_networkbasetypes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fmodifiers_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fmodifiers_2eproto = []() { AddDescriptors_dota_5fmodifiers_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* DOTA_MODIFIER_ENTRY_TYPE_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fmodifiers_2eproto);
  return file_level_enum_descriptors_dota_5fmodifiers_2eproto[0];
}
bool DOTA_MODIFIER_ENTRY_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDOTAModifierBuffTableEntry::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAModifierBuffTableEntry_default_instance_._instance.get_mutable()->v_start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CDOTAModifierBuffTableEntry_default_instance_._instance.get_mutable()->v_end_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CDOTAModifierBuffTableEntry::HasBitSetters {
 public:
  static void set_has_entry_type(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_parent(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_index(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_serial_num(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_modifier_class(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_ability_level(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_stack_count(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_creation_time(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_duration(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_caster(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_ability(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_armor(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_fade_time(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_subtle(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_channel_time(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static const ::proto::dota::CMsgVector& v_start(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_start(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::proto::dota::CMsgVector& v_end(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_end(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_portal_loop_appear(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_portal_loop_disappear(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_loop_appear(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_loop_disappear(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_movement_speed(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_aura(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_activity(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_damage(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_range(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_dd_modifier_index(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_dd_ability_id(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_illusion_label(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_active(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_player_ids(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_lua_name(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_attack_speed(CDOTAModifierBuffTableEntry* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
};

const ::proto::dota::CMsgVector&
CDOTAModifierBuffTableEntry::HasBitSetters::v_start(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->v_start_;
}
const ::proto::dota::CMsgVector&
CDOTAModifierBuffTableEntry::HasBitSetters::v_end(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->v_end_;
}
void CDOTAModifierBuffTableEntry::clear_v_start() {
  if (v_start_ != nullptr) v_start_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAModifierBuffTableEntry::clear_v_end() {
  if (v_end_ != nullptr) v_end_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAModifierBuffTableEntry::kEntryTypeFieldNumber;
const int CDOTAModifierBuffTableEntry::kParentFieldNumber;
const int CDOTAModifierBuffTableEntry::kIndexFieldNumber;
const int CDOTAModifierBuffTableEntry::kSerialNumFieldNumber;
const int CDOTAModifierBuffTableEntry::kModifierClassFieldNumber;
const int CDOTAModifierBuffTableEntry::kAbilityLevelFieldNumber;
const int CDOTAModifierBuffTableEntry::kStackCountFieldNumber;
const int CDOTAModifierBuffTableEntry::kCreationTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kDurationFieldNumber;
const int CDOTAModifierBuffTableEntry::kCasterFieldNumber;
const int CDOTAModifierBuffTableEntry::kAbilityFieldNumber;
const int CDOTAModifierBuffTableEntry::kArmorFieldNumber;
const int CDOTAModifierBuffTableEntry::kFadeTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kSubtleFieldNumber;
const int CDOTAModifierBuffTableEntry::kChannelTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kVStartFieldNumber;
const int CDOTAModifierBuffTableEntry::kVEndFieldNumber;
const int CDOTAModifierBuffTableEntry::kPortalLoopAppearFieldNumber;
const int CDOTAModifierBuffTableEntry::kPortalLoopDisappearFieldNumber;
const int CDOTAModifierBuffTableEntry::kHeroLoopAppearFieldNumber;
const int CDOTAModifierBuffTableEntry::kHeroLoopDisappearFieldNumber;
const int CDOTAModifierBuffTableEntry::kMovementSpeedFieldNumber;
const int CDOTAModifierBuffTableEntry::kAuraFieldNumber;
const int CDOTAModifierBuffTableEntry::kActivityFieldNumber;
const int CDOTAModifierBuffTableEntry::kDamageFieldNumber;
const int CDOTAModifierBuffTableEntry::kRangeFieldNumber;
const int CDOTAModifierBuffTableEntry::kDdModifierIndexFieldNumber;
const int CDOTAModifierBuffTableEntry::kDdAbilityIdFieldNumber;
const int CDOTAModifierBuffTableEntry::kIllusionLabelFieldNumber;
const int CDOTAModifierBuffTableEntry::kActiveFieldNumber;
const int CDOTAModifierBuffTableEntry::kPlayerIdsFieldNumber;
const int CDOTAModifierBuffTableEntry::kLuaNameFieldNumber;
const int CDOTAModifierBuffTableEntry::kAttackSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAModifierBuffTableEntry)
}
CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(const CDOTAModifierBuffTableEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  portal_loop_appear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_portal_loop_appear()) {
    portal_loop_appear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portal_loop_appear_);
  }
  portal_loop_disappear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_portal_loop_disappear()) {
    portal_loop_disappear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portal_loop_disappear_);
  }
  hero_loop_appear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_loop_appear()) {
    hero_loop_appear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_loop_appear_);
  }
  hero_loop_disappear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_loop_disappear()) {
    hero_loop_disappear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_loop_disappear_);
  }
  illusion_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_illusion_label()) {
    illusion_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illusion_label_);
  }
  player_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_ids()) {
    player_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_ids_);
  }
  lua_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lua_name()) {
    lua_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lua_name_);
  }
  if (from.has_v_start()) {
    v_start_ = new ::proto::dota::CMsgVector(*from.v_start_);
  } else {
    v_start_ = nullptr;
  }
  if (from.has_v_end()) {
    v_end_ = new ::proto::dota::CMsgVector(*from.v_end_);
  } else {
    v_end_ = nullptr;
  }
  ::memcpy(&parent_, &from.parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAModifierBuffTableEntry)
}

void CDOTAModifierBuffTableEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto.base);
  portal_loop_appear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portal_loop_disappear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_loop_appear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_loop_disappear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illusion_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&v_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attack_speed_) -
      reinterpret_cast<char*>(&v_start_)) + sizeof(attack_speed_));
  entry_type_ = 1;
  duration_ = -1;
}

CDOTAModifierBuffTableEntry::~CDOTAModifierBuffTableEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAModifierBuffTableEntry)
  SharedDtor();
}

void CDOTAModifierBuffTableEntry::SharedDtor() {
  portal_loop_appear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portal_loop_disappear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_loop_appear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_loop_disappear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illusion_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_ids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete v_start_;
  if (this != internal_default_instance()) delete v_end_;
}

void CDOTAModifierBuffTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAModifierBuffTableEntry& CDOTAModifierBuffTableEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAModifierBuffTableEntry_dota_5fmodifiers_2eproto.base);
  return *internal_default_instance();
}


void CDOTAModifierBuffTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAModifierBuffTableEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      portal_loop_appear_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      portal_loop_disappear_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hero_loop_appear_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hero_loop_disappear_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      illusion_label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      player_ids_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      lua_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(v_start_ != nullptr);
      v_start_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(v_end_ != nullptr);
    v_end_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&parent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&parent_)) + sizeof(creation_time_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&caster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aura_) -
        reinterpret_cast<char*>(&caster_)) + sizeof(aura_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attack_speed_) -
        reinterpret_cast<char*>(&active_)) + sizeof(attack_speed_));
    entry_type_ = 1;
  }
  duration_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAModifierBuffTableEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAModifierBuffTableEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_MODIFIER_ENTRY_TYPE_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_entry_type(static_cast<::proto::dota::DOTA_MODIFIER_ENTRY_TYPE>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 parent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_parent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 serial_num = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_serial_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 modifier_class = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_modifier_class(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ability_level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ability_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 stack_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_stack_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float creation_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_creation_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float duration = 9 [default = -1];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 caster = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_caster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ability = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_ability(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 armor = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_armor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fade_time = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_fade_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool subtle = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_subtle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float channel_time = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_channel_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .proto.dota.CMsgVector v_start = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_v_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector v_end = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_v_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string portal_loop_appear = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.portal_loop_appear");
        object = msg->mutable_portal_loop_appear();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string portal_loop_disappear = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.portal_loop_disappear");
        object = msg->mutable_portal_loop_disappear();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string hero_loop_appear = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.hero_loop_appear");
        object = msg->mutable_hero_loop_appear();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string hero_loop_disappear = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.hero_loop_disappear");
        object = msg->mutable_hero_loop_disappear();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 movement_speed = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_movement_speed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool aura = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_aura(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 activity = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_activity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 damage = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 range = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_range(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dd_modifier_index = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_dd_modifier_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dd_ability_id = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_dd_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string illusion_label = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.illusion_label");
        object = msg->mutable_illusion_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool active = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_ids = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.player_ids");
        object = msg->mutable_player_ids();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string lua_name = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAModifierBuffTableEntry.lua_name");
        object = msg->mutable_lua_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 attack_speed = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_attack_speed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAModifierBuffTableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAModifierBuffTableEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_MODIFIER_ENTRY_TYPE_IsValid(value)) {
            set_entry_type(static_cast< ::proto::dota::DOTA_MODIFIER_ENTRY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_parent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 serial_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_serial_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 modifier_class = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_modifier_class(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifier_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ability_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ability_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stack_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_stack_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creation_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_creation_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_caster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ability = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_ability(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 armor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_armor(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_fade_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool subtle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_subtle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subtle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float channel_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {
          HasBitSetters::set_has_channel_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector v_start = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector v_end = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string portal_loop_appear = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portal_loop_appear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portal_loop_appear().data(), static_cast<int>(this->portal_loop_appear().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_appear");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string portal_loop_disappear = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portal_loop_disappear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portal_loop_disappear().data(), static_cast<int>(this->portal_loop_disappear().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_disappear");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_loop_appear = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_loop_appear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_loop_appear().data(), static_cast<int>(this->hero_loop_appear().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_appear");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_loop_disappear = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_loop_disappear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_loop_disappear().data(), static_cast<int>(this->hero_loop_disappear().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_disappear");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 movement_speed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_movement_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movement_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aura = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_aura(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aura_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activity = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_activity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 range = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_range(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dd_modifier_index = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_dd_modifier_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dd_modifier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dd_ability_id = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_dd_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dd_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string illusion_label = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_illusion_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->illusion_label().data(), static_cast<int>(this->illusion_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.illusion_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_ids = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_ids().data(), static_cast<int>(this->player_ids().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.player_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lua_name = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lua_name().data(), static_cast<int>(this->lua_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAModifierBuffTableEntry.lua_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attack_speed = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_attack_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAModifierBuffTableEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAModifierBuffTableEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAModifierBuffTableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAModifierBuffTableEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entry_type(), output);
  }

  // required int32 parent = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent(), output);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required int32 serial_num = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serial_num(), output);
  }

  // optional int32 modifier_class = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->modifier_class(), output);
  }

  // optional int32 ability_level = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ability_level(), output);
  }

  // optional int32 stack_count = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stack_count(), output);
  }

  // optional float creation_time = 8;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->creation_time(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float duration = 9 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->duration(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 caster = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->caster(), output);
  }

  // optional int32 ability = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ability(), output);
  }

  // optional int32 armor = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->armor(), output);
  }

  // optional float fade_time = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fade_time(), output);
  }

  // optional bool subtle = 14;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->subtle(), output);
  }

  // optional float channel_time = 15;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->channel_time(), output);
  }

  // optional .proto.dota.CMsgVector v_start = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::v_start(this), output);
  }

  // optional .proto.dota.CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::v_end(this), output);
  }

  // optional string portal_loop_appear = 18;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portal_loop_appear().data(), static_cast<int>(this->portal_loop_appear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_appear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->portal_loop_appear(), output);
  }

  // optional string portal_loop_disappear = 19;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portal_loop_disappear().data(), static_cast<int>(this->portal_loop_disappear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_disappear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->portal_loop_disappear(), output);
  }

  // optional string hero_loop_appear = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_loop_appear().data(), static_cast<int>(this->hero_loop_appear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_appear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->hero_loop_appear(), output);
  }

  // optional string hero_loop_disappear = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_loop_disappear().data(), static_cast<int>(this->hero_loop_disappear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_disappear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->hero_loop_disappear(), output);
  }

  // optional int32 movement_speed = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->movement_speed(), output);
  }

  // optional bool aura = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->aura(), output);
  }

  // optional int32 activity = 24;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->activity(), output);
  }

  // optional int32 damage = 25;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->damage(), output);
  }

  // optional int32 range = 26;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->range(), output);
  }

  // optional int32 dd_modifier_index = 27;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->dd_modifier_index(), output);
  }

  // optional int32 dd_ability_id = 28;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->dd_ability_id(), output);
  }

  // optional string illusion_label = 29;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->illusion_label().data(), static_cast<int>(this->illusion_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.illusion_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->illusion_label(), output);
  }

  // optional bool active = 30;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->active(), output);
  }

  // optional string player_ids = 31;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_ids().data(), static_cast<int>(this->player_ids().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.player_ids");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->player_ids(), output);
  }

  // optional string lua_name = 32;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua_name().data(), static_cast<int>(this->lua_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.lua_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->lua_name(), output);
  }

  // optional int32 attack_speed = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->attack_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAModifierBuffTableEntry)
}

::google::protobuf::uint8* CDOTAModifierBuffTableEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAModifierBuffTableEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entry_type(), target);
  }

  // required int32 parent = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent(), target);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required int32 serial_num = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serial_num(), target);
  }

  // optional int32 modifier_class = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->modifier_class(), target);
  }

  // optional int32 ability_level = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ability_level(), target);
  }

  // optional int32 stack_count = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stack_count(), target);
  }

  // optional float creation_time = 8;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->creation_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float duration = 9 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 caster = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->caster(), target);
  }

  // optional int32 ability = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ability(), target);
  }

  // optional int32 armor = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->armor(), target);
  }

  // optional float fade_time = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fade_time(), target);
  }

  // optional bool subtle = 14;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->subtle(), target);
  }

  // optional float channel_time = 15;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->channel_time(), target);
  }

  // optional .proto.dota.CMsgVector v_start = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::v_start(this), target);
  }

  // optional .proto.dota.CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::v_end(this), target);
  }

  // optional string portal_loop_appear = 18;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portal_loop_appear().data(), static_cast<int>(this->portal_loop_appear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_appear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->portal_loop_appear(), target);
  }

  // optional string portal_loop_disappear = 19;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portal_loop_disappear().data(), static_cast<int>(this->portal_loop_disappear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.portal_loop_disappear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->portal_loop_disappear(), target);
  }

  // optional string hero_loop_appear = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_loop_appear().data(), static_cast<int>(this->hero_loop_appear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_appear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hero_loop_appear(), target);
  }

  // optional string hero_loop_disappear = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_loop_disappear().data(), static_cast<int>(this->hero_loop_disappear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.hero_loop_disappear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hero_loop_disappear(), target);
  }

  // optional int32 movement_speed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->movement_speed(), target);
  }

  // optional bool aura = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->aura(), target);
  }

  // optional int32 activity = 24;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->activity(), target);
  }

  // optional int32 damage = 25;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->damage(), target);
  }

  // optional int32 range = 26;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->range(), target);
  }

  // optional int32 dd_modifier_index = 27;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->dd_modifier_index(), target);
  }

  // optional int32 dd_ability_id = 28;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->dd_ability_id(), target);
  }

  // optional string illusion_label = 29;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->illusion_label().data(), static_cast<int>(this->illusion_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.illusion_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->illusion_label(), target);
  }

  // optional bool active = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->active(), target);
  }

  // optional string player_ids = 31;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_ids().data(), static_cast<int>(this->player_ids().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.player_ids");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->player_ids(), target);
  }

  // optional string lua_name = 32;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua_name().data(), static_cast<int>(this->lua_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAModifierBuffTableEntry.lua_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->lua_name(), target);
  }

  // optional int32 attack_speed = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->attack_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAModifierBuffTableEntry)
  return target;
}

size_t CDOTAModifierBuffTableEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if (has_parent()) {
    // required int32 parent = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent());
  }

  if (has_index()) {
    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_serial_num()) {
    // required int32 serial_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial_num());
  }

  if (has_entry_type()) {
    // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
  }

  return total_size;
}
size_t CDOTAModifierBuffTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x80000e00) ^ 0x80000e00) == 0) {  // All required fields are present.
    // required int32 parent = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent());

    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 serial_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial_num());

    // required .proto.dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string portal_loop_appear = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portal_loop_appear());
    }

    // optional string portal_loop_disappear = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portal_loop_disappear());
    }

    // optional string hero_loop_appear = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_loop_appear());
    }

    // optional string hero_loop_disappear = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_loop_disappear());
    }

    // optional string illusion_label = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->illusion_label());
    }

    // optional string player_ids = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_ids());
    }

    // optional string lua_name = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua_name());
    }

    // optional .proto.dota.CMsgVector v_start = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *v_start_);
    }

  }
  // optional .proto.dota.CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *v_end_);
  }

  if (cached_has_bits & 0x0000f000u) {
    // optional int32 modifier_class = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modifier_class());
    }

    // optional int32 ability_level = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_level());
    }

    // optional int32 stack_count = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stack_count());
    }

    // optional float creation_time = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 caster = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster());
    }

    // optional int32 ability = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }

    // optional int32 armor = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional float fade_time = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float channel_time = 15;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional int32 movement_speed = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movement_speed());
    }

    // optional bool subtle = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool aura = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool active = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 activity = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity());
    }

    // optional int32 damage = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 range = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // optional int32 dd_modifier_index = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dd_modifier_index());
    }

    // optional int32 dd_ability_id = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dd_ability_id());
    }

    // optional int32 attack_speed = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed());
    }

  }
  // optional float duration = 9 [default = -1];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAModifierBuffTableEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAModifierBuffTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAModifierBuffTableEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAModifierBuffTableEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAModifierBuffTableEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAModifierBuffTableEntry)
    MergeFrom(*source);
  }
}

void CDOTAModifierBuffTableEntry::MergeFrom(const CDOTAModifierBuffTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAModifierBuffTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      portal_loop_appear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portal_loop_appear_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      portal_loop_disappear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portal_loop_disappear_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      hero_loop_appear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_loop_appear_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      hero_loop_disappear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_loop_disappear_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      illusion_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illusion_label_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      player_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_ids_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      lua_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lua_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_v_start()->::proto::dota::CMsgVector::MergeFrom(from.v_start());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_v_end()->::proto::dota::CMsgVector::MergeFrom(from.v_end());
    }
    if (cached_has_bits & 0x00000200u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000400u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000800u) {
      serial_num_ = from.serial_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      modifier_class_ = from.modifier_class_;
    }
    if (cached_has_bits & 0x00002000u) {
      ability_level_ = from.ability_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      caster_ = from.caster_;
    }
    if (cached_has_bits & 0x00020000u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00040000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00080000u) {
      fade_time_ = from.fade_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      channel_time_ = from.channel_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      movement_speed_ = from.movement_speed_;
    }
    if (cached_has_bits & 0x00400000u) {
      subtle_ = from.subtle_;
    }
    if (cached_has_bits & 0x00800000u) {
      aura_ = from.aura_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x02000000u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x10000000u) {
      dd_modifier_index_ = from.dd_modifier_index_;
    }
    if (cached_has_bits & 0x20000000u) {
      dd_ability_id_ = from.dd_ability_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      attack_speed_ = from.attack_speed_;
    }
    if (cached_has_bits & 0x80000000u) {
      entry_type_ = from.entry_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.has_duration()) {
    set_duration(from.duration());
  }
}

void CDOTAModifierBuffTableEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAModifierBuffTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAModifierBuffTableEntry::CopyFrom(const CDOTAModifierBuffTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAModifierBuffTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAModifierBuffTableEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x80000e00) != 0x80000e00) return false;
  return true;
}

void CDOTAModifierBuffTableEntry::Swap(CDOTAModifierBuffTableEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAModifierBuffTableEntry::InternalSwap(CDOTAModifierBuffTableEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  portal_loop_appear_.Swap(&other->portal_loop_appear_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  portal_loop_disappear_.Swap(&other->portal_loop_disappear_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_loop_appear_.Swap(&other->hero_loop_appear_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_loop_disappear_.Swap(&other->hero_loop_disappear_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  illusion_label_.Swap(&other->illusion_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_ids_.Swap(&other->player_ids_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lua_name_.Swap(&other->lua_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(v_start_, other->v_start_);
  swap(v_end_, other->v_end_);
  swap(parent_, other->parent_);
  swap(index_, other->index_);
  swap(serial_num_, other->serial_num_);
  swap(modifier_class_, other->modifier_class_);
  swap(ability_level_, other->ability_level_);
  swap(stack_count_, other->stack_count_);
  swap(creation_time_, other->creation_time_);
  swap(caster_, other->caster_);
  swap(ability_, other->ability_);
  swap(armor_, other->armor_);
  swap(fade_time_, other->fade_time_);
  swap(channel_time_, other->channel_time_);
  swap(movement_speed_, other->movement_speed_);
  swap(subtle_, other->subtle_);
  swap(aura_, other->aura_);
  swap(active_, other->active_);
  swap(activity_, other->activity_);
  swap(damage_, other->damage_);
  swap(range_, other->range_);
  swap(dd_modifier_index_, other->dd_modifier_index_);
  swap(dd_ability_id_, other->dd_ability_id_);
  swap(attack_speed_, other->attack_speed_);
  swap(entry_type_, other->entry_type_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CDOTAModifierBuffTableEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmodifiers_2eproto);
  return ::file_level_metadata_dota_5fmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTALuaModifierEntry::InitAsDefaultInstance() {
}
class CDOTALuaModifierEntry::HasBitSetters {
 public:
  static void set_has_modifier_type(CDOTALuaModifierEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifier_filename(CDOTALuaModifierEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTALuaModifierEntry::kModifierTypeFieldNumber;
const int CDOTALuaModifierEntry::kModifierFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTALuaModifierEntry::CDOTALuaModifierEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTALuaModifierEntry)
}
CDOTALuaModifierEntry::CDOTALuaModifierEntry(const CDOTALuaModifierEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modifier_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modifier_filename()) {
    modifier_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifier_filename_);
  }
  modifier_type_ = from.modifier_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTALuaModifierEntry)
}

void CDOTALuaModifierEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTALuaModifierEntry_dota_5fmodifiers_2eproto.base);
  modifier_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifier_type_ = 0;
}

CDOTALuaModifierEntry::~CDOTALuaModifierEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTALuaModifierEntry)
  SharedDtor();
}

void CDOTALuaModifierEntry::SharedDtor() {
  modifier_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTALuaModifierEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTALuaModifierEntry& CDOTALuaModifierEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTALuaModifierEntry_dota_5fmodifiers_2eproto.base);
  return *internal_default_instance();
}


void CDOTALuaModifierEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTALuaModifierEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    modifier_filename_.ClearNonDefaultToEmptyNoArena();
  }
  modifier_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTALuaModifierEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTALuaModifierEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 modifier_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_modifier_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string modifier_filename = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTALuaModifierEntry.modifier_filename");
        object = msg->mutable_modifier_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTALuaModifierEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTALuaModifierEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modifier_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_modifier_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifier_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string modifier_filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifier_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modifier_filename().data(), static_cast<int>(this->modifier_filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTALuaModifierEntry.modifier_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTALuaModifierEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTALuaModifierEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTALuaModifierEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTALuaModifierEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 modifier_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modifier_type(), output);
  }

  // required string modifier_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modifier_filename().data(), static_cast<int>(this->modifier_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALuaModifierEntry.modifier_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modifier_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTALuaModifierEntry)
}

::google::protobuf::uint8* CDOTALuaModifierEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTALuaModifierEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 modifier_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modifier_type(), target);
  }

  // required string modifier_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modifier_filename().data(), static_cast<int>(this->modifier_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALuaModifierEntry.modifier_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modifier_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTALuaModifierEntry)
  return target;
}

size_t CDOTALuaModifierEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (has_modifier_filename()) {
    // required string modifier_filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifier_filename());
  }

  if (has_modifier_type()) {
    // required int32 modifier_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modifier_type());
  }

  return total_size;
}
size_t CDOTALuaModifierEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string modifier_filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifier_filename());

    // required int32 modifier_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modifier_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTALuaModifierEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTALuaModifierEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALuaModifierEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTALuaModifierEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTALuaModifierEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTALuaModifierEntry)
    MergeFrom(*source);
  }
}

void CDOTALuaModifierEntry::MergeFrom(const CDOTALuaModifierEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTALuaModifierEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      modifier_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifier_filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      modifier_type_ = from.modifier_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALuaModifierEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTALuaModifierEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALuaModifierEntry::CopyFrom(const CDOTALuaModifierEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTALuaModifierEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALuaModifierEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CDOTALuaModifierEntry::Swap(CDOTALuaModifierEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALuaModifierEntry::InternalSwap(CDOTALuaModifierEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modifier_filename_.Swap(&other->modifier_filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modifier_type_, other->modifier_type_);
}

::google::protobuf::Metadata CDOTALuaModifierEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmodifiers_2eproto);
  return ::file_level_metadata_dota_5fmodifiers_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAModifierBuffTableEntry* Arena::CreateMaybeMessage< ::proto::dota::CDOTAModifierBuffTableEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAModifierBuffTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTALuaModifierEntry* Arena::CreateMaybeMessage< ::proto::dota::CDOTALuaModifierEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTALuaModifierEntry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
