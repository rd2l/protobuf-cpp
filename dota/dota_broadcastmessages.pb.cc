// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#include "dota_broadcastmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fbroadcastmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto;
namespace proto {
namespace dota {
class CDOTABroadcastMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg> _instance;
} _CDOTABroadcastMsg_default_instance_;
class CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyRequest> _instance;
} _CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
class CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember> _instance;
} _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
class CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyReply> _instance;
} _CDOTABroadcastMsg_LANLobbyReply_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTABroadcastMsg_default_instance_;
    new (ptr) ::proto::dota::CDOTABroadcastMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTABroadcastMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto}, {}};

static void InitDefaultsCDOTABroadcastMsg_LANLobbyRequest_dota_5fbroadcastmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
    new (ptr) ::proto::dota::CDOTABroadcastMsg_LANLobbyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTABroadcastMsg_LANLobbyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTABroadcastMsg_LANLobbyRequest_dota_5fbroadcastmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTABroadcastMsg_LANLobbyRequest_dota_5fbroadcastmessages_2eproto}, {}};

static void InitDefaultsCDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
    new (ptr) ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto}, {}};

static void InitDefaultsCDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTABroadcastMsg_LANLobbyReply_default_instance_;
    new (ptr) ::proto::dota::CDOTABroadcastMsg_LANLobbyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTABroadcastMsg_LANLobbyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto}, {
      &scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto.base,}};

void InitDefaults_dota_5fbroadcastmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTABroadcastMsg_LANLobbyRequest_dota_5fbroadcastmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fbroadcastmessages_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fbroadcastmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fbroadcastmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg, msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcastMsg_LANLobbyReply, players_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  0,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CDOTABroadcastMsg)},
  { 9, 14, sizeof(::proto::dota::CDOTABroadcastMsg_LANLobbyRequest)},
  { 14, 21, sizeof(::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember)},
  { 23, 37, sizeof(::proto::dota::CDOTABroadcastMsg_LANLobbyReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTABroadcastMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTABroadcastMsg_LANLobbyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTABroadcastMsg_LANLobbyReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fbroadcastmessages_2eproto = {
  {}, AddDescriptors_dota_5fbroadcastmessages_2eproto, "dota_broadcastmessages.proto", schemas,
  file_default_instances, TableStruct_dota_5fbroadcastmessages_2eproto::offsets,
  file_level_metadata_dota_5fbroadcastmessages_2eproto, 4, file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto, file_level_service_descriptors_dota_5fbroadcastmessages_2eproto,
};

const char descriptor_table_protodef_dota_5fbroadcastmessages_2eproto[] =
  "\n\034dota_broadcastmessages.proto\022\nproto.do"
  "ta\"k\n\021CDOTABroadcastMsg\022I\n\004type\030\001 \002(\0162\"."
  "proto.dota.EDotaBroadcastMessages:\027DOTA_"
  "BM_LANLobbyRequest\022\013\n\003msg\030\002 \001(\014\"#\n!CDOTA"
  "BroadcastMsg_LANLobbyRequest\"\314\002\n\037CDOTABr"
  "oadcastMsg_LANLobbyReply\022\n\n\002id\030\001 \001(\004\022\025\n\r"
  "tournament_id\030\002 \001(\r\022\032\n\022tournament_game_i"
  "d\030\003 \001(\r\022I\n\007members\030\004 \003(\01328.proto.dota.CD"
  "OTABroadcastMsg_LANLobbyReply.CLobbyMemb"
  "er\022\031\n\021requires_pass_key\030\005 \001(\010\022\031\n\021leader_"
  "account_id\030\006 \001(\r\022\021\n\tgame_mode\030\007 \001(\r\022\014\n\004n"
  "ame\030\010 \001(\t\022\017\n\007players\030\t \001(\r\0327\n\014CLobbyMemb"
  "er\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_name\030\002 "
  "\001(\t*P\n\026EDotaBroadcastMessages\022\033\n\027DOTA_BM"
  "_LANLobbyRequest\020\001\022\031\n\025DOTA_BM_LANLobbyRe"
  "ply\020\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fbroadcastmessages_2eproto = {
  false, InitDefaults_dota_5fbroadcastmessages_2eproto, 
  descriptor_table_protodef_dota_5fbroadcastmessages_2eproto,
  "dota_broadcastmessages.proto", &assign_descriptors_table_dota_5fbroadcastmessages_2eproto, 612,
};

void AddDescriptors_dota_5fbroadcastmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fbroadcastmessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fbroadcastmessages_2eproto = []() { AddDescriptors_dota_5fbroadcastmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* EDotaBroadcastMessages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fbroadcastmessages_2eproto);
  return file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[0];
}
bool EDotaBroadcastMessages_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDOTABroadcastMsg::InitAsDefaultInstance() {
}
class CDOTABroadcastMsg::HasBitSetters {
 public:
  static void set_has_type(CDOTABroadcastMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg(CDOTABroadcastMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg::kTypeFieldNumber;
const int CDOTABroadcastMsg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg::CDOTABroadcastMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg)
}
CDOTABroadcastMsg::CDOTABroadcastMsg(const CDOTABroadcastMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg)
}

void CDOTABroadcastMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

CDOTABroadcastMsg::~CDOTABroadcastMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg)
  SharedDtor();
}

void CDOTABroadcastMsg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTABroadcastMsg& CDOTABroadcastMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTABroadcastMsg_dota_5fbroadcastmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTABroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTABroadcastMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTABroadcastMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EDotaBroadcastMessages_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::proto::dota::EDotaBroadcastMessages>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTABroadcastMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDotaBroadcastMessages_IsValid(value)) {
            set_type(static_cast< ::proto::dota::EDotaBroadcastMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTABroadcastMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg)
}

::google::protobuf::uint8* CDOTABroadcastMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg)
  return target;
}

size_t CDOTABroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes msg = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTABroadcastMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg::MergeFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg::CopyFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CDOTABroadcastMsg::Swap(CDOTABroadcastMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg::InternalSwap(CDOTABroadcastMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata CDOTABroadcastMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fbroadcastmessages_2eproto);
  return ::file_level_metadata_dota_5fbroadcastmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTABroadcastMsg_LANLobbyRequest::InitAsDefaultInstance() {
}
class CDOTABroadcastMsg_LANLobbyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}
CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedCtor() {
}

CDOTABroadcastMsg_LANLobbyRequest::~CDOTABroadcastMsg_LANLobbyRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedDtor() {
}

void CDOTABroadcastMsg_LANLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTABroadcastMsg_LANLobbyRequest& CDOTABroadcastMsg_LANLobbyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTABroadcastMsg_LANLobbyRequest_dota_5fbroadcastmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTABroadcastMsg_LANLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTABroadcastMsg_LANLobbyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTABroadcastMsg_LANLobbyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTABroadcastMsg_LANLobbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTABroadcastMsg_LANLobbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyRequest::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyRequest::Swap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyRequest::InternalSwap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fbroadcastmessages_2eproto);
  return ::file_level_metadata_dota_5fbroadcastmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InitAsDefaultInstance() {
}
class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::HasBitSetters {
 public:
  static void set_has_account_id(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_name(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}
CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_dota_5fbroadcastmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fbroadcastmessages_2eproto);
  return ::file_level_metadata_dota_5fbroadcastmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTABroadcastMsg_LANLobbyReply::InitAsDefaultInstance() {
}
class CDOTABroadcastMsg_LANLobbyReply::HasBitSetters {
 public:
  static void set_has_id(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tournament_id(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tournament_game_id(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_requires_pass_key(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_leader_account_id(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_mode(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_name(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_players(CDOTABroadcastMsg_LANLobbyReply* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg_LANLobbyReply::kIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentGameIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kMembersFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kRequiresPassKeyFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kLeaderAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kGameModeFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kNameFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}
CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&id_)) + sizeof(players_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}

void CDOTABroadcastMsg_LANLobbyReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&id_)) + sizeof(players_));
}

CDOTABroadcastMsg_LANLobbyReply::~CDOTABroadcastMsg_LANLobbyReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTABroadcastMsg_LANLobbyReply& CDOTABroadcastMsg_LANLobbyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTABroadcastMsg_LANLobbyReply_dota_5fbroadcastmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTABroadcastMsg_LANLobbyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_) -
        reinterpret_cast<char*>(&id_)) + sizeof(players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTABroadcastMsg_LANLobbyReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTABroadcastMsg_LANLobbyReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_game_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tournament_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional bool requires_pass_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_requires_pass_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leader_account_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_leader_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 players = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTABroadcastMsg_LANLobbyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tournament_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_requires_pass_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_leader_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTABroadcastMsg_LANLobbyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_game_id(), output);
  }

  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leader_account_id(), output);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->players(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_game_id(), target);
  }

  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->members(static_cast<int>(i)), target);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leader_account_id(), target);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->players(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 tournament_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional bool requires_pass_key = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 game_mode = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 players = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_ = from.players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply::Swap(CDOTABroadcastMsg_LANLobbyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyReply::InternalSwap(CDOTABroadcastMsg_LANLobbyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(tournament_id_, other->tournament_id_);
  swap(tournament_game_id_, other->tournament_game_id_);
  swap(requires_pass_key_, other->requires_pass_key_);
  swap(leader_account_id_, other->leader_account_id_);
  swap(game_mode_, other->game_mode_);
  swap(players_, other->players_);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fbroadcastmessages_2eproto);
  return ::file_level_metadata_dota_5fbroadcastmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTABroadcastMsg* Arena::CreateMaybeMessage< ::proto::dota::CDOTABroadcastMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTABroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTABroadcastMsg_LANLobbyRequest* Arena::CreateMaybeMessage< ::proto::dota::CDOTABroadcastMsg_LANLobbyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTABroadcastMsg_LANLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* Arena::CreateMaybeMessage< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTABroadcastMsg_LANLobbyReply* Arena::CreateMaybeMessage< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
