// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fclientmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fclientmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_DismissAllStatPopups_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_ItemAlert_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_LocationPing_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_MapLine_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_SendStatPopup_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMsg_WorldLine_dota_5fcommonmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMsg_UnitOrder_dota_5fcommonmessages_2eproto;
namespace proto {
namespace dota {
class CDOTAClientMsg_MapPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MapPing> _instance;
} _CDOTAClientMsg_MapPing_default_instance_;
class CDOTAClientMsg_ItemAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ItemAlert> _instance;
} _CDOTAClientMsg_ItemAlert_default_instance_;
class CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EnemyItemAlert> _instance;
} _CDOTAClientMsg_EnemyItemAlert_default_instance_;
class CDOTAClientMsg_ModifierAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ModifierAlert> _instance;
} _CDOTAClientMsg_ModifierAlert_default_instance_;
class CDOTAClientMsg_ClickedBuffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ClickedBuff> _instance;
} _CDOTAClientMsg_ClickedBuff_default_instance_;
class CDOTAClientMsg_HPManaAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_HPManaAlert> _instance;
} _CDOTAClientMsg_HPManaAlert_default_instance_;
class CDOTAClientMsg_GlyphAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_GlyphAlert> _instance;
} _CDOTAClientMsg_GlyphAlert_default_instance_;
class CDOTAClientMsg_MapLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MapLine> _instance;
} _CDOTAClientMsg_MapLine_default_instance_;
class CDOTAClientMsg_AspectRatioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_AspectRatio> _instance;
} _CDOTAClientMsg_AspectRatio_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UnitsAutoAttackMode> _instance;
} _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UnitsAutoAttackAfterSpell> _instance;
} _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_;
class CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_TeleportRequiresHalt> _instance;
} _CDOTAClientMsg_TeleportRequiresHalt_default_instance_;
class CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChannelRequiresHalt> _instance;
} _CDOTAClientMsg_ChannelRequiresHalt_default_instance_;
class CDOTAClientMsg_SearchStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SearchString> _instance;
} _CDOTAClientMsg_SearchString_default_instance_;
class CDOTAClientMsg_PauseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_Pause> _instance;
} _CDOTAClientMsg_Pause_default_instance_;
class CDOTAClientMsg_ShopViewModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ShopViewMode> _instance;
} _CDOTAClientMsg_ShopViewMode_default_instance_;
class CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetUnitShareFlag> _instance;
} _CDOTAClientMsg_SetUnitShareFlag_default_instance_;
class CDOTAClientMsg_SwapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SwapRequest> _instance;
} _CDOTAClientMsg_SwapRequest_default_instance_;
class CDOTAClientMsg_SwapAcceptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SwapAccept> _instance;
} _CDOTAClientMsg_SwapAccept_default_instance_;
class CDOTAClientMsg_WorldLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_WorldLine> _instance;
} _CDOTAClientMsg_WorldLine_default_instance_;
class CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RequestGraphUpdate> _instance;
} _CDOTAClientMsg_RequestGraphUpdate_default_instance_;
class CDOTAClientMsg_ChatWheelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChatWheel> _instance;
} _CDOTAClientMsg_ChatWheel_default_instance_;
class CDOTAClientMsg_SendStatPopupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SendStatPopup> _instance;
} _CDOTAClientMsg_SendStatPopup_default_instance_;
class CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_DismissAllStatPopups> _instance;
} _CDOTAClientMsg_DismissAllStatPopups_default_instance_;
class CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BeginLastHitChallenge> _instance;
} _CDOTAClientMsg_BeginLastHitChallenge_default_instance_;
class CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UpdateQuickBuyItem> _instance;
} _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_;
class CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UpdateQuickBuy> _instance;
} _CDOTAClientMsg_UpdateQuickBuy_default_instance_;
class CDOTAClientMsg_RecordVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RecordVote> _instance;
} _CDOTAClientMsg_RecordVote_default_instance_;
class CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_WillPurchaseAlert> _instance;
} _CDOTAClientMsg_WillPurchaseAlert_default_instance_;
class CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BuyBackStateAlert> _instance;
} _CDOTAClientMsg_BuyBackStateAlert_default_instance_;
class CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_QuickBuyAlert> _instance;
} _CDOTAClientMsg_QuickBuyAlert_default_instance_;
class CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_PlayerShowCase> _instance;
} _CDOTAClientMsg_PlayerShowCase_default_instance_;
class CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CameraZoomAmount> _instance;
} _CDOTAClientMsg_CameraZoomAmount_default_instance_;
class CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BroadcasterUsingCameraman> _instance;
} _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_;
class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator> _instance;
} _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_;
class CAdditionalEquipSlotClientMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAdditionalEquipSlotClientMsg> _instance;
} _CAdditionalEquipSlotClientMsg_default_instance_;
class CDOTAClientMsg_FreeInventoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FreeInventory> _instance;
} _CDOTAClientMsg_FreeInventory_default_instance_;
class CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FillEmptySlotsWithBots> _instance;
} _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_;
class CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_HeroStatueLike> _instance;
} _CDOTAClientMsg_HeroStatueLike_default_instance_;
class CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EventCNY2015Cmd> _instance;
} _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
class CDOTAClientMsg_DemoHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_DemoHero> _instance;
} _CDOTAClientMsg_DemoHero_default_instance_;
class CDOTAClientMsg_ChallengeSelectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChallengeSelect> _instance;
} _CDOTAClientMsg_ChallengeSelect_default_instance_;
class CDOTAClientMsg_ChallengeRerollDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChallengeReroll> _instance;
} _CDOTAClientMsg_ChallengeReroll_default_instance_;
class CDOTAClientMsg_CoinWagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CoinWager> _instance;
} _CDOTAClientMsg_CoinWager_default_instance_;
class CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CoinWagerToken> _instance;
} _CDOTAClientMsg_CoinWagerToken_default_instance_;
class CDOTAClientMsg_RankWagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RankWager> _instance;
} _CDOTAClientMsg_RankWager_default_instance_;
class CDOTAClientMsg_EventPointsTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EventPointsTip> _instance;
} _CDOTAClientMsg_EventPointsTip_default_instance_;
class CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ExecuteOrders> _instance;
} _CDOTAClientMsg_ExecuteOrders_default_instance_;
class CDOTAClientMsg_XPAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_XPAlert> _instance;
} _CDOTAClientMsg_XPAlert_default_instance_;
class CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_KillcamDamageTaken> _instance;
} _CDOTAClientMsg_KillcamDamageTaken_default_instance_;
class CDOTAClientMsg_MatchMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MatchMetadata> _instance;
} _CDOTAClientMsg_MatchMetadata_default_instance_;
class CDOTAClientMsg_KillMyHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_KillMyHero> _instance;
} _CDOTAClientMsg_KillMyHero_default_instance_;
class CDOTAClientMsg_QuestStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_QuestStatus> _instance;
} _CDOTAClientMsg_QuestStatus_default_instance_;
class CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ToggleAutoattack> _instance;
} _CDOTAClientMsg_ToggleAutoattack_default_instance_;
class CDOTAClientMsg_SpecialAbilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SpecialAbility> _instance;
} _CDOTAClientMsg_SpecialAbility_default_instance_;
class CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetEnemyStartingPosition> _instance;
} _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_;
class CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetDesiredWardPlacement> _instance;
} _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_;
class CDOTAClientMsg_RollDiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RollDice> _instance;
} _CDOTAClientMsg_RollDice_default_instance_;
class CDOTAClientMsg_FlipCoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FlipCoin> _instance;
} _CDOTAClientMsg_FlipCoin_default_instance_;
class CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RequestItemSuggestions> _instance;
} _CDOTAClientMsg_RequestItemSuggestions_default_instance_;
class CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MakeTeamCaptain> _instance;
} _CDOTAClientMsg_MakeTeamCaptain_default_instance_;
class CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_HelpTipSystemStateChanged> _instance;
} _CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_;
class CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RequestBulkCombatLog> _instance;
} _CDOTAClientMsg_RequestBulkCombatLog_default_instance_;
class CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_AbilityDraftRequestAbility> _instance;
} _CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_;
class CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_GuideSelectOption> _instance;
} _CDOTAClientMsg_GuideSelectOption_default_instance_;
class CDOTAClientMsg_GuideSelectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_GuideSelected> _instance;
} _CDOTAClientMsg_GuideSelected_default_instance_;
class CDOTAClientMsg_DamageReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_DamageReport> _instance;
} _CDOTAClientMsg_DamageReport_default_instance_;
class CDOTAClientMsg_SalutePlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SalutePlayer> _instance;
} _CDOTAClientMsg_SalutePlayer_default_instance_;
class CDOTAClientMsg_TipAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_TipAlert> _instance;
} _CDOTAClientMsg_TipAlert_default_instance_;
class CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EmptyTeleportAlert> _instance;
} _CDOTAClientMsg_EmptyTeleportAlert_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_MapPing_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_MapPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_MapPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_LocationPing_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ItemAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ItemAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ItemAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_ItemAlert_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_EnemyItemAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_EnemyItemAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_EnemyItemAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_EnemyItemAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_EnemyItemAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_EnemyItemAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ModifierAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ModifierAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ModifierAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ModifierAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ModifierAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ModifierAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ClickedBuff_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ClickedBuff_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ClickedBuff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ClickedBuff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ClickedBuff_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ClickedBuff_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_HPManaAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_HPManaAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_HPManaAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_HPManaAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_HPManaAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_HPManaAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_GlyphAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_GlyphAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_GlyphAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_GlyphAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_GlyphAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_GlyphAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_MapLine_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_MapLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_MapLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_MapLine_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_AspectRatio_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_AspectRatio_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_AspectRatio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_AspectRatio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_AspectRatio_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_AspectRatio_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_UnitsAutoAttackMode_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_UnitsAutoAttackMode_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_UnitsAutoAttackMode_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_UnitsAutoAttackMode_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_UnitsAutoAttackAfterSpell_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_UnitsAutoAttackAfterSpell_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_UnitsAutoAttackAfterSpell_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_TeleportRequiresHalt_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_TeleportRequiresHalt_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_TeleportRequiresHalt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_TeleportRequiresHalt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_TeleportRequiresHalt_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_TeleportRequiresHalt_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ChannelRequiresHalt_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ChannelRequiresHalt_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ChannelRequiresHalt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ChannelRequiresHalt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ChannelRequiresHalt_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ChannelRequiresHalt_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SearchString_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SearchString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SearchString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_Pause_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_Pause_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_Pause();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_Pause::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_Pause_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_Pause_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ShopViewMode_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ShopViewMode_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ShopViewMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ShopViewMode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ShopViewMode_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ShopViewMode_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SetUnitShareFlag_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SetUnitShareFlag_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SetUnitShareFlag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SetUnitShareFlag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SetUnitShareFlag_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SetUnitShareFlag_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SwapRequest_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SwapRequest_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SwapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SwapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SwapRequest_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SwapRequest_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SwapAccept_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SwapAccept_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SwapAccept();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SwapAccept::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SwapAccept_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SwapAccept_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_WorldLine_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_WorldLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_WorldLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_WorldLine_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_RequestGraphUpdate_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RequestGraphUpdate_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RequestGraphUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RequestGraphUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RequestGraphUpdate_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RequestGraphUpdate_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ChatWheel_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ChatWheel_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ChatWheel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ChatWheel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ChatWheel_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ChatWheel_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SendStatPopup_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SendStatPopup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SendStatPopup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_SendStatPopup_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_DismissAllStatPopups_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_DismissAllStatPopups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_DismissAllStatPopups::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_DismissAllStatPopups_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_BeginLastHitChallenge_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_BeginLastHitChallenge_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_BeginLastHitChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_BeginLastHitChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_BeginLastHitChallenge_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_BeginLastHitChallenge_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_UpdateQuickBuyItem_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_UpdateQuickBuy_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_UpdateQuickBuy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_UpdateQuickBuy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_RecordVote_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RecordVote_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RecordVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RecordVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RecordVote_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RecordVote_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_WillPurchaseAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_WillPurchaseAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_WillPurchaseAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_WillPurchaseAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_WillPurchaseAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_WillPurchaseAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_BuyBackStateAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_BuyBackStateAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_BuyBackStateAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_BuyBackStateAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_BuyBackStateAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_BuyBackStateAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_QuickBuyAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_QuickBuyAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_QuickBuyAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_QuickBuyAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_QuickBuyAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_QuickBuyAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_PlayerShowCase_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_PlayerShowCase_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_PlayerShowCase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_PlayerShowCase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_PlayerShowCase_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_PlayerShowCase_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_CameraZoomAmount_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_CameraZoomAmount_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_CameraZoomAmount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_CameraZoomAmount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_CameraZoomAmount_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_CameraZoomAmount_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_BroadcasterUsingCameraman_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_BroadcasterUsingCameraman_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_BroadcasterUsingCameraman_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CAdditionalEquipSlotClientMsg_default_instance_;
    new (ptr) ::proto::dota::CAdditionalEquipSlotClientMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CAdditionalEquipSlotClientMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_FreeInventory_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_FreeInventory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_FreeInventory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto}, {
      &scc_info_CAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_FillEmptySlotsWithBots_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_FillEmptySlotsWithBots_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_FillEmptySlotsWithBots_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_HeroStatueLike_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_HeroStatueLike_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_HeroStatueLike();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_HeroStatueLike::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_HeroStatueLike_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_HeroStatueLike_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_EventCNY2015Cmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_EventCNY2015Cmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_DemoHero_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_DemoHero_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_DemoHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_DemoHero::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_DemoHero_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_DemoHero_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ChallengeSelect_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ChallengeSelect_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ChallengeSelect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ChallengeSelect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ChallengeSelect_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ChallengeSelect_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ChallengeReroll_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ChallengeReroll_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ChallengeReroll();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ChallengeReroll::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ChallengeReroll_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ChallengeReroll_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_CoinWager_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_CoinWager_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_CoinWager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_CoinWager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_CoinWager_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_CoinWager_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_CoinWagerToken_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_CoinWagerToken_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_CoinWagerToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_CoinWagerToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_CoinWagerToken_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_CoinWagerToken_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_RankWager_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RankWager_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RankWager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RankWager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RankWager_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RankWager_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_EventPointsTip_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_EventPointsTip_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_EventPointsTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_EventPointsTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_EventPointsTip_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_EventPointsTip_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ExecuteOrders_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ExecuteOrders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ExecuteOrders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto}, {
      &scc_info_CDOTAMsg_UnitOrder_dota_5fcommonmessages_2eproto.base,}};

static void InitDefaultsCDOTAClientMsg_XPAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_XPAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_XPAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_XPAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_XPAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_XPAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_KillcamDamageTaken_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_KillcamDamageTaken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_KillcamDamageTaken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_MatchMetadata_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_MatchMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_MatchMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_KillMyHero_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_KillMyHero_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_KillMyHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_KillMyHero::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_KillMyHero_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_KillMyHero_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_QuestStatus_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_QuestStatus_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_QuestStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_QuestStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_QuestStatus_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_QuestStatus_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_ToggleAutoattack_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_ToggleAutoattack_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_ToggleAutoattack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_ToggleAutoattack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_ToggleAutoattack_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_ToggleAutoattack_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SpecialAbility_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SpecialAbility_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SpecialAbility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SpecialAbility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SpecialAbility_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SpecialAbility_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SetEnemyStartingPosition_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SetEnemyStartingPosition_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SetEnemyStartingPosition_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SetEnemyStartingPosition_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SetDesiredWardPlacement_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SetDesiredWardPlacement_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SetDesiredWardPlacement_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SetDesiredWardPlacement_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_RollDice_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RollDice_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RollDice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RollDice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RollDice_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RollDice_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_FlipCoin_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_FlipCoin_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_FlipCoin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_FlipCoin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_FlipCoin_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_FlipCoin_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_RequestItemSuggestions_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RequestItemSuggestions_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RequestItemSuggestions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RequestItemSuggestions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RequestItemSuggestions_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RequestItemSuggestions_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_MakeTeamCaptain_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_MakeTeamCaptain_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_MakeTeamCaptain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_MakeTeamCaptain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_MakeTeamCaptain_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_MakeTeamCaptain_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_HelpTipSystemStateChanged_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_HelpTipSystemStateChanged_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_HelpTipSystemStateChanged_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_RequestBulkCombatLog_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_RequestBulkCombatLog_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_RequestBulkCombatLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_RequestBulkCombatLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_RequestBulkCombatLog_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_RequestBulkCombatLog_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_AbilityDraftRequestAbility_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_AbilityDraftRequestAbility_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_AbilityDraftRequestAbility_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_GuideSelectOption_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_GuideSelectOption_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_GuideSelectOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_GuideSelectOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_GuideSelectOption_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_GuideSelectOption_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_GuideSelected_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_GuideSelected_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_GuideSelected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_GuideSelected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_GuideSelected_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_GuideSelected_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_DamageReport_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_DamageReport_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_DamageReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_DamageReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_DamageReport_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_DamageReport_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_SalutePlayer_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_SalutePlayer_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_SalutePlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_SalutePlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_SalutePlayer_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_SalutePlayer_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_TipAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_TipAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_TipAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto}, {}};

static void InitDefaultsCDOTAClientMsg_EmptyTeleportAlert_dota_5fclientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAClientMsg_EmptyTeleportAlert_default_instance_;
    new (ptr) ::proto::dota::CDOTAClientMsg_EmptyTeleportAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAClientMsg_EmptyTeleportAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientMsg_EmptyTeleportAlert_dota_5fclientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientMsg_EmptyTeleportAlert_dota_5fclientmessages_2eproto}, {}};

void InitDefaults_dota_5fclientmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_EnemyItemAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ModifierAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ClickedBuff_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_HPManaAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_GlyphAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_AspectRatio_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_UnitsAutoAttackMode_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_UnitsAutoAttackAfterSpell_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_TeleportRequiresHalt_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ChannelRequiresHalt_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_Pause_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ShopViewMode_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SetUnitShareFlag_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SwapRequest_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SwapAccept_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RequestGraphUpdate_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ChatWheel_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_BeginLastHitChallenge_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RecordVote_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_WillPurchaseAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_BuyBackStateAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_QuickBuyAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_PlayerShowCase_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_CameraZoomAmount_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_BroadcasterUsingCameraman_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_FillEmptySlotsWithBots_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_HeroStatueLike_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_DemoHero_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ChallengeSelect_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ChallengeReroll_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_CoinWager_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_CoinWagerToken_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RankWager_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_EventPointsTip_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_XPAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_KillMyHero_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_QuestStatus_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_ToggleAutoattack_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SpecialAbility_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SetEnemyStartingPosition_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SetDesiredWardPlacement_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RollDice_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_FlipCoin_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RequestItemSuggestions_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_MakeTeamCaptain_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_HelpTipSystemStateChanged_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_RequestBulkCombatLog_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_AbilityDraftRequestAbility_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_GuideSelectOption_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_GuideSelected_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_DamageReport_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_SalutePlayer_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientMsg_EmptyTeleportAlert_dota_5fclientmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fclientmessages_2eproto[70];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fclientmessages_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fclientmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fclientmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapPing, location_ping_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ItemAlert, item_alert_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, rune_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, item_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, primary_charges_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EnemyItemAlert, secondary_charges_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ModifierAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ModifierAlert, buff_internal_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ModifierAlert, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ClickedBuff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ClickedBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ClickedBuff, buff_internal_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ClickedBuff, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HPManaAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HPManaAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HPManaAlert, show_raw_values_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GlyphAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GlyphAlert, negative_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MapLine, mapline_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AspectRatio, ratio_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode, mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode, unit_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TeleportRequiresHalt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TeleportRequiresHalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChannelRequiresHalt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChannelRequiresHalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChannelRequiresHalt, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SearchString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SearchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SearchString, search_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_Pause, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_Pause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ShopViewMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ShopViewMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ShopViewMode, mode_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetUnitShareFlag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetUnitShareFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetUnitShareFlag, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetUnitShareFlag, flag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetUnitShareFlag, state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapRequest, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapAccept, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SwapAccept, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WorldLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WorldLine, worldline_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestGraphUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestGraphUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChatWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChatWheel, chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChatWheel, param_hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SendStatPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SendStatPopup, statpopup_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DismissAllStatPopups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DismissAllStatPopups, dismissallmsg_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BeginLastHitChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BeginLastHitChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_UpdateQuickBuy, items_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RecordVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RecordVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RecordVote, choice_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WillPurchaseAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WillPurchaseAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_WillPurchaseAlert, suggestion_player_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BuyBackStateAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, gold_cost_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, item_cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuickBuyAlert, show_buyback_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_PlayerShowCase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_PlayerShowCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_PlayerShowCase, showcase_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CameraZoomAmount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CameraZoomAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlotClientMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlotClientMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlotClientMsg, class_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlotClientMsg, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CAdditionalEquipSlotClientMsg, def_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FreeInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FreeInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FreeInventory, equips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots, fillwithbots_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HeroStatueLike, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HeroStatueLike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventCNY2015Cmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventCNY2015Cmd, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, hero_id_to_spawn_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, item_defs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, item_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, style_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DemoHero, keep_existing_demohero_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeSelect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeSelect, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeSelect, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeSelect, sequence_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ChallengeReroll, hero_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWager, wager_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWagerToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWagerToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_CoinWagerToken, wager_token_item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RankWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RankWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RankWager, announce_wager_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventPointsTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventPointsTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ExecuteOrders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ExecuteOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ExecuteOrders, orders_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_XPAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_XPAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_XPAlert, damage_taken_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, damage_taken_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, item_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, hero_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillcamDamageTaken, damage_color_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MatchMetadata, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MatchMetadata, metadata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillMyHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_KillMyHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, quest_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, progress_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, goal_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, query_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, fail_gametime_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_QuestStatus, item_ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ToggleAutoattack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ToggleAutoattack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ToggleAutoattack, mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_ToggleAutoattack, show_message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SpecialAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SpecialAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SpecialAbility, ability_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SpecialAbility, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition, enemy_player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition, enemy_starting_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement, ward_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement, ward_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement, ward_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RollDice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RollDice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RollDice, channel_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RollDice, roll_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RollDice, roll_max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FlipCoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FlipCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_FlipCoin, channel_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestItemSuggestions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MakeTeamCaptain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MakeTeamCaptain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_MakeTeamCaptain, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged, tip_displayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, recent_player_death_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog, player_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility, requested_ability_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelectOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelectOption, option_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelectOption, force_recalculate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelected, guide_workshop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_GuideSelected, is_plus_guide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, source_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, damage_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_DamageReport, broadcast_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SalutePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SalutePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SalutePlayer, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_SalutePlayer, event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TipAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_TipAlert, tip_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EmptyTeleportAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EmptyTeleportAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAClientMsg_EmptyTeleportAlert, target_entindex_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::dota::CDOTAClientMsg_MapPing)},
  { 7, 13, sizeof(::proto::dota::CDOTAClientMsg_ItemAlert)},
  { 14, 24, sizeof(::proto::dota::CDOTAClientMsg_EnemyItemAlert)},
  { 29, 36, sizeof(::proto::dota::CDOTAClientMsg_ModifierAlert)},
  { 38, 45, sizeof(::proto::dota::CDOTAClientMsg_ClickedBuff)},
  { 47, 54, sizeof(::proto::dota::CDOTAClientMsg_HPManaAlert)},
  { 56, 62, sizeof(::proto::dota::CDOTAClientMsg_GlyphAlert)},
  { 63, 69, sizeof(::proto::dota::CDOTAClientMsg_MapLine)},
  { 70, 76, sizeof(::proto::dota::CDOTAClientMsg_AspectRatio)},
  { 77, 84, sizeof(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode)},
  { 86, 92, sizeof(::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell)},
  { 93, 99, sizeof(::proto::dota::CDOTAClientMsg_TeleportRequiresHalt)},
  { 100, 106, sizeof(::proto::dota::CDOTAClientMsg_ChannelRequiresHalt)},
  { 107, 113, sizeof(::proto::dota::CDOTAClientMsg_SearchString)},
  { 114, 119, sizeof(::proto::dota::CDOTAClientMsg_Pause)},
  { 119, 125, sizeof(::proto::dota::CDOTAClientMsg_ShopViewMode)},
  { 126, 134, sizeof(::proto::dota::CDOTAClientMsg_SetUnitShareFlag)},
  { 137, 143, sizeof(::proto::dota::CDOTAClientMsg_SwapRequest)},
  { 144, 150, sizeof(::proto::dota::CDOTAClientMsg_SwapAccept)},
  { 151, 157, sizeof(::proto::dota::CDOTAClientMsg_WorldLine)},
  { 158, 163, sizeof(::proto::dota::CDOTAClientMsg_RequestGraphUpdate)},
  { 163, 170, sizeof(::proto::dota::CDOTAClientMsg_ChatWheel)},
  { 172, 178, sizeof(::proto::dota::CDOTAClientMsg_SendStatPopup)},
  { 179, 185, sizeof(::proto::dota::CDOTAClientMsg_DismissAllStatPopups)},
  { 186, 193, sizeof(::proto::dota::CDOTAClientMsg_BeginLastHitChallenge)},
  { 195, 202, sizeof(::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem)},
  { 204, 210, sizeof(::proto::dota::CDOTAClientMsg_UpdateQuickBuy)},
  { 211, 217, sizeof(::proto::dota::CDOTAClientMsg_RecordVote)},
  { 218, 226, sizeof(::proto::dota::CDOTAClientMsg_WillPurchaseAlert)},
  { 229, 234, sizeof(::proto::dota::CDOTAClientMsg_BuyBackStateAlert)},
  { 234, 243, sizeof(::proto::dota::CDOTAClientMsg_QuickBuyAlert)},
  { 247, 253, sizeof(::proto::dota::CDOTAClientMsg_PlayerShowCase)},
  { 254, 260, sizeof(::proto::dota::CDOTAClientMsg_CameraZoomAmount)},
  { 261, 267, sizeof(::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman)},
  { 268, 274, sizeof(::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)},
  { 275, 283, sizeof(::proto::dota::CAdditionalEquipSlotClientMsg)},
  { 286, 292, sizeof(::proto::dota::CDOTAClientMsg_FreeInventory)},
  { 293, 299, sizeof(::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots)},
  { 300, 306, sizeof(::proto::dota::CDOTAClientMsg_HeroStatueLike)},
  { 307, 313, sizeof(::proto::dota::CDOTAClientMsg_EventCNY2015Cmd)},
  { 314, 325, sizeof(::proto::dota::CDOTAClientMsg_DemoHero)},
  { 331, 339, sizeof(::proto::dota::CDOTAClientMsg_ChallengeSelect)},
  { 342, 351, sizeof(::proto::dota::CDOTAClientMsg_ChallengeReroll)},
  { 355, 361, sizeof(::proto::dota::CDOTAClientMsg_CoinWager)},
  { 362, 368, sizeof(::proto::dota::CDOTAClientMsg_CoinWagerToken)},
  { 369, 375, sizeof(::proto::dota::CDOTAClientMsg_RankWager)},
  { 376, 382, sizeof(::proto::dota::CDOTAClientMsg_EventPointsTip)},
  { 383, 389, sizeof(::proto::dota::CDOTAClientMsg_ExecuteOrders)},
  { 390, 397, sizeof(::proto::dota::CDOTAClientMsg_XPAlert)},
  { 399, 410, sizeof(::proto::dota::CDOTAClientMsg_KillcamDamageTaken)},
  { 416, 423, sizeof(::proto::dota::CDOTAClientMsg_MatchMetadata)},
  { 425, 430, sizeof(::proto::dota::CDOTAClientMsg_KillMyHero)},
  { 430, 442, sizeof(::proto::dota::CDOTAClientMsg_QuestStatus)},
  { 449, 456, sizeof(::proto::dota::CDOTAClientMsg_ToggleAutoattack)},
  { 458, 465, sizeof(::proto::dota::CDOTAClientMsg_SpecialAbility)},
  { 467, 474, sizeof(::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition)},
  { 476, 484, sizeof(::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement)},
  { 487, 495, sizeof(::proto::dota::CDOTAClientMsg_RollDice)},
  { 498, 504, sizeof(::proto::dota::CDOTAClientMsg_FlipCoin)},
  { 505, 510, sizeof(::proto::dota::CDOTAClientMsg_RequestItemSuggestions)},
  { 510, 516, sizeof(::proto::dota::CDOTAClientMsg_MakeTeamCaptain)},
  { 517, 523, sizeof(::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged)},
  { 524, 533, sizeof(::proto::dota::CDOTAClientMsg_RequestBulkCombatLog)},
  { 537, 543, sizeof(::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility)},
  { 544, 551, sizeof(::proto::dota::CDOTAClientMsg_GuideSelectOption)},
  { 553, 560, sizeof(::proto::dota::CDOTAClientMsg_GuideSelected)},
  { 562, 571, sizeof(::proto::dota::CDOTAClientMsg_DamageReport)},
  { 575, 582, sizeof(::proto::dota::CDOTAClientMsg_SalutePlayer)},
  { 584, 590, sizeof(::proto::dota::CDOTAClientMsg_TipAlert)},
  { 591, 597, sizeof(::proto::dota::CDOTAClientMsg_EmptyTeleportAlert)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_MapPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_EnemyItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ModifierAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ClickedBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_HPManaAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_GlyphAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_MapLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_AspectRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_UnitsAutoAttackMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_TeleportRequiresHalt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ChannelRequiresHalt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SearchString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_Pause_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ShopViewMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SetUnitShareFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SwapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SwapAccept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RequestGraphUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ChatWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_BeginLastHitChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_UpdateQuickBuyItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_UpdateQuickBuy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RecordVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_WillPurchaseAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_BuyBackStateAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_QuickBuyAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_PlayerShowCase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_CameraZoomAmount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CAdditionalEquipSlotClientMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_FreeInventory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_HeroStatueLike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_EventCNY2015Cmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_DemoHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ChallengeSelect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ChallengeReroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_CoinWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_CoinWagerToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RankWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_EventPointsTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ExecuteOrders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_XPAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_KillcamDamageTaken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_MatchMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_KillMyHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_QuestStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_ToggleAutoattack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SpecialAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SetEnemyStartingPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SetDesiredWardPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RollDice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_FlipCoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RequestItemSuggestions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_MakeTeamCaptain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_RequestBulkCombatLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_GuideSelectOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_GuideSelected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_DamageReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_SalutePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_TipAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAClientMsg_EmptyTeleportAlert_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fclientmessages_2eproto = {
  {}, AddDescriptors_dota_5fclientmessages_2eproto, "dota_clientmessages.proto", schemas,
  file_default_instances, TableStruct_dota_5fclientmessages_2eproto::offsets,
  file_level_metadata_dota_5fclientmessages_2eproto, 70, file_level_enum_descriptors_dota_5fclientmessages_2eproto, file_level_service_descriptors_dota_5fclientmessages_2eproto,
};

const char descriptor_table_protodef_dota_5fclientmessages_2eproto[] =
  "\n\031dota_clientmessages.proto\022\nproto.dota\032"
  "\031dota_commonmessages.proto\032\027dota_shared_"
  "enums.proto\"R\n\026CDOTAClientMsg_MapPing\0228\n"
  "\rlocation_ping\030\001 \001(\0132!.proto.dota.CDOTAM"
  "sg_LocationPing\"N\n\030CDOTAClientMsg_ItemAl"
  "ert\0222\n\nitem_alert\030\001 \001(\0132\036.proto.dota.CDO"
  "TAMsg_ItemAlert\"\235\001\n\035CDOTAClientMsg_Enemy"
  "ItemAlert\022\025\n\ritem_entindex\030\001 \001(\r\022\021\n\trune"
  "_type\030\002 \001(\r\022\026\n\nitem_level\030\003 \001(\005:\002-1\022\033\n\017p"
  "rimary_charges\030\004 \001(\005:\002-1\022\035\n\021secondary_ch"
  "arges\030\005 \001(\005:\002-1\"T\n\034CDOTAClientMsg_Modifi"
  "erAlert\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n\017"
  "target_entindex\030\002 \001(\r\"R\n\032CDOTAClientMsg_"
  "ClickedBuff\022\033\n\023buff_internal_index\030\001 \001(\005"
  "\022\027\n\017target_entindex\030\002 \001(\r\"N\n\032CDOTAClient"
  "Msg_HPManaAlert\022\027\n\017target_entindex\030\001 \001(\r"
  "\022\027\n\017show_raw_values\030\002 \001(\010\"-\n\031CDOTAClient"
  "Msg_GlyphAlert\022\020\n\010negative\030\001 \001(\010\"G\n\026CDOT"
  "AClientMsg_MapLine\022-\n\007mapline\030\001 \001(\0132\034.pr"
  "oto.dota.CDOTAMsg_MapLine\"+\n\032CDOTAClient"
  "Msg_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"\270\002\n\"CDOTA"
  "ClientMsg_UnitsAutoAttackMode\022K\n\004mode\030\001 "
  "\001(\01624.proto.dota.CDOTAClientMsg_UnitsAut"
  "oAttackMode.EMode:\007INVALID\022S\n\tunit_type\030"
  "\002 \001(\01628.proto.dota.CDOTAClientMsg_UnitsA"
  "utoAttackMode.EUnitType:\006NORMAL\"I\n\005EMode"
  "\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\t\n\005NEVER\020\000\022\023\n\017AFT"
  "ER_SPELLCAST\020\001\022\n\n\006ALWAYS\020\002\"%\n\tEUnitType\022"
  "\n\n\006NORMAL\020\000\022\014\n\010SUMMONED\020\001\";\n(CDOTAClient"
  "Msg_UnitsAutoAttackAfterSpell\022\017\n\007enabled"
  "\030\001 \001(\010\"6\n#CDOTAClientMsg_TeleportRequire"
  "sHalt\022\017\n\007enabled\030\001 \001(\010\"5\n\"CDOTAClientMsg"
  "_ChannelRequiresHalt\022\017\n\007enabled\030\001 \001(\010\"-\n"
  "\033CDOTAClientMsg_SearchString\022\016\n\006search\030\001"
  " \001(\t\"\026\n\024CDOTAClientMsg_Pause\"+\n\033CDOTACli"
  "entMsg_ShopViewMode\022\014\n\004mode\030\001 \001(\r\"P\n\037CDO"
  "TAClientMsg_SetUnitShareFlag\022\020\n\010playerID"
  "\030\001 \001(\r\022\014\n\004flag\030\002 \001(\r\022\r\n\005state\030\003 \001(\010\"/\n\032C"
  "DOTAClientMsg_SwapRequest\022\021\n\tplayer_id\030\001"
  " \001(\r\".\n\031CDOTAClientMsg_SwapAccept\022\021\n\tpla"
  "yer_id\030\001 \001(\r\"M\n\030CDOTAClientMsg_WorldLine"
  "\0221\n\tworldline\030\001 \001(\0132\036.proto.dota.CDOTAMs"
  "g_WorldLine\"#\n!CDOTAClientMsg_RequestGra"
  "phUpdate\"J\n\030CDOTAClientMsg_ChatWheel\022\027\n\017"
  "chat_message_id\030\001 \001(\r\022\025\n\rparam_hero_id\030\002"
  " \001(\r\"U\n\034CDOTAClientMsg_SendStatPopup\0225\n\t"
  "statpopup\030\001 \001(\0132\".proto.dota.CDOTAMsg_Se"
  "ndStatPopup\"g\n#CDOTAClientMsg_DismissAll"
  "StatPopups\022@\n\rdismissallmsg\030\001 \001(\0132).prot"
  "o.dota.CDOTAMsg_DismissAllStatPopups\"S\n$"
  "CDOTAClientMsg_BeginLastHitChallenge\022\023\n\013"
  "chosen_lane\030\001 \001(\r\022\026\n\016helper_enabled\030\002 \001("
  "\010\"Q\n!CDOTAClientMsg_UpdateQuickBuyItem\022\027"
  "\n\017item_ability_id\030\001 \001(\005\022\023\n\013purchasable\030\002"
  " \001(\010\"]\n\035CDOTAClientMsg_UpdateQuickBuy\022<\n"
  "\005items\030\001 \003(\0132-.proto.dota.CDOTAClientMsg"
  "_UpdateQuickBuyItem\"1\n\031CDOTAClientMsg_Re"
  "cordVote\022\024\n\014choice_index\030\001 \001(\005\"q\n CDOTAC"
  "lientMsg_WillPurchaseAlert\022\027\n\017item_abili"
  "ty_id\030\001 \001(\005\022\026\n\016gold_remaining\030\002 \001(\r\022\034\n\024s"
  "uggestion_player_id\030\003 \001(\005\"\"\n CDOTAClient"
  "Msg_BuyBackStateAlert\"\177\n\034CDOTAClientMsg_"
  "QuickBuyAlert\022\027\n\017item_ability_id\030\001 \001(\005\022\021"
  "\n\tgold_cost\030\002 \001(\005\022\035\n\025item_cooldown_secon"
  "ds\030\003 \001(\005\022\024\n\014show_buyback\030\004 \001(\010\"1\n\035CDOTAC"
  "lientMsg_PlayerShowCase\022\020\n\010showcase\030\001 \001("
  "\010\"6\n\037CDOTAClientMsg_CameraZoomAmount\022\023\n\013"
  "zoom_amount\030\001 \001(\002\"=\n(CDOTAClientMsg_Broa"
  "dcasterUsingCameraman\022\021\n\tcameraman\030\001 \001(\010"
  "\"H\n5CDOTAClientMsg_BroadcasterUsingAssis"
  "tedCameraOperator\022\017\n\007enabled\030\001 \001(\010\"U\n\035CA"
  "dditionalEquipSlotClientMsg\022\020\n\010class_id\030"
  "\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001("
  "\r\"Y\n\034CDOTAClientMsg_FreeInventory\0229\n\006equ"
  "ips\030\001 \003(\0132).proto.dota.CAdditionalEquipS"
  "lotClientMsg\"=\n%CDOTAClientMsg_FillEmpty"
  "SlotsWithBots\022\024\n\014fillwithbots\030\001 \001(\010\"8\n\035C"
  "DOTAClientMsg_HeroStatueLike\022\027\n\017owner_pl"
  "ayer_id\030\001 \001(\r\".\n\036CDOTAClientMsg_EventCNY"
  "2015Cmd\022\014\n\004data\030\001 \001(\014\"\236\001\n\027CDOTAClientMsg"
  "_DemoHero\022\017\n\007hero_id\030\001 \001(\005\022\030\n\020hero_id_to"
  "_spawn\030\002 \001(\005\022\021\n\titem_defs\030\003 \003(\r\022\020\n\010item_"
  "ids\030\004 \003(\004\022\023\n\013style_index\030\005 \001(\r\022\036\n\026keep_e"
  "xisting_demohero\030\006 \001(\010\"X\n\036CDOTAClientMsg"
  "_ChallengeSelect\022\020\n\010event_id\030\001 \001(\r\022\017\n\007sl"
  "ot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"\214\001\n\036CDO"
  "TAClientMsg_ChallengeReroll\0223\n\010event_id\030"
  "\001 \001(\0162\022.proto.dota.EEvent:\rEVENT_ID_NONE"
  "\022\017\n\007slot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\022\017"
  "\n\007hero_id\030\004 \001(\r\"0\n\030CDOTAClientMsg_CoinWa"
  "ger\022\024\n\014wager_amount\030\001 \001(\r\"<\n\035CDOTAClient"
  "Msg_CoinWagerToken\022\033\n\023wager_token_item_i"
  "d\030\001 \001(\004\"2\n\030CDOTAClientMsg_RankWager\022\026\n\016a"
  "nnounce_wager\030\001 \001(\010\"<\n\035CDOTAClientMsg_Ev"
  "entPointsTip\022\033\n\023recipient_player_id\030\001 \001("
  "\r\"N\n\034CDOTAClientMsg_ExecuteOrders\022.\n\006ord"
  "ers\030\001 \003(\0132\036.proto.dota.CDOTAMsg_UnitOrde"
  "r\"G\n\026CDOTAClientMsg_XPAlert\022\027\n\017target_en"
  "tindex\030\001 \001(\r\022\024\n\014damage_taken\030\002 \001(\r\"\247\001\n!C"
  "DOTAClientMsg_KillcamDamageTaken\022\027\n\017targ"
  "et_entindex\030\001 \001(\r\022\024\n\014damage_taken\030\002 \001(\r\022"
  "\021\n\titem_type\030\003 \001(\r\022\027\n\017item_ability_id\030\004 "
  "\001(\r\022\021\n\thero_name\030\005 \001(\t\022\024\n\014damage_color\030\006"
  " \001(\t\"B\n\034CDOTAClientMsg_MatchMetadata\022\020\n\010"
  "match_id\030\001 \001(\004\022\020\n\010metadata\030\002 \001(\014\"\033\n\031CDOT"
  "AClientMsg_KillMyHero\"\243\001\n\032CDOTAClientMsg"
  "_QuestStatus\022\020\n\010quest_id\030\001 \001(\r\022\024\n\014challe"
  "nge_id\030\002 \001(\r\022\020\n\010progress\030\003 \001(\r\022\014\n\004goal\030\004"
  " \001(\r\022\r\n\005query\030\005 \001(\r\022\025\n\rfail_gametime\030\006 \001"
  "(\002\022\027\n\017item_ability_id\030\007 \001(\r\"E\n\037CDOTAClie"
  "ntMsg_ToggleAutoattack\022\014\n\004mode\030\001 \001(\005\022\024\n\014"
  "show_message\030\002 \001(\010\"O\n\035CDOTAClientMsg_Spe"
  "cialAbility\022\025\n\rability_index\030\001 \001(\r\022\027\n\017ta"
  "rget_entindex\030\002 \001(\r\"c\n\'CDOTAClientMsg_Se"
  "tEnemyStartingPosition\022\027\n\017enemy_player_i"
  "d\030\001 \001(\r\022\037\n\027enemy_starting_position\030\002 \001(\r"
  "\"\\\n&CDOTAClientMsg_SetDesiredWardPlaceme"
  "nt\022\022\n\nward_index\030\001 \001(\r\022\016\n\006ward_x\030\002 \001(\002\022\016"
  "\n\006ward_y\030\003 \001(\002\"S\n\027CDOTAClientMsg_RollDic"
  "e\022\024\n\014channel_type\030\001 \001(\r\022\020\n\010roll_min\030\002 \001("
  "\r\022\020\n\010roll_max\030\003 \001(\r\"/\n\027CDOTAClientMsg_Fl"
  "ipCoin\022\024\n\014channel_type\030\001 \001(\r\"\'\n%CDOTACli"
  "entMsg_RequestItemSuggestions\"3\n\036CDOTACl"
  "ientMsg_MakeTeamCaptain\022\021\n\tplayer_id\030\001 \001"
  "(\r\"A\n(CDOTAClientMsg_HelpTipSystemStateC"
  "hanged\022\025\n\rtip_displayed\030\001 \001(\010\"z\n#CDOTACl"
  "ientMsg_RequestBulkCombatLog\022\021\n\tgame_tim"
  "e\030\001 \001(\002\022\020\n\010duration\030\002 \001(\002\022\033\n\023recent_play"
  "er_death\030\003 \001(\010\022\021\n\tplayer_id\030\004 \001(\005\"I\n)CDO"
  "TAClientMsg_AbilityDraftRequestAbility\022\034"
  "\n\024requested_ability_id\030\001 \001(\r\"M\n CDOTACli"
  "entMsg_GuideSelectOption\022\016\n\006option\030\001 \001(\r"
  "\022\031\n\021force_recalculate\030\002 \001(\010\"P\n\034CDOTAClie"
  "ntMsg_GuideSelected\022\031\n\021guide_workshop_id"
  "\030\001 \001(\004\022\025\n\ris_plus_guide\030\002 \001(\010\"w\n\033CDOTACl"
  "ientMsg_DamageReport\022\026\n\016target_hero_id\030\001"
  " \001(\r\022\026\n\016source_hero_id\030\002 \001(\r\022\025\n\rdamage_a"
  "mount\030\003 \001(\005\022\021\n\tbroadcast\030\004 \001(\010\"I\n\033CDOTAC"
  "lientMsg_SalutePlayer\022\030\n\020target_player_i"
  "d\030\001 \001(\005\022\020\n\010event_id\030\002 \001(\005\"+\n\027CDOTAClient"
  "Msg_TipAlert\022\020\n\010tip_text\030\001 \001(\t\"<\n!CDOTAC"
  "lientMsg_EmptyTeleportAlert\022\027\n\017target_en"
  "tindex\030\001 \001(\005*\356\021\n\023EDotaClientMessages\022\024\n\017"
  "DOTA_CM_MapLine\020\255\002\022\030\n\023DOTA_CM_AspectRati"
  "o\020\256\002\022\024\n\017DOTA_CM_MapPing\020\257\002\022\034\n\027DOTA_CM_Un"
  "itsAutoAttack\020\260\002\022\031\n\024DOTA_CM_SearchString"
  "\020\263\002\022\022\n\rDOTA_CM_Pause\020\264\002\022\031\n\024DOTA_CM_ShopV"
  "iewMode\020\265\002\022\035\n\030DOTA_CM_SetUnitShareFlag\020\266"
  "\002\022\030\n\023DOTA_CM_SwapRequest\020\267\002\022\027\n\022DOTA_CM_S"
  "wapAccept\020\270\002\022\026\n\021DOTA_CM_WorldLine\020\271\002\022\037\n\032"
  "DOTA_CM_RequestGraphUpdate\020\272\002\022\026\n\021DOTA_CM"
  "_ItemAlert\020\273\002\022\026\n\021DOTA_CM_ChatWheel\020\274\002\022\032\n"
  "\025DOTA_CM_SendStatPopup\020\275\002\022\"\n\035DOTA_CM_Beg"
  "inLastHitChallenge\020\276\002\022\033\n\026DOTA_CM_UpdateQ"
  "uickBuy\020\277\002\022\036\n\031DOTA_CM_UpdateCoachListen\020"
  "\300\002\022\031\n\024DOTA_CM_CoachHUDPing\020\301\002\022\027\n\022DOTA_CM"
  "_RecordVote\020\302\002\022&\n!DOTA_CM_UnitsAutoAttac"
  "kAfterSpell\020\303\002\022\036\n\031DOTA_CM_WillPurchaseAl"
  "ert\020\304\002\022\033\n\026DOTA_CM_PlayerShowCase\020\305\002\022!\n\034D"
  "OTA_CM_TeleportRequiresHalt\020\306\002\022\035\n\030DOTA_C"
  "M_CameraZoomAmount\020\307\002\022%\n DOTA_CM_Broadca"
  "sterUsingCamerman\020\310\002\0223\n.DOTA_CM_Broadcas"
  "terUsingAssistedCameraOperator\020\311\002\022\033\n\026DOT"
  "A_CM_EnemyItemAlert\020\312\002\022\032\n\025DOTA_CM_FreeIn"
  "ventory\020\313\002\022\036\n\031DOTA_CM_BuyBackStateAlert\020"
  "\314\002\022\032\n\025DOTA_CM_QuickBuyAlert\020\315\002\022\033\n\026DOTA_C"
  "M_HeroStatueLike\020\316\002\022\032\n\025DOTA_CM_ModifierA"
  "lert\020\317\002\022\037\n\032DOTA_CM_TeamShowcaseEditor\020\320\002"
  "\022\030\n\023DOTA_CM_HPManaAlert\020\321\002\022\027\n\022DOTA_CM_Gl"
  "yphAlert\020\322\002\022#\n\036DOTA_CM_TeamShowcaseClien"
  "tData\020\323\002\022\035\n\030DOTA_CM_PlayTeamShowcase\020\324\002\022"
  "\034\n\027DOTA_CM_EventCNY2015Cmd\020\325\002\022#\n\036DOTA_CM"
  "_FillEmptySlotsWithBots\020\326\002\022\025\n\020DOTA_CM_De"
  "moHero\020\327\002\022$\n\037DOTA_CM_AbilityLearnModeTog"
  "gled\020\330\002\022\034\n\027DOTA_CM_AbilityStartUse\020\331\002\022\034\n"
  "\027DOTA_CM_ChallengeSelect\020\332\002\022\034\n\027DOTA_CM_C"
  "hallengeReroll\020\333\002\022\030\n\023DOTA_CM_ClickedBuff"
  "\020\334\002\022\026\n\021DOTA_CM_CoinWager\020\335\002\022\032\n\025DOTA_CM_E"
  "xecuteOrders\020\336\002\022\024\n\017DOTA_CM_XPAlert\020\337\002\022\033\n"
  "\026DOTA_CM_EventPointsTip\020\341\002\022\032\n\025DOTA_CM_Ma"
  "tchMetadata\020\342\002\022\027\n\022DOTA_CM_KillMyHero\020\343\002\022"
  "\030\n\023DOTA_CM_QuestStatus\020\344\002\022\035\n\030DOTA_CM_Tog"
  "gleAutoattack\020\345\002\022\033\n\026DOTA_CM_SpecialAbili"
  "ty\020\346\002\022\037\n\032DOTA_CM_KillcamDamageTaken\020\347\002\022%"
  "\n DOTA_CM_SetEnemyStartingPosition\020\350\002\022$\n"
  "\037DOTA_CM_SetDesiredWardPlacement\020\351\002\022\025\n\020D"
  "OTA_CM_RollDice\020\352\002\022\025\n\020DOTA_CM_FlipCoin\020\353"
  "\002\022#\n\036DOTA_CM_RequestItemSuggestions\020\354\002\022\034"
  "\n\027DOTA_CM_MakeTeamCaptain\020\355\002\022\033\n\026DOTA_CM_"
  "CoinWagerToken\020\356\002\022\026\n\021DOTA_CM_RankWager\020\357"
  "\002\022!\n\034DOTA_CM_DismissAllStatPopups\020\360\002\022&\n!"
  "DOTA_CM_HelpTipSystemStateChanged\020\361\002\022 \n\033"
  "DOTA_CM_ChannelRequiresHalt\020\362\002\022!\n\034DOTA_C"
  "M_RequestBulkCombatLog\020\363\002\022\'\n\"DOTA_CM_Abi"
  "lityDraftRequestAbility\020\364\002\022\036\n\031DOTA_CM_Gu"
  "ideSelectOption\020\365\002\022\032\n\025DOTA_CM_GuideSelec"
  "ted\020\366\002\022\031\n\024DOTA_CM_DamageReport\020\367\002\022\031\n\024DOT"
  "A_CM_SalutePlayer\020\370\002\022\027\n\022DOTA_CM_SprayWhe"
  "el\020\371\002\022\025\n\020DOTA_CM_TipAlert\020\372\002\022\037\n\032DOTA_CM_"
  "EmptyTeleportAlert\020\373\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fclientmessages_2eproto = {
  false, InitDefaults_dota_5fclientmessages_2eproto, 
  descriptor_table_protodef_dota_5fclientmessages_2eproto,
  "dota_clientmessages.proto", &assign_descriptors_table_dota_5fclientmessages_2eproto, 7988,
};

void AddDescriptors_dota_5fclientmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_dota_5fcommonmessages_2eproto,
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fclientmessages_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fclientmessages_2eproto = []() { AddDescriptors_dota_5fclientmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[0];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::INVALID;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::NEVER;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::AFTER_SPELLCAST;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::ALWAYS;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[1];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::NORMAL;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::SUMMONED;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fclientmessages_2eproto);
  return file_level_enum_descriptors_dota_5fclientmessages_2eproto[2];
}
bool EDotaClientMessages_IsValid(int value) {
  switch (value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDOTAClientMsg_MapPing::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_MapPing_default_instance_._instance.get_mutable()->location_ping_ = const_cast< ::proto::dota::CDOTAMsg_LocationPing*>(
      ::proto::dota::CDOTAMsg_LocationPing::internal_default_instance());
}
class CDOTAClientMsg_MapPing::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_LocationPing& location_ping(const CDOTAClientMsg_MapPing* msg);
  static void set_has_location_ping(CDOTAClientMsg_MapPing* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_LocationPing&
CDOTAClientMsg_MapPing::HasBitSetters::location_ping(const CDOTAClientMsg_MapPing* msg) {
  return *msg->location_ping_;
}
void CDOTAClientMsg_MapPing::clear_location_ping() {
  if (location_ping_ != nullptr) location_ping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MapPing::kLocationPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MapPing)
}
CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_ping()) {
    location_ping_ = new ::proto::dota::CDOTAMsg_LocationPing(*from.location_ping_);
  } else {
    location_ping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto.base);
  location_ping_ = nullptr;
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MapPing)
  SharedDtor();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  if (this != internal_default_instance()) delete location_ping_;
}

void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_MapPing& CDOTAClientMsg_MapPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_MapPing_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_MapPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MapPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ping_ != nullptr);
    location_ping_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_MapPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_MapPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_LocationPing::_InternalParse;
        object = msg->mutable_location_ping();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_MapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MapPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MapPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MapPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_MapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MapPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::location_ping(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MapPing)
}

::google::protobuf::uint8* CDOTAClientMsg_MapPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MapPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::location_ping(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MapPing)
  return target;
}

size_t CDOTAClientMsg_MapPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MapPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_ping_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapPing* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_MapPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MapPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MapPing)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location_ping()) {
    mutable_location_ping()->::proto::dota::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
  }
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapPing::Swap(CDOTAClientMsg_MapPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapPing::InternalSwap(CDOTAClientMsg_MapPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_ping_, other->location_ping_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ItemAlert::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_ItemAlert_default_instance_._instance.get_mutable()->item_alert_ = const_cast< ::proto::dota::CDOTAMsg_ItemAlert*>(
      ::proto::dota::CDOTAMsg_ItemAlert::internal_default_instance());
}
class CDOTAClientMsg_ItemAlert::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_ItemAlert& item_alert(const CDOTAClientMsg_ItemAlert* msg);
  static void set_has_item_alert(CDOTAClientMsg_ItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_ItemAlert&
CDOTAClientMsg_ItemAlert::HasBitSetters::item_alert(const CDOTAClientMsg_ItemAlert* msg) {
  return *msg->item_alert_;
}
void CDOTAClientMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != nullptr) item_alert_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ItemAlert)
}
CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_alert()) {
    item_alert_ = new ::proto::dota::CDOTAMsg_ItemAlert(*from.item_alert_);
  } else {
    item_alert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto.base);
  item_alert_ = nullptr;
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  if (this != internal_default_instance()) delete item_alert_;
}

void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ItemAlert& CDOTAClientMsg_ItemAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ItemAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_alert_ != nullptr);
    item_alert_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ItemAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ItemAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_ItemAlert::_InternalParse;
        object = msg->mutable_item_alert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ItemAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ItemAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::item_alert(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ItemAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::item_alert(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ItemAlert)
  return target;
}

size_t CDOTAClientMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_alert_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ItemAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_alert()) {
    mutable_item_alert()->::proto::dota::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
  }
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ItemAlert::Swap(CDOTAClientMsg_ItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ItemAlert::InternalSwap(CDOTAClientMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_alert_, other->item_alert_);
}

::google::protobuf::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_EnemyItemAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_EnemyItemAlert::HasBitSetters {
 public:
  static void set_has_item_entindex(CDOTAClientMsg_EnemyItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rune_type(CDOTAClientMsg_EnemyItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_level(CDOTAClientMsg_EnemyItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_primary_charges(CDOTAClientMsg_EnemyItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_secondary_charges(CDOTAClientMsg_EnemyItemAlert* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EnemyItemAlert::kItemEntindexFieldNumber;
const int CDOTAClientMsg_EnemyItemAlert::kRuneTypeFieldNumber;
const int CDOTAClientMsg_EnemyItemAlert::kItemLevelFieldNumber;
const int CDOTAClientMsg_EnemyItemAlert::kPrimaryChargesFieldNumber;
const int CDOTAClientMsg_EnemyItemAlert::kSecondaryChargesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}
CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_entindex_, &from.item_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_charges_) -
    reinterpret_cast<char*>(&item_entindex_)) + sizeof(primary_charges_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
  ::memset(&item_entindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rune_type_) -
      reinterpret_cast<char*>(&item_entindex_)) + sizeof(rune_type_));
  secondary_charges_ = -1;
  item_level_ = -1;
  primary_charges_ = -1;
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
}

void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_EnemyItemAlert& CDOTAClientMsg_EnemyItemAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_EnemyItemAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rune_type_) -
        reinterpret_cast<char*>(&item_entindex_)) + sizeof(rune_type_));
    secondary_charges_ = -1;
    item_level_ = -1;
    primary_charges_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_EnemyItemAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_EnemyItemAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rune_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rune_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 item_level = 3 [default = -1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 primary_charges = 4 [default = -1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_primary_charges(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 secondary_charges = 5 [default = -1];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_secondary_charges(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rune_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rune_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_level = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_charges = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_primary_charges(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_charges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 secondary_charges = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_secondary_charges(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondary_charges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_entindex(), output);
  }

  // optional uint32 rune_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rune_type(), output);
  }

  // optional int32 item_level = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_level(), output);
  }

  // optional int32 primary_charges = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->primary_charges(), output);
  }

  // optional int32 secondary_charges = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->secondary_charges(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EnemyItemAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_entindex(), target);
  }

  // optional uint32 rune_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rune_type(), target);
  }

  // optional int32 item_level = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_level(), target);
  }

  // optional int32 primary_charges = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->primary_charges(), target);
  }

  // optional int32 secondary_charges = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->secondary_charges(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAClientMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_entindex());
    }

    // optional uint32 rune_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

    // optional int32 secondary_charges = 5 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondary_charges());
    }

    // optional int32 item_level = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_level());
    }

    // optional int32 primary_charges = 4 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_charges());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EnemyItemAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_EnemyItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EnemyItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EnemyItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_entindex_ = from.item_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      rune_type_ = from.rune_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      secondary_charges_ = from.secondary_charges_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_charges_ = from.primary_charges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EnemyItemAlert::Swap(CDOTAClientMsg_EnemyItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EnemyItemAlert::InternalSwap(CDOTAClientMsg_EnemyItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_entindex_, other->item_entindex_);
  swap(rune_type_, other->rune_type_);
  swap(secondary_charges_, other->secondary_charges_);
  swap(item_level_, other->item_level_);
  swap(primary_charges_, other->primary_charges_);
}

::google::protobuf::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ModifierAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ModifierAlert::HasBitSetters {
 public:
  static void set_has_buff_internal_index(CDOTAClientMsg_ModifierAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_entindex(CDOTAClientMsg_ModifierAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ModifierAlert::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ModifierAlert)
}
CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
  ::memset(&buff_internal_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
}

void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ModifierAlert& CDOTAClientMsg_ModifierAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ModifierAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buff_internal_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ModifierAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ModifierAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_buff_internal_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_buff_internal_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ModifierAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ModifierAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ModifierAlert)
  return target;
}

size_t CDOTAClientMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 buff_internal_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ModifierAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ModifierAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ModifierAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ModifierAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ModifierAlert::Swap(CDOTAClientMsg_ModifierAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ModifierAlert::InternalSwap(CDOTAClientMsg_ModifierAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buff_internal_index_, other->buff_internal_index_);
  swap(target_entindex_, other->target_entindex_);
}

::google::protobuf::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ClickedBuff::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ClickedBuff::HasBitSetters {
 public:
  static void set_has_buff_internal_index(CDOTAClientMsg_ClickedBuff* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_entindex(CDOTAClientMsg_ClickedBuff* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ClickedBuff::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ClickedBuff::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ClickedBuff)
}
CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::SharedCtor() {
  ::memset(&buff_internal_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_ClickedBuff::~CDOTAClientMsg_ClickedBuff() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ClickedBuff)
  SharedDtor();
}

void CDOTAClientMsg_ClickedBuff::SharedDtor() {
}

void CDOTAClientMsg_ClickedBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ClickedBuff& CDOTAClientMsg_ClickedBuff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ClickedBuff_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ClickedBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buff_internal_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&buff_internal_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ClickedBuff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ClickedBuff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_buff_internal_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ClickedBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_buff_internal_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ClickedBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ClickedBuff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ClickedBuff)
}

::google::protobuf::uint8* CDOTAClientMsg_ClickedBuff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ClickedBuff)
  return target;
}

size_t CDOTAClientMsg_ClickedBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 buff_internal_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ClickedBuff* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ClickedBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ClickedBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ClickedBuff)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ClickedBuff::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ClickedBuff::Swap(CDOTAClientMsg_ClickedBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ClickedBuff::InternalSwap(CDOTAClientMsg_ClickedBuff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buff_internal_index_, other->buff_internal_index_);
  swap(target_entindex_, other->target_entindex_);
}

::google::protobuf::Metadata CDOTAClientMsg_ClickedBuff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_HPManaAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_HPManaAlert::HasBitSetters {
 public:
  static void set_has_target_entindex(CDOTAClientMsg_HPManaAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show_raw_values(CDOTAClientMsg_HPManaAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_HPManaAlert::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_HPManaAlert::kShowRawValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_HPManaAlert)
}
CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_raw_values_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
  ::memset(&target_entindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_raw_values_) -
      reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
}

void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_HPManaAlert& CDOTAClientMsg_HPManaAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_HPManaAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_raw_values_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(show_raw_values_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_HPManaAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_HPManaAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_raw_values = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_raw_values(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_raw_values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_raw_values(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_raw_values_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_HPManaAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional bool show_raw_values = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_raw_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_HPManaAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional bool show_raw_values = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_raw_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_HPManaAlert)
  return target;
}

size_t CDOTAClientMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional bool show_raw_values = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HPManaAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_HPManaAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_HPManaAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_HPManaAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_raw_values_ = from.show_raw_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HPManaAlert::Swap(CDOTAClientMsg_HPManaAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HPManaAlert::InternalSwap(CDOTAClientMsg_HPManaAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_entindex_, other->target_entindex_);
  swap(show_raw_values_, other->show_raw_values_);
}

::google::protobuf::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_GlyphAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_GlyphAlert::HasBitSetters {
 public:
  static void set_has_negative(CDOTAClientMsg_GlyphAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_GlyphAlert)
}
CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_ = from.negative_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
  negative_ = false;
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
}

void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_GlyphAlert& CDOTAClientMsg_GlyphAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_GlyphAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  negative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_GlyphAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_GlyphAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool negative = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_negative(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_negative(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_GlyphAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_GlyphAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_GlyphAlert)
  return target;
}

size_t CDOTAClientMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool negative = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GlyphAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_GlyphAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_GlyphAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_GlyphAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_negative()) {
    set_negative(from.negative());
  }
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GlyphAlert::Swap(CDOTAClientMsg_GlyphAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_GlyphAlert::InternalSwap(CDOTAClientMsg_GlyphAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(negative_, other->negative_);
}

::google::protobuf::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_MapLine::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_MapLine_default_instance_._instance.get_mutable()->mapline_ = const_cast< ::proto::dota::CDOTAMsg_MapLine*>(
      ::proto::dota::CDOTAMsg_MapLine::internal_default_instance());
}
class CDOTAClientMsg_MapLine::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_MapLine& mapline(const CDOTAClientMsg_MapLine* msg);
  static void set_has_mapline(CDOTAClientMsg_MapLine* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_MapLine&
CDOTAClientMsg_MapLine::HasBitSetters::mapline(const CDOTAClientMsg_MapLine* msg) {
  return *msg->mapline_;
}
void CDOTAClientMsg_MapLine::clear_mapline() {
  if (mapline_ != nullptr) mapline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MapLine::kMaplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MapLine)
}
CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mapline()) {
    mapline_ = new ::proto::dota::CDOTAMsg_MapLine(*from.mapline_);
  } else {
    mapline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto.base);
  mapline_ = nullptr;
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MapLine)
  SharedDtor();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  if (this != internal_default_instance()) delete mapline_;
}

void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_MapLine& CDOTAClientMsg_MapLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_MapLine_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mapline_ != nullptr);
    mapline_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_MapLine::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_MapLine*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_MapLine::_InternalParse;
        object = msg->mutable_mapline();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MapLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MapLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::mapline(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MapLine)
}

::google::protobuf::uint8* CDOTAClientMsg_MapLine::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::mapline(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MapLine)
  return target;
}

size_t CDOTAClientMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MapLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mapline_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapLine* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_MapLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MapLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mapline()) {
    mutable_mapline()->::proto::dota::CDOTAMsg_MapLine::MergeFrom(from.mapline());
  }
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapLine::Swap(CDOTAClientMsg_MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapLine::InternalSwap(CDOTAClientMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mapline_, other->mapline_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_AspectRatio::InitAsDefaultInstance() {
}
class CDOTAClientMsg_AspectRatio::HasBitSetters {
 public:
  static void set_has_ratio(CDOTAClientMsg_AspectRatio* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_AspectRatio::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_AspectRatio)
}
CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
  ratio_ = 0;
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_AspectRatio)
  SharedDtor();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
}

void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_AspectRatio& CDOTAClientMsg_AspectRatio::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_AspectRatio_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_AspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_AspectRatio::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_AspectRatio*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float ratio = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_ratio(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_AspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_AspectRatio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_ratio(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_AspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_AspectRatio)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_AspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_AspectRatio)
}

::google::protobuf::uint8* CDOTAClientMsg_AspectRatio::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_AspectRatio)
  return target;
}

size_t CDOTAClientMsg_AspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_AspectRatio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float ratio = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AspectRatio* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_AspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_AspectRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_AspectRatio)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ratio()) {
    set_ratio(from.ratio());
  }
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AspectRatio::Swap(CDOTAClientMsg_AspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_AspectRatio::InternalSwap(CDOTAClientMsg_AspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ratio_, other->ratio_);
}

::google::protobuf::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_UnitsAutoAttackMode::InitAsDefaultInstance() {
}
class CDOTAClientMsg_UnitsAutoAttackMode::HasBitSetters {
 public:
  static void set_has_mode(CDOTAClientMsg_UnitsAutoAttackMode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_unit_type(CDOTAClientMsg_UnitsAutoAttackMode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UnitsAutoAttackMode::kModeFieldNumber;
const int CDOTAClientMsg_UnitsAutoAttackMode::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}
CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(const CDOTAClientMsg_UnitsAutoAttackMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_type_, &from.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&unit_type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedCtor() {
  unit_type_ = 0;
  mode_ = -1;
}

CDOTAClientMsg_UnitsAutoAttackMode::~CDOTAClientMsg_UnitsAutoAttackMode() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedDtor() {
}

void CDOTAClientMsg_UnitsAutoAttackMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_UnitsAutoAttackMode& CDOTAClientMsg_UnitsAutoAttackMode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_UnitsAutoAttackMode_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_UnitsAutoAttackMode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    unit_type_ = 0;
    mode_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_UnitsAutoAttackMode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_UnitsAutoAttackMode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_mode(static_cast<::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_unit_type(static_cast<::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_UnitsAutoAttackMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value)) {
            set_mode(static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value)) {
            set_unit_type(static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_UnitsAutoAttackMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackMode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_type());
    }

    // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackMode* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_UnitsAutoAttackMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackMode::Swap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttackMode::InternalSwap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unit_type_, other->unit_type_);
  swap(mode_, other->mode_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackMode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InitAsDefaultInstance() {
}
class CDOTAClientMsg_UnitsAutoAttackAfterSpell::HasBitSetters {
 public:
  static void set_has_enabled(CDOTAClientMsg_UnitsAutoAttackAfterSpell* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UnitsAutoAttackAfterSpell::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}
CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
  enabled_ = false;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_UnitsAutoAttackAfterSpell& CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_UnitsAutoAttackAfterSpell_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_UnitsAutoAttackAfterSpell::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_UnitsAutoAttackAfterSpell*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_UnitsAutoAttackAfterSpell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_TeleportRequiresHalt::InitAsDefaultInstance() {
}
class CDOTAClientMsg_TeleportRequiresHalt::HasBitSetters {
 public:
  static void set_has_enabled(CDOTAClientMsg_TeleportRequiresHalt* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_TeleportRequiresHalt::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}
CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
  enabled_ = false;
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
}

void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_TeleportRequiresHalt& CDOTAClientMsg_TeleportRequiresHalt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_TeleportRequiresHalt_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_TeleportRequiresHalt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_TeleportRequiresHalt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_TeleportRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_TeleportRequiresHalt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

size_t CDOTAClientMsg_TeleportRequiresHalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TeleportRequiresHalt* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_TeleportRequiresHalt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TeleportRequiresHalt::InternalSwap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ChannelRequiresHalt::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ChannelRequiresHalt::HasBitSetters {
 public:
  static void set_has_enabled(CDOTAClientMsg_ChannelRequiresHalt* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChannelRequiresHalt::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChannelRequiresHalt::CDOTAClientMsg_ChannelRequiresHalt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
}
CDOTAClientMsg_ChannelRequiresHalt::CDOTAClientMsg_ChannelRequiresHalt(const CDOTAClientMsg_ChannelRequiresHalt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
}

void CDOTAClientMsg_ChannelRequiresHalt::SharedCtor() {
  enabled_ = false;
}

CDOTAClientMsg_ChannelRequiresHalt::~CDOTAClientMsg_ChannelRequiresHalt() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_ChannelRequiresHalt::SharedDtor() {
}

void CDOTAClientMsg_ChannelRequiresHalt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ChannelRequiresHalt& CDOTAClientMsg_ChannelRequiresHalt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ChannelRequiresHalt_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ChannelRequiresHalt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ChannelRequiresHalt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ChannelRequiresHalt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ChannelRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ChannelRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_ChannelRequiresHalt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  return target;
}

size_t CDOTAClientMsg_ChannelRequiresHalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChannelRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChannelRequiresHalt* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ChannelRequiresHalt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChannelRequiresHalt::MergeFrom(const CDOTAClientMsg_ChannelRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_ChannelRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChannelRequiresHalt::CopyFrom(const CDOTAClientMsg_ChannelRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChannelRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChannelRequiresHalt::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChannelRequiresHalt::Swap(CDOTAClientMsg_ChannelRequiresHalt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChannelRequiresHalt::InternalSwap(CDOTAClientMsg_ChannelRequiresHalt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChannelRequiresHalt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SearchString::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SearchString::HasBitSetters {
 public:
  static void set_has_search(CDOTAClientMsg_SearchString* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SearchString::kSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SearchString)
}
CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search()) {
    search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto.base);
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SearchString)
  SharedDtor();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SearchString& CDOTAClientMsg_SearchString::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SearchString_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SearchString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SearchString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SearchString::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SearchString*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAClientMsg_SearchString.search");
        object = msg->mutable_search();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SearchString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SearchString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), static_cast<int>(this->search().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_SearchString.search");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SearchString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SearchString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SearchString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SearchString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), static_cast<int>(this->search().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_SearchString.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SearchString)
}

::google::protobuf::uint8* CDOTAClientMsg_SearchString::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SearchString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), static_cast<int>(this->search().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_SearchString.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SearchString)
  return target;
}

size_t CDOTAClientMsg_SearchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SearchString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string search = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SearchString* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SearchString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SearchString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SearchString)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_search()) {
    _has_bits_[0] |= 0x00000001u;
    search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SearchString::Swap(CDOTAClientMsg_SearchString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SearchString::InternalSwap(CDOTAClientMsg_SearchString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_.Swap(&other->search_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_Pause::InitAsDefaultInstance() {
}
class CDOTAClientMsg_Pause::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_Pause)
}
CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_Pause)
  SharedDtor();
}

void CDOTAClientMsg_Pause::SharedDtor() {
}

void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_Pause& CDOTAClientMsg_Pause::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_Pause_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_Pause::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_Pause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_Pause::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_Pause*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_Pause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_Pause)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_Pause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_Pause)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_Pause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_Pause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_Pause)
}

::google::protobuf::uint8* CDOTAClientMsg_Pause::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_Pause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_Pause)
  return target;
}

size_t CDOTAClientMsg_Pause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_Pause)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_Pause* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_Pause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_Pause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_Pause)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_Pause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_Pause::Swap(CDOTAClientMsg_Pause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_Pause::InternalSwap(CDOTAClientMsg_Pause* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ShopViewMode::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ShopViewMode::HasBitSetters {
 public:
  static void set_has_mode(CDOTAClientMsg_ShopViewMode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ShopViewMode::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ShopViewMode)
}
CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
  mode_ = 0u;
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ShopViewMode)
  SharedDtor();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
}

void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ShopViewMode& CDOTAClientMsg_ShopViewMode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ShopViewMode_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ShopViewMode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ShopViewMode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ShopViewMode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ShopViewMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ShopViewMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ShopViewMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ShopViewMode)
}

::google::protobuf::uint8* CDOTAClientMsg_ShopViewMode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ShopViewMode)
  return target;
}

size_t CDOTAClientMsg_ShopViewMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ShopViewMode* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ShopViewMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ShopViewMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ShopViewMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mode()) {
    set_mode(from.mode());
  }
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ShopViewMode::Swap(CDOTAClientMsg_ShopViewMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ShopViewMode::InternalSwap(CDOTAClientMsg_ShopViewMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
}

::google::protobuf::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SetUnitShareFlag::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SetUnitShareFlag::HasBitSetters {
 public:
  static void set_has_playerid(CDOTAClientMsg_SetUnitShareFlag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_flag(CDOTAClientMsg_SetUnitShareFlag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_state(CDOTAClientMsg_SetUnitShareFlag* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetUnitShareFlag::kPlayerIDFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kFlagFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}
CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
}

void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SetUnitShareFlag& CDOTAClientMsg_SetUnitShareFlag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SetUnitShareFlag_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SetUnitShareFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SetUnitShareFlag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SetUnitShareFlag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 playerID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SetUnitShareFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_flag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}

::google::protobuf::uint8* CDOTAClientMsg_SetUnitShareFlag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

size_t CDOTAClientMsg_SetUnitShareFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 playerID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetUnitShareFlag* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SetUnitShareFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetUnitShareFlag::InternalSwap(CDOTAClientMsg_SetUnitShareFlag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
  swap(flag_, other->flag_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SwapRequest::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SwapRequest::HasBitSetters {
 public:
  static void set_has_player_id(CDOTAClientMsg_SwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SwapRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SwapRequest)
}
CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
  player_id_ = 0u;
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SwapRequest)
  SharedDtor();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
}

void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SwapRequest& CDOTAClientMsg_SwapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SwapRequest_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SwapRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SwapRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SwapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SwapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SwapRequest)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SwapRequest)
  return target;
}

size_t CDOTAClientMsg_SwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SwapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SwapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SwapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SwapRequest)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapRequest::Swap(CDOTAClientMsg_SwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapRequest::InternalSwap(CDOTAClientMsg_SwapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SwapAccept::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SwapAccept::HasBitSetters {
 public:
  static void set_has_player_id(CDOTAClientMsg_SwapAccept* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SwapAccept::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SwapAccept)
}
CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
  player_id_ = 0u;
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SwapAccept)
  SharedDtor();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
}

void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SwapAccept& CDOTAClientMsg_SwapAccept::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SwapAccept_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SwapAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SwapAccept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SwapAccept::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SwapAccept*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SwapAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SwapAccept)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SwapAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SwapAccept)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SwapAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SwapAccept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SwapAccept)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapAccept::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SwapAccept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SwapAccept)
  return target;
}

size_t CDOTAClientMsg_SwapAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SwapAccept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapAccept* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SwapAccept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SwapAccept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SwapAccept)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapAccept::Swap(CDOTAClientMsg_SwapAccept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapAccept::InternalSwap(CDOTAClientMsg_SwapAccept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_WorldLine::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_WorldLine_default_instance_._instance.get_mutable()->worldline_ = const_cast< ::proto::dota::CDOTAMsg_WorldLine*>(
      ::proto::dota::CDOTAMsg_WorldLine::internal_default_instance());
}
class CDOTAClientMsg_WorldLine::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_WorldLine& worldline(const CDOTAClientMsg_WorldLine* msg);
  static void set_has_worldline(CDOTAClientMsg_WorldLine* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_WorldLine&
CDOTAClientMsg_WorldLine::HasBitSetters::worldline(const CDOTAClientMsg_WorldLine* msg) {
  return *msg->worldline_;
}
void CDOTAClientMsg_WorldLine::clear_worldline() {
  if (worldline_ != nullptr) worldline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_WorldLine)
}
CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_worldline()) {
    worldline_ = new ::proto::dota::CDOTAMsg_WorldLine(*from.worldline_);
  } else {
    worldline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto.base);
  worldline_ = nullptr;
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_WorldLine)
  SharedDtor();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  if (this != internal_default_instance()) delete worldline_;
}

void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_WorldLine& CDOTAClientMsg_WorldLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_WorldLine_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(worldline_ != nullptr);
    worldline_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_WorldLine::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_WorldLine*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_WorldLine::_InternalParse;
        object = msg->mutable_worldline();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_WorldLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_WorldLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::worldline(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAClientMsg_WorldLine::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::worldline(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_WorldLine)
  return target;
}

size_t CDOTAClientMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_WorldLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *worldline_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WorldLine* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_WorldLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_WorldLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worldline()) {
    mutable_worldline()->::proto::dota::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
  }
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WorldLine::Swap(CDOTAClientMsg_WorldLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WorldLine::InternalSwap(CDOTAClientMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldline_, other->worldline_);
}

::google::protobuf::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RequestGraphUpdate::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RequestGraphUpdate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}
CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
}

void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RequestGraphUpdate& CDOTAClientMsg_RequestGraphUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RequestGraphUpdate_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RequestGraphUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RequestGraphUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RequestGraphUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RequestGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestGraphUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

size_t CDOTAClientMsg_RequestGraphUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestGraphUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RequestGraphUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestGraphUpdate::InternalSwap(CDOTAClientMsg_RequestGraphUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ChatWheel::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ChatWheel::HasBitSetters {
 public:
  static void set_has_chat_message_id(CDOTAClientMsg_ChatWheel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_param_hero_id(CDOTAClientMsg_ChatWheel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChatWheel::kChatMessageIdFieldNumber;
const int CDOTAClientMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChatWheel)
}
CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_hero_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(param_hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
  ::memset(&chat_message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_hero_id_) -
      reinterpret_cast<char*>(&chat_message_id_)) + sizeof(param_hero_id_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChatWheel)
  SharedDtor();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
}

void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ChatWheel& CDOTAClientMsg_ChatWheel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ChatWheel_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_hero_id_) -
        reinterpret_cast<char*>(&chat_message_id_)) + sizeof(param_hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ChatWheel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ChatWheel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chat_message_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 param_hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_param_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChatWheel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chat_message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_chat_message_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 param_hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_param_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChatWheel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chat_message_id(), output);
  }

  // optional uint32 param_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAClientMsg_ChatWheel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chat_message_id(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChatWheel)
  return target;
}

size_t CDOTAClientMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChatWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 chat_message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_message_id());
    }

    // optional uint32 param_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChatWheel* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ChatWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChatWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChatWheel)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_hero_id_ = from.param_hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChatWheel::Swap(CDOTAClientMsg_ChatWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChatWheel::InternalSwap(CDOTAClientMsg_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_message_id_, other->chat_message_id_);
  swap(param_hero_id_, other->param_hero_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SendStatPopup::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_SendStatPopup_default_instance_._instance.get_mutable()->statpopup_ = const_cast< ::proto::dota::CDOTAMsg_SendStatPopup*>(
      ::proto::dota::CDOTAMsg_SendStatPopup::internal_default_instance());
}
class CDOTAClientMsg_SendStatPopup::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_SendStatPopup& statpopup(const CDOTAClientMsg_SendStatPopup* msg);
  static void set_has_statpopup(CDOTAClientMsg_SendStatPopup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_SendStatPopup&
CDOTAClientMsg_SendStatPopup::HasBitSetters::statpopup(const CDOTAClientMsg_SendStatPopup* msg) {
  return *msg->statpopup_;
}
void CDOTAClientMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != nullptr) statpopup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SendStatPopup)
}
CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statpopup()) {
    statpopup_ = new ::proto::dota::CDOTAMsg_SendStatPopup(*from.statpopup_);
  } else {
    statpopup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto.base);
  statpopup_ = nullptr;
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  if (this != internal_default_instance()) delete statpopup_;
}

void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SendStatPopup_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(statpopup_ != nullptr);
    statpopup_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SendStatPopup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SendStatPopup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_SendStatPopup::_InternalParse;
        object = msg->mutable_statpopup();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SendStatPopup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::statpopup(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAClientMsg_SendStatPopup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::statpopup(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SendStatPopup)
  return target;
}

size_t CDOTAClientMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *statpopup_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SendStatPopup* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SendStatPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SendStatPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statpopup()) {
    mutable_statpopup()->::proto::dota::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
  }
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SendStatPopup::Swap(CDOTAClientMsg_SendStatPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SendStatPopup::InternalSwap(CDOTAClientMsg_SendStatPopup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(statpopup_, other->statpopup_);
}

::google::protobuf::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_DismissAllStatPopups::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAClientMsg_DismissAllStatPopups_default_instance_._instance.get_mutable()->dismissallmsg_ = const_cast< ::proto::dota::CDOTAMsg_DismissAllStatPopups*>(
      ::proto::dota::CDOTAMsg_DismissAllStatPopups::internal_default_instance());
}
class CDOTAClientMsg_DismissAllStatPopups::HasBitSetters {
 public:
  static const ::proto::dota::CDOTAMsg_DismissAllStatPopups& dismissallmsg(const CDOTAClientMsg_DismissAllStatPopups* msg);
  static void set_has_dismissallmsg(CDOTAClientMsg_DismissAllStatPopups* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMsg_DismissAllStatPopups&
CDOTAClientMsg_DismissAllStatPopups::HasBitSetters::dismissallmsg(const CDOTAClientMsg_DismissAllStatPopups* msg) {
  return *msg->dismissallmsg_;
}
void CDOTAClientMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (dismissallmsg_ != nullptr) dismissallmsg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_DismissAllStatPopups::kDismissallmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}
CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups(const CDOTAClientMsg_DismissAllStatPopups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dismissallmsg()) {
    dismissallmsg_ = new ::proto::dota::CDOTAMsg_DismissAllStatPopups(*from.dismissallmsg_);
  } else {
    dismissallmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}

void CDOTAClientMsg_DismissAllStatPopups::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto.base);
  dismissallmsg_ = nullptr;
}

CDOTAClientMsg_DismissAllStatPopups::~CDOTAClientMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  SharedDtor();
}

void CDOTAClientMsg_DismissAllStatPopups::SharedDtor() {
  if (this != internal_default_instance()) delete dismissallmsg_;
}

void CDOTAClientMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_DismissAllStatPopups& CDOTAClientMsg_DismissAllStatPopups::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_DismissAllStatPopups_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dismissallmsg_ != nullptr);
    dismissallmsg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_DismissAllStatPopups::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_DismissAllStatPopups*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMsg_DismissAllStatPopups::_InternalParse;
        object = msg->mutable_dismissallmsg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_DismissAllStatPopups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dismissallmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_DismissAllStatPopups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dismissallmsg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}

::google::protobuf::uint8* CDOTAClientMsg_DismissAllStatPopups::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dismissallmsg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAClientMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dismissallmsg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DismissAllStatPopups* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_DismissAllStatPopups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dismissallmsg()) {
    mutable_dismissallmsg()->::proto::dota::CDOTAMsg_DismissAllStatPopups::MergeFrom(from.dismissallmsg());
  }
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DismissAllStatPopups::Swap(CDOTAClientMsg_DismissAllStatPopups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DismissAllStatPopups::InternalSwap(CDOTAClientMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dismissallmsg_, other->dismissallmsg_);
}

::google::protobuf::Metadata CDOTAClientMsg_DismissAllStatPopups::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_BeginLastHitChallenge::InitAsDefaultInstance() {
}
class CDOTAClientMsg_BeginLastHitChallenge::HasBitSetters {
 public:
  static void set_has_chosen_lane(CDOTAClientMsg_BeginLastHitChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_helper_enabled(CDOTAClientMsg_BeginLastHitChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BeginLastHitChallenge::kChosenLaneFieldNumber;
const int CDOTAClientMsg_BeginLastHitChallenge::kHelperEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}
CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chosen_lane_, &from.chosen_lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&helper_enabled_) -
    reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
  ::memset(&chosen_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&helper_enabled_) -
      reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
}

void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_BeginLastHitChallenge& CDOTAClientMsg_BeginLastHitChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_BeginLastHitChallenge_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chosen_lane_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&helper_enabled_) -
        reinterpret_cast<char*>(&chosen_lane_)) + sizeof(helper_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_BeginLastHitChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_BeginLastHitChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chosen_lane(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool helper_enabled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_helper_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_BeginLastHitChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_chosen_lane(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosen_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool helper_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_helper_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chosen_lane = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chosen_lane(), output);
  }

  // optional bool helper_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->helper_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}

::google::protobuf::uint8* CDOTAClientMsg_BeginLastHitChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chosen_lane = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->helper_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

size_t CDOTAClientMsg_BeginLastHitChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 chosen_lane = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BeginLastHitChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_BeginLastHitChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chosen_lane_ = from.chosen_lane_;
    }
    if (cached_has_bits & 0x00000002u) {
      helper_enabled_ = from.helper_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BeginLastHitChallenge::InternalSwap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chosen_lane_, other->chosen_lane_);
  swap(helper_enabled_, other->helper_enabled_);
}

::google::protobuf::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_UpdateQuickBuyItem::InitAsDefaultInstance() {
}
class CDOTAClientMsg_UpdateQuickBuyItem::HasBitSetters {
 public:
  static void set_has_item_ability_id(CDOTAClientMsg_UpdateQuickBuyItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_purchasable(CDOTAClientMsg_UpdateQuickBuyItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UpdateQuickBuyItem::kItemAbilityIdFieldNumber;
const int CDOTAClientMsg_UpdateQuickBuyItem::kPurchasableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}
CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchasable_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(purchasable_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
  ::memset(&item_ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purchasable_) -
      reinterpret_cast<char*>(&item_ability_id_)) + sizeof(purchasable_));
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
}

void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuyItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_UpdateQuickBuyItem_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchasable_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(purchasable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_UpdateQuickBuyItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_UpdateQuickBuyItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool purchasable = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_purchasable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_UpdateQuickBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool purchasable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_purchasable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchasable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_ability_id(), output);
  }

  // optional bool purchasable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->purchasable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuyItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_ability_id(), target);
  }

  // optional bool purchasable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->purchasable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_ability_id());
    }

    // optional bool purchasable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuyItem* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_UpdateQuickBuyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchasable_ = from.purchasable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuyItem::InternalSwap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_ability_id_, other->item_ability_id_);
  swap(purchasable_, other->purchasable_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_UpdateQuickBuy::InitAsDefaultInstance() {
}
class CDOTAClientMsg_UpdateQuickBuy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UpdateQuickBuy::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}
CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto.base);
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
}

void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_UpdateQuickBuy& CDOTAClientMsg_UpdateQuickBuy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_UpdateQuickBuy_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_UpdateQuickBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_UpdateQuickBuy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_UpdateQuickBuy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_UpdateQuickBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuy* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_UpdateQuickBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuy::InternalSwap(CDOTAClientMsg_UpdateQuickBuy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RecordVote::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RecordVote::HasBitSetters {
 public:
  static void set_has_choice_index(CDOTAClientMsg_RecordVote* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RecordVote::kChoiceIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RecordVote)
}
CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  choice_index_ = from.choice_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
  choice_index_ = 0;
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RecordVote)
  SharedDtor();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
}

void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RecordVote& CDOTAClientMsg_RecordVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RecordVote_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RecordVote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RecordVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RecordVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RecordVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 choice_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_choice_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RecordVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RecordVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 choice_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_choice_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RecordVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RecordVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RecordVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RecordVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 choice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choice_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RecordVote)
}

::google::protobuf::uint8* CDOTAClientMsg_RecordVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RecordVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 choice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choice_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RecordVote)
  return target;
}

size_t CDOTAClientMsg_RecordVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RecordVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 choice_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->choice_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RecordVote* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RecordVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RecordVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RecordVote)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_choice_index()) {
    set_choice_index(from.choice_index());
  }
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RecordVote::Swap(CDOTAClientMsg_RecordVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RecordVote::InternalSwap(CDOTAClientMsg_RecordVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(choice_index_, other->choice_index_);
}

::google::protobuf::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_WillPurchaseAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_WillPurchaseAlert::HasBitSetters {
 public:
  static void set_has_item_ability_id(CDOTAClientMsg_WillPurchaseAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gold_remaining(CDOTAClientMsg_WillPurchaseAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_suggestion_player_id(CDOTAClientMsg_WillPurchaseAlert* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_WillPurchaseAlert::kItemAbilityIdFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kSuggestionPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}
CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
  ::memset(&item_ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suggestion_player_id_) -
      reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
}

void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_WillPurchaseAlert& CDOTAClientMsg_WillPurchaseAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_WillPurchaseAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_player_id_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_WillPurchaseAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_WillPurchaseAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_remaining = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gold_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 suggestion_player_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_suggestion_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gold_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suggestion_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_suggestion_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suggestion_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_ability_id(), output);
  }

  // optional uint32 gold_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_remaining(), output);
  }

  // optional int32 suggestion_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->suggestion_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_WillPurchaseAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_ability_id(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->suggestion_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAClientMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_ability_id());
    }

    // optional uint32 gold_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

    // optional int32 suggestion_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suggestion_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WillPurchaseAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_WillPurchaseAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_remaining_ = from.gold_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_player_id_ = from.suggestion_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WillPurchaseAlert::InternalSwap(CDOTAClientMsg_WillPurchaseAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_ability_id_, other->item_ability_id_);
  swap(gold_remaining_, other->gold_remaining_);
  swap(suggestion_player_id_, other->suggestion_player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_BuyBackStateAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_BuyBackStateAlert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}
CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
}

void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_BuyBackStateAlert& CDOTAClientMsg_BuyBackStateAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_BuyBackStateAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_BuyBackStateAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_BuyBackStateAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_BuyBackStateAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAClientMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BuyBackStateAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_BuyBackStateAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BuyBackStateAlert::InternalSwap(CDOTAClientMsg_BuyBackStateAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_QuickBuyAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_QuickBuyAlert::HasBitSetters {
 public:
  static void set_has_item_ability_id(CDOTAClientMsg_QuickBuyAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gold_cost(CDOTAClientMsg_QuickBuyAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_cooldown_seconds(CDOTAClientMsg_QuickBuyAlert* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_show_buyback(CDOTAClientMsg_QuickBuyAlert* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_QuickBuyAlert::kItemAbilityIdFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kGoldCostFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kItemCooldownSecondsFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kShowBuybackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}
CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_buyback_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
  ::memset(&item_ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_buyback_) -
      reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
}

void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_QuickBuyAlert& CDOTAClientMsg_QuickBuyAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_QuickBuyAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_buyback_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(show_buyback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_QuickBuyAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_QuickBuyAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 gold_cost = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gold_cost(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 item_cooldown_seconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_cooldown_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_buyback = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_show_buyback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold_cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gold_cost(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_cooldown_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_cooldown_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_cooldown_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_buyback = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_show_buyback(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_buyback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_ability_id(), output);
  }

  // optional int32 gold_cost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_cost(), output);
  }

  // optional int32 item_cooldown_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_cooldown_seconds(), output);
  }

  // optional bool show_buyback = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_buyback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_QuickBuyAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_ability_id(), target);
  }

  // optional int32 gold_cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_cost(), target);
  }

  // optional int32 item_cooldown_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_cooldown_seconds(), target);
  }

  // optional bool show_buyback = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_buyback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAClientMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_ability_id());
    }

    // optional int32 gold_cost = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // optional int32 item_cooldown_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_cooldown_seconds());
    }

    // optional bool show_buyback = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuickBuyAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_QuickBuyAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_QuickBuyAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_QuickBuyAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_cost_ = from.gold_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_cooldown_seconds_ = from.item_cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_buyback_ = from.show_buyback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuickBuyAlert::Swap(CDOTAClientMsg_QuickBuyAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_QuickBuyAlert::InternalSwap(CDOTAClientMsg_QuickBuyAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_ability_id_, other->item_ability_id_);
  swap(gold_cost_, other->gold_cost_);
  swap(item_cooldown_seconds_, other->item_cooldown_seconds_);
  swap(show_buyback_, other->show_buyback_);
}

::google::protobuf::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_PlayerShowCase::InitAsDefaultInstance() {
}
class CDOTAClientMsg_PlayerShowCase::HasBitSetters {
 public:
  static void set_has_showcase(CDOTAClientMsg_PlayerShowCase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_PlayerShowCase::kShowcaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
}
CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  showcase_ = from.showcase_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
  showcase_ = false;
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
}

void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_PlayerShowCase& CDOTAClientMsg_PlayerShowCase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_PlayerShowCase_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_PlayerShowCase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  showcase_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_PlayerShowCase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_PlayerShowCase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool showcase = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_showcase(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_PlayerShowCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showcase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_showcase(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showcase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showcase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showcase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_PlayerShowCase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayerShowCase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showcase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showcase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return target;
}

size_t CDOTAClientMsg_PlayerShowCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool showcase = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerShowCase* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_PlayerShowCase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_PlayerShowCase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_PlayerShowCase)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_showcase()) {
    set_showcase(from.showcase());
  }
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PlayerShowCase::Swap(CDOTAClientMsg_PlayerShowCase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_PlayerShowCase::InternalSwap(CDOTAClientMsg_PlayerShowCase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(showcase_, other->showcase_);
}

::google::protobuf::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_CameraZoomAmount::InitAsDefaultInstance() {
}
class CDOTAClientMsg_CameraZoomAmount::HasBitSetters {
 public:
  static void set_has_zoom_amount(CDOTAClientMsg_CameraZoomAmount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CameraZoomAmount::kZoomAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}
CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  zoom_amount_ = from.zoom_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
  zoom_amount_ = 0;
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
}

void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_CameraZoomAmount& CDOTAClientMsg_CameraZoomAmount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_CameraZoomAmount_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_CameraZoomAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zoom_amount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_CameraZoomAmount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_CameraZoomAmount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float zoom_amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_zoom_amount(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_CameraZoomAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float zoom_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_zoom_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float zoom_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zoom_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}

::google::protobuf::uint8* CDOTAClientMsg_CameraZoomAmount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float zoom_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zoom_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return target;
}

size_t CDOTAClientMsg_CameraZoomAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float zoom_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CameraZoomAmount* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_CameraZoomAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CameraZoomAmount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CameraZoomAmount)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_zoom_amount()) {
    set_zoom_amount(from.zoom_amount());
  }
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CameraZoomAmount::Swap(CDOTAClientMsg_CameraZoomAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CameraZoomAmount::InternalSwap(CDOTAClientMsg_CameraZoomAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(zoom_amount_, other->zoom_amount_);
}

::google::protobuf::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_BroadcasterUsingCameraman::InitAsDefaultInstance() {
}
class CDOTAClientMsg_BroadcasterUsingCameraman::HasBitSetters {
 public:
  static void set_has_cameraman(CDOTAClientMsg_BroadcasterUsingCameraman* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BroadcasterUsingCameraman::kCameramanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}
CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraman_ = from.cameraman_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
  cameraman_ = false;
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_BroadcasterUsingCameraman& CDOTAClientMsg_BroadcasterUsingCameraman::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_BroadcasterUsingCameraman_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraman_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_BroadcasterUsingCameraman::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_BroadcasterUsingCameraman*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool cameraman = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cameraman(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_BroadcasterUsingCameraman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cameraman = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cameraman(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cameraman = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cameraman(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cameraman = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cameraman(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingCameraman::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool cameraman = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_BroadcasterUsingCameraman>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cameraman()) {
    set_cameraman(from.cameraman());
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingCameraman::InternalSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cameraman_, other->cameraman_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InitAsDefaultInstance() {
}
class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::HasBitSetters {
 public:
  static void set_has_enabled(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}
CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
  enabled_ = false;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CAdditionalEquipSlotClientMsg::InitAsDefaultInstance() {
}
class CAdditionalEquipSlotClientMsg::HasBitSetters {
 public:
  static void set_has_class_id(CAdditionalEquipSlotClientMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot_id(CAdditionalEquipSlotClientMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_def_index(CAdditionalEquipSlotClientMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAdditionalEquipSlotClientMsg::kClassIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kSlotIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kDefIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CAdditionalEquipSlotClientMsg)
}
CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
  ::memset(&class_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_index_) -
      reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CAdditionalEquipSlotClientMsg)
  SharedDtor();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
}

void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAdditionalEquipSlotClientMsg& CAdditionalEquipSlotClientMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CAdditionalEquipSlotClientMsg_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CAdditionalEquipSlotClientMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CAdditionalEquipSlotClientMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CAdditionalEquipSlotClientMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CAdditionalEquipSlotClientMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_class_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CAdditionalEquipSlotClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CAdditionalEquipSlotClientMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_class_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CAdditionalEquipSlotClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CAdditionalEquipSlotClientMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CAdditionalEquipSlotClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CAdditionalEquipSlotClientMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CAdditionalEquipSlotClientMsg)
}

::google::protobuf::uint8* CAdditionalEquipSlotClientMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CAdditionalEquipSlotClientMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CAdditionalEquipSlotClientMsg)
  return target;
}

size_t CAdditionalEquipSlotClientMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CAdditionalEquipSlotClientMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 class_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlotClientMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CAdditionalEquipSlotClientMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CAdditionalEquipSlotClientMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CAdditionalEquipSlotClientMsg)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlotClientMsg::Swap(CAdditionalEquipSlotClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlotClientMsg::InternalSwap(CAdditionalEquipSlotClientMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(class_id_, other->class_id_);
  swap(slot_id_, other->slot_id_);
  swap(def_index_, other->def_index_);
}

::google::protobuf::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_FreeInventory::InitAsDefaultInstance() {
}
class CDOTAClientMsg_FreeInventory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FreeInventory::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FreeInventory)
}
CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto.base);
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FreeInventory)
  SharedDtor();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
}

void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_FreeInventory& CDOTAClientMsg_FreeInventory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_FreeInventory_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_FreeInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FreeInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_FreeInventory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_FreeInventory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CAdditionalEquipSlotClientMsg::_InternalParse;
          object = msg->add_equips();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_FreeInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FreeInventory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FreeInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FreeInventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_FreeInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FreeInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->equips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FreeInventory)
}

::google::protobuf::uint8* CDOTAClientMsg_FreeInventory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FreeInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->equips(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FreeInventory)
  return target;
}

size_t CDOTAClientMsg_FreeInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FreeInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FreeInventory* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_FreeInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FreeInventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FreeInventory)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FreeInventory::Swap(CDOTAClientMsg_FreeInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FreeInventory::InternalSwap(CDOTAClientMsg_FreeInventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
}

::google::protobuf::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_FillEmptySlotsWithBots::InitAsDefaultInstance() {
}
class CDOTAClientMsg_FillEmptySlotsWithBots::HasBitSetters {
 public:
  static void set_has_fillwithbots(CDOTAClientMsg_FillEmptySlotsWithBots* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FillEmptySlotsWithBots::kFillwithbotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}
CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fillwithbots_ = from.fillwithbots_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedCtor() {
  fillwithbots_ = false;
}

CDOTAClientMsg_FillEmptySlotsWithBots::~CDOTAClientMsg_FillEmptySlotsWithBots() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  SharedDtor();
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedDtor() {
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_FillEmptySlotsWithBots& CDOTAClientMsg_FillEmptySlotsWithBots::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_FillEmptySlotsWithBots_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_FillEmptySlotsWithBots::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fillwithbots_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_FillEmptySlotsWithBots::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_FillEmptySlotsWithBots*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool fillwithbots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fillwithbots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_FillEmptySlotsWithBots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fillwithbots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fillwithbots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithbots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fillwithbots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fillwithbots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}

::google::protobuf::uint8* CDOTAClientMsg_FillEmptySlotsWithBots::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fillwithbots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fillwithbots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return target;
}

size_t CDOTAClientMsg_FillEmptySlotsWithBots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool fillwithbots = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FillEmptySlotsWithBots* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_FillEmptySlotsWithBots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fillwithbots()) {
    set_fillwithbots(from.fillwithbots());
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Swap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FillEmptySlotsWithBots::InternalSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fillwithbots_, other->fillwithbots_);
}

::google::protobuf::Metadata CDOTAClientMsg_FillEmptySlotsWithBots::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_HeroStatueLike::InitAsDefaultInstance() {
}
class CDOTAClientMsg_HeroStatueLike::HasBitSetters {
 public:
  static void set_has_owner_player_id(CDOTAClientMsg_HeroStatueLike* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_HeroStatueLike::kOwnerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
}
CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_player_id_ = from.owner_player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
  owner_player_id_ = 0u;
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
}

void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_HeroStatueLike& CDOTAClientMsg_HeroStatueLike::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_HeroStatueLike_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_HeroStatueLike::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_HeroStatueLike::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_HeroStatueLike*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_owner_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_HeroStatueLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_owner_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_HeroStatueLike)
}

::google::protobuf::uint8* CDOTAClientMsg_HeroStatueLike::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return target;
}

size_t CDOTAClientMsg_HeroStatueLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 owner_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HeroStatueLike* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_HeroStatueLike>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_HeroStatueLike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_HeroStatueLike)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_player_id()) {
    set_owner_player_id(from.owner_player_id());
  }
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HeroStatueLike::Swap(CDOTAClientMsg_HeroStatueLike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HeroStatueLike::InternalSwap(CDOTAClientMsg_HeroStatueLike* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_player_id_, other->owner_player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_EventCNY2015Cmd::InitAsDefaultInstance() {
}
class CDOTAClientMsg_EventCNY2015Cmd::HasBitSetters {
 public:
  static void set_has_data(CDOTAClientMsg_EventCNY2015Cmd* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EventCNY2015Cmd::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}
CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_EventCNY2015Cmd& CDOTAClientMsg_EventCNY2015Cmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_EventCNY2015Cmd_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_EventCNY2015Cmd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_EventCNY2015Cmd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_EventCNY2015Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}

::google::protobuf::uint8* CDOTAClientMsg_EventCNY2015Cmd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

size_t CDOTAClientMsg_EventCNY2015Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_EventCNY2015Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_DemoHero::InitAsDefaultInstance() {
}
class CDOTAClientMsg_DemoHero::HasBitSetters {
 public:
  static void set_has_hero_id(CDOTAClientMsg_DemoHero* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hero_id_to_spawn(CDOTAClientMsg_DemoHero* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_style_index(CDOTAClientMsg_DemoHero* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_keep_existing_demohero(CDOTAClientMsg_DemoHero* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_DemoHero::kHeroIdFieldNumber;
const int CDOTAClientMsg_DemoHero::kHeroIdToSpawnFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemDefsFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemIdsFieldNumber;
const int CDOTAClientMsg_DemoHero::kStyleIndexFieldNumber;
const int CDOTAClientMsg_DemoHero::kKeepExistingDemoheroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_DemoHero)
}
CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_existing_demohero_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_existing_demohero_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
}

CDOTAClientMsg_DemoHero::~CDOTAClientMsg_DemoHero() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_DemoHero)
  SharedDtor();
}

void CDOTAClientMsg_DemoHero::SharedDtor() {
}

void CDOTAClientMsg_DemoHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_DemoHero& CDOTAClientMsg_DemoHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_DemoHero_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_DemoHero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_DemoHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_existing_demohero_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(keep_existing_demohero_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_DemoHero::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_DemoHero*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 hero_id_to_spawn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id_to_spawn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 item_defs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_item_defs(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_item_defs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint64 item_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_item_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_item_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 style_index = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_style_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool keep_existing_demohero = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_keep_existing_demohero(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_DemoHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_DemoHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hero_id_to_spawn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id_to_spawn(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_to_spawn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 item_defs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 style_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_style_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_existing_demohero = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_keep_existing_demohero(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_existing_demohero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_DemoHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_DemoHero)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_DemoHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_DemoHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id_to_spawn(), output);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0, n = this->item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->item_defs(i), output);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->item_ids(i), output);
  }

  // optional uint32 style_index = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style_index(), output);
  }

  // optional bool keep_existing_demohero = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keep_existing_demohero(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_DemoHero)
}

::google::protobuf::uint8* CDOTAClientMsg_DemoHero::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_DemoHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id_to_spawn(), target);
  }

  // repeated uint32 item_defs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->item_defs_, target);

  // repeated uint64 item_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->item_ids_, target);

  // optional uint32 style_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style_index(), target);
  }

  // optional bool keep_existing_demohero = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->keep_existing_demohero(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_DemoHero)
  return target;
}

size_t CDOTAClientMsg_DemoHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_DemoHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_defs_size());
    total_size += data_size;
  }

  // repeated uint64 item_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 hero_id_to_spawn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id_to_spawn());
    }

    // optional uint32 style_index = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_index());
    }

    // optional bool keep_existing_demohero = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DemoHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DemoHero* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_DemoHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_DemoHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_DemoHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DemoHero::MergeFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_to_spawn_ = from.hero_id_to_spawn_;
    }
    if (cached_has_bits & 0x00000004u) {
      style_index_ = from.style_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      keep_existing_demohero_ = from.keep_existing_demohero_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_DemoHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DemoHero::CopyFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DemoHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DemoHero::Swap(CDOTAClientMsg_DemoHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DemoHero::InternalSwap(CDOTAClientMsg_DemoHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(hero_id_, other->hero_id_);
  swap(hero_id_to_spawn_, other->hero_id_to_spawn_);
  swap(style_index_, other->style_index_);
  swap(keep_existing_demohero_, other->keep_existing_demohero_);
}

::google::protobuf::Metadata CDOTAClientMsg_DemoHero::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ChallengeSelect::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ChallengeSelect::HasBitSetters {
 public:
  static void set_has_event_id(CDOTAClientMsg_ChallengeSelect* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot_id(CDOTAClientMsg_ChallengeSelect* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sequence_id(CDOTAClientMsg_ChallengeSelect* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChallengeSelect::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSequenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
}
CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
}

CDOTAClientMsg_ChallengeSelect::~CDOTAClientMsg_ChallengeSelect() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeSelect::SharedDtor() {
}

void CDOTAClientMsg_ChallengeSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ChallengeSelect& CDOTAClientMsg_ChallengeSelect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ChallengeSelect_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ChallengeSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ChallengeSelect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ChallengeSelect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sequence_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ChallengeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sequence_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChallengeSelect)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeSelect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return target;
}

size_t CDOTAClientMsg_ChallengeSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeSelect* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ChallengeSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChallengeSelect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChallengeSelect)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeSelect::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeSelect::Swap(CDOTAClientMsg_ChallengeSelect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeSelect::InternalSwap(CDOTAClientMsg_ChallengeSelect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_id_, other->event_id_);
  swap(slot_id_, other->slot_id_);
  swap(sequence_id_, other->sequence_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeSelect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ChallengeReroll::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ChallengeReroll::HasBitSetters {
 public:
  static void set_has_event_id(CDOTAClientMsg_ChallengeReroll* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot_id(CDOTAClientMsg_ChallengeReroll* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sequence_id(CDOTAClientMsg_ChallengeReroll* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_id(CDOTAClientMsg_ChallengeReroll* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChallengeReroll::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSequenceIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
}
CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
}

CDOTAClientMsg_ChallengeReroll::~CDOTAClientMsg_ChallengeReroll() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeReroll::SharedDtor() {
}

void CDOTAClientMsg_ChallengeReroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ChallengeReroll& CDOTAClientMsg_ChallengeReroll::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ChallengeReroll_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ChallengeReroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ChallengeReroll::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ChallengeReroll*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sequence_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ChallengeReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sequence_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChallengeReroll)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeReroll::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return target;
}

size_t CDOTAClientMsg_ChallengeReroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeReroll* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ChallengeReroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChallengeReroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChallengeReroll)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeReroll::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeReroll::Swap(CDOTAClientMsg_ChallengeReroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeReroll::InternalSwap(CDOTAClientMsg_ChallengeReroll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_id_, other->event_id_);
  swap(slot_id_, other->slot_id_);
  swap(sequence_id_, other->sequence_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeReroll::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_CoinWager::InitAsDefaultInstance() {
}
class CDOTAClientMsg_CoinWager::HasBitSetters {
 public:
  static void set_has_wager_amount(CDOTAClientMsg_CoinWager* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CoinWager::kWagerAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CoinWager)
}
CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wager_amount_ = from.wager_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
  wager_amount_ = 0u;
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CoinWager)
  SharedDtor();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
}

void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_CoinWager& CDOTAClientMsg_CoinWager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_CoinWager_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_CoinWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CoinWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_CoinWager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_CoinWager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 wager_amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_wager_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_CoinWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CoinWager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wager_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_wager_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CoinWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CoinWager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_CoinWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CoinWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wager_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CoinWager)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CoinWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wager_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CoinWager)
  return target;
}

size_t CDOTAClientMsg_CoinWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CoinWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 wager_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wager_amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWager* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_CoinWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CoinWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CoinWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wager_amount()) {
    set_wager_amount(from.wager_amount());
  }
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWager::Swap(CDOTAClientMsg_CoinWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_amount_, other->wager_amount_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_CoinWagerToken::InitAsDefaultInstance() {
}
class CDOTAClientMsg_CoinWagerToken::HasBitSetters {
 public:
  static void set_has_wager_token_item_id(CDOTAClientMsg_CoinWagerToken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CoinWagerToken::kWagerTokenItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
}
CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken(const CDOTAClientMsg_CoinWagerToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wager_token_item_id_ = from.wager_token_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
}

void CDOTAClientMsg_CoinWagerToken::SharedCtor() {
  wager_token_item_id_ = PROTOBUF_ULONGLONG(0);
}

CDOTAClientMsg_CoinWagerToken::~CDOTAClientMsg_CoinWagerToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
  SharedDtor();
}

void CDOTAClientMsg_CoinWagerToken::SharedDtor() {
}

void CDOTAClientMsg_CoinWagerToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_CoinWagerToken& CDOTAClientMsg_CoinWagerToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_CoinWagerToken_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_CoinWagerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_token_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_CoinWagerToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_CoinWagerToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 wager_token_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_wager_token_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_CoinWagerToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 wager_token_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_wager_token_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_CoinWagerToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 wager_token_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->wager_token_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CoinWagerToken)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWagerToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 wager_token_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->wager_token_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return target;
}

size_t CDOTAClientMsg_CoinWagerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 wager_token_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wager_token_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWagerToken* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_CoinWagerToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CoinWagerToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CoinWagerToken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wager_token_item_id()) {
    set_wager_token_item_id(from.wager_token_item_id());
  }
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWagerToken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWagerToken::Swap(CDOTAClientMsg_CoinWagerToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoinWagerToken::InternalSwap(CDOTAClientMsg_CoinWagerToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_token_item_id_, other->wager_token_item_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWagerToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RankWager::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RankWager::HasBitSetters {
 public:
  static void set_has_announce_wager(CDOTAClientMsg_RankWager* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RankWager::kAnnounceWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RankWager)
}
CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announce_wager_ = from.announce_wager_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RankWager)
}

void CDOTAClientMsg_RankWager::SharedCtor() {
  announce_wager_ = false;
}

CDOTAClientMsg_RankWager::~CDOTAClientMsg_RankWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RankWager)
  SharedDtor();
}

void CDOTAClientMsg_RankWager::SharedDtor() {
}

void CDOTAClientMsg_RankWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RankWager& CDOTAClientMsg_RankWager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RankWager_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RankWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RankWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announce_wager_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RankWager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RankWager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool announce_wager = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_announce_wager(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RankWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RankWager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool announce_wager = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_announce_wager(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &announce_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RankWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RankWager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RankWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RankWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->announce_wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RankWager)
}

::google::protobuf::uint8* CDOTAClientMsg_RankWager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RankWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->announce_wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RankWager)
  return target;
}

size_t CDOTAClientMsg_RankWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RankWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool announce_wager = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RankWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RankWager* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RankWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RankWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RankWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RankWager::MergeFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_announce_wager()) {
    set_announce_wager(from.announce_wager());
  }
}

void CDOTAClientMsg_RankWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RankWager::CopyFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RankWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RankWager::Swap(CDOTAClientMsg_RankWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RankWager::InternalSwap(CDOTAClientMsg_RankWager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announce_wager_, other->announce_wager_);
}

::google::protobuf::Metadata CDOTAClientMsg_RankWager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_EventPointsTip::InitAsDefaultInstance() {
}
class CDOTAClientMsg_EventPointsTip::HasBitSetters {
 public:
  static void set_has_recipient_player_id(CDOTAClientMsg_EventPointsTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EventPointsTip::kRecipientPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EventPointsTip)
}
CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recipient_player_id_ = from.recipient_player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::SharedCtor() {
  recipient_player_id_ = 0u;
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EventPointsTip)
  SharedDtor();
}

void CDOTAClientMsg_EventPointsTip::SharedDtor() {
}

void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_EventPointsTip& CDOTAClientMsg_EventPointsTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_EventPointsTip_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_EventPointsTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_EventPointsTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_EventPointsTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 recipient_player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_recipient_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_EventPointsTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_recipient_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EventPointsTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EventPointsTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_EventPointsTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EventPointsTip)
}

::google::protobuf::uint8* CDOTAClientMsg_EventPointsTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EventPointsTip)
  return target;
}

size_t CDOTAClientMsg_EventPointsTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 recipient_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recipient_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventPointsTip* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_EventPointsTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EventPointsTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EventPointsTip)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recipient_player_id()) {
    set_recipient_player_id(from.recipient_player_id());
  }
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventPointsTip::Swap(CDOTAClientMsg_EventPointsTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EventPointsTip::InternalSwap(CDOTAClientMsg_EventPointsTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recipient_player_id_, other->recipient_player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ExecuteOrders::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ExecuteOrders::HasBitSetters {
 public:
};

void CDOTAClientMsg_ExecuteOrders::clear_orders() {
  orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ExecuteOrders::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
}
CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(const CDOTAClientMsg_ExecuteOrders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
}

void CDOTAClientMsg_ExecuteOrders::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto.base);
}

CDOTAClientMsg_ExecuteOrders::~CDOTAClientMsg_ExecuteOrders() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
  SharedDtor();
}

void CDOTAClientMsg_ExecuteOrders::SharedDtor() {
}

void CDOTAClientMsg_ExecuteOrders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ExecuteOrders& CDOTAClientMsg_ExecuteOrders::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ExecuteOrders_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ExecuteOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ExecuteOrders::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ExecuteOrders*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMsg_UnitOrder::_InternalParse;
          object = msg->add_orders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ExecuteOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ExecuteOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ExecuteOrders)
}

::google::protobuf::uint8* CDOTAClientMsg_ExecuteOrders::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->orders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return target;
}

size_t CDOTAClientMsg_ExecuteOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ExecuteOrders* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ExecuteOrders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ExecuteOrders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ExecuteOrders)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ExecuteOrders::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ExecuteOrders::Swap(CDOTAClientMsg_ExecuteOrders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ExecuteOrders::InternalSwap(CDOTAClientMsg_ExecuteOrders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
}

::google::protobuf::Metadata CDOTAClientMsg_ExecuteOrders::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_XPAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_XPAlert::HasBitSetters {
 public:
  static void set_has_target_entindex(CDOTAClientMsg_XPAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_damage_taken(CDOTAClientMsg_XPAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_XPAlert::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_XPAlert::kDamageTakenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_XPAlert)
}
CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(const CDOTAClientMsg_XPAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_XPAlert)
}

void CDOTAClientMsg_XPAlert::SharedCtor() {
  ::memset(&target_entindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_taken_) -
      reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
}

CDOTAClientMsg_XPAlert::~CDOTAClientMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_XPAlert)
  SharedDtor();
}

void CDOTAClientMsg_XPAlert::SharedDtor() {
}

void CDOTAClientMsg_XPAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_XPAlert& CDOTAClientMsg_XPAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_XPAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_taken_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(damage_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_XPAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_XPAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_damage_taken(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_XPAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_XPAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_damage_taken(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_XPAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_XPAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_XPAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_XPAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_XPAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_XPAlert)
  return target;
}

size_t CDOTAClientMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_XPAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_XPAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_XPAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_XPAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_XPAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_XPAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_XPAlert::MergeFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_taken_ = from.damage_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_XPAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_XPAlert::CopyFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_XPAlert::Swap(CDOTAClientMsg_XPAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_XPAlert::InternalSwap(CDOTAClientMsg_XPAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_entindex_, other->target_entindex_);
  swap(damage_taken_, other->damage_taken_);
}

::google::protobuf::Metadata CDOTAClientMsg_XPAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_KillcamDamageTaken::InitAsDefaultInstance() {
}
class CDOTAClientMsg_KillcamDamageTaken::HasBitSetters {
 public:
  static void set_has_target_entindex(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_damage_taken(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_item_type(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_item_ability_id(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_hero_name(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_damage_color(CDOTAClientMsg_KillcamDamageTaken* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_KillcamDamageTaken::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageTakenFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemTypeFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemAbilityIdFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kHeroNameFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}
CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(const CDOTAClientMsg_KillcamDamageTaken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_damage_color()) {
    damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
  }
  ::memcpy(&target_entindex_, &from.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}

void CDOTAClientMsg_KillcamDamageTaken::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto.base);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_entindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_ability_id_) -
      reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
}

CDOTAClientMsg_KillcamDamageTaken::~CDOTAClientMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  SharedDtor();
}

void CDOTAClientMsg_KillcamDamageTaken::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_KillcamDamageTaken& CDOTAClientMsg_KillcamDamageTaken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_KillcamDamageTaken_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      damage_color_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&target_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&target_entindex_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_KillcamDamageTaken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_KillcamDamageTaken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_damage_taken(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_ability_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string hero_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
        object = msg->mutable_hero_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string damage_color = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
        object = msg->mutable_damage_color();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_KillcamDamageTaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_damage_taken(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_ability_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), static_cast<int>(this->hero_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string damage_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage_color().data(), static_cast<int>(this->damage_color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_KillcamDamageTaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_type(), output);
  }

  // optional uint32 item_ability_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_ability_id(), output);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hero_name(), output);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), static_cast<int>(this->damage_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->damage_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}

::google::protobuf::uint8* CDOTAClientMsg_KillcamDamageTaken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_type(), target);
  }

  // optional uint32 item_ability_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_ability_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), static_cast<int>(this->damage_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->damage_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAClientMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hero_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string damage_color = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage_color());
    }

    // optional uint32 target_entindex = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

    // optional uint32 item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

    // optional uint32 item_ability_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillcamDamageTaken* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_KillcamDamageTaken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillcamDamageTaken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillcamDamageTaken::Swap(CDOTAClientMsg_KillcamDamageTaken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_KillcamDamageTaken::InternalSwap(CDOTAClientMsg_KillcamDamageTaken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_name_.Swap(&other->hero_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  damage_color_.Swap(&other->damage_color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_entindex_, other->target_entindex_);
  swap(damage_taken_, other->damage_taken_);
  swap(item_type_, other->item_type_);
  swap(item_ability_id_, other->item_ability_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_KillcamDamageTaken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_MatchMetadata::InitAsDefaultInstance() {
}
class CDOTAClientMsg_MatchMetadata::HasBitSetters {
 public:
  static void set_has_match_id(CDOTAClientMsg_MatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_metadata(CDOTAClientMsg_MatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MatchMetadata::kMatchIdFieldNumber;
const int CDOTAClientMsg_MatchMetadata::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MatchMetadata)
}
CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto.base);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_ = PROTOBUF_ULONGLONG(0);
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MatchMetadata)
  SharedDtor();
}

void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_MatchMetadata& CDOTAClientMsg_MatchMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_MatchMetadata_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_MatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_MatchMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_MatchMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_MatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MatchMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_MatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MatchMetadata)
}

::google::protobuf::uint8* CDOTAClientMsg_MatchMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MatchMetadata)
  return target;
}

size_t CDOTAClientMsg_MatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MatchMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_MatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MatchMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MatchMetadata::Swap(CDOTAClientMsg_MatchMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MatchMetadata::InternalSwap(CDOTAClientMsg_MatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_id_, other->match_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_KillMyHero::InitAsDefaultInstance() {
}
class CDOTAClientMsg_KillMyHero::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_KillMyHero)
}
CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(const CDOTAClientMsg_KillMyHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_KillMyHero)
}

void CDOTAClientMsg_KillMyHero::SharedCtor() {
}

CDOTAClientMsg_KillMyHero::~CDOTAClientMsg_KillMyHero() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_KillMyHero)
  SharedDtor();
}

void CDOTAClientMsg_KillMyHero::SharedDtor() {
}

void CDOTAClientMsg_KillMyHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_KillMyHero& CDOTAClientMsg_KillMyHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_KillMyHero_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_KillMyHero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_KillMyHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_KillMyHero::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_KillMyHero*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_KillMyHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_KillMyHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_KillMyHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_KillMyHero)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_KillMyHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_KillMyHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_KillMyHero)
}

::google::protobuf::uint8* CDOTAClientMsg_KillMyHero::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_KillMyHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_KillMyHero)
  return target;
}

size_t CDOTAClientMsg_KillMyHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_KillMyHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillMyHero* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_KillMyHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_KillMyHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_KillMyHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_KillMyHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillMyHero::CopyFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillMyHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillMyHero::Swap(CDOTAClientMsg_KillMyHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_KillMyHero::InternalSwap(CDOTAClientMsg_KillMyHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTAClientMsg_KillMyHero::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_QuestStatus::InitAsDefaultInstance() {
}
class CDOTAClientMsg_QuestStatus::HasBitSetters {
 public:
  static void set_has_quest_id(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_challenge_id(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_progress(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_goal(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_query(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_fail_gametime(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_item_ability_id(CDOTAClientMsg_QuestStatus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_QuestStatus::kQuestIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kChallengeIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kProgressFieldNumber;
const int CDOTAClientMsg_QuestStatus::kGoalFieldNumber;
const int CDOTAClientMsg_QuestStatus::kQueryFieldNumber;
const int CDOTAClientMsg_QuestStatus::kFailGametimeFieldNumber;
const int CDOTAClientMsg_QuestStatus::kItemAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_QuestStatus)
}
CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(const CDOTAClientMsg_QuestStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_QuestStatus)
}

void CDOTAClientMsg_QuestStatus::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_ability_id_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
}

CDOTAClientMsg_QuestStatus::~CDOTAClientMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_QuestStatus)
  SharedDtor();
}

void CDOTAClientMsg_QuestStatus::SharedDtor() {
}

void CDOTAClientMsg_QuestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_QuestStatus& CDOTAClientMsg_QuestStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_QuestStatus_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_QuestStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_QuestStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_quest_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_challenge_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 progress = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_progress(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 goal = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_goal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 query = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_query(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fail_gametime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_fail_gametime(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 item_ability_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_item_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_QuestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_QuestStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quest_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_quest_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_challenge_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 progress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_progress(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 goal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_goal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_query(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fail_gametime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_fail_gametime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fail_gametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_ability_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_item_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_QuestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_QuestStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_QuestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // optional uint32 challenge_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_id(), output);
  }

  // optional uint32 progress = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // optional uint32 goal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goal(), output);
  }

  // optional uint32 query = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->query(), output);
  }

  // optional float fail_gametime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fail_gametime(), output);
  }

  // optional uint32 item_ability_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_QuestStatus)
}

::google::protobuf::uint8* CDOTAClientMsg_QuestStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // optional uint32 challenge_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_id(), target);
  }

  // optional uint32 progress = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // optional uint32 goal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goal(), target);
  }

  // optional uint32 query = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->query(), target);
  }

  // optional float fail_gametime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fail_gametime(), target);
  }

  // optional uint32 item_ability_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_QuestStatus)
  return target;
}

size_t CDOTAClientMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_QuestStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional uint32 challenge_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_id());
    }

    // optional uint32 progress = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 goal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

    // optional uint32 query = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query());
    }

    // optional float fail_gametime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 item_ability_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuestStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_QuestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_QuestStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_QuestStatus)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_id_ = from.challenge_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_ = from.goal_;
    }
    if (cached_has_bits & 0x00000010u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000020u) {
      fail_gametime_ = from.fail_gametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuestStatus::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuestStatus::Swap(CDOTAClientMsg_QuestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_QuestStatus::InternalSwap(CDOTAClientMsg_QuestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quest_id_, other->quest_id_);
  swap(challenge_id_, other->challenge_id_);
  swap(progress_, other->progress_);
  swap(goal_, other->goal_);
  swap(query_, other->query_);
  swap(fail_gametime_, other->fail_gametime_);
  swap(item_ability_id_, other->item_ability_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_QuestStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_ToggleAutoattack::InitAsDefaultInstance() {
}
class CDOTAClientMsg_ToggleAutoattack::HasBitSetters {
 public:
  static void set_has_mode(CDOTAClientMsg_ToggleAutoattack* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show_message(CDOTAClientMsg_ToggleAutoattack* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ToggleAutoattack::kModeFieldNumber;
const int CDOTAClientMsg_ToggleAutoattack::kShowMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}
CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(const CDOTAClientMsg_ToggleAutoattack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_message_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}

void CDOTAClientMsg_ToggleAutoattack::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_message_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
}

CDOTAClientMsg_ToggleAutoattack::~CDOTAClientMsg_ToggleAutoattack() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  SharedDtor();
}

void CDOTAClientMsg_ToggleAutoattack::SharedDtor() {
}

void CDOTAClientMsg_ToggleAutoattack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_ToggleAutoattack& CDOTAClientMsg_ToggleAutoattack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_ToggleAutoattack_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_ToggleAutoattack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_message_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(show_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_ToggleAutoattack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_ToggleAutoattack*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_message(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_ToggleAutoattack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_message(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_ToggleAutoattack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // optional bool show_message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}

::google::protobuf::uint8* CDOTAClientMsg_ToggleAutoattack::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // optional bool show_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return target;
}

size_t CDOTAClientMsg_ToggleAutoattack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional bool show_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ToggleAutoattack* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_ToggleAutoattack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ToggleAutoattack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ToggleAutoattack)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_message_ = from.show_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ToggleAutoattack::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ToggleAutoattack::Swap(CDOTAClientMsg_ToggleAutoattack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ToggleAutoattack::InternalSwap(CDOTAClientMsg_ToggleAutoattack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(show_message_, other->show_message_);
}

::google::protobuf::Metadata CDOTAClientMsg_ToggleAutoattack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SpecialAbility::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SpecialAbility::HasBitSetters {
 public:
  static void set_has_ability_index(CDOTAClientMsg_SpecialAbility* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_entindex(CDOTAClientMsg_SpecialAbility* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SpecialAbility::kAbilityIndexFieldNumber;
const int CDOTAClientMsg_SpecialAbility::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SpecialAbility)
}
CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(const CDOTAClientMsg_SpecialAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_index_, &from.ability_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SpecialAbility)
}

void CDOTAClientMsg_SpecialAbility::SharedCtor() {
  ::memset(&ability_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
}

CDOTAClientMsg_SpecialAbility::~CDOTAClientMsg_SpecialAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SpecialAbility)
  SharedDtor();
}

void CDOTAClientMsg_SpecialAbility::SharedDtor() {
}

void CDOTAClientMsg_SpecialAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SpecialAbility& CDOTAClientMsg_SpecialAbility::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SpecialAbility_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SpecialAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&ability_index_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SpecialAbility::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SpecialAbility*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ability_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SpecialAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ability_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SpecialAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SpecialAbility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SpecialAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SpecialAbility)
}

::google::protobuf::uint8* CDOTAClientMsg_SpecialAbility::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SpecialAbility)
  return target;
}

size_t CDOTAClientMsg_SpecialAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_index());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SpecialAbility* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SpecialAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SpecialAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SpecialAbility)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SpecialAbility::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SpecialAbility::Swap(CDOTAClientMsg_SpecialAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SpecialAbility::InternalSwap(CDOTAClientMsg_SpecialAbility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ability_index_, other->ability_index_);
  swap(target_entindex_, other->target_entindex_);
}

::google::protobuf::Metadata CDOTAClientMsg_SpecialAbility::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SetEnemyStartingPosition::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SetEnemyStartingPosition::HasBitSetters {
 public:
  static void set_has_enemy_player_id(CDOTAClientMsg_SetEnemyStartingPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_enemy_starting_position(CDOTAClientMsg_SetEnemyStartingPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyPlayerIdFieldNumber;
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyStartingPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}
CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(const CDOTAClientMsg_SetEnemyStartingPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enemy_player_id_, &from.enemy_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemy_starting_position_) -
    reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedCtor() {
  ::memset(&enemy_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enemy_starting_position_) -
      reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
}

CDOTAClientMsg_SetEnemyStartingPosition::~CDOTAClientMsg_SetEnemyStartingPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  SharedDtor();
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedDtor() {
}

void CDOTAClientMsg_SetEnemyStartingPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SetEnemyStartingPosition& CDOTAClientMsg_SetEnemyStartingPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SetEnemyStartingPosition_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SetEnemyStartingPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enemy_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enemy_starting_position_) -
        reinterpret_cast<char*>(&enemy_player_id_)) + sizeof(enemy_starting_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SetEnemyStartingPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SetEnemyStartingPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 enemy_player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enemy_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 enemy_starting_position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enemy_starting_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SetEnemyStartingPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemy_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enemy_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enemy_starting_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_enemy_starting_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_starting_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SetEnemyStartingPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enemy_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemy_player_id(), output);
  }

  // optional uint32 enemy_starting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemy_starting_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}

::google::protobuf::uint8* CDOTAClientMsg_SetEnemyStartingPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enemy_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemy_player_id(), target);
  }

  // optional uint32 enemy_starting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemy_starting_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return target;
}

size_t CDOTAClientMsg_SetEnemyStartingPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 enemy_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_player_id());
    }

    // optional uint32 enemy_starting_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_starting_position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetEnemyStartingPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SetEnemyStartingPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enemy_player_id_ = from.enemy_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      enemy_starting_position_ = from.enemy_starting_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetEnemyStartingPosition::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetEnemyStartingPosition::Swap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetEnemyStartingPosition::InternalSwap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enemy_player_id_, other->enemy_player_id_);
  swap(enemy_starting_position_, other->enemy_starting_position_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetEnemyStartingPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SetDesiredWardPlacement::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SetDesiredWardPlacement::HasBitSetters {
 public:
  static void set_has_ward_index(CDOTAClientMsg_SetDesiredWardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ward_x(CDOTAClientMsg_SetDesiredWardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ward_y(CDOTAClientMsg_SetDesiredWardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardIndexFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardXFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}
CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(const CDOTAClientMsg_SetDesiredWardPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ward_index_, &from.ward_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&ward_y_) -
    reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedCtor() {
  ::memset(&ward_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ward_y_) -
      reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
}

CDOTAClientMsg_SetDesiredWardPlacement::~CDOTAClientMsg_SetDesiredWardPlacement() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  SharedDtor();
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedDtor() {
}

void CDOTAClientMsg_SetDesiredWardPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SetDesiredWardPlacement& CDOTAClientMsg_SetDesiredWardPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SetDesiredWardPlacement_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SetDesiredWardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ward_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ward_y_) -
        reinterpret_cast<char*>(&ward_index_)) + sizeof(ward_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SetDesiredWardPlacement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SetDesiredWardPlacement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ward_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ward_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float ward_x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ward_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float ward_y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_ward_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SetDesiredWardPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ward_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ward_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ward_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ward_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_ward_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ward_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_ward_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SetDesiredWardPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ward_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ward_index(), output);
  }

  // optional float ward_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ward_x(), output);
  }

  // optional float ward_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ward_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}

::google::protobuf::uint8* CDOTAClientMsg_SetDesiredWardPlacement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ward_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ward_index(), target);
  }

  // optional float ward_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ward_x(), target);
  }

  // optional float ward_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ward_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return target;
}

size_t CDOTAClientMsg_SetDesiredWardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ward_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ward_index());
    }

    // optional float ward_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ward_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetDesiredWardPlacement* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SetDesiredWardPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ward_index_ = from.ward_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ward_x_ = from.ward_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      ward_y_ = from.ward_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetDesiredWardPlacement::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetDesiredWardPlacement::Swap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetDesiredWardPlacement::InternalSwap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ward_index_, other->ward_index_);
  swap(ward_x_, other->ward_x_);
  swap(ward_y_, other->ward_y_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetDesiredWardPlacement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RollDice::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RollDice::HasBitSetters {
 public:
  static void set_has_channel_type(CDOTAClientMsg_RollDice* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roll_min(CDOTAClientMsg_RollDice* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roll_max(CDOTAClientMsg_RollDice* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RollDice::kChannelTypeFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMinFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RollDice)
}
CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(const CDOTAClientMsg_RollDice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_type_, &from.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_max_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RollDice)
}

void CDOTAClientMsg_RollDice::SharedCtor() {
  ::memset(&channel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_max_) -
      reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
}

CDOTAClientMsg_RollDice::~CDOTAClientMsg_RollDice() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RollDice)
  SharedDtor();
}

void CDOTAClientMsg_RollDice::SharedDtor() {
}

void CDOTAClientMsg_RollDice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RollDice& CDOTAClientMsg_RollDice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RollDice_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RollDice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RollDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_max_) -
        reinterpret_cast<char*>(&channel_type_)) + sizeof(roll_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RollDice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RollDice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 roll_min = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_roll_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 roll_max = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_roll_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RollDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RollDice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roll_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_roll_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RollDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RollDice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RollDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RollDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  // optional uint32 roll_min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roll_min(), output);
  }

  // optional uint32 roll_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roll_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RollDice)
}

::google::protobuf::uint8* CDOTAClientMsg_RollDice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RollDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  // optional uint32 roll_min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roll_min(), target);
  }

  // optional uint32 roll_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roll_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RollDice)
  return target;
}

size_t CDOTAClientMsg_RollDice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RollDice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 channel_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // optional uint32 roll_min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_min());
    }

    // optional uint32 roll_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RollDice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RollDice* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RollDice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RollDice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RollDice)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RollDice::MergeFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_max_ = from.roll_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_RollDice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RollDice::CopyFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RollDice::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RollDice::Swap(CDOTAClientMsg_RollDice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RollDice::InternalSwap(CDOTAClientMsg_RollDice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_type_, other->channel_type_);
  swap(roll_min_, other->roll_min_);
  swap(roll_max_, other->roll_max_);
}

::google::protobuf::Metadata CDOTAClientMsg_RollDice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_FlipCoin::InitAsDefaultInstance() {
}
class CDOTAClientMsg_FlipCoin::HasBitSetters {
 public:
  static void set_has_channel_type(CDOTAClientMsg_FlipCoin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FlipCoin::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FlipCoin)
}
CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(const CDOTAClientMsg_FlipCoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FlipCoin)
}

void CDOTAClientMsg_FlipCoin::SharedCtor() {
  channel_type_ = 0u;
}

CDOTAClientMsg_FlipCoin::~CDOTAClientMsg_FlipCoin() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FlipCoin)
  SharedDtor();
}

void CDOTAClientMsg_FlipCoin::SharedDtor() {
}

void CDOTAClientMsg_FlipCoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_FlipCoin& CDOTAClientMsg_FlipCoin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_FlipCoin_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_FlipCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FlipCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_FlipCoin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_FlipCoin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_FlipCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FlipCoin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FlipCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FlipCoin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_FlipCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FlipCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FlipCoin)
}

::google::protobuf::uint8* CDOTAClientMsg_FlipCoin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FlipCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FlipCoin)
  return target;
}

size_t CDOTAClientMsg_FlipCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FlipCoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 channel_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FlipCoin* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_FlipCoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FlipCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FlipCoin)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_type()) {
    set_channel_type(from.channel_type());
  }
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FlipCoin::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FlipCoin::Swap(CDOTAClientMsg_FlipCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FlipCoin::InternalSwap(CDOTAClientMsg_FlipCoin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_type_, other->channel_type_);
}

::google::protobuf::Metadata CDOTAClientMsg_FlipCoin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RequestItemSuggestions::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RequestItemSuggestions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}
CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions(const CDOTAClientMsg_RequestItemSuggestions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}

void CDOTAClientMsg_RequestItemSuggestions::SharedCtor() {
}

CDOTAClientMsg_RequestItemSuggestions::~CDOTAClientMsg_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  SharedDtor();
}

void CDOTAClientMsg_RequestItemSuggestions::SharedDtor() {
}

void CDOTAClientMsg_RequestItemSuggestions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RequestItemSuggestions& CDOTAClientMsg_RequestItemSuggestions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RequestItemSuggestions_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RequestItemSuggestions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RequestItemSuggestions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RequestItemSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RequestItemSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestItemSuggestions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return target;
}

size_t CDOTAClientMsg_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestItemSuggestions* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RequestItemSuggestions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestItemSuggestions::Swap(CDOTAClientMsg_RequestItemSuggestions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestItemSuggestions::InternalSwap(CDOTAClientMsg_RequestItemSuggestions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestItemSuggestions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_MakeTeamCaptain::InitAsDefaultInstance() {
}
class CDOTAClientMsg_MakeTeamCaptain::HasBitSetters {
 public:
  static void set_has_player_id(CDOTAClientMsg_MakeTeamCaptain* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MakeTeamCaptain::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}
CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain(const CDOTAClientMsg_MakeTeamCaptain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}

void CDOTAClientMsg_MakeTeamCaptain::SharedCtor() {
  player_id_ = 0u;
}

CDOTAClientMsg_MakeTeamCaptain::~CDOTAClientMsg_MakeTeamCaptain() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  SharedDtor();
}

void CDOTAClientMsg_MakeTeamCaptain::SharedDtor() {
}

void CDOTAClientMsg_MakeTeamCaptain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_MakeTeamCaptain& CDOTAClientMsg_MakeTeamCaptain::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_MakeTeamCaptain_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_MakeTeamCaptain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_MakeTeamCaptain::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_MakeTeamCaptain*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_MakeTeamCaptain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_MakeTeamCaptain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}

::google::protobuf::uint8* CDOTAClientMsg_MakeTeamCaptain::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return target;
}

size_t CDOTAClientMsg_MakeTeamCaptain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MakeTeamCaptain* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_MakeTeamCaptain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MakeTeamCaptain::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MakeTeamCaptain::Swap(CDOTAClientMsg_MakeTeamCaptain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MakeTeamCaptain::InternalSwap(CDOTAClientMsg_MakeTeamCaptain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_MakeTeamCaptain::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_HelpTipSystemStateChanged::InitAsDefaultInstance() {
}
class CDOTAClientMsg_HelpTipSystemStateChanged::HasBitSetters {
 public:
  static void set_has_tip_displayed(CDOTAClientMsg_HelpTipSystemStateChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_HelpTipSystemStateChanged::kTipDisplayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_HelpTipSystemStateChanged::CDOTAClientMsg_HelpTipSystemStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
}
CDOTAClientMsg_HelpTipSystemStateChanged::CDOTAClientMsg_HelpTipSystemStateChanged(const CDOTAClientMsg_HelpTipSystemStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tip_displayed_ = from.tip_displayed_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
}

void CDOTAClientMsg_HelpTipSystemStateChanged::SharedCtor() {
  tip_displayed_ = false;
}

CDOTAClientMsg_HelpTipSystemStateChanged::~CDOTAClientMsg_HelpTipSystemStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  SharedDtor();
}

void CDOTAClientMsg_HelpTipSystemStateChanged::SharedDtor() {
}

void CDOTAClientMsg_HelpTipSystemStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_HelpTipSystemStateChanged& CDOTAClientMsg_HelpTipSystemStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_HelpTipSystemStateChanged_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_HelpTipSystemStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tip_displayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_HelpTipSystemStateChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_HelpTipSystemStateChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool tip_displayed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tip_displayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_HelpTipSystemStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool tip_displayed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tip_displayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tip_displayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_HelpTipSystemStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tip_displayed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tip_displayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
}

::google::protobuf::uint8* CDOTAClientMsg_HelpTipSystemStateChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tip_displayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tip_displayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  return target;
}

size_t CDOTAClientMsg_HelpTipSystemStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool tip_displayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_HelpTipSystemStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HelpTipSystemStateChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_HelpTipSystemStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HelpTipSystemStateChanged::MergeFrom(const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tip_displayed()) {
    set_tip_displayed(from.tip_displayed());
  }
}

void CDOTAClientMsg_HelpTipSystemStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HelpTipSystemStateChanged::CopyFrom(const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_HelpTipSystemStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HelpTipSystemStateChanged::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HelpTipSystemStateChanged::Swap(CDOTAClientMsg_HelpTipSystemStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HelpTipSystemStateChanged::InternalSwap(CDOTAClientMsg_HelpTipSystemStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tip_displayed_, other->tip_displayed_);
}

::google::protobuf::Metadata CDOTAClientMsg_HelpTipSystemStateChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_RequestBulkCombatLog::InitAsDefaultInstance() {
}
class CDOTAClientMsg_RequestBulkCombatLog::HasBitSetters {
 public:
  static void set_has_game_time(CDOTAClientMsg_RequestBulkCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_duration(CDOTAClientMsg_RequestBulkCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_recent_player_death(CDOTAClientMsg_RequestBulkCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_id(CDOTAClientMsg_RequestBulkCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RequestBulkCombatLog::kGameTimeFieldNumber;
const int CDOTAClientMsg_RequestBulkCombatLog::kDurationFieldNumber;
const int CDOTAClientMsg_RequestBulkCombatLog::kRecentPlayerDeathFieldNumber;
const int CDOTAClientMsg_RequestBulkCombatLog::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RequestBulkCombatLog::CDOTAClientMsg_RequestBulkCombatLog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
}
CDOTAClientMsg_RequestBulkCombatLog::CDOTAClientMsg_RequestBulkCombatLog(const CDOTAClientMsg_RequestBulkCombatLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
}

void CDOTAClientMsg_RequestBulkCombatLog::SharedCtor() {
  ::memset(&game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
}

CDOTAClientMsg_RequestBulkCombatLog::~CDOTAClientMsg_RequestBulkCombatLog() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  SharedDtor();
}

void CDOTAClientMsg_RequestBulkCombatLog::SharedDtor() {
}

void CDOTAClientMsg_RequestBulkCombatLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_RequestBulkCombatLog& CDOTAClientMsg_RequestBulkCombatLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_RequestBulkCombatLog_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_RequestBulkCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_RequestBulkCombatLog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_RequestBulkCombatLog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float game_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_game_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool recent_player_death = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_recent_player_death(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 player_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_RequestBulkCombatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recent_player_death = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_recent_player_death(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recent_player_death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_RequestBulkCombatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->game_time(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool recent_player_death = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->recent_player_death(), output);
  }

  // optional int32 player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestBulkCombatLog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->game_time(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool recent_player_death = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->recent_player_death(), target);
  }

  // optional int32 player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  return target;
}

size_t CDOTAClientMsg_RequestBulkCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float game_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool recent_player_death = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RequestBulkCombatLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestBulkCombatLog* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_RequestBulkCombatLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestBulkCombatLog::MergeFrom(const CDOTAClientMsg_RequestBulkCombatLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      recent_player_death_ = from.recent_player_death_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_RequestBulkCombatLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestBulkCombatLog::CopyFrom(const CDOTAClientMsg_RequestBulkCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RequestBulkCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestBulkCombatLog::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestBulkCombatLog::Swap(CDOTAClientMsg_RequestBulkCombatLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestBulkCombatLog::InternalSwap(CDOTAClientMsg_RequestBulkCombatLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_time_, other->game_time_);
  swap(duration_, other->duration_);
  swap(recent_player_death_, other->recent_player_death_);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestBulkCombatLog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_AbilityDraftRequestAbility::InitAsDefaultInstance() {
}
class CDOTAClientMsg_AbilityDraftRequestAbility::HasBitSetters {
 public:
  static void set_has_requested_ability_id(CDOTAClientMsg_AbilityDraftRequestAbility* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_AbilityDraftRequestAbility::kRequestedAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_AbilityDraftRequestAbility::CDOTAClientMsg_AbilityDraftRequestAbility()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
}
CDOTAClientMsg_AbilityDraftRequestAbility::CDOTAClientMsg_AbilityDraftRequestAbility(const CDOTAClientMsg_AbilityDraftRequestAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requested_ability_id_ = from.requested_ability_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
}

void CDOTAClientMsg_AbilityDraftRequestAbility::SharedCtor() {
  requested_ability_id_ = 0u;
}

CDOTAClientMsg_AbilityDraftRequestAbility::~CDOTAClientMsg_AbilityDraftRequestAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  SharedDtor();
}

void CDOTAClientMsg_AbilityDraftRequestAbility::SharedDtor() {
}

void CDOTAClientMsg_AbilityDraftRequestAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_AbilityDraftRequestAbility& CDOTAClientMsg_AbilityDraftRequestAbility::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_AbilityDraftRequestAbility_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_AbilityDraftRequestAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requested_ability_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_AbilityDraftRequestAbility::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_AbilityDraftRequestAbility*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 requested_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requested_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_AbilityDraftRequestAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 requested_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requested_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requested_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_AbilityDraftRequestAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 requested_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requested_ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
}

::google::protobuf::uint8* CDOTAClientMsg_AbilityDraftRequestAbility::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 requested_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requested_ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  return target;
}

size_t CDOTAClientMsg_AbilityDraftRequestAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 requested_ability_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requested_ability_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_AbilityDraftRequestAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AbilityDraftRequestAbility* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_AbilityDraftRequestAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AbilityDraftRequestAbility::MergeFrom(const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requested_ability_id()) {
    set_requested_ability_id(from.requested_ability_id());
  }
}

void CDOTAClientMsg_AbilityDraftRequestAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AbilityDraftRequestAbility::CopyFrom(const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AbilityDraftRequestAbility::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AbilityDraftRequestAbility::Swap(CDOTAClientMsg_AbilityDraftRequestAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_AbilityDraftRequestAbility::InternalSwap(CDOTAClientMsg_AbilityDraftRequestAbility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requested_ability_id_, other->requested_ability_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_AbilityDraftRequestAbility::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_GuideSelectOption::InitAsDefaultInstance() {
}
class CDOTAClientMsg_GuideSelectOption::HasBitSetters {
 public:
  static void set_has_option(CDOTAClientMsg_GuideSelectOption* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_force_recalculate(CDOTAClientMsg_GuideSelectOption* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_GuideSelectOption::kOptionFieldNumber;
const int CDOTAClientMsg_GuideSelectOption::kForceRecalculateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_GuideSelectOption)
}
CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_GuideSelectOption)
}

void CDOTAClientMsg_GuideSelectOption::SharedCtor() {
  ::memset(&option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_recalculate_) -
      reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
}

CDOTAClientMsg_GuideSelectOption::~CDOTAClientMsg_GuideSelectOption() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_GuideSelectOption)
  SharedDtor();
}

void CDOTAClientMsg_GuideSelectOption::SharedDtor() {
}

void CDOTAClientMsg_GuideSelectOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_GuideSelectOption& CDOTAClientMsg_GuideSelectOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_GuideSelectOption_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_GuideSelectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_recalculate_) -
        reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_GuideSelectOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_GuideSelectOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 option = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_option(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool force_recalculate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_force_recalculate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_GuideSelectOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 option = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_option(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_recalculate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_force_recalculate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_recalculate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_GuideSelectOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_GuideSelectOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_GuideSelectOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->option(), output);
  }

  // optional bool force_recalculate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_recalculate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_GuideSelectOption)
}

::google::protobuf::uint8* CDOTAClientMsg_GuideSelectOption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->option(), target);
  }

  // optional bool force_recalculate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_recalculate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_GuideSelectOption)
  return target;
}

size_t CDOTAClientMsg_GuideSelectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 option = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->option());
    }

    // optional bool force_recalculate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelectOption* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_GuideSelectOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_GuideSelectOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_GuideSelectOption)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      option_ = from.option_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_recalculate_ = from.force_recalculate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelectOption::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelectOption::Swap(CDOTAClientMsg_GuideSelectOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_GuideSelectOption::InternalSwap(CDOTAClientMsg_GuideSelectOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(option_, other->option_);
  swap(force_recalculate_, other->force_recalculate_);
}

::google::protobuf::Metadata CDOTAClientMsg_GuideSelectOption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_GuideSelected::InitAsDefaultInstance() {
}
class CDOTAClientMsg_GuideSelected::HasBitSetters {
 public:
  static void set_has_guide_workshop_id(CDOTAClientMsg_GuideSelected* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_plus_guide(CDOTAClientMsg_GuideSelected* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_GuideSelected::kGuideWorkshopIdFieldNumber;
const int CDOTAClientMsg_GuideSelected::kIsPlusGuideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_GuideSelected)
}
CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guide_workshop_id_, &from.guide_workshop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_GuideSelected)
}

void CDOTAClientMsg_GuideSelected::SharedCtor() {
  ::memset(&guide_workshop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_plus_guide_) -
      reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
}

CDOTAClientMsg_GuideSelected::~CDOTAClientMsg_GuideSelected() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_GuideSelected)
  SharedDtor();
}

void CDOTAClientMsg_GuideSelected::SharedDtor() {
}

void CDOTAClientMsg_GuideSelected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_GuideSelected& CDOTAClientMsg_GuideSelected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_GuideSelected_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_GuideSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_GuideSelected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guide_workshop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_guide_) -
        reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_GuideSelected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_GuideSelected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 guide_workshop_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_guide_workshop_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_plus_guide = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_plus_guide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_GuideSelected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_GuideSelected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guide_workshop_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_guide_workshop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guide_workshop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plus_guide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_plus_guide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plus_guide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_GuideSelected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_GuideSelected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_GuideSelected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_GuideSelected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guide_workshop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guide_workshop_id(), output);
  }

  // optional bool is_plus_guide = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_plus_guide(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_GuideSelected)
}

::google::protobuf::uint8* CDOTAClientMsg_GuideSelected::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_GuideSelected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guide_workshop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guide_workshop_id(), target);
  }

  // optional bool is_plus_guide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_plus_guide(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_GuideSelected)
  return target;
}

size_t CDOTAClientMsg_GuideSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_GuideSelected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 guide_workshop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guide_workshop_id());
    }

    // optional bool is_plus_guide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelected* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_GuideSelected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_GuideSelected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_GuideSelected)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guide_workshop_id_ = from.guide_workshop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_plus_guide_ = from.is_plus_guide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelected::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelected::Swap(CDOTAClientMsg_GuideSelected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_GuideSelected::InternalSwap(CDOTAClientMsg_GuideSelected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guide_workshop_id_, other->guide_workshop_id_);
  swap(is_plus_guide_, other->is_plus_guide_);
}

::google::protobuf::Metadata CDOTAClientMsg_GuideSelected::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_DamageReport::InitAsDefaultInstance() {
}
class CDOTAClientMsg_DamageReport::HasBitSetters {
 public:
  static void set_has_target_hero_id(CDOTAClientMsg_DamageReport* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_source_hero_id(CDOTAClientMsg_DamageReport* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_damage_amount(CDOTAClientMsg_DamageReport* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_broadcast(CDOTAClientMsg_DamageReport* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_DamageReport::kTargetHeroIdFieldNumber;
const int CDOTAClientMsg_DamageReport::kSourceHeroIdFieldNumber;
const int CDOTAClientMsg_DamageReport::kDamageAmountFieldNumber;
const int CDOTAClientMsg_DamageReport::kBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_DamageReport::CDOTAClientMsg_DamageReport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_DamageReport)
}
CDOTAClientMsg_DamageReport::CDOTAClientMsg_DamageReport(const CDOTAClientMsg_DamageReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_hero_id_, &from.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_DamageReport)
}

void CDOTAClientMsg_DamageReport::SharedCtor() {
  ::memset(&target_hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
}

CDOTAClientMsg_DamageReport::~CDOTAClientMsg_DamageReport() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_DamageReport)
  SharedDtor();
}

void CDOTAClientMsg_DamageReport::SharedDtor() {
}

void CDOTAClientMsg_DamageReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_DamageReport& CDOTAClientMsg_DamageReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_DamageReport_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_DamageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_DamageReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_) -
        reinterpret_cast<char*>(&target_hero_id_)) + sizeof(broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_DamageReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_DamageReport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 target_hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_source_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 damage_amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_damage_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool broadcast = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_broadcast(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_DamageReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_DamageReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_source_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 damage_amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_damage_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_broadcast(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_DamageReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_DamageReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_DamageReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_DamageReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_hero_id(), output);
  }

  // optional uint32 source_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_hero_id(), output);
  }

  // optional int32 damage_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage_amount(), output);
  }

  // optional bool broadcast = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->broadcast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_DamageReport)
}

::google::protobuf::uint8* CDOTAClientMsg_DamageReport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_DamageReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_hero_id(), target);
  }

  // optional uint32 source_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_hero_id(), target);
  }

  // optional int32 damage_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage_amount(), target);
  }

  // optional bool broadcast = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->broadcast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_DamageReport)
  return target;
}

size_t CDOTAClientMsg_DamageReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_DamageReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_id());
    }

    // optional uint32 source_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_hero_id());
    }

    // optional int32 damage_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_amount());
    }

    // optional bool broadcast = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_DamageReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DamageReport* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_DamageReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_DamageReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_DamageReport)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DamageReport::MergeFrom(const CDOTAClientMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_hero_id_ = from.source_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      damage_amount_ = from.damage_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_DamageReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DamageReport::CopyFrom(const CDOTAClientMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DamageReport::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DamageReport::Swap(CDOTAClientMsg_DamageReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DamageReport::InternalSwap(CDOTAClientMsg_DamageReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_hero_id_, other->target_hero_id_);
  swap(source_hero_id_, other->source_hero_id_);
  swap(damage_amount_, other->damage_amount_);
  swap(broadcast_, other->broadcast_);
}

::google::protobuf::Metadata CDOTAClientMsg_DamageReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_SalutePlayer::InitAsDefaultInstance() {
}
class CDOTAClientMsg_SalutePlayer::HasBitSetters {
 public:
  static void set_has_target_player_id(CDOTAClientMsg_SalutePlayer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_id(CDOTAClientMsg_SalutePlayer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SalutePlayer::kTargetPlayerIdFieldNumber;
const int CDOTAClientMsg_SalutePlayer::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SalutePlayer::CDOTAClientMsg_SalutePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SalutePlayer)
}
CDOTAClientMsg_SalutePlayer::CDOTAClientMsg_SalutePlayer(const CDOTAClientMsg_SalutePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_player_id_, &from.target_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SalutePlayer)
}

void CDOTAClientMsg_SalutePlayer::SharedCtor() {
  ::memset(&target_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
}

CDOTAClientMsg_SalutePlayer::~CDOTAClientMsg_SalutePlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SalutePlayer)
  SharedDtor();
}

void CDOTAClientMsg_SalutePlayer::SharedDtor() {
}

void CDOTAClientMsg_SalutePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_SalutePlayer& CDOTAClientMsg_SalutePlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_SalutePlayer_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_SalutePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&target_player_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_SalutePlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_SalutePlayer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 target_player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 event_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_SalutePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SalutePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SalutePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_SalutePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target_player_id(), output);
  }

  // optional int32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SalutePlayer)
}

::google::protobuf::uint8* CDOTAClientMsg_SalutePlayer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target_player_id(), target);
  }

  // optional int32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SalutePlayer)
  return target;
}

size_t CDOTAClientMsg_SalutePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 target_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_player_id());
    }

    // optional int32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_SalutePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SalutePlayer* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_SalutePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SalutePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SalutePlayer)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SalutePlayer::MergeFrom(const CDOTAClientMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SalutePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SalutePlayer::CopyFrom(const CDOTAClientMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SalutePlayer::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SalutePlayer::Swap(CDOTAClientMsg_SalutePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SalutePlayer::InternalSwap(CDOTAClientMsg_SalutePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_player_id_, other->target_player_id_);
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CDOTAClientMsg_SalutePlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_TipAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_TipAlert::HasBitSetters {
 public:
  static void set_has_tip_text(CDOTAClientMsg_TipAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_TipAlert::kTipTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_TipAlert)
}
CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tip_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tip_text()) {
    tip_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tip_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_TipAlert)
}

void CDOTAClientMsg_TipAlert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto.base);
  tip_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_TipAlert::~CDOTAClientMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_TipAlert)
  SharedDtor();
}

void CDOTAClientMsg_TipAlert::SharedDtor() {
  tip_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_TipAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_TipAlert& CDOTAClientMsg_TipAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_TipAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_TipAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tip_text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_TipAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_TipAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string tip_text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAClientMsg_TipAlert.tip_text");
        object = msg->mutable_tip_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_TipAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_TipAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tip_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tip_text().data(), static_cast<int>(this->tip_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_TipAlert.tip_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_TipAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_TipAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_TipAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_TipAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tip_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tip_text().data(), static_cast<int>(this->tip_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_TipAlert.tip_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tip_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_TipAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_TipAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_TipAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tip_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tip_text().data(), static_cast<int>(this->tip_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_TipAlert.tip_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tip_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_TipAlert)
  return target;
}

size_t CDOTAClientMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_TipAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tip_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tip_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TipAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TipAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_TipAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_TipAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_TipAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TipAlert::MergeFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tip_text()) {
    _has_bits_[0] |= 0x00000001u;
    tip_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tip_text_);
  }
}

void CDOTAClientMsg_TipAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TipAlert::CopyFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TipAlert::Swap(CDOTAClientMsg_TipAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TipAlert::InternalSwap(CDOTAClientMsg_TipAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tip_text_.Swap(&other->tip_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDOTAClientMsg_TipAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAClientMsg_EmptyTeleportAlert::InitAsDefaultInstance() {
}
class CDOTAClientMsg_EmptyTeleportAlert::HasBitSetters {
 public:
  static void set_has_target_entindex(CDOTAClientMsg_EmptyTeleportAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EmptyTeleportAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EmptyTeleportAlert::CDOTAClientMsg_EmptyTeleportAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
}
CDOTAClientMsg_EmptyTeleportAlert::CDOTAClientMsg_EmptyTeleportAlert(const CDOTAClientMsg_EmptyTeleportAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_entindex_ = from.target_entindex_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
}

void CDOTAClientMsg_EmptyTeleportAlert::SharedCtor() {
  target_entindex_ = 0;
}

CDOTAClientMsg_EmptyTeleportAlert::~CDOTAClientMsg_EmptyTeleportAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  SharedDtor();
}

void CDOTAClientMsg_EmptyTeleportAlert::SharedDtor() {
}

void CDOTAClientMsg_EmptyTeleportAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAClientMsg_EmptyTeleportAlert& CDOTAClientMsg_EmptyTeleportAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAClientMsg_EmptyTeleportAlert_dota_5fclientmessages_2eproto.base);
  return *internal_default_instance();
}


void CDOTAClientMsg_EmptyTeleportAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_entindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAClientMsg_EmptyTeleportAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAClientMsg_EmptyTeleportAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 target_entindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_target_entindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAClientMsg_EmptyTeleportAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_entindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAClientMsg_EmptyTeleportAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EmptyTeleportAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  return target;
}

size_t CDOTAClientMsg_EmptyTeleportAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 target_entindex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_entindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EmptyTeleportAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EmptyTeleportAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAClientMsg_EmptyTeleportAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EmptyTeleportAlert::MergeFrom(const CDOTAClientMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_entindex()) {
    set_target_entindex(from.target_entindex());
  }
}

void CDOTAClientMsg_EmptyTeleportAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EmptyTeleportAlert::CopyFrom(const CDOTAClientMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EmptyTeleportAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EmptyTeleportAlert::Swap(CDOTAClientMsg_EmptyTeleportAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EmptyTeleportAlert::InternalSwap(CDOTAClientMsg_EmptyTeleportAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_entindex_, other->target_entindex_);
}

::google::protobuf::Metadata CDOTAClientMsg_EmptyTeleportAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fclientmessages_2eproto);
  return ::file_level_metadata_dota_5fclientmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_MapPing* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_MapPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_MapPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ItemAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_EnemyItemAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_EnemyItemAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_EnemyItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ModifierAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ModifierAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ModifierAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ClickedBuff* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ClickedBuff >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ClickedBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_HPManaAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_HPManaAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_HPManaAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_GlyphAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_GlyphAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_GlyphAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_MapLine* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_MapLine >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_AspectRatio* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_AspectRatio >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_AspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackAfterSpell >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_TeleportRequiresHalt* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_TeleportRequiresHalt >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_TeleportRequiresHalt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ChannelRequiresHalt* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ChannelRequiresHalt >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ChannelRequiresHalt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SearchString* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SearchString >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SearchString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_Pause* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_Pause >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_Pause >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ShopViewMode* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ShopViewMode >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ShopViewMode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SetUnitShareFlag* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SetUnitShareFlag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SetUnitShareFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SwapRequest* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SwapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SwapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SwapAccept* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SwapAccept >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SwapAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_WorldLine* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_WorldLine >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RequestGraphUpdate* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RequestGraphUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RequestGraphUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ChatWheel* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ChatWheel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SendStatPopup* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_DismissAllStatPopups* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_BeginLastHitChallenge* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_BeginLastHitChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_BeginLastHitChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_UpdateQuickBuy* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_UpdateQuickBuy >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_UpdateQuickBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RecordVote* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RecordVote >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RecordVote >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_WillPurchaseAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_WillPurchaseAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_WillPurchaseAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_BuyBackStateAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_BuyBackStateAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_BuyBackStateAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_QuickBuyAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_QuickBuyAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_QuickBuyAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_PlayerShowCase* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_PlayerShowCase >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_PlayerShowCase >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_CameraZoomAmount* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_CameraZoomAmount >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_CameraZoomAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_BroadcasterUsingCameraman >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CAdditionalEquipSlotClientMsg* Arena::CreateMaybeMessage< ::proto::dota::CAdditionalEquipSlotClientMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CAdditionalEquipSlotClientMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_FreeInventory* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_FreeInventory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_FreeInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_FillEmptySlotsWithBots >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_HeroStatueLike* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_HeroStatueLike >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_HeroStatueLike >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_EventCNY2015Cmd >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_EventCNY2015Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_DemoHero* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_DemoHero >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_DemoHero >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ChallengeSelect* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ChallengeSelect >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ChallengeSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ChallengeReroll* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ChallengeReroll >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ChallengeReroll >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_CoinWager >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_CoinWager >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_CoinWagerToken* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_CoinWagerToken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_CoinWagerToken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RankWager >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RankWager >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_EventPointsTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_EventPointsTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ExecuteOrders* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ExecuteOrders >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ExecuteOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_XPAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_XPAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_XPAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_KillcamDamageTaken* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_KillcamDamageTaken >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_KillcamDamageTaken >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_MatchMetadata* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_MatchMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_MatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_KillMyHero* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_KillMyHero >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_KillMyHero >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_QuestStatus* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_QuestStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_ToggleAutoattack* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_ToggleAutoattack >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_ToggleAutoattack >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SpecialAbility* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SpecialAbility >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SpecialAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SetEnemyStartingPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SetDesiredWardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RollDice* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RollDice >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RollDice >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_FlipCoin* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_FlipCoin >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_FlipCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RequestItemSuggestions* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RequestItemSuggestions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RequestItemSuggestions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_MakeTeamCaptain* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_MakeTeamCaptain >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_MakeTeamCaptain >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_HelpTipSystemStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_RequestBulkCombatLog* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_RequestBulkCombatLog >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_RequestBulkCombatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_AbilityDraftRequestAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_GuideSelectOption >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_GuideSelectOption >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_GuideSelected >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_GuideSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_DamageReport* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_DamageReport >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_DamageReport >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_SalutePlayer* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_SalutePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_SalutePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_TipAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAClientMsg_EmptyTeleportAlert* Arena::CreateMaybeMessage< ::proto::dota::CDOTAClientMsg_EmptyTeleportAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAClientMsg_EmptyTeleportAlert >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
